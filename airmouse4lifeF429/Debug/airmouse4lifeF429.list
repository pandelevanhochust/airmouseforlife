
airmouse4lifeF429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5fc  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800a7b0  0800a7b0  0000b7b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9a0  0800a9a0  0000c1fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a9a0  0800a9a0  0000b9a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9a8  0800a9a8  0000c1fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9a8  0800a9a8  0000b9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a9ac  0800a9ac  0000b9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  0800a9b0  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1fc  2**0
                  CONTENTS
 10 .bss          00000c3c  20000200  20000200  0000c200  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000e3c  20000e3c  0000c200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000143ce  00000000  00000000  0000c22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000327f  00000000  00000000  000205fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001060  00000000  00000000  00023880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c91  00000000  00000000  000248e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026238  00000000  00000000  00025571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016649  00000000  00000000  0004b7a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8db3  00000000  00000000  00061df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013aba5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c30  00000000  00000000  0013abe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0013f818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000200 	.word	0x20000200
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a794 	.word	0x0800a794

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000204 	.word	0x20000204
 80001ec:	0800a794 	.word	0x0800a794

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b988 	b.w	8000ef0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	468e      	mov	lr, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	4688      	mov	r8, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d962      	bls.n	8000cd4 <__udivmoddi4+0xdc>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	b14e      	cbz	r6, 8000c28 <__udivmoddi4+0x30>
 8000c14:	f1c6 0320 	rsb	r3, r6, #32
 8000c18:	fa01 f806 	lsl.w	r8, r1, r6
 8000c1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c20:	40b7      	lsls	r7, r6
 8000c22:	ea43 0808 	orr.w	r8, r3, r8
 8000c26:	40b4      	lsls	r4, r6
 8000c28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c2c:	fa1f fc87 	uxth.w	ip, r7
 8000c30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c34:	0c23      	lsrs	r3, r4, #16
 8000c36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c4c:	f080 80ea 	bcs.w	8000e24 <__udivmoddi4+0x22c>
 8000c50:	429a      	cmp	r2, r3
 8000c52:	f240 80e7 	bls.w	8000e24 <__udivmoddi4+0x22c>
 8000c56:	3902      	subs	r1, #2
 8000c58:	443b      	add	r3, r7
 8000c5a:	1a9a      	subs	r2, r3, r2
 8000c5c:	b2a3      	uxth	r3, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6e:	459c      	cmp	ip, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x8e>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c78:	f080 80d6 	bcs.w	8000e28 <__udivmoddi4+0x230>
 8000c7c:	459c      	cmp	ip, r3
 8000c7e:	f240 80d3 	bls.w	8000e28 <__udivmoddi4+0x230>
 8000c82:	443b      	add	r3, r7
 8000c84:	3802      	subs	r0, #2
 8000c86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8a:	eba3 030c 	sub.w	r3, r3, ip
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11d      	cbz	r5, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40f3      	lsrs	r3, r6
 8000c94:	2200      	movs	r2, #0
 8000c96:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d905      	bls.n	8000cae <__udivmoddi4+0xb6>
 8000ca2:	b10d      	cbz	r5, 8000ca8 <__udivmoddi4+0xb0>
 8000ca4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4608      	mov	r0, r1
 8000cac:	e7f5      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cae:	fab3 f183 	clz	r1, r3
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d146      	bne.n	8000d44 <__udivmoddi4+0x14c>
 8000cb6:	4573      	cmp	r3, lr
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xc8>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 8105 	bhi.w	8000eca <__udivmoddi4+0x2d2>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	4690      	mov	r8, r2
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0e5      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cce:	e9c5 4800 	strd	r4, r8, [r5]
 8000cd2:	e7e2      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f000 8090 	beq.w	8000dfa <__udivmoddi4+0x202>
 8000cda:	fab2 f682 	clz	r6, r2
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	f040 80a4 	bne.w	8000e2c <__udivmoddi4+0x234>
 8000ce4:	1a8a      	subs	r2, r1, r2
 8000ce6:	0c03      	lsrs	r3, r0, #16
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	b280      	uxth	r0, r0
 8000cee:	b2bc      	uxth	r4, r7
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cf6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x11e>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x11c>
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	f200 80e0 	bhi.w	8000ed4 <__udivmoddi4+0x2dc>
 8000d14:	46c4      	mov	ip, r8
 8000d16:	1a9b      	subs	r3, r3, r2
 8000d18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d24:	fb02 f404 	mul.w	r4, r2, r4
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x144>
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x142>
 8000d34:	429c      	cmp	r4, r3
 8000d36:	f200 80ca 	bhi.w	8000ece <__udivmoddi4+0x2d6>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	1b1b      	subs	r3, r3, r4
 8000d3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d42:	e7a5      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d44:	f1c1 0620 	rsb	r6, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4e:	431f      	orrs	r7, r3
 8000d50:	fa0e f401 	lsl.w	r4, lr, r1
 8000d54:	fa20 f306 	lsr.w	r3, r0, r6
 8000d58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d60:	4323      	orrs	r3, r4
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	fa1f fc87 	uxth.w	ip, r7
 8000d6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d6e:	0c1c      	lsrs	r4, r3, #16
 8000d70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x1a0>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d8a:	f080 809c 	bcs.w	8000ec6 <__udivmoddi4+0x2ce>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f240 8099 	bls.w	8000ec6 <__udivmoddi4+0x2ce>
 8000d94:	3802      	subs	r0, #2
 8000d96:	443c      	add	r4, r7
 8000d98:	eba4 040e 	sub.w	r4, r4, lr
 8000d9c:	fa1f fe83 	uxth.w	lr, r3
 8000da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da4:	fb09 4413 	mls	r4, r9, r3, r4
 8000da8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db0:	45a4      	cmp	ip, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1ce>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dba:	f080 8082 	bcs.w	8000ec2 <__udivmoddi4+0x2ca>
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d97f      	bls.n	8000ec2 <__udivmoddi4+0x2ca>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	443c      	add	r4, r7
 8000dc6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dca:	eba4 040c 	sub.w	r4, r4, ip
 8000dce:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dd2:	4564      	cmp	r4, ip
 8000dd4:	4673      	mov	r3, lr
 8000dd6:	46e1      	mov	r9, ip
 8000dd8:	d362      	bcc.n	8000ea0 <__udivmoddi4+0x2a8>
 8000dda:	d05f      	beq.n	8000e9c <__udivmoddi4+0x2a4>
 8000ddc:	b15d      	cbz	r5, 8000df6 <__udivmoddi4+0x1fe>
 8000dde:	ebb8 0203 	subs.w	r2, r8, r3
 8000de2:	eb64 0409 	sbc.w	r4, r4, r9
 8000de6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dea:	fa22 f301 	lsr.w	r3, r2, r1
 8000dee:	431e      	orrs	r6, r3
 8000df0:	40cc      	lsrs	r4, r1
 8000df2:	e9c5 6400 	strd	r6, r4, [r5]
 8000df6:	2100      	movs	r1, #0
 8000df8:	e74f      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000dfa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dfe:	0c01      	lsrs	r1, r0, #16
 8000e00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e04:	b280      	uxth	r0, r0
 8000e06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	4638      	mov	r0, r7
 8000e0e:	463c      	mov	r4, r7
 8000e10:	46b8      	mov	r8, r7
 8000e12:	46be      	mov	lr, r7
 8000e14:	2620      	movs	r6, #32
 8000e16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e1a:	eba2 0208 	sub.w	r2, r2, r8
 8000e1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e22:	e766      	b.n	8000cf2 <__udivmoddi4+0xfa>
 8000e24:	4601      	mov	r1, r0
 8000e26:	e718      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e28:	4610      	mov	r0, r2
 8000e2a:	e72c      	b.n	8000c86 <__udivmoddi4+0x8e>
 8000e2c:	f1c6 0220 	rsb	r2, r6, #32
 8000e30:	fa2e f302 	lsr.w	r3, lr, r2
 8000e34:	40b7      	lsls	r7, r6
 8000e36:	40b1      	lsls	r1, r6
 8000e38:	fa20 f202 	lsr.w	r2, r0, r2
 8000e3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e40:	430a      	orrs	r2, r1
 8000e42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e46:	b2bc      	uxth	r4, r7
 8000e48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb08 f904 	mul.w	r9, r8, r4
 8000e56:	40b0      	lsls	r0, r6
 8000e58:	4589      	cmp	r9, r1
 8000e5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e5e:	b280      	uxth	r0, r0
 8000e60:	d93e      	bls.n	8000ee0 <__udivmoddi4+0x2e8>
 8000e62:	1879      	adds	r1, r7, r1
 8000e64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e68:	d201      	bcs.n	8000e6e <__udivmoddi4+0x276>
 8000e6a:	4589      	cmp	r9, r1
 8000e6c:	d81f      	bhi.n	8000eae <__udivmoddi4+0x2b6>
 8000e6e:	eba1 0109 	sub.w	r1, r1, r9
 8000e72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e76:	fb09 f804 	mul.w	r8, r9, r4
 8000e7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e7e:	b292      	uxth	r2, r2
 8000e80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e84:	4542      	cmp	r2, r8
 8000e86:	d229      	bcs.n	8000edc <__udivmoddi4+0x2e4>
 8000e88:	18ba      	adds	r2, r7, r2
 8000e8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e8e:	d2c4      	bcs.n	8000e1a <__udivmoddi4+0x222>
 8000e90:	4542      	cmp	r2, r8
 8000e92:	d2c2      	bcs.n	8000e1a <__udivmoddi4+0x222>
 8000e94:	f1a9 0102 	sub.w	r1, r9, #2
 8000e98:	443a      	add	r2, r7
 8000e9a:	e7be      	b.n	8000e1a <__udivmoddi4+0x222>
 8000e9c:	45f0      	cmp	r8, lr
 8000e9e:	d29d      	bcs.n	8000ddc <__udivmoddi4+0x1e4>
 8000ea0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ea4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	46e1      	mov	r9, ip
 8000eac:	e796      	b.n	8000ddc <__udivmoddi4+0x1e4>
 8000eae:	eba7 0909 	sub.w	r9, r7, r9
 8000eb2:	4449      	add	r1, r9
 8000eb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000eb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ebc:	fb09 f804 	mul.w	r8, r9, r4
 8000ec0:	e7db      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ec2:	4673      	mov	r3, lr
 8000ec4:	e77f      	b.n	8000dc6 <__udivmoddi4+0x1ce>
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	e766      	b.n	8000d98 <__udivmoddi4+0x1a0>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e6fd      	b.n	8000cca <__udivmoddi4+0xd2>
 8000ece:	443b      	add	r3, r7
 8000ed0:	3a02      	subs	r2, #2
 8000ed2:	e733      	b.n	8000d3c <__udivmoddi4+0x144>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	443b      	add	r3, r7
 8000eda:	e71c      	b.n	8000d16 <__udivmoddi4+0x11e>
 8000edc:	4649      	mov	r1, r9
 8000ede:	e79c      	b.n	8000e1a <__udivmoddi4+0x222>
 8000ee0:	eba1 0109 	sub.w	r1, r1, r9
 8000ee4:	46c4      	mov	ip, r8
 8000ee6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eea:	fb09 f804 	mul.w	r8, r9, r4
 8000eee:	e7c4      	b.n	8000e7a <__udivmoddi4+0x282>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000efa:	4a13      	ldr	r2, [pc, #76]	@ (8000f48 <MX_I2C1_Init+0x54>)
 8000efc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000efe:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f00:	4a12      	ldr	r2, [pc, #72]	@ (8000f4c <MX_I2C1_Init+0x58>)
 8000f02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f12:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f1e:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f24:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f30:	4804      	ldr	r0, [pc, #16]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f32:	f001 fb15 	bl	8002560 <HAL_I2C_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f3c:	f000 faf0 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2000021c 	.word	0x2000021c
 8000f48:	40005400 	.word	0x40005400
 8000f4c:	000186a0 	.word	0x000186a0

08000f50 <SendDataOverUART>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SendDataOverUART(MPU6050_t *MPU6050)
{
 8000f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f54:	b0b8      	sub	sp, #224	@ 0xe0
 8000f56:	af04      	add	r7, sp, #16
 8000f58:	6078      	str	r0, [r7, #4]

    // Format: time,Ax,Ay,Az,Gx,Gy,Gz,Temp
    sprintf(
        buffer,
        "x:%d.%02d, y:%d.%02d, z:%d.%02d\r\n",
        (int)MPU6050->Ax, abs((int)(MPU6050->Ax * 100) % 100),
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    sprintf(
 8000f60:	4610      	mov	r0, r2
 8000f62:	4619      	mov	r1, r3
 8000f64:	f7ff fe08 	bl	8000b78 <__aeabi_d2iz>
 8000f68:	4680      	mov	r8, r0
        (int)MPU6050->Ax, abs((int)(MPU6050->Ax * 100) % 100),
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000f70:	f04f 0200 	mov.w	r2, #0
 8000f74:	4b3f      	ldr	r3, [pc, #252]	@ (8001074 <SendDataOverUART+0x124>)
 8000f76:	f7ff fb4f 	bl	8000618 <__aeabi_dmul>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4610      	mov	r0, r2
 8000f80:	4619      	mov	r1, r3
 8000f82:	f7ff fdf9 	bl	8000b78 <__aeabi_d2iz>
 8000f86:	4602      	mov	r2, r0
 8000f88:	4b3b      	ldr	r3, [pc, #236]	@ (8001078 <SendDataOverUART+0x128>)
 8000f8a:	fb83 1302 	smull	r1, r3, r3, r2
 8000f8e:	1159      	asrs	r1, r3, #5
 8000f90:	17d3      	asrs	r3, r2, #31
 8000f92:	1acb      	subs	r3, r1, r3
 8000f94:	2164      	movs	r1, #100	@ 0x64
 8000f96:	fb01 f303 	mul.w	r3, r1, r3
 8000f9a:	1ad3      	subs	r3, r2, r3
    sprintf(
 8000f9c:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
 8000fa0:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
        (int)MPU6050->Ay, abs((int)(MPU6050->Ay * 100) % 100),
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    sprintf(
 8000faa:	4610      	mov	r0, r2
 8000fac:	4619      	mov	r1, r3
 8000fae:	f7ff fde3 	bl	8000b78 <__aeabi_d2iz>
 8000fb2:	4606      	mov	r6, r0
        (int)MPU6050->Ay, abs((int)(MPU6050->Ay * 100) % 100),
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	4b2d      	ldr	r3, [pc, #180]	@ (8001074 <SendDataOverUART+0x124>)
 8000fc0:	f7ff fb2a 	bl	8000618 <__aeabi_dmul>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f7ff fdd4 	bl	8000b78 <__aeabi_d2iz>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	4b29      	ldr	r3, [pc, #164]	@ (8001078 <SendDataOverUART+0x128>)
 8000fd4:	fb83 1302 	smull	r1, r3, r3, r2
 8000fd8:	1159      	asrs	r1, r3, #5
 8000fda:	17d3      	asrs	r3, r2, #31
 8000fdc:	1acb      	subs	r3, r1, r3
 8000fde:	2164      	movs	r1, #100	@ 0x64
 8000fe0:	fb01 f303 	mul.w	r3, r1, r3
 8000fe4:	1ad3      	subs	r3, r2, r3
    sprintf(
 8000fe6:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8000fea:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
        (int)MPU6050->Az, abs((int)(MPU6050->Az * 100) % 100)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
    sprintf(
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f7ff fdbe 	bl	8000b78 <__aeabi_d2iz>
 8000ffc:	6038      	str	r0, [r7, #0]
        (int)MPU6050->Az, abs((int)(MPU6050->Az * 100) % 100)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001004:	f04f 0200 	mov.w	r2, #0
 8001008:	4b1a      	ldr	r3, [pc, #104]	@ (8001074 <SendDataOverUART+0x124>)
 800100a:	f7ff fb05 	bl	8000618 <__aeabi_dmul>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	f7ff fdaf 	bl	8000b78 <__aeabi_d2iz>
 800101a:	4602      	mov	r2, r0
 800101c:	4b16      	ldr	r3, [pc, #88]	@ (8001078 <SendDataOverUART+0x128>)
 800101e:	fb83 1302 	smull	r1, r3, r3, r2
 8001022:	1159      	asrs	r1, r3, #5
 8001024:	17d3      	asrs	r3, r2, #31
 8001026:	1acb      	subs	r3, r1, r3
 8001028:	2164      	movs	r1, #100	@ 0x64
 800102a:	fb01 f303 	mul.w	r3, r1, r3
 800102e:	1ad3      	subs	r3, r2, r3
    sprintf(
 8001030:	2b00      	cmp	r3, #0
 8001032:	bfb8      	it	lt
 8001034:	425b      	neglt	r3, r3
 8001036:	f107 0008 	add.w	r0, r7, #8
 800103a:	9303      	str	r3, [sp, #12]
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	9302      	str	r3, [sp, #8]
 8001040:	9401      	str	r4, [sp, #4]
 8001042:	9600      	str	r6, [sp, #0]
 8001044:	462b      	mov	r3, r5
 8001046:	4642      	mov	r2, r8
 8001048:	490c      	ldr	r1, [pc, #48]	@ (800107c <SendDataOverUART+0x12c>)
 800104a:	f008 fb97 	bl	800977c <siprintf>
//        (int)MPU6050->Temperature, abs((int)(MPU6050->Temperature * 100) % 100)
    );

    // Send the data over UART
//    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800104e:	f107 0308 	add.w	r3, r7, #8
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff f8cc 	bl	80001f0 <strlen>
 8001058:	4603      	mov	r3, r0
 800105a:	b29a      	uxth	r2, r3
 800105c:	f107 0108 	add.w	r1, r7, #8
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
 8001064:	4806      	ldr	r0, [pc, #24]	@ (8001080 <SendDataOverUART+0x130>)
 8001066:	f004 faef 	bl	8005648 <HAL_UART_Transmit>
}
 800106a:	bf00      	nop
 800106c:	37d0      	adds	r7, #208	@ 0xd0
 800106e:	46bd      	mov	sp, r7
 8001070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001074:	40590000 	.word	0x40590000
 8001078:	51eb851f 	.word	0x51eb851f
 800107c:	0800a7b0 	.word	0x0800a7b0
 8001080:	200002c8 	.word	0x200002c8

08001084 <Scan_I2C_Addresses>:


void Scan_I2C_Addresses(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08e      	sub	sp, #56	@ 0x38
 8001088:	af00      	add	r7, sp, #0
    uint8_t i;
    uint8_t ret;
    char buffer[50];

    sprintf(buffer, "Scanning I2C addresses...\r\n");
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	492d      	ldr	r1, [pc, #180]	@ (8001144 <Scan_I2C_Addresses+0xc0>)
 800108e:	4618      	mov	r0, r3
 8001090:	f008 fb74 	bl	800977c <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff f8aa 	bl	80001f0 <strlen>
 800109c:	4603      	mov	r3, r0
 800109e:	b29a      	uxth	r2, r3
 80010a0:	1d39      	adds	r1, r7, #4
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	4828      	ldr	r0, [pc, #160]	@ (8001148 <Scan_I2C_Addresses+0xc4>)
 80010a8:	f004 face 	bl	8005648 <HAL_UART_Transmit>

    for(i = 1; i < 128; i++)
 80010ac:	2301      	movs	r3, #1
 80010ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80010b2:	e028      	b.n	8001106 <Scan_I2C_Addresses+0x82>
    {
        ret = HAL_I2C_IsDeviceReady(&hi2c1, (i << 1), 2, 100);
 80010b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	b299      	uxth	r1, r3
 80010be:	2364      	movs	r3, #100	@ 0x64
 80010c0:	2202      	movs	r2, #2
 80010c2:	4822      	ldr	r0, [pc, #136]	@ (800114c <Scan_I2C_Addresses+0xc8>)
 80010c4:	f001 febc 	bl	8002e40 <HAL_I2C_IsDeviceReady>
 80010c8:	4603      	mov	r3, r0
 80010ca:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

        if(ret == HAL_OK)
 80010ce:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d112      	bne.n	80010fc <Scan_I2C_Addresses+0x78>
        {
            sprintf(buffer, "I2C device found at address: 0x%02X\r\n", i);
 80010d6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	491c      	ldr	r1, [pc, #112]	@ (8001150 <Scan_I2C_Addresses+0xcc>)
 80010de:	4618      	mov	r0, r3
 80010e0:	f008 fb4c 	bl	800977c <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff f882 	bl	80001f0 <strlen>
 80010ec:	4603      	mov	r3, r0
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	1d39      	adds	r1, r7, #4
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	4814      	ldr	r0, [pc, #80]	@ (8001148 <Scan_I2C_Addresses+0xc4>)
 80010f8:	f004 faa6 	bl	8005648 <HAL_UART_Transmit>
    for(i = 1; i < 128; i++)
 80010fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001100:	3301      	adds	r3, #1
 8001102:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001106:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800110a:	2b00      	cmp	r3, #0
 800110c:	dad2      	bge.n	80010b4 <Scan_I2C_Addresses+0x30>
//            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13,GPIO_PIN_SET);
        }
    }

    sprintf(buffer, "I2C scan completed\r\n");
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	4910      	ldr	r1, [pc, #64]	@ (8001154 <Scan_I2C_Addresses+0xd0>)
 8001112:	4618      	mov	r0, r3
 8001114:	f008 fb32 	bl	800977c <siprintf>
    HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800111e:	480e      	ldr	r0, [pc, #56]	@ (8001158 <Scan_I2C_Addresses+0xd4>)
 8001120:	f001 fa04 	bl	800252c <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff f862 	bl	80001f0 <strlen>
 800112c:	4603      	mov	r3, r0
 800112e:	b29a      	uxth	r2, r3
 8001130:	1d39      	adds	r1, r7, #4
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	4804      	ldr	r0, [pc, #16]	@ (8001148 <Scan_I2C_Addresses+0xc4>)
 8001138:	f004 fa86 	bl	8005648 <HAL_UART_Transmit>
}
 800113c:	bf00      	nop
 800113e:	3738      	adds	r7, #56	@ 0x38
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	0800a7d4 	.word	0x0800a7d4
 8001148:	200002c8 	.word	0x200002c8
 800114c:	2000021c 	.word	0x2000021c
 8001150:	0800a7f0 	.word	0x0800a7f0
 8001154:	0800a818 	.word	0x0800a818
 8001158:	40021800 	.word	0x40021800

0800115c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800115c:	b5b0      	push	{r4, r5, r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001162:	f000 fe8f 	bl	8001e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001166:	f000 f8b7 	bl	80012d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116a:	f000 f949 	bl	8001400 <MX_GPIO_Init>
  MX_I2C1_Init();
 800116e:	f7ff fec1 	bl	8000ef4 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001172:	f007 fecb 	bl	8008f0c <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8001176:	f000 f919 	bl	80013ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Scan_I2C_Addresses();
 800117a:	f7ff ff83 	bl	8001084 <Scan_I2C_Addresses>

  uint8_t init_attempts = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	71fb      	strb	r3, [r7, #7]

 while(MPU6050_Init(&hi2c1) == 1) {
 8001182:	e018      	b.n	80011b6 <main+0x5a>
   init_attempts++;
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	3301      	adds	r3, #1
 8001188:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1, (uint8_t *)"MPU6050 Init Failed, retrying...\r\n", 34, HAL_MAX_DELAY);
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	2222      	movs	r2, #34	@ 0x22
 8001190:	4948      	ldr	r1, [pc, #288]	@ (80012b4 <main+0x158>)
 8001192:	4849      	ldr	r0, [pc, #292]	@ (80012b8 <main+0x15c>)
 8001194:	f004 fa58 	bl	8005648 <HAL_UART_Transmit>
   HAL_Delay(500);
 8001198:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800119c:	f000 fee4 	bl	8001f68 <HAL_Delay>
   if(init_attempts > 10) {
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2b0a      	cmp	r3, #10
 80011a4:	d907      	bls.n	80011b6 <main+0x5a>
     HAL_UART_Transmit(&huart1, (uint8_t *)"MPU6050 Init Failed permanently!\r\n", 35, HAL_MAX_DELAY);
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	2223      	movs	r2, #35	@ 0x23
 80011ac:	4943      	ldr	r1, [pc, #268]	@ (80012bc <main+0x160>)
 80011ae:	4842      	ldr	r0, [pc, #264]	@ (80012b8 <main+0x15c>)
 80011b0:	f004 fa4a 	bl	8005648 <HAL_UART_Transmit>
     break;
 80011b4:	e005      	b.n	80011c2 <main+0x66>
 while(MPU6050_Init(&hi2c1) == 1) {
 80011b6:	4842      	ldr	r0, [pc, #264]	@ (80012c0 <main+0x164>)
 80011b8:	f000 f9b8 	bl	800152c <MPU6050_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d0e0      	beq.n	8001184 <main+0x28>
   }
 }

 if(init_attempts <= 10) {
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	2b0a      	cmp	r3, #10
 80011c6:	d806      	bhi.n	80011d6 <main+0x7a>
//	 HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_SET);
	 HAL_UART_Transmit(&huart1, (uint8_t *)"MPU6050 Initialized Successfully!\r\n", 36, HAL_MAX_DELAY);
 80011c8:	f04f 33ff 	mov.w	r3, #4294967295
 80011cc:	2224      	movs	r2, #36	@ 0x24
 80011ce:	493d      	ldr	r1, [pc, #244]	@ (80012c4 <main+0x168>)
 80011d0:	4839      	ldr	r0, [pc, #228]	@ (80012b8 <main+0x15c>)
 80011d2:	f004 fa39 	bl	8005648 <HAL_UART_Transmit>
 }

 HAL_Delay(1000);
 80011d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011da:	f000 fec5 	bl	8001f68 <HAL_Delay>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	    if(hUsbDeviceFS.pClassData != NULL) {
 80011de:	4b3a      	ldr	r3, [pc, #232]	@ (80012c8 <main+0x16c>)
 80011e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d05e      	beq.n	80012a6 <main+0x14a>
	   	 HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011ee:	4837      	ldr	r0, [pc, #220]	@ (80012cc <main+0x170>)
 80011f0:	f001 f99c 	bl	800252c <HAL_GPIO_WritePin>

		    MPU6050_Read_All(&hi2c1, &MPU6050);
 80011f4:	4936      	ldr	r1, [pc, #216]	@ (80012d0 <main+0x174>)
 80011f6:	4832      	ldr	r0, [pc, #200]	@ (80012c0 <main+0x164>)
 80011f8:	f000 f9f6 	bl	80015e8 <MPU6050_Read_All>
		    SendDataOverUART(&MPU6050);
 80011fc:	4834      	ldr	r0, [pc, #208]	@ (80012d0 <main+0x174>)
 80011fe:	f7ff fea7 	bl	8000f50 <SendDataOverUART>

		    int8_t xMove = (int8_t)(MPU6050.Ax / 1000.0f * sensitivity);
 8001202:	4b33      	ldr	r3, [pc, #204]	@ (80012d0 <main+0x174>)
 8001204:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	4b31      	ldr	r3, [pc, #196]	@ (80012d4 <main+0x178>)
 800120e:	f7ff fb2d 	bl	800086c <__aeabi_ddiv>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4614      	mov	r4, r2
 8001218:	461d      	mov	r5, r3
 800121a:	230a      	movs	r3, #10
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f991 	bl	8000544 <__aeabi_i2d>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4620      	mov	r0, r4
 8001228:	4629      	mov	r1, r5
 800122a:	f7ff f9f5 	bl	8000618 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	f7ff fc9f 	bl	8000b78 <__aeabi_d2iz>
 800123a:	4603      	mov	r3, r0
 800123c:	71bb      	strb	r3, [r7, #6]
		    int8_t yMove = (int8_t)(MPU6050.Ay / 1000.0f * sensitivity);
 800123e:	4b24      	ldr	r3, [pc, #144]	@ (80012d0 <main+0x174>)
 8001240:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	4b22      	ldr	r3, [pc, #136]	@ (80012d4 <main+0x178>)
 800124a:	f7ff fb0f 	bl	800086c <__aeabi_ddiv>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4614      	mov	r4, r2
 8001254:	461d      	mov	r5, r3
 8001256:	230a      	movs	r3, #10
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f973 	bl	8000544 <__aeabi_i2d>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4620      	mov	r0, r4
 8001264:	4629      	mov	r1, r5
 8001266:	f7ff f9d7 	bl	8000618 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f7ff fc81 	bl	8000b78 <__aeabi_d2iz>
 8001276:	4603      	mov	r3, r0
 8001278:	717b      	strb	r3, [r7, #5]

		    // Prepare HID report
		    uint8_t HID_Buffer[3] = {0};
 800127a:	463b      	mov	r3, r7
 800127c:	2100      	movs	r1, #0
 800127e:	460a      	mov	r2, r1
 8001280:	801a      	strh	r2, [r3, #0]
 8001282:	460a      	mov	r2, r1
 8001284:	709a      	strb	r2, [r3, #2]
		    HID_Buffer[1] = xMove;
 8001286:	79bb      	ldrb	r3, [r7, #6]
 8001288:	707b      	strb	r3, [r7, #1]
		    HID_Buffer[2] = -yMove;
 800128a:	797b      	ldrb	r3, [r7, #5]
 800128c:	425b      	negs	r3, r3
 800128e:	b2db      	uxtb	r3, r3
 8001290:	70bb      	strb	r3, [r7, #2]

		    // Send HID report
		    USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 8001292:	463b      	mov	r3, r7
 8001294:	2203      	movs	r2, #3
 8001296:	4619      	mov	r1, r3
 8001298:	480b      	ldr	r0, [pc, #44]	@ (80012c8 <main+0x16c>)
 800129a:	f006 fa95 	bl	80077c8 <USBD_HID_SendReport>
		    HAL_Delay(10);
 800129e:	200a      	movs	r0, #10
 80012a0:	f000 fe62 	bl	8001f68 <HAL_Delay>
 80012a4:	e79b      	b.n	80011de <main+0x82>

	    } else {
	   	 HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012ac:	4807      	ldr	r0, [pc, #28]	@ (80012cc <main+0x170>)
 80012ae:	f001 f93d 	bl	800252c <HAL_GPIO_WritePin>
	    if(hUsbDeviceFS.pClassData != NULL) {
 80012b2:	e794      	b.n	80011de <main+0x82>
 80012b4:	0800a830 	.word	0x0800a830
 80012b8:	200002c8 	.word	0x200002c8
 80012bc:	0800a854 	.word	0x0800a854
 80012c0:	2000021c 	.word	0x2000021c
 80012c4:	0800a878 	.word	0x0800a878
 80012c8:	20000320 	.word	0x20000320
 80012cc:	40021800 	.word	0x40021800
 80012d0:	20000270 	.word	0x20000270
 80012d4:	408f4000 	.word	0x408f4000

080012d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b094      	sub	sp, #80	@ 0x50
 80012dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012de:	f107 0320 	add.w	r3, r7, #32
 80012e2:	2230      	movs	r2, #48	@ 0x30
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f008 fa6a 	bl	80097c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fc:	2300      	movs	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	4b28      	ldr	r3, [pc, #160]	@ (80013a4 <SystemClock_Config+0xcc>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001304:	4a27      	ldr	r2, [pc, #156]	@ (80013a4 <SystemClock_Config+0xcc>)
 8001306:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800130a:	6413      	str	r3, [r2, #64]	@ 0x40
 800130c:	4b25      	ldr	r3, [pc, #148]	@ (80013a4 <SystemClock_Config+0xcc>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001310:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001318:	2300      	movs	r3, #0
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	4b22      	ldr	r3, [pc, #136]	@ (80013a8 <SystemClock_Config+0xd0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001324:	4a20      	ldr	r2, [pc, #128]	@ (80013a8 <SystemClock_Config+0xd0>)
 8001326:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b1e      	ldr	r3, [pc, #120]	@ (80013a8 <SystemClock_Config+0xd0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001338:	2301      	movs	r3, #1
 800133a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800133c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001340:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001342:	2302      	movs	r3, #2
 8001344:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001346:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800134a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800134c:	2304      	movs	r3, #4
 800134e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001350:	2348      	movs	r3, #72	@ 0x48
 8001352:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001354:	2302      	movs	r3, #2
 8001356:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001358:	2303      	movs	r3, #3
 800135a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135c:	f107 0320 	add.w	r3, r7, #32
 8001360:	4618      	mov	r0, r3
 8001362:	f003 fc89 	bl	8004c78 <HAL_RCC_OscConfig>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800136c:	f000 f8d8 	bl	8001520 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001370:	230f      	movs	r3, #15
 8001372:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001374:	2302      	movs	r3, #2
 8001376:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800137c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001380:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	2102      	movs	r1, #2
 800138c:	4618      	mov	r0, r3
 800138e:	f003 feeb 	bl	8005168 <HAL_RCC_ClockConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001398:	f000 f8c2 	bl	8001520 <Error_Handler>
  }
}
 800139c:	bf00      	nop
 800139e:	3750      	adds	r7, #80	@ 0x50
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40007000 	.word	0x40007000

080013ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013b0:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <MX_USART1_UART_Init+0x4c>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	@ (80013fc <MX_USART1_UART_Init+0x50>)
 80013b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013b6:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <MX_USART1_UART_Init+0x4c>)
 80013b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013be:	4b0e      	ldr	r3, [pc, #56]	@ (80013f8 <MX_USART1_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <MX_USART1_UART_Init+0x4c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ca:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <MX_USART1_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013d0:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <MX_USART1_UART_Init+0x4c>)
 80013d2:	220c      	movs	r2, #12
 80013d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d6:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <MX_USART1_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <MX_USART1_UART_Init+0x4c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013e2:	4805      	ldr	r0, [pc, #20]	@ (80013f8 <MX_USART1_UART_Init+0x4c>)
 80013e4:	f004 f8e0 	bl	80055a8 <HAL_UART_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013ee:	f000 f897 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200002c8 	.word	0x200002c8
 80013fc:	40011000 	.word	0x40011000

08001400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	@ 0x28
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	4b3e      	ldr	r3, [pc, #248]	@ (8001514 <MX_GPIO_Init+0x114>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	4a3d      	ldr	r2, [pc, #244]	@ (8001514 <MX_GPIO_Init+0x114>)
 8001420:	f043 0308 	orr.w	r3, r3, #8
 8001424:	6313      	str	r3, [r2, #48]	@ 0x30
 8001426:	4b3b      	ldr	r3, [pc, #236]	@ (8001514 <MX_GPIO_Init+0x114>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]


  // UART GPIO Configuration
  GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8001432:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001444:	2307      	movs	r3, #7
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4619      	mov	r1, r3
 800144e:	4832      	ldr	r0, [pc, #200]	@ (8001518 <MX_GPIO_Init+0x118>)
 8001450:	f000 fec0 	bl	80021d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 8001454:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	2301      	movs	r3, #1
 800145c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	482b      	ldr	r0, [pc, #172]	@ (800151c <MX_GPIO_Init+0x11c>)
 800146e:	f000 feb1 	bl	80021d4 <HAL_GPIO_Init>


  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b27      	ldr	r3, [pc, #156]	@ (8001514 <MX_GPIO_Init+0x114>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	4a26      	ldr	r2, [pc, #152]	@ (8001514 <MX_GPIO_Init+0x114>)
 800147c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001480:	6313      	str	r3, [r2, #48]	@ 0x30
 8001482:	4b24      	ldr	r3, [pc, #144]	@ (8001514 <MX_GPIO_Init+0x114>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	4b20      	ldr	r3, [pc, #128]	@ (8001514 <MX_GPIO_Init+0x114>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	4a1f      	ldr	r2, [pc, #124]	@ (8001514 <MX_GPIO_Init+0x114>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6313      	str	r3, [r2, #48]	@ 0x30
 800149e:	4b1d      	ldr	r3, [pc, #116]	@ (8001514 <MX_GPIO_Init+0x114>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	4b19      	ldr	r3, [pc, #100]	@ (8001514 <MX_GPIO_Init+0x114>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	4a18      	ldr	r2, [pc, #96]	@ (8001514 <MX_GPIO_Init+0x114>)
 80014b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ba:	4b16      	ldr	r3, [pc, #88]	@ (8001514 <MX_GPIO_Init+0x114>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <MX_GPIO_Init+0x114>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	4a11      	ldr	r2, [pc, #68]	@ (8001514 <MX_GPIO_Init+0x114>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <MX_GPIO_Init+0x114>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80014e8:	480c      	ldr	r0, [pc, #48]	@ (800151c <MX_GPIO_Init+0x11c>)
 80014ea:	f001 f81f 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80014ee:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80014f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	4805      	ldr	r0, [pc, #20]	@ (800151c <MX_GPIO_Init+0x11c>)
 8001508:	f000 fe64 	bl	80021d4 <HAL_GPIO_Init>

  // NOTE: I2C GPIO configuration is now handled in HAL_I2C_MspInit()
  // Remove the I2C GPIO configuration from here to avoid conflicts

  /* USER CODE END MX_GPIO_Init_2 */
}
 800150c:	bf00      	nop
 800150e:	3728      	adds	r7, #40	@ 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40023800 	.word	0x40023800
 8001518:	40020000 	.word	0x40020000
 800151c:	40021800 	.word	0x40021800

08001520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001524:	b672      	cpsid	i
}
 8001526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <Error_Handler+0x8>

0800152c <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af04      	add	r7, sp, #16
 8001532:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001534:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001538:	9302      	str	r3, [sp, #8]
 800153a:	2301      	movs	r3, #1
 800153c:	9301      	str	r3, [sp, #4]
 800153e:	f107 030f 	add.w	r3, r7, #15
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2301      	movs	r3, #1
 8001546:	2275      	movs	r2, #117	@ 0x75
 8001548:	21d0      	movs	r1, #208	@ 0xd0
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f001 fa46 	bl	80029dc <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	2b68      	cmp	r3, #104	@ 0x68
 8001554:	d141      	bne.n	80015da <MPU6050_Init+0xae>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800155a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800155e:	9302      	str	r3, [sp, #8]
 8001560:	2301      	movs	r3, #1
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	f107 030e 	add.w	r3, r7, #14
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	2301      	movs	r3, #1
 800156c:	226b      	movs	r2, #107	@ 0x6b
 800156e:	21d0      	movs	r1, #208	@ 0xd0
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f001 f939 	bl	80027e8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001576:	2307      	movs	r3, #7
 8001578:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800157a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800157e:	9302      	str	r3, [sp, #8]
 8001580:	2301      	movs	r3, #1
 8001582:	9301      	str	r3, [sp, #4]
 8001584:	f107 030e 	add.w	r3, r7, #14
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	2301      	movs	r3, #1
 800158c:	2219      	movs	r2, #25
 800158e:	21d0      	movs	r1, #208	@ 0xd0
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f001 f929 	bl	80027e8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001596:	2300      	movs	r3, #0
 8001598:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800159a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800159e:	9302      	str	r3, [sp, #8]
 80015a0:	2301      	movs	r3, #1
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	f107 030e 	add.w	r3, r7, #14
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2301      	movs	r3, #1
 80015ac:	221c      	movs	r2, #28
 80015ae:	21d0      	movs	r1, #208	@ 0xd0
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f001 f919 	bl	80027e8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80015b6:	2300      	movs	r3, #0
 80015b8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80015ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015be:	9302      	str	r3, [sp, #8]
 80015c0:	2301      	movs	r3, #1
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	f107 030e 	add.w	r3, r7, #14
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	2301      	movs	r3, #1
 80015cc:	221b      	movs	r2, #27
 80015ce:	21d0      	movs	r1, #208	@ 0xd0
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f001 f909 	bl	80027e8 <HAL_I2C_Mem_Write>
        return 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e000      	b.n	80015dc <MPU6050_Init+0xb0>
    }
    return 1;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	0000      	movs	r0, r0
	...

080015e8 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80015e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015ec:	b092      	sub	sp, #72	@ 0x48
 80015ee:	af04      	add	r7, sp, #16
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Đọc 14 byte từ thanh ghi ACCEL_XOUT_H
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80015f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015f8:	9302      	str	r3, [sp, #8]
 80015fa:	230e      	movs	r3, #14
 80015fc:	9301      	str	r3, [sp, #4]
 80015fe:	f107 0308 	add.w	r3, r7, #8
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	2301      	movs	r3, #1
 8001606:	223b      	movs	r2, #59	@ 0x3b
 8001608:	21d0      	movs	r1, #208	@ 0xd0
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f001 f9e6 	bl	80029dc <HAL_I2C_Mem_Read>

    // Giải mã dữ liệu gia tốc thô (RAW)
    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001610:	7a3b      	ldrb	r3, [r7, #8]
 8001612:	b21b      	sxth	r3, r3
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	b21a      	sxth	r2, r3
 8001618:	7a7b      	ldrb	r3, [r7, #9]
 800161a:	b21b      	sxth	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	b21a      	sxth	r2, r3
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001624:	7abb      	ldrb	r3, [r7, #10]
 8001626:	b21b      	sxth	r3, r3
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	b21a      	sxth	r2, r3
 800162c:	7afb      	ldrb	r3, [r7, #11]
 800162e:	b21b      	sxth	r3, r3
 8001630:	4313      	orrs	r3, r2
 8001632:	b21a      	sxth	r2, r3
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001638:	7b3b      	ldrb	r3, [r7, #12]
 800163a:	b21b      	sxth	r3, r3
 800163c:	021b      	lsls	r3, r3, #8
 800163e:	b21a      	sxth	r2, r3
 8001640:	7b7b      	ldrb	r3, [r7, #13]
 8001642:	b21b      	sxth	r3, r3
 8001644:	4313      	orrs	r3, r2
 8001646:	b21a      	sxth	r2, r3
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	809a      	strh	r2, [r3, #4]


    // Chuyển đổi gia tốc thô sang đơn vị m/s² (g*9.81)
    DataStruct->Ax = DataStruct->Accel_X_RAW * 981 / lsb;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001652:	461a      	mov	r2, r3
 8001654:	f240 33d5 	movw	r3, #981	@ 0x3d5
 8001658:	fb02 f303 	mul.w	r3, r2, r3
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff71 	bl	8000544 <__aeabi_i2d>
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	4ba0      	ldr	r3, [pc, #640]	@ (80018e8 <MPU6050_Read_All+0x300>)
 8001668:	f7ff f900 	bl	800086c <__aeabi_ddiv>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	6839      	ldr	r1, [r7, #0]
 8001672:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW * 981 / lsb;
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800167c:	461a      	mov	r2, r3
 800167e:	f240 33d5 	movw	r3, #981	@ 0x3d5
 8001682:	fb02 f303 	mul.w	r3, r2, r3
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe ff5c 	bl	8000544 <__aeabi_i2d>
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	4b95      	ldr	r3, [pc, #596]	@ (80018e8 <MPU6050_Read_All+0x300>)
 8001692:	f7ff f8eb 	bl	800086c <__aeabi_ddiv>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	6839      	ldr	r1, [r7, #0]
 800169c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW * 981 / Accel_Z_corrector;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016a6:	461a      	mov	r2, r3
 80016a8:	f240 33d5 	movw	r3, #981	@ 0x3d5
 80016ac:	fb02 f303 	mul.w	r3, r2, r3
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe ff47 	bl	8000544 <__aeabi_i2d>
 80016b6:	a388      	add	r3, pc, #544	@ (adr r3, 80018d8 <MPU6050_Read_All+0x2f0>)
 80016b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016bc:	f7ff f8d6 	bl	800086c <__aeabi_ddiv>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	6839      	ldr	r1, [r7, #0]
 80016c6:	e9c1 2306 	strd	r2, r3, [r1, #24]

    // TÍNH TOÁN GÓC KALMAN

    // Tính delta thời gian giữa 2 lần đo
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80016ca:	f000 fc41 	bl	8001f50 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	4b86      	ldr	r3, [pc, #536]	@ (80018ec <MPU6050_Read_All+0x304>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ff24 	bl	8000524 <__aeabi_ui2d>
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	4b83      	ldr	r3, [pc, #524]	@ (80018f0 <MPU6050_Read_All+0x308>)
 80016e2:	f7ff f8c3 	bl	800086c <__aeabi_ddiv>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 80016ee:	f000 fc2f 	bl	8001f50 <HAL_GetTick>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4a7d      	ldr	r2, [pc, #500]	@ (80018ec <MPU6050_Read_All+0x304>)
 80016f6:	6013      	str	r3, [r2, #0]

    // Tính roll từ dữ liệu gia tốc bằng công thức gần đúng
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW +
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fe:	461a      	mov	r2, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001706:	fb03 f202 	mul.w	r2, r3, r2
        DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001710:	4619      	mov	r1, r3
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001718:	fb01 f303 	mul.w	r3, r1, r3
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW +
 800171c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe ff10 	bl	8000544 <__aeabi_i2d>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	ec43 2b10 	vmov	d0, r2, r3
 800172c:	f008 fcc8 	bl	800a0c0 <sqrt>
 8001730:	ed87 0b08 	vstr	d0, [r7, #32]

    if (roll_sqrt != 0.0) {
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001740:	f7ff f9d2 	bl	8000ae8 <__aeabi_dcmpeq>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d11f      	bne.n	800178a <MPU6050_Read_All+0x1a2>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fef7 	bl	8000544 <__aeabi_i2d>
 8001756:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800175a:	f7ff f887 	bl	800086c <__aeabi_ddiv>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	ec43 2b17 	vmov	d7, r2, r3
 8001766:	eeb0 0a47 	vmov.f32	s0, s14
 800176a:	eef0 0a67 	vmov.f32	s1, s15
 800176e:	f008 fcd3 	bl	800a118 <atan>
 8001772:	ec51 0b10 	vmov	r0, r1, d0
 8001776:	a35a      	add	r3, pc, #360	@ (adr r3, 80018e0 <MPU6050_Read_All+0x2f8>)
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	f7fe ff4c 	bl	8000618 <__aeabi_dmul>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8001788:	e005      	b.n	8001796 <MPU6050_Read_All+0x1ae>
    } else {
        roll = 0.0;
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    }

    // Tính pitch bằng atan2 để tránh lỗi chia 0
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179c:	425b      	negs	r3, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fed0 	bl	8000544 <__aeabi_i2d>
 80017a4:	4682      	mov	sl, r0
 80017a6:	468b      	mov	fp, r1
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe fec8 	bl	8000544 <__aeabi_i2d>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	ec43 2b11 	vmov	d1, r2, r3
 80017bc:	ec4b ab10 	vmov	d0, sl, fp
 80017c0:	f008 fc7c 	bl	800a0bc <atan2>
 80017c4:	ec51 0b10 	vmov	r0, r1, d0
 80017c8:	a345      	add	r3, pc, #276	@ (adr r3, 80018e0 <MPU6050_Read_All+0x2f8>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7fe ff23 	bl	8000618 <__aeabi_dmul>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // Kiểm tra và khắc phục trường hợp nhảy góc khi pitch vượt ngưỡng ±90 độ
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) ||
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	4b45      	ldr	r3, [pc, #276]	@ (80018f4 <MPU6050_Read_All+0x30c>)
 80017e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017e4:	f7ff f98a 	bl	8000afc <__aeabi_dcmplt>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00a      	beq.n	8001804 <MPU6050_Read_All+0x21c>
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	4b3f      	ldr	r3, [pc, #252]	@ (80018f8 <MPU6050_Read_All+0x310>)
 80017fa:	f7ff f99d 	bl	8000b38 <__aeabi_dcmpgt>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d114      	bne.n	800182e <MPU6050_Read_All+0x246>
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	4b3b      	ldr	r3, [pc, #236]	@ (80018f8 <MPU6050_Read_All+0x310>)
 800180a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800180e:	f7ff f993 	bl	8000b38 <__aeabi_dcmpgt>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d015      	beq.n	8001844 <MPU6050_Read_All+0x25c>
        (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	4b34      	ldr	r3, [pc, #208]	@ (80018f4 <MPU6050_Read_All+0x30c>)
 8001824:	f7ff f96a 	bl	8000afc <__aeabi_dcmplt>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00a      	beq.n	8001844 <MPU6050_Read_All+0x25c>
        KalmanY.angle = pitch;  // Reset bộ lọc Kalman
 800182e:	4933      	ldr	r1, [pc, #204]	@ (80018fc <MPU6050_Read_All+0x314>)
 8001830:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001834:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001838:	6839      	ldr	r1, [r7, #0]
 800183a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800183e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001842:	e014      	b.n	800186e <MPU6050_Read_All+0x286>
    } else {
        // Cập nhật góc pitch bằng bộ lọc Kalman
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 800184a:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 800184e:	eeb0 1a47 	vmov.f32	s2, s14
 8001852:	eef0 1a67 	vmov.f32	s3, s15
 8001856:	ed97 0b06 	vldr	d0, [r7, #24]
 800185a:	4828      	ldr	r0, [pc, #160]	@ (80018fc <MPU6050_Read_All+0x314>)
 800185c:	f000 f852 	bl	8001904 <Kalman_getAngle>
 8001860:	eeb0 7a40 	vmov.f32	s14, s0
 8001864:	eef0 7a60 	vmov.f32	s15, s1
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }

    // Nếu pitch vượt quá ±90 độ, đảo chiều trục X do con quay bị xoay
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001874:	4690      	mov	r8, r2
 8001876:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	4b1e      	ldr	r3, [pc, #120]	@ (80018f8 <MPU6050_Read_All+0x310>)
 8001880:	4640      	mov	r0, r8
 8001882:	4649      	mov	r1, r9
 8001884:	f7ff f958 	bl	8000b38 <__aeabi_dcmpgt>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d008      	beq.n	80018a0 <MPU6050_Read_All+0x2b8>
        DataStruct->Gx = -DataStruct->Gx;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001894:	4614      	mov	r4, r2
 8001896:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28

    // Cập nhật góc roll bằng Kalman filter
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 80018a6:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 80018aa:	eeb0 1a47 	vmov.f32	s2, s14
 80018ae:	eef0 1a67 	vmov.f32	s3, s15
 80018b2:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80018b6:	4812      	ldr	r0, [pc, #72]	@ (8001900 <MPU6050_Read_All+0x318>)
 80018b8:	f000 f824 	bl	8001904 <Kalman_getAngle>
 80018bc:	eeb0 7a40 	vmov.f32	s14, s0
 80018c0:	eef0 7a60 	vmov.f32	s15, s1
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 80018ca:	bf00      	nop
 80018cc:	3738      	adds	r7, #56	@ 0x38
 80018ce:	46bd      	mov	sp, r7
 80018d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018d4:	f3af 8000 	nop.w
 80018d8:	00000000 	.word	0x00000000
 80018dc:	40cc2900 	.word	0x40cc2900
 80018e0:	1a63c1f8 	.word	0x1a63c1f8
 80018e4:	404ca5dc 	.word	0x404ca5dc
 80018e8:	40d00000 	.word	0x40d00000
 80018ec:	20000310 	.word	0x20000310
 80018f0:	408f4000 	.word	0x408f4000
 80018f4:	c0568000 	.word	0xc0568000
 80018f8:	40568000 	.word	0x40568000
 80018fc:	20000048 	.word	0x20000048
 8001900:	20000000 	.word	0x20000000

08001904 <Kalman_getAngle>:


double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8001904:	b5b0      	push	{r4, r5, r7, lr}
 8001906:	b096      	sub	sp, #88	@ 0x58
 8001908:	af00      	add	r7, sp, #0
 800190a:	61f8      	str	r0, [r7, #28]
 800190c:	ed87 0b04 	vstr	d0, [r7, #16]
 8001910:	ed87 1b02 	vstr	d1, [r7, #8]
 8001914:	ed87 2b00 	vstr	d2, [r7]
    // Dự đoán tốc độ thực bằng cách loại bỏ sai số bias
    double rate = newRate - Kalman->bias;
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800191e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001922:	f7fe fcc1 	bl	80002a8 <__aeabi_dsub>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

    // Ước lượng góc dự đoán (angle) sau khoảng thời gian dt
    Kalman->angle += dt * rate;
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001934:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001938:	e9d7 0100 	ldrd	r0, r1, [r7]
 800193c:	f7fe fe6c 	bl	8000618 <__aeabi_dmul>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4620      	mov	r0, r4
 8001946:	4629      	mov	r1, r5
 8001948:	f7fe fcb0 	bl	80002ac <__adddf3>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	69f9      	ldr	r1, [r7, #28]
 8001952:	e9c1 2306 	strd	r2, r3, [r1, #24]

    // Cập nhật ma trận hiệp phương sai dự đoán (P)
    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001962:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001966:	f7fe fe57 	bl	8000618 <__aeabi_dmul>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4610      	mov	r0, r2
 8001970:	4619      	mov	r1, r3
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001978:	f7fe fc96 	bl	80002a8 <__aeabi_dsub>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4610      	mov	r0, r2
 8001982:	4619      	mov	r1, r3
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800198a:	f7fe fc8d 	bl	80002a8 <__aeabi_dsub>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4610      	mov	r0, r2
 8001994:	4619      	mov	r1, r3
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199c:	f7fe fc86 	bl	80002ac <__adddf3>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4610      	mov	r0, r2
 80019a6:	4619      	mov	r1, r3
 80019a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019ac:	f7fe fe34 	bl	8000618 <__aeabi_dmul>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4620      	mov	r0, r4
 80019b6:	4629      	mov	r1, r5
 80019b8:	f7fe fc78 	bl	80002ac <__adddf3>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	69f9      	ldr	r1, [r7, #28]
 80019c2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80019d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019d6:	f7fe fe1f 	bl	8000618 <__aeabi_dmul>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4620      	mov	r0, r4
 80019e0:	4629      	mov	r1, r5
 80019e2:	f7fe fc61 	bl	80002a8 <__aeabi_dsub>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	69f9      	ldr	r1, [r7, #28]
 80019ec:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80019fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a00:	f7fe fe0a 	bl	8000618 <__aeabi_dmul>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4620      	mov	r0, r4
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	f7fe fc4c 	bl	80002a8 <__aeabi_dsub>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	69f9      	ldr	r1, [r7, #28]
 8001a16:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a2a:	f7fe fdf5 	bl	8000618 <__aeabi_dmul>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4620      	mov	r0, r4
 8001a34:	4629      	mov	r1, r5
 8001a36:	f7fe fc39 	bl	80002ac <__adddf3>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	69f9      	ldr	r1, [r7, #28]
 8001a40:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    // Tính toán độ lệch giữa góc đo và góc dự đoán của phép đo (S)
    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001a50:	f7fe fc2c 	bl	80002ac <__adddf3>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    // Tính toán Kalman Gain (K)
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001a62:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001a66:	f7fe ff01 	bl	800086c <__aeabi_ddiv>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001a78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001a7c:	f7fe fef6 	bl	800086c <__aeabi_ddiv>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    // Cập nhật sai số giữa góc và độ lệch  bằng sai số nhân với Kalman Gain
    double y = newAngle - Kalman->angle;
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a92:	f7fe fc09 	bl	80002a8 <__aeabi_dsub>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001aa4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001aa8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001aac:	f7fe fdb4 	bl	8000618 <__aeabi_dmul>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	f7fe fbf8 	bl	80002ac <__adddf3>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	69f9      	ldr	r1, [r7, #28]
 8001ac2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias  += K[1] * y;
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001acc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001ad0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001ad4:	f7fe fda0 	bl	8000618 <__aeabi_dmul>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4620      	mov	r0, r4
 8001ade:	4629      	mov	r1, r5
 8001ae0:	f7fe fbe4 	bl	80002ac <__adddf3>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	69f9      	ldr	r1, [r7, #28]
 8001aea:	e9c1 2308 	strd	r2, r3, [r1, #32]

    // Lưu tạm các giá trị của ma trận hiệp phương sai để cập nhật
    double P00_temp = Kalman->P[0][0];
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001af4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001afe:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Cập nhật ma trận hiệp phương sai (P) sau bước hiệu chỉnh
    Kalman->P[0][0] -= K[0] * P00_temp;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001b08:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001b10:	f7fe fd82 	bl	8000618 <__aeabi_dmul>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4620      	mov	r0, r4
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	f7fe fbc4 	bl	80002a8 <__aeabi_dsub>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	69f9      	ldr	r1, [r7, #28]
 8001b26:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001b30:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b34:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001b38:	f7fe fd6e 	bl	8000618 <__aeabi_dmul>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4620      	mov	r0, r4
 8001b42:	4629      	mov	r1, r5
 8001b44:	f7fe fbb0 	bl	80002a8 <__aeabi_dsub>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	69f9      	ldr	r1, [r7, #28]
 8001b4e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001b58:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001b60:	f7fe fd5a 	bl	8000618 <__aeabi_dmul>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4620      	mov	r0, r4
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	f7fe fb9c 	bl	80002a8 <__aeabi_dsub>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	69f9      	ldr	r1, [r7, #28]
 8001b76:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001b80:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b84:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001b88:	f7fe fd46 	bl	8000618 <__aeabi_dmul>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4620      	mov	r0, r4
 8001b92:	4629      	mov	r1, r5
 8001b94:	f7fe fb88 	bl	80002a8 <__aeabi_dsub>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	69f9      	ldr	r1, [r7, #28]
 8001b9e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    // Trả về góc đã được lọc và hiệu chỉnh
    return Kalman->angle;
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001ba8:	ec43 2b17 	vmov	d7, r2, r3
}
 8001bac:	eeb0 0a47 	vmov.f32	s0, s14
 8001bb0:	eef0 0a67 	vmov.f32	s1, s15
 8001bb4:	3758      	adds	r7, #88	@ 0x58
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	4b10      	ldr	r3, [pc, #64]	@ (8001c08 <HAL_MspInit+0x4c>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bca:	4a0f      	ldr	r2, [pc, #60]	@ (8001c08 <HAL_MspInit+0x4c>)
 8001bcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001c08 <HAL_MspInit+0x4c>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	603b      	str	r3, [r7, #0]
 8001be2:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <HAL_MspInit+0x4c>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	4a08      	ldr	r2, [pc, #32]	@ (8001c08 <HAL_MspInit+0x4c>)
 8001be8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bee:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <HAL_MspInit+0x4c>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf6:	603b      	str	r3, [r7, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800

08001c0c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	@ 0x28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a19      	ldr	r2, [pc, #100]	@ (8001c90 <HAL_I2C_MspInit+0x84>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d12b      	bne.n	8001c86 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	4b18      	ldr	r3, [pc, #96]	@ (8001c94 <HAL_I2C_MspInit+0x88>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	4a17      	ldr	r2, [pc, #92]	@ (8001c94 <HAL_I2C_MspInit+0x88>)
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c3e:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <HAL_I2C_MspInit+0x88>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c4a:	23c0      	movs	r3, #192	@ 0xc0
 8001c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c4e:	2312      	movs	r3, #18
 8001c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c56:	2303      	movs	r3, #3
 8001c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	4619      	mov	r1, r3
 8001c64:	480c      	ldr	r0, [pc, #48]	@ (8001c98 <HAL_I2C_MspInit+0x8c>)
 8001c66:	f000 fab5 	bl	80021d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	4b09      	ldr	r3, [pc, #36]	@ (8001c94 <HAL_I2C_MspInit+0x88>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c72:	4a08      	ldr	r2, [pc, #32]	@ (8001c94 <HAL_I2C_MspInit+0x88>)
 8001c74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c7a:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <HAL_I2C_MspInit+0x88>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c86:	bf00      	nop
 8001c88:	3728      	adds	r7, #40	@ 0x28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40005400 	.word	0x40005400
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020400 	.word	0x40020400

08001c9c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08a      	sub	sp, #40	@ 0x28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a19      	ldr	r2, [pc, #100]	@ (8001d20 <HAL_UART_MspInit+0x84>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d12c      	bne.n	8001d18 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	4b18      	ldr	r3, [pc, #96]	@ (8001d24 <HAL_UART_MspInit+0x88>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc6:	4a17      	ldr	r2, [pc, #92]	@ (8001d24 <HAL_UART_MspInit+0x88>)
 8001cc8:	f043 0310 	orr.w	r3, r3, #16
 8001ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cce:	4b15      	ldr	r3, [pc, #84]	@ (8001d24 <HAL_UART_MspInit+0x88>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd2:	f003 0310 	and.w	r3, r3, #16
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	4b11      	ldr	r3, [pc, #68]	@ (8001d24 <HAL_UART_MspInit+0x88>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	4a10      	ldr	r2, [pc, #64]	@ (8001d24 <HAL_UART_MspInit+0x88>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cea:	4b0e      	ldr	r3, [pc, #56]	@ (8001d24 <HAL_UART_MspInit+0x88>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cf6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d04:	2303      	movs	r3, #3
 8001d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d08:	2307      	movs	r3, #7
 8001d0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4619      	mov	r1, r3
 8001d12:	4805      	ldr	r0, [pc, #20]	@ (8001d28 <HAL_UART_MspInit+0x8c>)
 8001d14:	f000 fa5e 	bl	80021d4 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001d18:	bf00      	nop
 8001d1a:	3728      	adds	r7, #40	@ 0x28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40011000 	.word	0x40011000
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020000 	.word	0x40020000

08001d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d30:	bf00      	nop
 8001d32:	e7fd      	b.n	8001d30 <NMI_Handler+0x4>

08001d34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d38:	bf00      	nop
 8001d3a:	e7fd      	b.n	8001d38 <HardFault_Handler+0x4>

08001d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <MemManage_Handler+0x4>

08001d44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <BusFault_Handler+0x4>

08001d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <UsageFault_Handler+0x4>

08001d54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d82:	f000 f8d1 	bl	8001f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d90:	4802      	ldr	r0, [pc, #8]	@ (8001d9c <OTG_FS_IRQHandler+0x10>)
 8001d92:	f001 fe7b 	bl	8003a8c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200007fc 	.word	0x200007fc

08001da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da8:	4a14      	ldr	r2, [pc, #80]	@ (8001dfc <_sbrk+0x5c>)
 8001daa:	4b15      	ldr	r3, [pc, #84]	@ (8001e00 <_sbrk+0x60>)
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db4:	4b13      	ldr	r3, [pc, #76]	@ (8001e04 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <_sbrk+0x64>)
 8001dbe:	4a12      	ldr	r2, [pc, #72]	@ (8001e08 <_sbrk+0x68>)
 8001dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dc2:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <_sbrk+0x64>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d207      	bcs.n	8001de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd0:	f007 fcfe 	bl	80097d0 <__errno>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
 8001dde:	e009      	b.n	8001df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de0:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <_sbrk+0x64>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001de6:	4b07      	ldr	r3, [pc, #28]	@ (8001e04 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	4a05      	ldr	r2, [pc, #20]	@ (8001e04 <_sbrk+0x64>)
 8001df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001df2:	68fb      	ldr	r3, [r7, #12]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20030000 	.word	0x20030000
 8001e00:	00000400 	.word	0x00000400
 8001e04:	20000314 	.word	0x20000314
 8001e08:	20000e40 	.word	0x20000e40

08001e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e10:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <SystemInit+0x20>)
 8001e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e16:	4a05      	ldr	r2, [pc, #20]	@ (8001e2c <SystemInit+0x20>)
 8001e18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001e30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e34:	f7ff ffea 	bl	8001e0c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e38:	480c      	ldr	r0, [pc, #48]	@ (8001e6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e3a:	490d      	ldr	r1, [pc, #52]	@ (8001e70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e40:	e002      	b.n	8001e48 <LoopCopyDataInit>

08001e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e46:	3304      	adds	r3, #4

08001e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e4c:	d3f9      	bcc.n	8001e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e50:	4c0a      	ldr	r4, [pc, #40]	@ (8001e7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e54:	e001      	b.n	8001e5a <LoopFillZerobss>

08001e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e58:	3204      	adds	r2, #4

08001e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e5c:	d3fb      	bcc.n	8001e56 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e5e:	f007 fcbd 	bl	80097dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e62:	f7ff f97b 	bl	800115c <main>
  bx  lr    
 8001e66:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e68:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e70:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001e74:	0800a9b0 	.word	0x0800a9b0
  ldr r2, =_sbss
 8001e78:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8001e7c:	20000e3c 	.word	0x20000e3c

08001e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e80:	e7fe      	b.n	8001e80 <ADC_IRQHandler>
	...

08001e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e88:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec4 <HAL_Init+0x40>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec4 <HAL_Init+0x40>)
 8001e8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec4 <HAL_Init+0x40>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec4 <HAL_Init+0x40>)
 8001e9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea0:	4b08      	ldr	r3, [pc, #32]	@ (8001ec4 <HAL_Init+0x40>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	@ (8001ec4 <HAL_Init+0x40>)
 8001ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eac:	2003      	movs	r0, #3
 8001eae:	f000 f94f 	bl	8002150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eb2:	200f      	movs	r0, #15
 8001eb4:	f000 f808 	bl	8001ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eb8:	f7ff fe80 	bl	8001bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023c00 	.word	0x40023c00

08001ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ed0:	4b12      	ldr	r3, [pc, #72]	@ (8001f1c <HAL_InitTick+0x54>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <HAL_InitTick+0x58>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 f967 	bl	80021ba <HAL_SYSTICK_Config>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e00e      	b.n	8001f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b0f      	cmp	r3, #15
 8001efa:	d80a      	bhi.n	8001f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001efc:	2200      	movs	r2, #0
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295
 8001f04:	f000 f92f 	bl	8002166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f08:	4a06      	ldr	r2, [pc, #24]	@ (8001f24 <HAL_InitTick+0x5c>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e000      	b.n	8001f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000090 	.word	0x20000090
 8001f20:	20000098 	.word	0x20000098
 8001f24:	20000094 	.word	0x20000094

08001f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <HAL_IncTick+0x20>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <HAL_IncTick+0x24>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	4a04      	ldr	r2, [pc, #16]	@ (8001f4c <HAL_IncTick+0x24>)
 8001f3a:	6013      	str	r3, [r2, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000098 	.word	0x20000098
 8001f4c:	20000318 	.word	0x20000318

08001f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return uwTick;
 8001f54:	4b03      	ldr	r3, [pc, #12]	@ (8001f64 <HAL_GetTick+0x14>)
 8001f56:	681b      	ldr	r3, [r3, #0]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000318 	.word	0x20000318

08001f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f70:	f7ff ffee 	bl	8001f50 <HAL_GetTick>
 8001f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f80:	d005      	beq.n	8001f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f82:	4b0a      	ldr	r3, [pc, #40]	@ (8001fac <HAL_Delay+0x44>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f8e:	bf00      	nop
 8001f90:	f7ff ffde 	bl	8001f50 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d8f7      	bhi.n	8001f90 <HAL_Delay+0x28>
  {
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000098 	.word	0x20000098

08001fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fe2:	4a04      	ldr	r2, [pc, #16]	@ (8001ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	60d3      	str	r3, [r2, #12]
}
 8001fe8:	bf00      	nop
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ffc:	4b04      	ldr	r3, [pc, #16]	@ (8002010 <__NVIC_GetPriorityGrouping+0x18>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	0a1b      	lsrs	r3, r3, #8
 8002002:	f003 0307 	and.w	r3, r3, #7
}
 8002006:	4618      	mov	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	2b00      	cmp	r3, #0
 8002024:	db0b      	blt.n	800203e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	f003 021f 	and.w	r2, r3, #31
 800202c:	4907      	ldr	r1, [pc, #28]	@ (800204c <__NVIC_EnableIRQ+0x38>)
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	095b      	lsrs	r3, r3, #5
 8002034:	2001      	movs	r0, #1
 8002036:	fa00 f202 	lsl.w	r2, r0, r2
 800203a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	e000e100 	.word	0xe000e100

08002050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	6039      	str	r1, [r7, #0]
 800205a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002060:	2b00      	cmp	r3, #0
 8002062:	db0a      	blt.n	800207a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	b2da      	uxtb	r2, r3
 8002068:	490c      	ldr	r1, [pc, #48]	@ (800209c <__NVIC_SetPriority+0x4c>)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	0112      	lsls	r2, r2, #4
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	440b      	add	r3, r1
 8002074:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002078:	e00a      	b.n	8002090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	b2da      	uxtb	r2, r3
 800207e:	4908      	ldr	r1, [pc, #32]	@ (80020a0 <__NVIC_SetPriority+0x50>)
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	3b04      	subs	r3, #4
 8002088:	0112      	lsls	r2, r2, #4
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	440b      	add	r3, r1
 800208e:	761a      	strb	r2, [r3, #24]
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	e000e100 	.word	0xe000e100
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b089      	sub	sp, #36	@ 0x24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f1c3 0307 	rsb	r3, r3, #7
 80020be:	2b04      	cmp	r3, #4
 80020c0:	bf28      	it	cs
 80020c2:	2304      	movcs	r3, #4
 80020c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3304      	adds	r3, #4
 80020ca:	2b06      	cmp	r3, #6
 80020cc:	d902      	bls.n	80020d4 <NVIC_EncodePriority+0x30>
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3b03      	subs	r3, #3
 80020d2:	e000      	b.n	80020d6 <NVIC_EncodePriority+0x32>
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d8:	f04f 32ff 	mov.w	r2, #4294967295
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43da      	mvns	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	401a      	ands	r2, r3
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020ec:	f04f 31ff 	mov.w	r1, #4294967295
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	fa01 f303 	lsl.w	r3, r1, r3
 80020f6:	43d9      	mvns	r1, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020fc:	4313      	orrs	r3, r2
         );
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3724      	adds	r7, #36	@ 0x24
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
	...

0800210c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3b01      	subs	r3, #1
 8002118:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800211c:	d301      	bcc.n	8002122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800211e:	2301      	movs	r3, #1
 8002120:	e00f      	b.n	8002142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002122:	4a0a      	ldr	r2, [pc, #40]	@ (800214c <SysTick_Config+0x40>)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3b01      	subs	r3, #1
 8002128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800212a:	210f      	movs	r1, #15
 800212c:	f04f 30ff 	mov.w	r0, #4294967295
 8002130:	f7ff ff8e 	bl	8002050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002134:	4b05      	ldr	r3, [pc, #20]	@ (800214c <SysTick_Config+0x40>)
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800213a:	4b04      	ldr	r3, [pc, #16]	@ (800214c <SysTick_Config+0x40>)
 800213c:	2207      	movs	r2, #7
 800213e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	e000e010 	.word	0xe000e010

08002150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff ff29 	bl	8001fb0 <__NVIC_SetPriorityGrouping>
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002166:	b580      	push	{r7, lr}
 8002168:	b086      	sub	sp, #24
 800216a:	af00      	add	r7, sp, #0
 800216c:	4603      	mov	r3, r0
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
 8002172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002178:	f7ff ff3e 	bl	8001ff8 <__NVIC_GetPriorityGrouping>
 800217c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	68b9      	ldr	r1, [r7, #8]
 8002182:	6978      	ldr	r0, [r7, #20]
 8002184:	f7ff ff8e 	bl	80020a4 <NVIC_EncodePriority>
 8002188:	4602      	mov	r2, r0
 800218a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800218e:	4611      	mov	r1, r2
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff5d 	bl	8002050 <__NVIC_SetPriority>
}
 8002196:	bf00      	nop
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4603      	mov	r3, r0
 80021a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff31 	bl	8002014 <__NVIC_EnableIRQ>
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff ffa2 	bl	800210c <SysTick_Config>
 80021c8:	4603      	mov	r3, r0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	@ 0x24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	e177      	b.n	80024e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021f0:	2201      	movs	r2, #1
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	429a      	cmp	r2, r3
 800220a:	f040 8166 	bne.w	80024da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d005      	beq.n	8002226 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002222:	2b02      	cmp	r3, #2
 8002224:	d130      	bne.n	8002288 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	2203      	movs	r2, #3
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800225c:	2201      	movs	r2, #1
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 0201 	and.w	r2, r3, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b03      	cmp	r3, #3
 8002292:	d017      	beq.n	80022c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d123      	bne.n	8002318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	08da      	lsrs	r2, r3, #3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3208      	adds	r2, #8
 80022d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	220f      	movs	r2, #15
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	08da      	lsrs	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3208      	adds	r2, #8
 8002312:	69b9      	ldr	r1, [r7, #24]
 8002314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0203 	and.w	r2, r3, #3
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80c0 	beq.w	80024da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b66      	ldr	r3, [pc, #408]	@ (80024f8 <HAL_GPIO_Init+0x324>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002362:	4a65      	ldr	r2, [pc, #404]	@ (80024f8 <HAL_GPIO_Init+0x324>)
 8002364:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002368:	6453      	str	r3, [r2, #68]	@ 0x44
 800236a:	4b63      	ldr	r3, [pc, #396]	@ (80024f8 <HAL_GPIO_Init+0x324>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002376:	4a61      	ldr	r2, [pc, #388]	@ (80024fc <HAL_GPIO_Init+0x328>)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	089b      	lsrs	r3, r3, #2
 800237c:	3302      	adds	r3, #2
 800237e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	220f      	movs	r2, #15
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a58      	ldr	r2, [pc, #352]	@ (8002500 <HAL_GPIO_Init+0x32c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d037      	beq.n	8002412 <HAL_GPIO_Init+0x23e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a57      	ldr	r2, [pc, #348]	@ (8002504 <HAL_GPIO_Init+0x330>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d031      	beq.n	800240e <HAL_GPIO_Init+0x23a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a56      	ldr	r2, [pc, #344]	@ (8002508 <HAL_GPIO_Init+0x334>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d02b      	beq.n	800240a <HAL_GPIO_Init+0x236>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a55      	ldr	r2, [pc, #340]	@ (800250c <HAL_GPIO_Init+0x338>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d025      	beq.n	8002406 <HAL_GPIO_Init+0x232>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a54      	ldr	r2, [pc, #336]	@ (8002510 <HAL_GPIO_Init+0x33c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d01f      	beq.n	8002402 <HAL_GPIO_Init+0x22e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a53      	ldr	r2, [pc, #332]	@ (8002514 <HAL_GPIO_Init+0x340>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d019      	beq.n	80023fe <HAL_GPIO_Init+0x22a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a52      	ldr	r2, [pc, #328]	@ (8002518 <HAL_GPIO_Init+0x344>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d013      	beq.n	80023fa <HAL_GPIO_Init+0x226>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a51      	ldr	r2, [pc, #324]	@ (800251c <HAL_GPIO_Init+0x348>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d00d      	beq.n	80023f6 <HAL_GPIO_Init+0x222>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a50      	ldr	r2, [pc, #320]	@ (8002520 <HAL_GPIO_Init+0x34c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d007      	beq.n	80023f2 <HAL_GPIO_Init+0x21e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002524 <HAL_GPIO_Init+0x350>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d101      	bne.n	80023ee <HAL_GPIO_Init+0x21a>
 80023ea:	2309      	movs	r3, #9
 80023ec:	e012      	b.n	8002414 <HAL_GPIO_Init+0x240>
 80023ee:	230a      	movs	r3, #10
 80023f0:	e010      	b.n	8002414 <HAL_GPIO_Init+0x240>
 80023f2:	2308      	movs	r3, #8
 80023f4:	e00e      	b.n	8002414 <HAL_GPIO_Init+0x240>
 80023f6:	2307      	movs	r3, #7
 80023f8:	e00c      	b.n	8002414 <HAL_GPIO_Init+0x240>
 80023fa:	2306      	movs	r3, #6
 80023fc:	e00a      	b.n	8002414 <HAL_GPIO_Init+0x240>
 80023fe:	2305      	movs	r3, #5
 8002400:	e008      	b.n	8002414 <HAL_GPIO_Init+0x240>
 8002402:	2304      	movs	r3, #4
 8002404:	e006      	b.n	8002414 <HAL_GPIO_Init+0x240>
 8002406:	2303      	movs	r3, #3
 8002408:	e004      	b.n	8002414 <HAL_GPIO_Init+0x240>
 800240a:	2302      	movs	r3, #2
 800240c:	e002      	b.n	8002414 <HAL_GPIO_Init+0x240>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <HAL_GPIO_Init+0x240>
 8002412:	2300      	movs	r3, #0
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	f002 0203 	and.w	r2, r2, #3
 800241a:	0092      	lsls	r2, r2, #2
 800241c:	4093      	lsls	r3, r2
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002424:	4935      	ldr	r1, [pc, #212]	@ (80024fc <HAL_GPIO_Init+0x328>)
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	089b      	lsrs	r3, r3, #2
 800242a:	3302      	adds	r3, #2
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002432:	4b3d      	ldr	r3, [pc, #244]	@ (8002528 <HAL_GPIO_Init+0x354>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002456:	4a34      	ldr	r2, [pc, #208]	@ (8002528 <HAL_GPIO_Init+0x354>)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800245c:	4b32      	ldr	r3, [pc, #200]	@ (8002528 <HAL_GPIO_Init+0x354>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002480:	4a29      	ldr	r2, [pc, #164]	@ (8002528 <HAL_GPIO_Init+0x354>)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002486:	4b28      	ldr	r3, [pc, #160]	@ (8002528 <HAL_GPIO_Init+0x354>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002528 <HAL_GPIO_Init+0x354>)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002528 <HAL_GPIO_Init+0x354>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024d4:	4a14      	ldr	r2, [pc, #80]	@ (8002528 <HAL_GPIO_Init+0x354>)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3301      	adds	r3, #1
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	2b0f      	cmp	r3, #15
 80024e4:	f67f ae84 	bls.w	80021f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	3724      	adds	r7, #36	@ 0x24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40013800 	.word	0x40013800
 8002500:	40020000 	.word	0x40020000
 8002504:	40020400 	.word	0x40020400
 8002508:	40020800 	.word	0x40020800
 800250c:	40020c00 	.word	0x40020c00
 8002510:	40021000 	.word	0x40021000
 8002514:	40021400 	.word	0x40021400
 8002518:	40021800 	.word	0x40021800
 800251c:	40021c00 	.word	0x40021c00
 8002520:	40022000 	.word	0x40022000
 8002524:	40022400 	.word	0x40022400
 8002528:	40013c00 	.word	0x40013c00

0800252c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	807b      	strh	r3, [r7, #2]
 8002538:	4613      	mov	r3, r2
 800253a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800253c:	787b      	ldrb	r3, [r7, #1]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002542:	887a      	ldrh	r2, [r7, #2]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002548:	e003      	b.n	8002552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800254a:	887b      	ldrh	r3, [r7, #2]
 800254c:	041a      	lsls	r2, r3, #16
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	619a      	str	r2, [r3, #24]
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e12b      	b.n	80027ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff fb40 	bl	8001c0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2224      	movs	r2, #36	@ 0x24
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0201 	bic.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025c4:	f002 ffc8 	bl	8005558 <HAL_RCC_GetPCLK1Freq>
 80025c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	4a81      	ldr	r2, [pc, #516]	@ (80027d4 <HAL_I2C_Init+0x274>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d807      	bhi.n	80025e4 <HAL_I2C_Init+0x84>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4a80      	ldr	r2, [pc, #512]	@ (80027d8 <HAL_I2C_Init+0x278>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	bf94      	ite	ls
 80025dc:	2301      	movls	r3, #1
 80025de:	2300      	movhi	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	e006      	b.n	80025f2 <HAL_I2C_Init+0x92>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4a7d      	ldr	r2, [pc, #500]	@ (80027dc <HAL_I2C_Init+0x27c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	bf94      	ite	ls
 80025ec:	2301      	movls	r3, #1
 80025ee:	2300      	movhi	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e0e7      	b.n	80027ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4a78      	ldr	r2, [pc, #480]	@ (80027e0 <HAL_I2C_Init+0x280>)
 80025fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002602:	0c9b      	lsrs	r3, r3, #18
 8002604:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	430a      	orrs	r2, r1
 8002618:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	4a6a      	ldr	r2, [pc, #424]	@ (80027d4 <HAL_I2C_Init+0x274>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d802      	bhi.n	8002634 <HAL_I2C_Init+0xd4>
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	3301      	adds	r3, #1
 8002632:	e009      	b.n	8002648 <HAL_I2C_Init+0xe8>
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800263a:	fb02 f303 	mul.w	r3, r2, r3
 800263e:	4a69      	ldr	r2, [pc, #420]	@ (80027e4 <HAL_I2C_Init+0x284>)
 8002640:	fba2 2303 	umull	r2, r3, r2, r3
 8002644:	099b      	lsrs	r3, r3, #6
 8002646:	3301      	adds	r3, #1
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	430b      	orrs	r3, r1
 800264e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800265a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	495c      	ldr	r1, [pc, #368]	@ (80027d4 <HAL_I2C_Init+0x274>)
 8002664:	428b      	cmp	r3, r1
 8002666:	d819      	bhi.n	800269c <HAL_I2C_Init+0x13c>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	1e59      	subs	r1, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	fbb1 f3f3 	udiv	r3, r1, r3
 8002676:	1c59      	adds	r1, r3, #1
 8002678:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800267c:	400b      	ands	r3, r1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00a      	beq.n	8002698 <HAL_I2C_Init+0x138>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1e59      	subs	r1, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002690:	3301      	adds	r3, #1
 8002692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002696:	e051      	b.n	800273c <HAL_I2C_Init+0x1dc>
 8002698:	2304      	movs	r3, #4
 800269a:	e04f      	b.n	800273c <HAL_I2C_Init+0x1dc>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d111      	bne.n	80026c8 <HAL_I2C_Init+0x168>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1e58      	subs	r0, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	440b      	add	r3, r1
 80026b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b6:	3301      	adds	r3, #1
 80026b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026bc:	2b00      	cmp	r3, #0
 80026be:	bf0c      	ite	eq
 80026c0:	2301      	moveq	r3, #1
 80026c2:	2300      	movne	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	e012      	b.n	80026ee <HAL_I2C_Init+0x18e>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1e58      	subs	r0, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6859      	ldr	r1, [r3, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	0099      	lsls	r1, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	fbb0 f3f3 	udiv	r3, r0, r3
 80026de:	3301      	adds	r3, #1
 80026e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	bf0c      	ite	eq
 80026e8:	2301      	moveq	r3, #1
 80026ea:	2300      	movne	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_I2C_Init+0x196>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e022      	b.n	800273c <HAL_I2C_Init+0x1dc>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10e      	bne.n	800271c <HAL_I2C_Init+0x1bc>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1e58      	subs	r0, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6859      	ldr	r1, [r3, #4]
 8002706:	460b      	mov	r3, r1
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	440b      	add	r3, r1
 800270c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002710:	3301      	adds	r3, #1
 8002712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002716:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800271a:	e00f      	b.n	800273c <HAL_I2C_Init+0x1dc>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	1e58      	subs	r0, r3, #1
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6859      	ldr	r1, [r3, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	0099      	lsls	r1, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002732:	3301      	adds	r3, #1
 8002734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002738:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	6809      	ldr	r1, [r1, #0]
 8002740:	4313      	orrs	r3, r2
 8002742:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69da      	ldr	r2, [r3, #28]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800276a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6911      	ldr	r1, [r2, #16]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68d2      	ldr	r2, [r2, #12]
 8002776:	4311      	orrs	r1, r2
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	430b      	orrs	r3, r1
 800277e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695a      	ldr	r2, [r3, #20]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2220      	movs	r2, #32
 80027b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	000186a0 	.word	0x000186a0
 80027d8:	001e847f 	.word	0x001e847f
 80027dc:	003d08ff 	.word	0x003d08ff
 80027e0:	431bde83 	.word	0x431bde83
 80027e4:	10624dd3 	.word	0x10624dd3

080027e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b088      	sub	sp, #32
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	4608      	mov	r0, r1
 80027f2:	4611      	mov	r1, r2
 80027f4:	461a      	mov	r2, r3
 80027f6:	4603      	mov	r3, r0
 80027f8:	817b      	strh	r3, [r7, #10]
 80027fa:	460b      	mov	r3, r1
 80027fc:	813b      	strh	r3, [r7, #8]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002802:	f7ff fba5 	bl	8001f50 <HAL_GetTick>
 8002806:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b20      	cmp	r3, #32
 8002812:	f040 80d9 	bne.w	80029c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	2319      	movs	r3, #25
 800281c:	2201      	movs	r2, #1
 800281e:	496d      	ldr	r1, [pc, #436]	@ (80029d4 <HAL_I2C_Mem_Write+0x1ec>)
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 fdb9 	bl	8003398 <I2C_WaitOnFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800282c:	2302      	movs	r3, #2
 800282e:	e0cc      	b.n	80029ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002836:	2b01      	cmp	r3, #1
 8002838:	d101      	bne.n	800283e <HAL_I2C_Mem_Write+0x56>
 800283a:	2302      	movs	r3, #2
 800283c:	e0c5      	b.n	80029ca <HAL_I2C_Mem_Write+0x1e2>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b01      	cmp	r3, #1
 8002852:	d007      	beq.n	8002864 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002872:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2221      	movs	r2, #33	@ 0x21
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2240      	movs	r2, #64	@ 0x40
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6a3a      	ldr	r2, [r7, #32]
 800288e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002894:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4a4d      	ldr	r2, [pc, #308]	@ (80029d8 <HAL_I2C_Mem_Write+0x1f0>)
 80028a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028a6:	88f8      	ldrh	r0, [r7, #6]
 80028a8:	893a      	ldrh	r2, [r7, #8]
 80028aa:	8979      	ldrh	r1, [r7, #10]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	9301      	str	r3, [sp, #4]
 80028b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	4603      	mov	r3, r0
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 fbf0 	bl	800309c <I2C_RequestMemoryWrite>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d052      	beq.n	8002968 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e081      	b.n	80029ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 fe7e 	bl	80035cc <I2C_WaitOnTXEFlagUntilTimeout>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00d      	beq.n	80028f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d107      	bne.n	80028ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e06b      	b.n	80029ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f6:	781a      	ldrb	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b04      	cmp	r3, #4
 800292e:	d11b      	bne.n	8002968 <HAL_I2C_Mem_Write+0x180>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002934:	2b00      	cmp	r3, #0
 8002936:	d017      	beq.n	8002968 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293c:	781a      	ldrb	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002952:	3b01      	subs	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1aa      	bne.n	80028c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 fe71 	bl	800365c <I2C_WaitOnBTFFlagUntilTimeout>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00d      	beq.n	800299c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002984:	2b04      	cmp	r3, #4
 8002986:	d107      	bne.n	8002998 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002996:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e016      	b.n	80029ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	e000      	b.n	80029ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029c8:	2302      	movs	r3, #2
  }
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	00100002 	.word	0x00100002
 80029d8:	ffff0000 	.word	0xffff0000

080029dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08c      	sub	sp, #48	@ 0x30
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	4608      	mov	r0, r1
 80029e6:	4611      	mov	r1, r2
 80029e8:	461a      	mov	r2, r3
 80029ea:	4603      	mov	r3, r0
 80029ec:	817b      	strh	r3, [r7, #10]
 80029ee:	460b      	mov	r3, r1
 80029f0:	813b      	strh	r3, [r7, #8]
 80029f2:	4613      	mov	r3, r2
 80029f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029f6:	f7ff faab 	bl	8001f50 <HAL_GetTick>
 80029fa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b20      	cmp	r3, #32
 8002a06:	f040 8214 	bne.w	8002e32 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	2319      	movs	r3, #25
 8002a10:	2201      	movs	r2, #1
 8002a12:	497b      	ldr	r1, [pc, #492]	@ (8002c00 <HAL_I2C_Mem_Read+0x224>)
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 fcbf 	bl	8003398 <I2C_WaitOnFlagUntilTimeout>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a20:	2302      	movs	r3, #2
 8002a22:	e207      	b.n	8002e34 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_I2C_Mem_Read+0x56>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e200      	b.n	8002e34 <HAL_I2C_Mem_Read+0x458>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d007      	beq.n	8002a58 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2222      	movs	r2, #34	@ 0x22
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2240      	movs	r2, #64	@ 0x40
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002a88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4a5b      	ldr	r2, [pc, #364]	@ (8002c04 <HAL_I2C_Mem_Read+0x228>)
 8002a98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a9a:	88f8      	ldrh	r0, [r7, #6]
 8002a9c:	893a      	ldrh	r2, [r7, #8]
 8002a9e:	8979      	ldrh	r1, [r7, #10]
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 fb8c 	bl	80031c8 <I2C_RequestMemoryRead>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e1bc      	b.n	8002e34 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d113      	bne.n	8002aea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	623b      	str	r3, [r7, #32]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	623b      	str	r3, [r7, #32]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	623b      	str	r3, [r7, #32]
 8002ad6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	e190      	b.n	8002e0c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d11b      	bne.n	8002b2a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	61fb      	str	r3, [r7, #28]
 8002b16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	e170      	b.n	8002e0c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d11b      	bne.n	8002b6a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b40:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b52:	2300      	movs	r3, #0
 8002b54:	61bb      	str	r3, [r7, #24]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	61bb      	str	r3, [r7, #24]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	e150      	b.n	8002e0c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b80:	e144      	b.n	8002e0c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	f200 80f1 	bhi.w	8002d6e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d123      	bne.n	8002bdc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b96:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 fda7 	bl	80036ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e145      	b.n	8002e34 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002bda:	e117      	b.n	8002e0c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d14e      	bne.n	8002c82 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bea:	2200      	movs	r2, #0
 8002bec:	4906      	ldr	r1, [pc, #24]	@ (8002c08 <HAL_I2C_Mem_Read+0x22c>)
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 fbd2 	bl	8003398 <I2C_WaitOnFlagUntilTimeout>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d008      	beq.n	8002c0c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e11a      	b.n	8002e34 <HAL_I2C_Mem_Read+0x458>
 8002bfe:	bf00      	nop
 8002c00:	00100002 	.word	0x00100002
 8002c04:	ffff0000 	.word	0xffff0000
 8002c08:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691a      	ldr	r2, [r3, #16]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c80:	e0c4      	b.n	8002e0c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c88:	2200      	movs	r2, #0
 8002c8a:	496c      	ldr	r1, [pc, #432]	@ (8002e3c <HAL_I2C_Mem_Read+0x460>)
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 fb83 	bl	8003398 <I2C_WaitOnFlagUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0cb      	b.n	8002e34 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002caa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691a      	ldr	r2, [r3, #16]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	4955      	ldr	r1, [pc, #340]	@ (8002e3c <HAL_I2C_Mem_Read+0x460>)
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 fb55 	bl	8003398 <I2C_WaitOnFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e09d      	b.n	8002e34 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691a      	ldr	r2, [r3, #16]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d6c:	e04e      	b.n	8002e0c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d70:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 fcba 	bl	80036ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e058      	b.n	8002e34 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d124      	bne.n	8002e0c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d107      	bne.n	8002dda <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dd8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f47f aeb6 	bne.w	8002b82 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	e000      	b.n	8002e34 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002e32:	2302      	movs	r3, #2
  }
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3728      	adds	r7, #40	@ 0x28
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	00010004 	.word	0x00010004

08002e40 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08a      	sub	sp, #40	@ 0x28
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	607a      	str	r2, [r7, #4]
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002e50:	f7ff f87e 	bl	8001f50 <HAL_GetTick>
 8002e54:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b20      	cmp	r3, #32
 8002e64:	f040 8111 	bne.w	800308a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	2319      	movs	r3, #25
 8002e6e:	2201      	movs	r2, #1
 8002e70:	4988      	ldr	r1, [pc, #544]	@ (8003094 <HAL_I2C_IsDeviceReady+0x254>)
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 fa90 	bl	8003398 <I2C_WaitOnFlagUntilTimeout>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e104      	b.n	800308c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_I2C_IsDeviceReady+0x50>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e0fd      	b.n	800308c <HAL_I2C_IsDeviceReady+0x24c>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d007      	beq.n	8002eb6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0201 	orr.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ec4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2224      	movs	r2, #36	@ 0x24
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4a70      	ldr	r2, [pc, #448]	@ (8003098 <HAL_I2C_IsDeviceReady+0x258>)
 8002ed8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ee8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 fa4e 	bl	8003398 <I2C_WaitOnFlagUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00d      	beq.n	8002f1e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f10:	d103      	bne.n	8002f1a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f18:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e0b6      	b.n	800308c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f1e:	897b      	ldrh	r3, [r7, #10]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	461a      	mov	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f2c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002f2e:	f7ff f80f 	bl	8001f50 <HAL_GetTick>
 8002f32:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	bf0c      	ite	eq
 8002f42:	2301      	moveq	r3, #1
 8002f44:	2300      	movne	r3, #0
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f58:	bf0c      	ite	eq
 8002f5a:	2301      	moveq	r3, #1
 8002f5c:	2300      	movne	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f62:	e025      	b.n	8002fb0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f64:	f7fe fff4 	bl	8001f50 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d302      	bcc.n	8002f7a <HAL_I2C_IsDeviceReady+0x13a>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d103      	bne.n	8002f82 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	22a0      	movs	r2, #160	@ 0xa0
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	bf0c      	ite	eq
 8002f90:	2301      	moveq	r3, #1
 8002f92:	2300      	movne	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2ba0      	cmp	r3, #160	@ 0xa0
 8002fba:	d005      	beq.n	8002fc8 <HAL_I2C_IsDeviceReady+0x188>
 8002fbc:	7dfb      	ldrb	r3, [r7, #23]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d102      	bne.n	8002fc8 <HAL_I2C_IsDeviceReady+0x188>
 8002fc2:	7dbb      	ldrb	r3, [r7, #22]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0cd      	beq.n	8002f64 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d129      	bne.n	8003032 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fec:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fee:	2300      	movs	r3, #0
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	2319      	movs	r3, #25
 800300a:	2201      	movs	r2, #1
 800300c:	4921      	ldr	r1, [pc, #132]	@ (8003094 <HAL_I2C_IsDeviceReady+0x254>)
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f9c2 	bl	8003398 <I2C_WaitOnFlagUntilTimeout>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e036      	b.n	800308c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	e02c      	b.n	800308c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003040:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800304a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	2319      	movs	r3, #25
 8003052:	2201      	movs	r2, #1
 8003054:	490f      	ldr	r1, [pc, #60]	@ (8003094 <HAL_I2C_IsDeviceReady+0x254>)
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f99e 	bl	8003398 <I2C_WaitOnFlagUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e012      	b.n	800308c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	3301      	adds	r3, #1
 800306a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	429a      	cmp	r2, r3
 8003072:	f4ff af32 	bcc.w	8002eda <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2220      	movs	r2, #32
 800307a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800308a:	2302      	movs	r3, #2
  }
}
 800308c:	4618      	mov	r0, r3
 800308e:	3720      	adds	r7, #32
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	00100002 	.word	0x00100002
 8003098:	ffff0000 	.word	0xffff0000

0800309c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af02      	add	r7, sp, #8
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	4608      	mov	r0, r1
 80030a6:	4611      	mov	r1, r2
 80030a8:	461a      	mov	r2, r3
 80030aa:	4603      	mov	r3, r0
 80030ac:	817b      	strh	r3, [r7, #10]
 80030ae:	460b      	mov	r3, r1
 80030b0:	813b      	strh	r3, [r7, #8]
 80030b2:	4613      	mov	r3, r2
 80030b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f960 	bl	8003398 <I2C_WaitOnFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00d      	beq.n	80030fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030ec:	d103      	bne.n	80030f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e05f      	b.n	80031ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030fa:	897b      	ldrh	r3, [r7, #10]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	461a      	mov	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003108:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800310a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310c:	6a3a      	ldr	r2, [r7, #32]
 800310e:	492d      	ldr	r1, [pc, #180]	@ (80031c4 <I2C_RequestMemoryWrite+0x128>)
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 f9bb 	bl	800348c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e04c      	b.n	80031ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003138:	6a39      	ldr	r1, [r7, #32]
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fa46 	bl	80035cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00d      	beq.n	8003162 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	2b04      	cmp	r3, #4
 800314c:	d107      	bne.n	800315e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800315c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e02b      	b.n	80031ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d105      	bne.n	8003174 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003168:	893b      	ldrh	r3, [r7, #8]
 800316a:	b2da      	uxtb	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	611a      	str	r2, [r3, #16]
 8003172:	e021      	b.n	80031b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003174:	893b      	ldrh	r3, [r7, #8]
 8003176:	0a1b      	lsrs	r3, r3, #8
 8003178:	b29b      	uxth	r3, r3
 800317a:	b2da      	uxtb	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003184:	6a39      	ldr	r1, [r7, #32]
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 fa20 	bl	80035cc <I2C_WaitOnTXEFlagUntilTimeout>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00d      	beq.n	80031ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003196:	2b04      	cmp	r3, #4
 8003198:	d107      	bne.n	80031aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e005      	b.n	80031ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031ae:	893b      	ldrh	r3, [r7, #8]
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	00010002 	.word	0x00010002

080031c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b088      	sub	sp, #32
 80031cc:	af02      	add	r7, sp, #8
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	4608      	mov	r0, r1
 80031d2:	4611      	mov	r1, r2
 80031d4:	461a      	mov	r2, r3
 80031d6:	4603      	mov	r3, r0
 80031d8:	817b      	strh	r3, [r7, #10]
 80031da:	460b      	mov	r3, r1
 80031dc:	813b      	strh	r3, [r7, #8]
 80031de:	4613      	mov	r3, r2
 80031e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003200:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	2200      	movs	r2, #0
 800320a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 f8c2 	bl	8003398 <I2C_WaitOnFlagUntilTimeout>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00d      	beq.n	8003236 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003224:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003228:	d103      	bne.n	8003232 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003230:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e0aa      	b.n	800338c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003236:	897b      	ldrh	r3, [r7, #10]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	461a      	mov	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003244:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003248:	6a3a      	ldr	r2, [r7, #32]
 800324a:	4952      	ldr	r1, [pc, #328]	@ (8003394 <I2C_RequestMemoryRead+0x1cc>)
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f91d 	bl	800348c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e097      	b.n	800338c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003272:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003274:	6a39      	ldr	r1, [r7, #32]
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 f9a8 	bl	80035cc <I2C_WaitOnTXEFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00d      	beq.n	800329e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	2b04      	cmp	r3, #4
 8003288:	d107      	bne.n	800329a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003298:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e076      	b.n	800338c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800329e:	88fb      	ldrh	r3, [r7, #6]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d105      	bne.n	80032b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032a4:	893b      	ldrh	r3, [r7, #8]
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	611a      	str	r2, [r3, #16]
 80032ae:	e021      	b.n	80032f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032b0:	893b      	ldrh	r3, [r7, #8]
 80032b2:	0a1b      	lsrs	r3, r3, #8
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032c0:	6a39      	ldr	r1, [r7, #32]
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 f982 	bl	80035cc <I2C_WaitOnTXEFlagUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00d      	beq.n	80032ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d107      	bne.n	80032e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e050      	b.n	800338c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032ea:	893b      	ldrh	r3, [r7, #8]
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f6:	6a39      	ldr	r1, [r7, #32]
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 f967 	bl	80035cc <I2C_WaitOnTXEFlagUntilTimeout>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00d      	beq.n	8003320 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003308:	2b04      	cmp	r3, #4
 800330a:	d107      	bne.n	800331c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800331a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e035      	b.n	800338c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800332e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	2200      	movs	r2, #0
 8003338:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 f82b 	bl	8003398 <I2C_WaitOnFlagUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00d      	beq.n	8003364 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003352:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003356:	d103      	bne.n	8003360 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800335e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e013      	b.n	800338c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003364:	897b      	ldrh	r3, [r7, #10]
 8003366:	b2db      	uxtb	r3, r3
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	b2da      	uxtb	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003376:	6a3a      	ldr	r2, [r7, #32]
 8003378:	4906      	ldr	r1, [pc, #24]	@ (8003394 <I2C_RequestMemoryRead+0x1cc>)
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f886 	bl	800348c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	00010002 	.word	0x00010002

08003398 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	4613      	mov	r3, r2
 80033a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033a8:	e048      	b.n	800343c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b0:	d044      	beq.n	800343c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b2:	f7fe fdcd 	bl	8001f50 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d302      	bcc.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d139      	bne.n	800343c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	0c1b      	lsrs	r3, r3, #16
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d10d      	bne.n	80033ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	43da      	mvns	r2, r3
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	4013      	ands	r3, r2
 80033de:	b29b      	uxth	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	bf0c      	ite	eq
 80033e4:	2301      	moveq	r3, #1
 80033e6:	2300      	movne	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	e00c      	b.n	8003408 <I2C_WaitOnFlagUntilTimeout+0x70>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	43da      	mvns	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	4013      	ands	r3, r2
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf0c      	ite	eq
 8003400:	2301      	moveq	r3, #1
 8003402:	2300      	movne	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	461a      	mov	r2, r3
 8003408:	79fb      	ldrb	r3, [r7, #7]
 800340a:	429a      	cmp	r2, r3
 800340c:	d116      	bne.n	800343c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003428:	f043 0220 	orr.w	r2, r3, #32
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e023      	b.n	8003484 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	0c1b      	lsrs	r3, r3, #16
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b01      	cmp	r3, #1
 8003444:	d10d      	bne.n	8003462 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	43da      	mvns	r2, r3
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	4013      	ands	r3, r2
 8003452:	b29b      	uxth	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	bf0c      	ite	eq
 8003458:	2301      	moveq	r3, #1
 800345a:	2300      	movne	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	461a      	mov	r2, r3
 8003460:	e00c      	b.n	800347c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	43da      	mvns	r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	4013      	ands	r3, r2
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	bf0c      	ite	eq
 8003474:	2301      	moveq	r3, #1
 8003476:	2300      	movne	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	461a      	mov	r2, r3
 800347c:	79fb      	ldrb	r3, [r7, #7]
 800347e:	429a      	cmp	r2, r3
 8003480:	d093      	beq.n	80033aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800349a:	e071      	b.n	8003580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034aa:	d123      	bne.n	80034f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e0:	f043 0204 	orr.w	r2, r3, #4
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e067      	b.n	80035c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fa:	d041      	beq.n	8003580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034fc:	f7fe fd28 	bl	8001f50 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	429a      	cmp	r2, r3
 800350a:	d302      	bcc.n	8003512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d136      	bne.n	8003580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	0c1b      	lsrs	r3, r3, #16
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b01      	cmp	r3, #1
 800351a:	d10c      	bne.n	8003536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	43da      	mvns	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	4013      	ands	r3, r2
 8003528:	b29b      	uxth	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	bf14      	ite	ne
 800352e:	2301      	movne	r3, #1
 8003530:	2300      	moveq	r3, #0
 8003532:	b2db      	uxtb	r3, r3
 8003534:	e00b      	b.n	800354e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	43da      	mvns	r2, r3
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	4013      	ands	r3, r2
 8003542:	b29b      	uxth	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	bf14      	ite	ne
 8003548:	2301      	movne	r3, #1
 800354a:	2300      	moveq	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d016      	beq.n	8003580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356c:	f043 0220 	orr.w	r2, r3, #32
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e021      	b.n	80035c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	0c1b      	lsrs	r3, r3, #16
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b01      	cmp	r3, #1
 8003588:	d10c      	bne.n	80035a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	43da      	mvns	r2, r3
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	4013      	ands	r3, r2
 8003596:	b29b      	uxth	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	bf14      	ite	ne
 800359c:	2301      	movne	r3, #1
 800359e:	2300      	moveq	r3, #0
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	e00b      	b.n	80035bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	43da      	mvns	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4013      	ands	r3, r2
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	bf14      	ite	ne
 80035b6:	2301      	movne	r3, #1
 80035b8:	2300      	moveq	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f47f af6d 	bne.w	800349c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035d8:	e034      	b.n	8003644 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 f8e3 	bl	80037a6 <I2C_IsAcknowledgeFailed>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e034      	b.n	8003654 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f0:	d028      	beq.n	8003644 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f2:	f7fe fcad 	bl	8001f50 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d302      	bcc.n	8003608 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d11d      	bne.n	8003644 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003612:	2b80      	cmp	r3, #128	@ 0x80
 8003614:	d016      	beq.n	8003644 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003630:	f043 0220 	orr.w	r2, r3, #32
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e007      	b.n	8003654 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800364e:	2b80      	cmp	r3, #128	@ 0x80
 8003650:	d1c3      	bne.n	80035da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003668:	e034      	b.n	80036d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 f89b 	bl	80037a6 <I2C_IsAcknowledgeFailed>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e034      	b.n	80036e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003680:	d028      	beq.n	80036d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003682:	f7fe fc65 	bl	8001f50 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	429a      	cmp	r2, r3
 8003690:	d302      	bcc.n	8003698 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d11d      	bne.n	80036d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d016      	beq.n	80036d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c0:	f043 0220 	orr.w	r2, r3, #32
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e007      	b.n	80036e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d1c3      	bne.n	800366a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036f8:	e049      	b.n	800378e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	f003 0310 	and.w	r3, r3, #16
 8003704:	2b10      	cmp	r3, #16
 8003706:	d119      	bne.n	800373c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0210 	mvn.w	r2, #16
 8003710:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e030      	b.n	800379e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800373c:	f7fe fc08 	bl	8001f50 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	429a      	cmp	r2, r3
 800374a:	d302      	bcc.n	8003752 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d11d      	bne.n	800378e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800375c:	2b40      	cmp	r3, #64	@ 0x40
 800375e:	d016      	beq.n	800378e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377a:	f043 0220 	orr.w	r2, r3, #32
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e007      	b.n	800379e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003798:	2b40      	cmp	r3, #64	@ 0x40
 800379a:	d1ae      	bne.n	80036fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037bc:	d11b      	bne.n	80037f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e2:	f043 0204 	orr.w	r2, r3, #4
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af02      	add	r7, sp, #8
 800380a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e101      	b.n	8003a1a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d106      	bne.n	8003836 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f005 fca1 	bl	8009178 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2203      	movs	r2, #3
 800383a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003844:	d102      	bne.n	800384c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f002 fbcc 	bl	8005fee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	7c1a      	ldrb	r2, [r3, #16]
 800385e:	f88d 2000 	strb.w	r2, [sp]
 8003862:	3304      	adds	r3, #4
 8003864:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003866:	f002 faab 	bl	8005dc0 <USB_CoreInit>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d005      	beq.n	800387c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0ce      	b.n	8003a1a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2100      	movs	r1, #0
 8003882:	4618      	mov	r0, r3
 8003884:	f002 fbc4 	bl	8006010 <USB_SetCurrentMode>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d005      	beq.n	800389a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2202      	movs	r2, #2
 8003892:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e0bf      	b.n	8003a1a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800389a:	2300      	movs	r3, #0
 800389c:	73fb      	strb	r3, [r7, #15]
 800389e:	e04a      	b.n	8003936 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038a0:	7bfa      	ldrb	r2, [r7, #15]
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4413      	add	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	3315      	adds	r3, #21
 80038b0:	2201      	movs	r2, #1
 80038b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038b4:	7bfa      	ldrb	r2, [r7, #15]
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	3314      	adds	r3, #20
 80038c4:	7bfa      	ldrb	r2, [r7, #15]
 80038c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038c8:	7bfa      	ldrb	r2, [r7, #15]
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
 80038cc:	b298      	uxth	r0, r3
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	332e      	adds	r3, #46	@ 0x2e
 80038dc:	4602      	mov	r2, r0
 80038de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038e0:	7bfa      	ldrb	r2, [r7, #15]
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	3318      	adds	r3, #24
 80038f0:	2200      	movs	r2, #0
 80038f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038f4:	7bfa      	ldrb	r2, [r7, #15]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4413      	add	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	331c      	adds	r3, #28
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003908:	7bfa      	ldrb	r2, [r7, #15]
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	4413      	add	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	3320      	adds	r3, #32
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800391c:	7bfa      	ldrb	r2, [r7, #15]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	3324      	adds	r3, #36	@ 0x24
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	3301      	adds	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	791b      	ldrb	r3, [r3, #4]
 800393a:	7bfa      	ldrb	r2, [r7, #15]
 800393c:	429a      	cmp	r2, r3
 800393e:	d3af      	bcc.n	80038a0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003940:	2300      	movs	r3, #0
 8003942:	73fb      	strb	r3, [r7, #15]
 8003944:	e044      	b.n	80039d0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003946:	7bfa      	ldrb	r2, [r7, #15]
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	4413      	add	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003958:	2200      	movs	r2, #0
 800395a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800395c:	7bfa      	ldrb	r2, [r7, #15]
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800396e:	7bfa      	ldrb	r2, [r7, #15]
 8003970:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003972:	7bfa      	ldrb	r2, [r7, #15]
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003984:	2200      	movs	r2, #0
 8003986:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003988:	7bfa      	ldrb	r2, [r7, #15]
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	4613      	mov	r3, r2
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4413      	add	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800399e:	7bfa      	ldrb	r2, [r7, #15]
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	4613      	mov	r3, r2
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	4413      	add	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039b4:	7bfa      	ldrb	r2, [r7, #15]
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	4413      	add	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	3301      	adds	r3, #1
 80039ce:	73fb      	strb	r3, [r7, #15]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	791b      	ldrb	r3, [r3, #4]
 80039d4:	7bfa      	ldrb	r2, [r7, #15]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d3b5      	bcc.n	8003946 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6818      	ldr	r0, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	7c1a      	ldrb	r2, [r3, #16]
 80039e2:	f88d 2000 	strb.w	r2, [sp]
 80039e6:	3304      	adds	r3, #4
 80039e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039ea:	f002 fb5d 	bl	80060a8 <USB_DevInit>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e00c      	b.n	8003a1a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f003 fba7 	bl	8007166 <USB_DevDisconnect>

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b084      	sub	sp, #16
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_PCD_Start+0x1c>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e022      	b.n	8003a84 <HAL_PCD_Start+0x62>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d009      	beq.n	8003a66 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d105      	bne.n	8003a66 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a5e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f002 faae 	bl	8005fcc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f003 fb55 	bl	8007124 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a8c:	b590      	push	{r4, r7, lr}
 8003a8e:	b08d      	sub	sp, #52	@ 0x34
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f003 fc13 	bl	80072ce <USB_GetMode>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f040 848c 	bne.w	80043c8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f003 fb77 	bl	80071a8 <USB_ReadInterrupts>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 8482 	beq.w	80043c6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	0a1b      	lsrs	r3, r3, #8
 8003acc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f003 fb64 	bl	80071a8 <USB_ReadInterrupts>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d107      	bne.n	8003afa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695a      	ldr	r2, [r3, #20]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f002 0202 	and.w	r2, r2, #2
 8003af8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f003 fb52 	bl	80071a8 <USB_ReadInterrupts>
 8003b04:	4603      	mov	r3, r0
 8003b06:	f003 0310 	and.w	r3, r3, #16
 8003b0a:	2b10      	cmp	r3, #16
 8003b0c:	d161      	bne.n	8003bd2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699a      	ldr	r2, [r3, #24]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0210 	bic.w	r2, r2, #16
 8003b1c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	f003 020f 	and.w	r2, r3, #15
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4413      	add	r3, r2
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b48:	d124      	bne.n	8003b94 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003b50:	4013      	ands	r3, r2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d035      	beq.n	8003bc2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	091b      	lsrs	r3, r3, #4
 8003b5e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	461a      	mov	r2, r3
 8003b68:	6a38      	ldr	r0, [r7, #32]
 8003b6a:	f003 f989 	bl	8006e80 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	091b      	lsrs	r3, r3, #4
 8003b76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b7a:	441a      	add	r2, r3
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	695a      	ldr	r2, [r3, #20]
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	091b      	lsrs	r3, r3, #4
 8003b88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b8c:	441a      	add	r2, r3
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	615a      	str	r2, [r3, #20]
 8003b92:	e016      	b.n	8003bc2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b9a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b9e:	d110      	bne.n	8003bc2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ba6:	2208      	movs	r2, #8
 8003ba8:	4619      	mov	r1, r3
 8003baa:	6a38      	ldr	r0, [r7, #32]
 8003bac:	f003 f968 	bl	8006e80 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	695a      	ldr	r2, [r3, #20]
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	091b      	lsrs	r3, r3, #4
 8003bb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bbc:	441a      	add	r2, r3
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699a      	ldr	r2, [r3, #24]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f042 0210 	orr.w	r2, r2, #16
 8003bd0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f003 fae6 	bl	80071a8 <USB_ReadInterrupts>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003be2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003be6:	f040 80a7 	bne.w	8003d38 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f003 faeb 	bl	80071ce <USB_ReadDevAllOutEpInterrupt>
 8003bf8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003bfa:	e099      	b.n	8003d30 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 808e 	beq.w	8003d24 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	4611      	mov	r1, r2
 8003c12:	4618      	mov	r0, r3
 8003c14:	f003 fb0f 	bl	8007236 <USB_ReadDevOutEPInterrupt>
 8003c18:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00c      	beq.n	8003c3e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c30:	461a      	mov	r2, r3
 8003c32:	2301      	movs	r3, #1
 8003c34:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003c36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fe8b 	bl	8004954 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00c      	beq.n	8003c62 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c54:	461a      	mov	r2, r3
 8003c56:	2308      	movs	r3, #8
 8003c58:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003c5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 ff61 	bl	8004b24 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c78:	461a      	mov	r2, r3
 8003c7a:	2310      	movs	r3, #16
 8003c7c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d030      	beq.n	8003cea <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c90:	2b80      	cmp	r3, #128	@ 0x80
 8003c92:	d109      	bne.n	8003ca8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	69fa      	ldr	r2, [r7, #28]
 8003c9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ca2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ca6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003ca8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003caa:	4613      	mov	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	4413      	add	r3, r2
 8003cba:	3304      	adds	r3, #4
 8003cbc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	78db      	ldrb	r3, [r3, #3]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d108      	bne.n	8003cd8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f005 fb56 	bl	8009384 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d008      	beq.n	8003d06 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d00:	461a      	mov	r2, r3
 8003d02:	2320      	movs	r3, #32
 8003d04:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d009      	beq.n	8003d24 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d22:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d26:	3301      	adds	r3, #1
 8003d28:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d2c:	085b      	lsrs	r3, r3, #1
 8003d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f47f af62 	bne.w	8003bfc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f003 fa33 	bl	80071a8 <USB_ReadInterrupts>
 8003d42:	4603      	mov	r3, r0
 8003d44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d48:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d4c:	f040 80db 	bne.w	8003f06 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f003 fa54 	bl	8007202 <USB_ReadDevAllInEpInterrupt>
 8003d5a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003d60:	e0cd      	b.n	8003efe <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 80c2 	beq.w	8003ef2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d74:	b2d2      	uxtb	r2, r2
 8003d76:	4611      	mov	r1, r2
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f003 fa7a 	bl	8007272 <USB_ReadDevInEPInterrupt>
 8003d7e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d057      	beq.n	8003e3a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8c:	f003 030f 	and.w	r3, r3, #15
 8003d90:	2201      	movs	r2, #1
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	43db      	mvns	r3, r3
 8003da4:	69f9      	ldr	r1, [r7, #28]
 8003da6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003daa:	4013      	ands	r3, r2
 8003dac:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dba:	461a      	mov	r2, r3
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	799b      	ldrb	r3, [r3, #6]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d132      	bne.n	8003e2e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dcc:	4613      	mov	r3, r2
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	3320      	adds	r3, #32
 8003dd8:	6819      	ldr	r1, [r3, #0]
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dde:	4613      	mov	r3, r2
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	4413      	add	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4403      	add	r3, r0
 8003de8:	331c      	adds	r3, #28
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4419      	add	r1, r3
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003df2:	4613      	mov	r3, r2
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	4413      	add	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4403      	add	r3, r0
 8003dfc:	3320      	adds	r3, #32
 8003dfe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d113      	bne.n	8003e2e <HAL_PCD_IRQHandler+0x3a2>
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	4413      	add	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	440b      	add	r3, r1
 8003e14:	3324      	adds	r3, #36	@ 0x24
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d108      	bne.n	8003e2e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e26:	461a      	mov	r2, r3
 8003e28:	2101      	movs	r1, #1
 8003e2a:	f003 fa81 	bl	8007330 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	4619      	mov	r1, r3
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f005 fa20 	bl	800927a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e50:	461a      	mov	r2, r3
 8003e52:	2308      	movs	r3, #8
 8003e54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d008      	beq.n	8003e72 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	2310      	movs	r3, #16
 8003e70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d008      	beq.n	8003e8e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e88:	461a      	mov	r2, r3
 8003e8a:	2340      	movs	r3, #64	@ 0x40
 8003e8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d023      	beq.n	8003ee0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003e98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e9a:	6a38      	ldr	r0, [r7, #32]
 8003e9c:	f002 fa68 	bl	8006370 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003ea0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	3310      	adds	r3, #16
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	4413      	add	r3, r2
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	78db      	ldrb	r3, [r3, #3]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d108      	bne.n	8003ece <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f005 fa6d 	bl	80093a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed0:	015a      	lsls	r2, r3, #5
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eda:	461a      	mov	r2, r3
 8003edc:	2302      	movs	r3, #2
 8003ede:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003eea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 fca5 	bl	800483c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efa:	085b      	lsrs	r3, r3, #1
 8003efc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f47f af2e 	bne.w	8003d62 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f003 f94c 	bl	80071a8 <USB_ReadInterrupts>
 8003f10:	4603      	mov	r3, r0
 8003f12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f1a:	d122      	bne.n	8003f62 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	69fa      	ldr	r2, [r7, #28]
 8003f26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f2a:	f023 0301 	bic.w	r3, r3, #1
 8003f2e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d108      	bne.n	8003f4c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f42:	2100      	movs	r1, #0
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fe8b 	bl	8004c60 <HAL_PCDEx_LPM_Callback>
 8003f4a:	e002      	b.n	8003f52 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f005 fa0b 	bl	8009368 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	695a      	ldr	r2, [r3, #20]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003f60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f003 f91e 	bl	80071a8 <USB_ReadInterrupts>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f76:	d112      	bne.n	8003f9e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d102      	bne.n	8003f8e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f005 f9c7 	bl	800931c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695a      	ldr	r2, [r3, #20]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003f9c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f003 f900 	bl	80071a8 <USB_ReadInterrupts>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fb2:	f040 80b7 	bne.w	8004124 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	69fa      	ldr	r2, [r7, #28]
 8003fc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fc4:	f023 0301 	bic.w	r3, r3, #1
 8003fc8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2110      	movs	r1, #16
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f002 f9cd 	bl	8006370 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fda:	e046      	b.n	800406a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fe8:	461a      	mov	r2, r3
 8003fea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003fee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004000:	0151      	lsls	r1, r2, #5
 8004002:	69fa      	ldr	r2, [r7, #28]
 8004004:	440a      	add	r2, r1
 8004006:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800400a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800400e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800401c:	461a      	mov	r2, r3
 800401e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004022:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004034:	0151      	lsls	r1, r2, #5
 8004036:	69fa      	ldr	r2, [r7, #28]
 8004038:	440a      	add	r2, r1
 800403a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800403e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004042:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004054:	0151      	lsls	r1, r2, #5
 8004056:	69fa      	ldr	r2, [r7, #28]
 8004058:	440a      	add	r2, r1
 800405a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800405e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004062:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004066:	3301      	adds	r3, #1
 8004068:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	791b      	ldrb	r3, [r3, #4]
 800406e:	461a      	mov	r2, r3
 8004070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004072:	4293      	cmp	r3, r2
 8004074:	d3b2      	bcc.n	8003fdc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	69fa      	ldr	r2, [r7, #28]
 8004080:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004084:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004088:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	7bdb      	ldrb	r3, [r3, #15]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d016      	beq.n	80040c0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004098:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800409c:	69fa      	ldr	r2, [r7, #28]
 800409e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040a2:	f043 030b 	orr.w	r3, r3, #11
 80040a6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b2:	69fa      	ldr	r2, [r7, #28]
 80040b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040b8:	f043 030b 	orr.w	r3, r3, #11
 80040bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80040be:	e015      	b.n	80040ec <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	69fa      	ldr	r2, [r7, #28]
 80040ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80040d2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80040d6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	69fa      	ldr	r2, [r7, #28]
 80040e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040e6:	f043 030b 	orr.w	r3, r3, #11
 80040ea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	69fa      	ldr	r2, [r7, #28]
 80040f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040fa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80040fe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6818      	ldr	r0, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800410e:	461a      	mov	r2, r3
 8004110:	f003 f90e 	bl	8007330 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695a      	ldr	r2, [r3, #20]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004122:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f003 f83d 	bl	80071a8 <USB_ReadInterrupts>
 800412e:	4603      	mov	r3, r0
 8004130:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004134:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004138:	d123      	bne.n	8004182 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f003 f8d3 	bl	80072ea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4618      	mov	r0, r3
 800414a:	f002 f98a 	bl	8006462 <USB_GetDevSpeed>
 800414e:	4603      	mov	r3, r0
 8004150:	461a      	mov	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681c      	ldr	r4, [r3, #0]
 800415a:	f001 f9f1 	bl	8005540 <HAL_RCC_GetHCLKFreq>
 800415e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004164:	461a      	mov	r2, r3
 8004166:	4620      	mov	r0, r4
 8004168:	f001 fe8e 	bl	8005e88 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f005 f8ac 	bl	80092ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695a      	ldr	r2, [r3, #20]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004180:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f003 f80e 	bl	80071a8 <USB_ReadInterrupts>
 800418c:	4603      	mov	r3, r0
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b08      	cmp	r3, #8
 8004194:	d10a      	bne.n	80041ac <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f005 f889 	bl	80092ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695a      	ldr	r2, [r3, #20]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f002 0208 	and.w	r2, r2, #8
 80041aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f002 fff9 	bl	80071a8 <USB_ReadInterrupts>
 80041b6:	4603      	mov	r3, r0
 80041b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041bc:	2b80      	cmp	r3, #128	@ 0x80
 80041be:	d123      	bne.n	8004208 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041cc:	2301      	movs	r3, #1
 80041ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80041d0:	e014      	b.n	80041fc <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041d6:	4613      	mov	r3, r2
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	4413      	add	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d105      	bne.n	80041f6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80041ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	4619      	mov	r1, r3
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 faf2 	bl	80047da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f8:	3301      	adds	r3, #1
 80041fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	791b      	ldrb	r3, [r3, #4]
 8004200:	461a      	mov	r2, r3
 8004202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004204:	4293      	cmp	r3, r2
 8004206:	d3e4      	bcc.n	80041d2 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4618      	mov	r0, r3
 800420e:	f002 ffcb 	bl	80071a8 <USB_ReadInterrupts>
 8004212:	4603      	mov	r3, r0
 8004214:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004218:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800421c:	d13c      	bne.n	8004298 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800421e:	2301      	movs	r3, #1
 8004220:	627b      	str	r3, [r7, #36]	@ 0x24
 8004222:	e02b      	b.n	800427c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004238:	4613      	mov	r3, r2
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	4413      	add	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	440b      	add	r3, r1
 8004242:	3318      	adds	r3, #24
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d115      	bne.n	8004276 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800424a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800424c:	2b00      	cmp	r3, #0
 800424e:	da12      	bge.n	8004276 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004254:	4613      	mov	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	3317      	adds	r3, #23
 8004260:	2201      	movs	r2, #1
 8004262:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004266:	b2db      	uxtb	r3, r3
 8004268:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800426c:	b2db      	uxtb	r3, r3
 800426e:	4619      	mov	r1, r3
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fab2 	bl	80047da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004278:	3301      	adds	r3, #1
 800427a:	627b      	str	r3, [r7, #36]	@ 0x24
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	791b      	ldrb	r3, [r3, #4]
 8004280:	461a      	mov	r2, r3
 8004282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004284:	4293      	cmp	r3, r2
 8004286:	d3cd      	bcc.n	8004224 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695a      	ldr	r2, [r3, #20]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004296:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4618      	mov	r0, r3
 800429e:	f002 ff83 	bl	80071a8 <USB_ReadInterrupts>
 80042a2:	4603      	mov	r3, r0
 80042a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042ac:	d156      	bne.n	800435c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042ae:	2301      	movs	r3, #1
 80042b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80042b2:	e045      	b.n	8004340 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80042b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042c8:	4613      	mov	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	4413      	add	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d12e      	bne.n	800433a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80042dc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80042de:	2b00      	cmp	r3, #0
 80042e0:	da2b      	bge.n	800433a <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	0c1a      	lsrs	r2, r3, #16
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80042ec:	4053      	eors	r3, r2
 80042ee:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d121      	bne.n	800433a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042fa:	4613      	mov	r3, r2
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004308:	2201      	movs	r2, #1
 800430a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10a      	bne.n	800433a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	69fa      	ldr	r2, [r7, #28]
 800432e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004332:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004336:	6053      	str	r3, [r2, #4]
            break;
 8004338:	e008      	b.n	800434c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800433a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433c:	3301      	adds	r3, #1
 800433e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	791b      	ldrb	r3, [r3, #4]
 8004344:	461a      	mov	r2, r3
 8004346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004348:	4293      	cmp	r3, r2
 800434a:	d3b3      	bcc.n	80042b4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695a      	ldr	r2, [r3, #20]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800435a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4618      	mov	r0, r3
 8004362:	f002 ff21 	bl	80071a8 <USB_ReadInterrupts>
 8004366:	4603      	mov	r3, r0
 8004368:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800436c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004370:	d10a      	bne.n	8004388 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f005 f82a 	bl	80093cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695a      	ldr	r2, [r3, #20]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004386:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4618      	mov	r0, r3
 800438e:	f002 ff0b 	bl	80071a8 <USB_ReadInterrupts>
 8004392:	4603      	mov	r3, r0
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b04      	cmp	r3, #4
 800439a:	d115      	bne.n	80043c8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	f003 0304 	and.w	r3, r3, #4
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f005 f81a 	bl	80093e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6859      	ldr	r1, [r3, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	605a      	str	r2, [r3, #4]
 80043c4:	e000      	b.n	80043c8 <HAL_PCD_IRQHandler+0x93c>
      return;
 80043c6:	bf00      	nop
    }
  }
}
 80043c8:	3734      	adds	r7, #52	@ 0x34
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd90      	pop	{r4, r7, pc}

080043ce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b082      	sub	sp, #8
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	460b      	mov	r3, r1
 80043d8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_PCD_SetAddress+0x1a>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e012      	b.n	800440e <HAL_PCD_SetAddress+0x40>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	78fa      	ldrb	r2, [r7, #3]
 80043f4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	78fa      	ldrb	r2, [r7, #3]
 80043fc:	4611      	mov	r1, r2
 80043fe:	4618      	mov	r0, r3
 8004400:	f002 fe6a 	bl	80070d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b084      	sub	sp, #16
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	4608      	mov	r0, r1
 8004420:	4611      	mov	r1, r2
 8004422:	461a      	mov	r2, r3
 8004424:	4603      	mov	r3, r0
 8004426:	70fb      	strb	r3, [r7, #3]
 8004428:	460b      	mov	r3, r1
 800442a:	803b      	strh	r3, [r7, #0]
 800442c:	4613      	mov	r3, r2
 800442e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004430:	2300      	movs	r3, #0
 8004432:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004434:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004438:	2b00      	cmp	r3, #0
 800443a:	da0f      	bge.n	800445c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800443c:	78fb      	ldrb	r3, [r7, #3]
 800443e:	f003 020f 	and.w	r2, r3, #15
 8004442:	4613      	mov	r3, r2
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	3310      	adds	r3, #16
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	4413      	add	r3, r2
 8004450:	3304      	adds	r3, #4
 8004452:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2201      	movs	r2, #1
 8004458:	705a      	strb	r2, [r3, #1]
 800445a:	e00f      	b.n	800447c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	f003 020f 	and.w	r2, r3, #15
 8004462:	4613      	mov	r3, r2
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	4413      	add	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	4413      	add	r3, r2
 8004472:	3304      	adds	r3, #4
 8004474:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800447c:	78fb      	ldrb	r3, [r7, #3]
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	b2da      	uxtb	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004488:	883b      	ldrh	r3, [r7, #0]
 800448a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	78ba      	ldrb	r2, [r7, #2]
 8004496:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	785b      	ldrb	r3, [r3, #1]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d004      	beq.n	80044aa <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	461a      	mov	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80044aa:	78bb      	ldrb	r3, [r7, #2]
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d102      	bne.n	80044b6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d101      	bne.n	80044c4 <HAL_PCD_EP_Open+0xae>
 80044c0:	2302      	movs	r3, #2
 80044c2:	e00e      	b.n	80044e2 <HAL_PCD_EP_Open+0xcc>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68f9      	ldr	r1, [r7, #12]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f001 ffea 	bl	80064ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80044e0:	7afb      	ldrb	r3, [r7, #11]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
 80044f2:	460b      	mov	r3, r1
 80044f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	da0f      	bge.n	800451e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044fe:	78fb      	ldrb	r3, [r7, #3]
 8004500:	f003 020f 	and.w	r2, r3, #15
 8004504:	4613      	mov	r3, r2
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	3310      	adds	r3, #16
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	4413      	add	r3, r2
 8004512:	3304      	adds	r3, #4
 8004514:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2201      	movs	r2, #1
 800451a:	705a      	strb	r2, [r3, #1]
 800451c:	e00f      	b.n	800453e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	f003 020f 	and.w	r2, r3, #15
 8004524:	4613      	mov	r3, r2
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	4413      	add	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	4413      	add	r3, r2
 8004534:	3304      	adds	r3, #4
 8004536:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800453e:	78fb      	ldrb	r3, [r7, #3]
 8004540:	f003 030f 	and.w	r3, r3, #15
 8004544:	b2da      	uxtb	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_PCD_EP_Close+0x6e>
 8004554:	2302      	movs	r3, #2
 8004556:	e00e      	b.n	8004576 <HAL_PCD_EP_Close+0x8c>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68f9      	ldr	r1, [r7, #12]
 8004566:	4618      	mov	r0, r3
 8004568:	f002 f828 	bl	80065bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b086      	sub	sp, #24
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	607a      	str	r2, [r7, #4]
 8004588:	603b      	str	r3, [r7, #0]
 800458a:	460b      	mov	r3, r1
 800458c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800458e:	7afb      	ldrb	r3, [r7, #11]
 8004590:	f003 020f 	and.w	r2, r3, #15
 8004594:	4613      	mov	r3, r2
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	4413      	add	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4413      	add	r3, r2
 80045a4:	3304      	adds	r3, #4
 80045a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2200      	movs	r2, #0
 80045b8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2200      	movs	r2, #0
 80045be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045c0:	7afb      	ldrb	r3, [r7, #11]
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	799b      	ldrb	r3, [r3, #6]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d102      	bne.n	80045da <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	799b      	ldrb	r3, [r3, #6]
 80045e2:	461a      	mov	r2, r3
 80045e4:	6979      	ldr	r1, [r7, #20]
 80045e6:	f002 f8c5 	bl	8006774 <USB_EPStartXfer>

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	607a      	str	r2, [r7, #4]
 80045fe:	603b      	str	r3, [r7, #0]
 8004600:	460b      	mov	r3, r1
 8004602:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004604:	7afb      	ldrb	r3, [r7, #11]
 8004606:	f003 020f 	and.w	r2, r3, #15
 800460a:	4613      	mov	r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	4413      	add	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	3310      	adds	r3, #16
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4413      	add	r3, r2
 8004618:	3304      	adds	r3, #4
 800461a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	2200      	movs	r2, #0
 800462c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2201      	movs	r2, #1
 8004632:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004634:	7afb      	ldrb	r3, [r7, #11]
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	b2da      	uxtb	r2, r3
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	799b      	ldrb	r3, [r3, #6]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d102      	bne.n	800464e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6818      	ldr	r0, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	799b      	ldrb	r3, [r3, #6]
 8004656:	461a      	mov	r2, r3
 8004658:	6979      	ldr	r1, [r7, #20]
 800465a:	f002 f88b 	bl	8006774 <USB_EPStartXfer>

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	460b      	mov	r3, r1
 8004672:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004674:	78fb      	ldrb	r3, [r7, #3]
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	7912      	ldrb	r2, [r2, #4]
 800467e:	4293      	cmp	r3, r2
 8004680:	d901      	bls.n	8004686 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e04f      	b.n	8004726 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004686:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800468a:	2b00      	cmp	r3, #0
 800468c:	da0f      	bge.n	80046ae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	f003 020f 	and.w	r2, r3, #15
 8004694:	4613      	mov	r3, r2
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	4413      	add	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	3310      	adds	r3, #16
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	4413      	add	r3, r2
 80046a2:	3304      	adds	r3, #4
 80046a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2201      	movs	r2, #1
 80046aa:	705a      	strb	r2, [r3, #1]
 80046ac:	e00d      	b.n	80046ca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80046ae:	78fa      	ldrb	r2, [r7, #3]
 80046b0:	4613      	mov	r3, r2
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	4413      	add	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	4413      	add	r3, r2
 80046c0:	3304      	adds	r3, #4
 80046c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046d0:	78fb      	ldrb	r3, [r7, #3]
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d101      	bne.n	80046ea <HAL_PCD_EP_SetStall+0x82>
 80046e6:	2302      	movs	r3, #2
 80046e8:	e01d      	b.n	8004726 <HAL_PCD_EP_SetStall+0xbe>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68f9      	ldr	r1, [r7, #12]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f002 fc19 	bl	8006f30 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	f003 030f 	and.w	r3, r3, #15
 8004704:	2b00      	cmp	r3, #0
 8004706:	d109      	bne.n	800471c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6818      	ldr	r0, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	7999      	ldrb	r1, [r3, #6]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004716:	461a      	mov	r2, r3
 8004718:	f002 fe0a 	bl	8007330 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b084      	sub	sp, #16
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
 8004736:	460b      	mov	r3, r1
 8004738:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800473a:	78fb      	ldrb	r3, [r7, #3]
 800473c:	f003 030f 	and.w	r3, r3, #15
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	7912      	ldrb	r2, [r2, #4]
 8004744:	4293      	cmp	r3, r2
 8004746:	d901      	bls.n	800474c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e042      	b.n	80047d2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800474c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004750:	2b00      	cmp	r3, #0
 8004752:	da0f      	bge.n	8004774 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004754:	78fb      	ldrb	r3, [r7, #3]
 8004756:	f003 020f 	and.w	r2, r3, #15
 800475a:	4613      	mov	r3, r2
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	4413      	add	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	3310      	adds	r3, #16
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	4413      	add	r3, r2
 8004768:	3304      	adds	r3, #4
 800476a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2201      	movs	r2, #1
 8004770:	705a      	strb	r2, [r3, #1]
 8004772:	e00f      	b.n	8004794 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004774:	78fb      	ldrb	r3, [r7, #3]
 8004776:	f003 020f 	and.w	r2, r3, #15
 800477a:	4613      	mov	r3, r2
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	4413      	add	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	4413      	add	r3, r2
 800478a:	3304      	adds	r3, #4
 800478c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800479a:	78fb      	ldrb	r3, [r7, #3]
 800479c:	f003 030f 	and.w	r3, r3, #15
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_PCD_EP_ClrStall+0x86>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e00e      	b.n	80047d2 <HAL_PCD_EP_ClrStall+0xa4>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68f9      	ldr	r1, [r7, #12]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f002 fc22 	bl	800700c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b084      	sub	sp, #16
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	460b      	mov	r3, r1
 80047e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80047e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	da0c      	bge.n	8004808 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047ee:	78fb      	ldrb	r3, [r7, #3]
 80047f0:	f003 020f 	and.w	r2, r3, #15
 80047f4:	4613      	mov	r3, r2
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	4413      	add	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	3310      	adds	r3, #16
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	4413      	add	r3, r2
 8004802:	3304      	adds	r3, #4
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	e00c      	b.n	8004822 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	f003 020f 	and.w	r2, r3, #15
 800480e:	4613      	mov	r3, r2
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	4413      	add	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	4413      	add	r3, r2
 800481e:	3304      	adds	r3, #4
 8004820:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68f9      	ldr	r1, [r7, #12]
 8004828:	4618      	mov	r0, r3
 800482a:	f002 fa41 	bl	8006cb0 <USB_EPStopXfer>
 800482e:	4603      	mov	r3, r0
 8004830:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004832:	7afb      	ldrb	r3, [r7, #11]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08a      	sub	sp, #40	@ 0x28
 8004840:	af02      	add	r7, sp, #8
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	4613      	mov	r3, r2
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	4413      	add	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	3310      	adds	r3, #16
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	4413      	add	r3, r2
 8004860:	3304      	adds	r3, #4
 8004862:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	695a      	ldr	r2, [r3, #20]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	429a      	cmp	r2, r3
 800486e:	d901      	bls.n	8004874 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e06b      	b.n	800494c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	69fa      	ldr	r2, [r7, #28]
 8004886:	429a      	cmp	r2, r3
 8004888:	d902      	bls.n	8004890 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	3303      	adds	r3, #3
 8004894:	089b      	lsrs	r3, r3, #2
 8004896:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004898:	e02a      	b.n	80048f0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	691a      	ldr	r2, [r3, #16]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	69fa      	ldr	r2, [r7, #28]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d902      	bls.n	80048b6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	3303      	adds	r3, #3
 80048ba:	089b      	lsrs	r3, r3, #2
 80048bc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	68d9      	ldr	r1, [r3, #12]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	4603      	mov	r3, r0
 80048d2:	6978      	ldr	r0, [r7, #20]
 80048d4:	f002 fa96 	bl	8006e04 <USB_WritePacket>

    ep->xfer_buff  += len;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	68da      	ldr	r2, [r3, #12]
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	441a      	add	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	695a      	ldr	r2, [r3, #20]
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	441a      	add	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	429a      	cmp	r2, r3
 8004904:	d809      	bhi.n	800491a <PCD_WriteEmptyTxFifo+0xde>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	695a      	ldr	r2, [r3, #20]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800490e:	429a      	cmp	r2, r3
 8004910:	d203      	bcs.n	800491a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1bf      	bne.n	800489a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	691a      	ldr	r2, [r3, #16]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	429a      	cmp	r2, r3
 8004924:	d811      	bhi.n	800494a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	f003 030f 	and.w	r3, r3, #15
 800492c:	2201      	movs	r2, #1
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800493a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	43db      	mvns	r3, r3
 8004940:	6939      	ldr	r1, [r7, #16]
 8004942:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004946:	4013      	ands	r3, r2
 8004948:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3720      	adds	r7, #32
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	333c      	adds	r3, #60	@ 0x3c
 800496c:	3304      	adds	r3, #4
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	4413      	add	r3, r2
 800497a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	799b      	ldrb	r3, [r3, #6]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d17b      	bne.n	8004a82 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	f003 0308 	and.w	r3, r3, #8
 8004990:	2b00      	cmp	r3, #0
 8004992:	d015      	beq.n	80049c0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	4a61      	ldr	r2, [pc, #388]	@ (8004b1c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	f240 80b9 	bls.w	8004b10 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 80b3 	beq.w	8004b10 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049b6:	461a      	mov	r2, r3
 80049b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049bc:	6093      	str	r3, [r2, #8]
 80049be:	e0a7      	b.n	8004b10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d009      	beq.n	80049de <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049d6:	461a      	mov	r2, r3
 80049d8:	2320      	movs	r3, #32
 80049da:	6093      	str	r3, [r2, #8]
 80049dc:	e098      	b.n	8004b10 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f040 8093 	bne.w	8004b10 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	4a4b      	ldr	r2, [pc, #300]	@ (8004b1c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d90f      	bls.n	8004a12 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00a      	beq.n	8004a12 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a08:	461a      	mov	r2, r3
 8004a0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a0e:	6093      	str	r3, [r2, #8]
 8004a10:	e07e      	b.n	8004b10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	4613      	mov	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	4413      	add	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	4413      	add	r3, r2
 8004a24:	3304      	adds	r3, #4
 8004a26:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a1a      	ldr	r2, [r3, #32]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	0159      	lsls	r1, r3, #5
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	440b      	add	r3, r1
 8004a34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a3e:	1ad2      	subs	r2, r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d114      	bne.n	8004a74 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d109      	bne.n	8004a66 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6818      	ldr	r0, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	2101      	movs	r1, #1
 8004a60:	f002 fc66 	bl	8007330 <USB_EP0_OutStart>
 8004a64:	e006      	b.n	8004a74 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	441a      	add	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	4619      	mov	r1, r3
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f004 fbe2 	bl	8009244 <HAL_PCD_DataOutStageCallback>
 8004a80:	e046      	b.n	8004b10 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	4a26      	ldr	r2, [pc, #152]	@ (8004b20 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d124      	bne.n	8004ad4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00a      	beq.n	8004aaa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aa6:	6093      	str	r3, [r2, #8]
 8004aa8:	e032      	b.n	8004b10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f003 0320 	and.w	r3, r3, #32
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d008      	beq.n	8004ac6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	2320      	movs	r3, #32
 8004ac4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	4619      	mov	r1, r3
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f004 fbb9 	bl	8009244 <HAL_PCD_DataOutStageCallback>
 8004ad2:	e01d      	b.n	8004b10 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d114      	bne.n	8004b04 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004ada:	6879      	ldr	r1, [r7, #4]
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	4413      	add	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d108      	bne.n	8004b04 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004afc:	461a      	mov	r2, r3
 8004afe:	2100      	movs	r1, #0
 8004b00:	f002 fc16 	bl	8007330 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	4619      	mov	r1, r3
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f004 fb9a 	bl	8009244 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3720      	adds	r7, #32
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	4f54300a 	.word	0x4f54300a
 8004b20:	4f54310a 	.word	0x4f54310a

08004b24 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	333c      	adds	r3, #60	@ 0x3c
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	4a15      	ldr	r2, [pc, #84]	@ (8004bac <PCD_EP_OutSetupPacket_int+0x88>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d90e      	bls.n	8004b78 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d009      	beq.n	8004b78 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b70:	461a      	mov	r2, r3
 8004b72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b76:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f004 fb51 	bl	8009220 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4a0a      	ldr	r2, [pc, #40]	@ (8004bac <PCD_EP_OutSetupPacket_int+0x88>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d90c      	bls.n	8004ba0 <PCD_EP_OutSetupPacket_int+0x7c>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	799b      	ldrb	r3, [r3, #6]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d108      	bne.n	8004ba0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6818      	ldr	r0, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b98:	461a      	mov	r2, r3
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	f002 fbc8 	bl	8007330 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3718      	adds	r7, #24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	4f54300a 	.word	0x4f54300a

08004bb0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	70fb      	strb	r3, [r7, #3]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004bc8:	78fb      	ldrb	r3, [r7, #3]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d107      	bne.n	8004bde <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004bce:	883b      	ldrh	r3, [r7, #0]
 8004bd0:	0419      	lsls	r1, r3, #16
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	629a      	str	r2, [r3, #40]	@ 0x28
 8004bdc:	e028      	b.n	8004c30 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be4:	0c1b      	lsrs	r3, r3, #16
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	4413      	add	r3, r2
 8004bea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004bec:	2300      	movs	r3, #0
 8004bee:	73fb      	strb	r3, [r7, #15]
 8004bf0:	e00d      	b.n	8004c0e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	7bfb      	ldrb	r3, [r7, #15]
 8004bf8:	3340      	adds	r3, #64	@ 0x40
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	0c1b      	lsrs	r3, r3, #16
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	4413      	add	r3, r2
 8004c06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	73fb      	strb	r3, [r7, #15]
 8004c0e:	7bfa      	ldrb	r2, [r7, #15]
 8004c10:	78fb      	ldrb	r3, [r7, #3]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d3ec      	bcc.n	8004bf2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c18:	883b      	ldrh	r3, [r7, #0]
 8004c1a:	0418      	lsls	r0, r3, #16
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6819      	ldr	r1, [r3, #0]
 8004c20:	78fb      	ldrb	r3, [r7, #3]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	4302      	orrs	r2, r0
 8004c28:	3340      	adds	r3, #64	@ 0x40
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	460b      	mov	r3, r1
 8004c48:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	887a      	ldrh	r2, [r7, #2]
 8004c50:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	460b      	mov	r3, r1
 8004c6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e267      	b.n	800515a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d075      	beq.n	8004d82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004c96:	4b88      	ldr	r3, [pc, #544]	@ (8004eb8 <HAL_RCC_OscConfig+0x240>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 030c 	and.w	r3, r3, #12
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	d00c      	beq.n	8004cbc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ca2:	4b85      	ldr	r3, [pc, #532]	@ (8004eb8 <HAL_RCC_OscConfig+0x240>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004caa:	2b08      	cmp	r3, #8
 8004cac:	d112      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cae:	4b82      	ldr	r3, [pc, #520]	@ (8004eb8 <HAL_RCC_OscConfig+0x240>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cba:	d10b      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cbc:	4b7e      	ldr	r3, [pc, #504]	@ (8004eb8 <HAL_RCC_OscConfig+0x240>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d05b      	beq.n	8004d80 <HAL_RCC_OscConfig+0x108>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d157      	bne.n	8004d80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e242      	b.n	800515a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cdc:	d106      	bne.n	8004cec <HAL_RCC_OscConfig+0x74>
 8004cde:	4b76      	ldr	r3, [pc, #472]	@ (8004eb8 <HAL_RCC_OscConfig+0x240>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a75      	ldr	r2, [pc, #468]	@ (8004eb8 <HAL_RCC_OscConfig+0x240>)
 8004ce4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	e01d      	b.n	8004d28 <HAL_RCC_OscConfig+0xb0>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cf4:	d10c      	bne.n	8004d10 <HAL_RCC_OscConfig+0x98>
 8004cf6:	4b70      	ldr	r3, [pc, #448]	@ (8004eb8 <HAL_RCC_OscConfig+0x240>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a6f      	ldr	r2, [pc, #444]	@ (8004eb8 <HAL_RCC_OscConfig+0x240>)
 8004cfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d00:	6013      	str	r3, [r2, #0]
 8004d02:	4b6d      	ldr	r3, [pc, #436]	@ (8004eb8 <HAL_RCC_OscConfig+0x240>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a6c      	ldr	r2, [pc, #432]	@ (8004eb8 <HAL_RCC_OscConfig+0x240>)
 8004d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	e00b      	b.n	8004d28 <HAL_RCC_OscConfig+0xb0>
 8004d10:	4b69      	ldr	r3, [pc, #420]	@ (8004eb8 <HAL_RCC_OscConfig+0x240>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a68      	ldr	r2, [pc, #416]	@ (8004eb8 <HAL_RCC_OscConfig+0x240>)
 8004d16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d1a:	6013      	str	r3, [r2, #0]
 8004d1c:	4b66      	ldr	r3, [pc, #408]	@ (8004eb8 <HAL_RCC_OscConfig+0x240>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a65      	ldr	r2, [pc, #404]	@ (8004eb8 <HAL_RCC_OscConfig+0x240>)
 8004d22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d013      	beq.n	8004d58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d30:	f7fd f90e 	bl	8001f50 <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d38:	f7fd f90a 	bl	8001f50 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b64      	cmp	r3, #100	@ 0x64
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e207      	b.n	800515a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4a:	4b5b      	ldr	r3, [pc, #364]	@ (8004eb8 <HAL_RCC_OscConfig+0x240>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0f0      	beq.n	8004d38 <HAL_RCC_OscConfig+0xc0>
 8004d56:	e014      	b.n	8004d82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d58:	f7fd f8fa 	bl	8001f50 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d60:	f7fd f8f6 	bl	8001f50 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b64      	cmp	r3, #100	@ 0x64
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e1f3      	b.n	800515a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d72:	4b51      	ldr	r3, [pc, #324]	@ (8004eb8 <HAL_RCC_OscConfig+0x240>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f0      	bne.n	8004d60 <HAL_RCC_OscConfig+0xe8>
 8004d7e:	e000      	b.n	8004d82 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d063      	beq.n	8004e56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004d8e:	4b4a      	ldr	r3, [pc, #296]	@ (8004eb8 <HAL_RCC_OscConfig+0x240>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 030c 	and.w	r3, r3, #12
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00b      	beq.n	8004db2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d9a:	4b47      	ldr	r3, [pc, #284]	@ (8004eb8 <HAL_RCC_OscConfig+0x240>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004da2:	2b08      	cmp	r3, #8
 8004da4:	d11c      	bne.n	8004de0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004da6:	4b44      	ldr	r3, [pc, #272]	@ (8004eb8 <HAL_RCC_OscConfig+0x240>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d116      	bne.n	8004de0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004db2:	4b41      	ldr	r3, [pc, #260]	@ (8004eb8 <HAL_RCC_OscConfig+0x240>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d005      	beq.n	8004dca <HAL_RCC_OscConfig+0x152>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d001      	beq.n	8004dca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e1c7      	b.n	800515a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dca:	4b3b      	ldr	r3, [pc, #236]	@ (8004eb8 <HAL_RCC_OscConfig+0x240>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	4937      	ldr	r1, [pc, #220]	@ (8004eb8 <HAL_RCC_OscConfig+0x240>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dde:	e03a      	b.n	8004e56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d020      	beq.n	8004e2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004de8:	4b34      	ldr	r3, [pc, #208]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dee:	f7fd f8af 	bl	8001f50 <HAL_GetTick>
 8004df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004df6:	f7fd f8ab 	bl	8001f50 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e1a8      	b.n	800515a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e08:	4b2b      	ldr	r3, [pc, #172]	@ (8004eb8 <HAL_RCC_OscConfig+0x240>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0f0      	beq.n	8004df6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e14:	4b28      	ldr	r3, [pc, #160]	@ (8004eb8 <HAL_RCC_OscConfig+0x240>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	4925      	ldr	r1, [pc, #148]	@ (8004eb8 <HAL_RCC_OscConfig+0x240>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	600b      	str	r3, [r1, #0]
 8004e28:	e015      	b.n	8004e56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e2a:	4b24      	ldr	r3, [pc, #144]	@ (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e30:	f7fd f88e 	bl	8001f50 <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e38:	f7fd f88a 	bl	8001f50 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e187      	b.n	800515a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8004eb8 <HAL_RCC_OscConfig+0x240>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f0      	bne.n	8004e38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0308 	and.w	r3, r3, #8
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d036      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d016      	beq.n	8004e98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e6a:	4b15      	ldr	r3, [pc, #84]	@ (8004ec0 <HAL_RCC_OscConfig+0x248>)
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e70:	f7fd f86e 	bl	8001f50 <HAL_GetTick>
 8004e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e78:	f7fd f86a 	bl	8001f50 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e167      	b.n	800515a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb8 <HAL_RCC_OscConfig+0x240>)
 8004e8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0f0      	beq.n	8004e78 <HAL_RCC_OscConfig+0x200>
 8004e96:	e01b      	b.n	8004ed0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e98:	4b09      	ldr	r3, [pc, #36]	@ (8004ec0 <HAL_RCC_OscConfig+0x248>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e9e:	f7fd f857 	bl	8001f50 <HAL_GetTick>
 8004ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ea4:	e00e      	b.n	8004ec4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ea6:	f7fd f853 	bl	8001f50 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d907      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e150      	b.n	800515a <HAL_RCC_OscConfig+0x4e2>
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	42470000 	.word	0x42470000
 8004ec0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ec4:	4b88      	ldr	r3, [pc, #544]	@ (80050e8 <HAL_RCC_OscConfig+0x470>)
 8004ec6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1ea      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 8097 	beq.w	800500c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ee2:	4b81      	ldr	r3, [pc, #516]	@ (80050e8 <HAL_RCC_OscConfig+0x470>)
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10f      	bne.n	8004f0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60bb      	str	r3, [r7, #8]
 8004ef2:	4b7d      	ldr	r3, [pc, #500]	@ (80050e8 <HAL_RCC_OscConfig+0x470>)
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef6:	4a7c      	ldr	r2, [pc, #496]	@ (80050e8 <HAL_RCC_OscConfig+0x470>)
 8004ef8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004efc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004efe:	4b7a      	ldr	r3, [pc, #488]	@ (80050e8 <HAL_RCC_OscConfig+0x470>)
 8004f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f06:	60bb      	str	r3, [r7, #8]
 8004f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f0e:	4b77      	ldr	r3, [pc, #476]	@ (80050ec <HAL_RCC_OscConfig+0x474>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d118      	bne.n	8004f4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f1a:	4b74      	ldr	r3, [pc, #464]	@ (80050ec <HAL_RCC_OscConfig+0x474>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a73      	ldr	r2, [pc, #460]	@ (80050ec <HAL_RCC_OscConfig+0x474>)
 8004f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f26:	f7fd f813 	bl	8001f50 <HAL_GetTick>
 8004f2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f2c:	e008      	b.n	8004f40 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f2e:	f7fd f80f 	bl	8001f50 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e10c      	b.n	800515a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f40:	4b6a      	ldr	r3, [pc, #424]	@ (80050ec <HAL_RCC_OscConfig+0x474>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0f0      	beq.n	8004f2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d106      	bne.n	8004f62 <HAL_RCC_OscConfig+0x2ea>
 8004f54:	4b64      	ldr	r3, [pc, #400]	@ (80050e8 <HAL_RCC_OscConfig+0x470>)
 8004f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f58:	4a63      	ldr	r2, [pc, #396]	@ (80050e8 <HAL_RCC_OscConfig+0x470>)
 8004f5a:	f043 0301 	orr.w	r3, r3, #1
 8004f5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f60:	e01c      	b.n	8004f9c <HAL_RCC_OscConfig+0x324>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	2b05      	cmp	r3, #5
 8004f68:	d10c      	bne.n	8004f84 <HAL_RCC_OscConfig+0x30c>
 8004f6a:	4b5f      	ldr	r3, [pc, #380]	@ (80050e8 <HAL_RCC_OscConfig+0x470>)
 8004f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f6e:	4a5e      	ldr	r2, [pc, #376]	@ (80050e8 <HAL_RCC_OscConfig+0x470>)
 8004f70:	f043 0304 	orr.w	r3, r3, #4
 8004f74:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f76:	4b5c      	ldr	r3, [pc, #368]	@ (80050e8 <HAL_RCC_OscConfig+0x470>)
 8004f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7a:	4a5b      	ldr	r2, [pc, #364]	@ (80050e8 <HAL_RCC_OscConfig+0x470>)
 8004f7c:	f043 0301 	orr.w	r3, r3, #1
 8004f80:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f82:	e00b      	b.n	8004f9c <HAL_RCC_OscConfig+0x324>
 8004f84:	4b58      	ldr	r3, [pc, #352]	@ (80050e8 <HAL_RCC_OscConfig+0x470>)
 8004f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f88:	4a57      	ldr	r2, [pc, #348]	@ (80050e8 <HAL_RCC_OscConfig+0x470>)
 8004f8a:	f023 0301 	bic.w	r3, r3, #1
 8004f8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f90:	4b55      	ldr	r3, [pc, #340]	@ (80050e8 <HAL_RCC_OscConfig+0x470>)
 8004f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f94:	4a54      	ldr	r2, [pc, #336]	@ (80050e8 <HAL_RCC_OscConfig+0x470>)
 8004f96:	f023 0304 	bic.w	r3, r3, #4
 8004f9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d015      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa4:	f7fc ffd4 	bl	8001f50 <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004faa:	e00a      	b.n	8004fc2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fac:	f7fc ffd0 	bl	8001f50 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e0cb      	b.n	800515a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc2:	4b49      	ldr	r3, [pc, #292]	@ (80050e8 <HAL_RCC_OscConfig+0x470>)
 8004fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0ee      	beq.n	8004fac <HAL_RCC_OscConfig+0x334>
 8004fce:	e014      	b.n	8004ffa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fd0:	f7fc ffbe 	bl	8001f50 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fd6:	e00a      	b.n	8004fee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fd8:	f7fc ffba 	bl	8001f50 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e0b5      	b.n	800515a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fee:	4b3e      	ldr	r3, [pc, #248]	@ (80050e8 <HAL_RCC_OscConfig+0x470>)
 8004ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1ee      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ffa:	7dfb      	ldrb	r3, [r7, #23]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d105      	bne.n	800500c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005000:	4b39      	ldr	r3, [pc, #228]	@ (80050e8 <HAL_RCC_OscConfig+0x470>)
 8005002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005004:	4a38      	ldr	r2, [pc, #224]	@ (80050e8 <HAL_RCC_OscConfig+0x470>)
 8005006:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800500a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 80a1 	beq.w	8005158 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005016:	4b34      	ldr	r3, [pc, #208]	@ (80050e8 <HAL_RCC_OscConfig+0x470>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 030c 	and.w	r3, r3, #12
 800501e:	2b08      	cmp	r3, #8
 8005020:	d05c      	beq.n	80050dc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	2b02      	cmp	r3, #2
 8005028:	d141      	bne.n	80050ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800502a:	4b31      	ldr	r3, [pc, #196]	@ (80050f0 <HAL_RCC_OscConfig+0x478>)
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005030:	f7fc ff8e 	bl	8001f50 <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005038:	f7fc ff8a 	bl	8001f50 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e087      	b.n	800515a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504a:	4b27      	ldr	r3, [pc, #156]	@ (80050e8 <HAL_RCC_OscConfig+0x470>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1f0      	bne.n	8005038 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69da      	ldr	r2, [r3, #28]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005064:	019b      	lsls	r3, r3, #6
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800506c:	085b      	lsrs	r3, r3, #1
 800506e:	3b01      	subs	r3, #1
 8005070:	041b      	lsls	r3, r3, #16
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005078:	061b      	lsls	r3, r3, #24
 800507a:	491b      	ldr	r1, [pc, #108]	@ (80050e8 <HAL_RCC_OscConfig+0x470>)
 800507c:	4313      	orrs	r3, r2
 800507e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005080:	4b1b      	ldr	r3, [pc, #108]	@ (80050f0 <HAL_RCC_OscConfig+0x478>)
 8005082:	2201      	movs	r2, #1
 8005084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005086:	f7fc ff63 	bl	8001f50 <HAL_GetTick>
 800508a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800508c:	e008      	b.n	80050a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800508e:	f7fc ff5f 	bl	8001f50 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d901      	bls.n	80050a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e05c      	b.n	800515a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a0:	4b11      	ldr	r3, [pc, #68]	@ (80050e8 <HAL_RCC_OscConfig+0x470>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0f0      	beq.n	800508e <HAL_RCC_OscConfig+0x416>
 80050ac:	e054      	b.n	8005158 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ae:	4b10      	ldr	r3, [pc, #64]	@ (80050f0 <HAL_RCC_OscConfig+0x478>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b4:	f7fc ff4c 	bl	8001f50 <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050bc:	f7fc ff48 	bl	8001f50 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e045      	b.n	800515a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ce:	4b06      	ldr	r3, [pc, #24]	@ (80050e8 <HAL_RCC_OscConfig+0x470>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1f0      	bne.n	80050bc <HAL_RCC_OscConfig+0x444>
 80050da:	e03d      	b.n	8005158 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d107      	bne.n	80050f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e038      	b.n	800515a <HAL_RCC_OscConfig+0x4e2>
 80050e8:	40023800 	.word	0x40023800
 80050ec:	40007000 	.word	0x40007000
 80050f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005164 <HAL_RCC_OscConfig+0x4ec>)
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d028      	beq.n	8005154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800510c:	429a      	cmp	r2, r3
 800510e:	d121      	bne.n	8005154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800511a:	429a      	cmp	r2, r3
 800511c:	d11a      	bne.n	8005154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005124:	4013      	ands	r3, r2
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800512a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800512c:	4293      	cmp	r3, r2
 800512e:	d111      	bne.n	8005154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800513a:	085b      	lsrs	r3, r3, #1
 800513c:	3b01      	subs	r3, #1
 800513e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005140:	429a      	cmp	r2, r3
 8005142:	d107      	bne.n	8005154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005150:	429a      	cmp	r2, r3
 8005152:	d001      	beq.n	8005158 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e000      	b.n	800515a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	40023800 	.word	0x40023800

08005168 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e0cc      	b.n	8005316 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800517c:	4b68      	ldr	r3, [pc, #416]	@ (8005320 <HAL_RCC_ClockConfig+0x1b8>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 030f 	and.w	r3, r3, #15
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d90c      	bls.n	80051a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800518a:	4b65      	ldr	r3, [pc, #404]	@ (8005320 <HAL_RCC_ClockConfig+0x1b8>)
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005192:	4b63      	ldr	r3, [pc, #396]	@ (8005320 <HAL_RCC_ClockConfig+0x1b8>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	429a      	cmp	r2, r3
 800519e:	d001      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e0b8      	b.n	8005316 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d020      	beq.n	80051f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0304 	and.w	r3, r3, #4
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d005      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051bc:	4b59      	ldr	r3, [pc, #356]	@ (8005324 <HAL_RCC_ClockConfig+0x1bc>)
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	4a58      	ldr	r2, [pc, #352]	@ (8005324 <HAL_RCC_ClockConfig+0x1bc>)
 80051c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80051c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0308 	and.w	r3, r3, #8
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d005      	beq.n	80051e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051d4:	4b53      	ldr	r3, [pc, #332]	@ (8005324 <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	4a52      	ldr	r2, [pc, #328]	@ (8005324 <HAL_RCC_ClockConfig+0x1bc>)
 80051da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80051de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051e0:	4b50      	ldr	r3, [pc, #320]	@ (8005324 <HAL_RCC_ClockConfig+0x1bc>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	494d      	ldr	r1, [pc, #308]	@ (8005324 <HAL_RCC_ClockConfig+0x1bc>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d044      	beq.n	8005288 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d107      	bne.n	8005216 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005206:	4b47      	ldr	r3, [pc, #284]	@ (8005324 <HAL_RCC_ClockConfig+0x1bc>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d119      	bne.n	8005246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e07f      	b.n	8005316 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2b02      	cmp	r3, #2
 800521c:	d003      	beq.n	8005226 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005222:	2b03      	cmp	r3, #3
 8005224:	d107      	bne.n	8005236 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005226:	4b3f      	ldr	r3, [pc, #252]	@ (8005324 <HAL_RCC_ClockConfig+0x1bc>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d109      	bne.n	8005246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e06f      	b.n	8005316 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005236:	4b3b      	ldr	r3, [pc, #236]	@ (8005324 <HAL_RCC_ClockConfig+0x1bc>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e067      	b.n	8005316 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005246:	4b37      	ldr	r3, [pc, #220]	@ (8005324 <HAL_RCC_ClockConfig+0x1bc>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f023 0203 	bic.w	r2, r3, #3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	4934      	ldr	r1, [pc, #208]	@ (8005324 <HAL_RCC_ClockConfig+0x1bc>)
 8005254:	4313      	orrs	r3, r2
 8005256:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005258:	f7fc fe7a 	bl	8001f50 <HAL_GetTick>
 800525c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800525e:	e00a      	b.n	8005276 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005260:	f7fc fe76 	bl	8001f50 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800526e:	4293      	cmp	r3, r2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e04f      	b.n	8005316 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005276:	4b2b      	ldr	r3, [pc, #172]	@ (8005324 <HAL_RCC_ClockConfig+0x1bc>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f003 020c 	and.w	r2, r3, #12
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	429a      	cmp	r2, r3
 8005286:	d1eb      	bne.n	8005260 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005288:	4b25      	ldr	r3, [pc, #148]	@ (8005320 <HAL_RCC_ClockConfig+0x1b8>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 030f 	and.w	r3, r3, #15
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	429a      	cmp	r2, r3
 8005294:	d20c      	bcs.n	80052b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005296:	4b22      	ldr	r3, [pc, #136]	@ (8005320 <HAL_RCC_ClockConfig+0x1b8>)
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	b2d2      	uxtb	r2, r2
 800529c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800529e:	4b20      	ldr	r3, [pc, #128]	@ (8005320 <HAL_RCC_ClockConfig+0x1b8>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 030f 	and.w	r3, r3, #15
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d001      	beq.n	80052b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e032      	b.n	8005316 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0304 	and.w	r3, r3, #4
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d008      	beq.n	80052ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052bc:	4b19      	ldr	r3, [pc, #100]	@ (8005324 <HAL_RCC_ClockConfig+0x1bc>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	4916      	ldr	r1, [pc, #88]	@ (8005324 <HAL_RCC_ClockConfig+0x1bc>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0308 	and.w	r3, r3, #8
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d009      	beq.n	80052ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052da:	4b12      	ldr	r3, [pc, #72]	@ (8005324 <HAL_RCC_ClockConfig+0x1bc>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	490e      	ldr	r1, [pc, #56]	@ (8005324 <HAL_RCC_ClockConfig+0x1bc>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052ee:	f000 f821 	bl	8005334 <HAL_RCC_GetSysClockFreq>
 80052f2:	4602      	mov	r2, r0
 80052f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005324 <HAL_RCC_ClockConfig+0x1bc>)
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	091b      	lsrs	r3, r3, #4
 80052fa:	f003 030f 	and.w	r3, r3, #15
 80052fe:	490a      	ldr	r1, [pc, #40]	@ (8005328 <HAL_RCC_ClockConfig+0x1c0>)
 8005300:	5ccb      	ldrb	r3, [r1, r3]
 8005302:	fa22 f303 	lsr.w	r3, r2, r3
 8005306:	4a09      	ldr	r2, [pc, #36]	@ (800532c <HAL_RCC_ClockConfig+0x1c4>)
 8005308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800530a:	4b09      	ldr	r3, [pc, #36]	@ (8005330 <HAL_RCC_ClockConfig+0x1c8>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4618      	mov	r0, r3
 8005310:	f7fc fdda 	bl	8001ec8 <HAL_InitTick>

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	40023c00 	.word	0x40023c00
 8005324:	40023800 	.word	0x40023800
 8005328:	0800a8d0 	.word	0x0800a8d0
 800532c:	20000090 	.word	0x20000090
 8005330:	20000094 	.word	0x20000094

08005334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005338:	b094      	sub	sp, #80	@ 0x50
 800533a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800534c:	4b79      	ldr	r3, [pc, #484]	@ (8005534 <HAL_RCC_GetSysClockFreq+0x200>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f003 030c 	and.w	r3, r3, #12
 8005354:	2b08      	cmp	r3, #8
 8005356:	d00d      	beq.n	8005374 <HAL_RCC_GetSysClockFreq+0x40>
 8005358:	2b08      	cmp	r3, #8
 800535a:	f200 80e1 	bhi.w	8005520 <HAL_RCC_GetSysClockFreq+0x1ec>
 800535e:	2b00      	cmp	r3, #0
 8005360:	d002      	beq.n	8005368 <HAL_RCC_GetSysClockFreq+0x34>
 8005362:	2b04      	cmp	r3, #4
 8005364:	d003      	beq.n	800536e <HAL_RCC_GetSysClockFreq+0x3a>
 8005366:	e0db      	b.n	8005520 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005368:	4b73      	ldr	r3, [pc, #460]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x204>)
 800536a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800536c:	e0db      	b.n	8005526 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800536e:	4b73      	ldr	r3, [pc, #460]	@ (800553c <HAL_RCC_GetSysClockFreq+0x208>)
 8005370:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005372:	e0d8      	b.n	8005526 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005374:	4b6f      	ldr	r3, [pc, #444]	@ (8005534 <HAL_RCC_GetSysClockFreq+0x200>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800537c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800537e:	4b6d      	ldr	r3, [pc, #436]	@ (8005534 <HAL_RCC_GetSysClockFreq+0x200>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d063      	beq.n	8005452 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800538a:	4b6a      	ldr	r3, [pc, #424]	@ (8005534 <HAL_RCC_GetSysClockFreq+0x200>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	099b      	lsrs	r3, r3, #6
 8005390:	2200      	movs	r2, #0
 8005392:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005394:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800539c:	633b      	str	r3, [r7, #48]	@ 0x30
 800539e:	2300      	movs	r3, #0
 80053a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80053a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80053a6:	4622      	mov	r2, r4
 80053a8:	462b      	mov	r3, r5
 80053aa:	f04f 0000 	mov.w	r0, #0
 80053ae:	f04f 0100 	mov.w	r1, #0
 80053b2:	0159      	lsls	r1, r3, #5
 80053b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053b8:	0150      	lsls	r0, r2, #5
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	4621      	mov	r1, r4
 80053c0:	1a51      	subs	r1, r2, r1
 80053c2:	6139      	str	r1, [r7, #16]
 80053c4:	4629      	mov	r1, r5
 80053c6:	eb63 0301 	sbc.w	r3, r3, r1
 80053ca:	617b      	str	r3, [r7, #20]
 80053cc:	f04f 0200 	mov.w	r2, #0
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053d8:	4659      	mov	r1, fp
 80053da:	018b      	lsls	r3, r1, #6
 80053dc:	4651      	mov	r1, sl
 80053de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053e2:	4651      	mov	r1, sl
 80053e4:	018a      	lsls	r2, r1, #6
 80053e6:	4651      	mov	r1, sl
 80053e8:	ebb2 0801 	subs.w	r8, r2, r1
 80053ec:	4659      	mov	r1, fp
 80053ee:	eb63 0901 	sbc.w	r9, r3, r1
 80053f2:	f04f 0200 	mov.w	r2, #0
 80053f6:	f04f 0300 	mov.w	r3, #0
 80053fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005402:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005406:	4690      	mov	r8, r2
 8005408:	4699      	mov	r9, r3
 800540a:	4623      	mov	r3, r4
 800540c:	eb18 0303 	adds.w	r3, r8, r3
 8005410:	60bb      	str	r3, [r7, #8]
 8005412:	462b      	mov	r3, r5
 8005414:	eb49 0303 	adc.w	r3, r9, r3
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	f04f 0200 	mov.w	r2, #0
 800541e:	f04f 0300 	mov.w	r3, #0
 8005422:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005426:	4629      	mov	r1, r5
 8005428:	024b      	lsls	r3, r1, #9
 800542a:	4621      	mov	r1, r4
 800542c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005430:	4621      	mov	r1, r4
 8005432:	024a      	lsls	r2, r1, #9
 8005434:	4610      	mov	r0, r2
 8005436:	4619      	mov	r1, r3
 8005438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800543a:	2200      	movs	r2, #0
 800543c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800543e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005440:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005444:	f7fb fbc0 	bl	8000bc8 <__aeabi_uldivmod>
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	4613      	mov	r3, r2
 800544e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005450:	e058      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005452:	4b38      	ldr	r3, [pc, #224]	@ (8005534 <HAL_RCC_GetSysClockFreq+0x200>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	099b      	lsrs	r3, r3, #6
 8005458:	2200      	movs	r2, #0
 800545a:	4618      	mov	r0, r3
 800545c:	4611      	mov	r1, r2
 800545e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005462:	623b      	str	r3, [r7, #32]
 8005464:	2300      	movs	r3, #0
 8005466:	627b      	str	r3, [r7, #36]	@ 0x24
 8005468:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800546c:	4642      	mov	r2, r8
 800546e:	464b      	mov	r3, r9
 8005470:	f04f 0000 	mov.w	r0, #0
 8005474:	f04f 0100 	mov.w	r1, #0
 8005478:	0159      	lsls	r1, r3, #5
 800547a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800547e:	0150      	lsls	r0, r2, #5
 8005480:	4602      	mov	r2, r0
 8005482:	460b      	mov	r3, r1
 8005484:	4641      	mov	r1, r8
 8005486:	ebb2 0a01 	subs.w	sl, r2, r1
 800548a:	4649      	mov	r1, r9
 800548c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005490:	f04f 0200 	mov.w	r2, #0
 8005494:	f04f 0300 	mov.w	r3, #0
 8005498:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800549c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80054a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80054a4:	ebb2 040a 	subs.w	r4, r2, sl
 80054a8:	eb63 050b 	sbc.w	r5, r3, fp
 80054ac:	f04f 0200 	mov.w	r2, #0
 80054b0:	f04f 0300 	mov.w	r3, #0
 80054b4:	00eb      	lsls	r3, r5, #3
 80054b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054ba:	00e2      	lsls	r2, r4, #3
 80054bc:	4614      	mov	r4, r2
 80054be:	461d      	mov	r5, r3
 80054c0:	4643      	mov	r3, r8
 80054c2:	18e3      	adds	r3, r4, r3
 80054c4:	603b      	str	r3, [r7, #0]
 80054c6:	464b      	mov	r3, r9
 80054c8:	eb45 0303 	adc.w	r3, r5, r3
 80054cc:	607b      	str	r3, [r7, #4]
 80054ce:	f04f 0200 	mov.w	r2, #0
 80054d2:	f04f 0300 	mov.w	r3, #0
 80054d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054da:	4629      	mov	r1, r5
 80054dc:	028b      	lsls	r3, r1, #10
 80054de:	4621      	mov	r1, r4
 80054e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054e4:	4621      	mov	r1, r4
 80054e6:	028a      	lsls	r2, r1, #10
 80054e8:	4610      	mov	r0, r2
 80054ea:	4619      	mov	r1, r3
 80054ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054ee:	2200      	movs	r2, #0
 80054f0:	61bb      	str	r3, [r7, #24]
 80054f2:	61fa      	str	r2, [r7, #28]
 80054f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054f8:	f7fb fb66 	bl	8000bc8 <__aeabi_uldivmod>
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	4613      	mov	r3, r2
 8005502:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005504:	4b0b      	ldr	r3, [pc, #44]	@ (8005534 <HAL_RCC_GetSysClockFreq+0x200>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	0c1b      	lsrs	r3, r3, #16
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	3301      	adds	r3, #1
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005514:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005518:	fbb2 f3f3 	udiv	r3, r2, r3
 800551c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800551e:	e002      	b.n	8005526 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005520:	4b05      	ldr	r3, [pc, #20]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x204>)
 8005522:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005524:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005528:	4618      	mov	r0, r3
 800552a:	3750      	adds	r7, #80	@ 0x50
 800552c:	46bd      	mov	sp, r7
 800552e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005532:	bf00      	nop
 8005534:	40023800 	.word	0x40023800
 8005538:	00f42400 	.word	0x00f42400
 800553c:	007a1200 	.word	0x007a1200

08005540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005540:	b480      	push	{r7}
 8005542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005544:	4b03      	ldr	r3, [pc, #12]	@ (8005554 <HAL_RCC_GetHCLKFreq+0x14>)
 8005546:	681b      	ldr	r3, [r3, #0]
}
 8005548:	4618      	mov	r0, r3
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	20000090 	.word	0x20000090

08005558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800555c:	f7ff fff0 	bl	8005540 <HAL_RCC_GetHCLKFreq>
 8005560:	4602      	mov	r2, r0
 8005562:	4b05      	ldr	r3, [pc, #20]	@ (8005578 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	0a9b      	lsrs	r3, r3, #10
 8005568:	f003 0307 	and.w	r3, r3, #7
 800556c:	4903      	ldr	r1, [pc, #12]	@ (800557c <HAL_RCC_GetPCLK1Freq+0x24>)
 800556e:	5ccb      	ldrb	r3, [r1, r3]
 8005570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005574:	4618      	mov	r0, r3
 8005576:	bd80      	pop	{r7, pc}
 8005578:	40023800 	.word	0x40023800
 800557c:	0800a8e0 	.word	0x0800a8e0

08005580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005584:	f7ff ffdc 	bl	8005540 <HAL_RCC_GetHCLKFreq>
 8005588:	4602      	mov	r2, r0
 800558a:	4b05      	ldr	r3, [pc, #20]	@ (80055a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	0b5b      	lsrs	r3, r3, #13
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	4903      	ldr	r1, [pc, #12]	@ (80055a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005596:	5ccb      	ldrb	r3, [r1, r3]
 8005598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800559c:	4618      	mov	r0, r3
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	40023800 	.word	0x40023800
 80055a4:	0800a8e0 	.word	0x0800a8e0

080055a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e042      	b.n	8005640 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d106      	bne.n	80055d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7fc fb64 	bl	8001c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2224      	movs	r2, #36	@ 0x24
 80055d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68da      	ldr	r2, [r3, #12]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f973 	bl	80058d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	691a      	ldr	r2, [r3, #16]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005600:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	695a      	ldr	r2, [r3, #20]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005610:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68da      	ldr	r2, [r3, #12]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005620:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2220      	movs	r2, #32
 8005634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b08a      	sub	sp, #40	@ 0x28
 800564c:	af02      	add	r7, sp, #8
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	603b      	str	r3, [r7, #0]
 8005654:	4613      	mov	r3, r2
 8005656:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b20      	cmp	r3, #32
 8005666:	d175      	bne.n	8005754 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d002      	beq.n	8005674 <HAL_UART_Transmit+0x2c>
 800566e:	88fb      	ldrh	r3, [r7, #6]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e06e      	b.n	8005756 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2221      	movs	r2, #33	@ 0x21
 8005682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005686:	f7fc fc63 	bl	8001f50 <HAL_GetTick>
 800568a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	88fa      	ldrh	r2, [r7, #6]
 8005690:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	88fa      	ldrh	r2, [r7, #6]
 8005696:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056a0:	d108      	bne.n	80056b4 <HAL_UART_Transmit+0x6c>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d104      	bne.n	80056b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80056aa:	2300      	movs	r3, #0
 80056ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	61bb      	str	r3, [r7, #24]
 80056b2:	e003      	b.n	80056bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056b8:	2300      	movs	r3, #0
 80056ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056bc:	e02e      	b.n	800571c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2200      	movs	r2, #0
 80056c6:	2180      	movs	r1, #128	@ 0x80
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 f848 	bl	800575e <UART_WaitOnFlagUntilTimeout>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d005      	beq.n	80056e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e03a      	b.n	8005756 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10b      	bne.n	80056fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	3302      	adds	r3, #2
 80056fa:	61bb      	str	r3, [r7, #24]
 80056fc:	e007      	b.n	800570e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	781a      	ldrb	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	3301      	adds	r3, #1
 800570c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005712:	b29b      	uxth	r3, r3
 8005714:	3b01      	subs	r3, #1
 8005716:	b29a      	uxth	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005720:	b29b      	uxth	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1cb      	bne.n	80056be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2200      	movs	r2, #0
 800572e:	2140      	movs	r1, #64	@ 0x40
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 f814 	bl	800575e <UART_WaitOnFlagUntilTimeout>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d005      	beq.n	8005748 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2220      	movs	r2, #32
 8005740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e006      	b.n	8005756 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2220      	movs	r2, #32
 800574c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005750:	2300      	movs	r3, #0
 8005752:	e000      	b.n	8005756 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005754:	2302      	movs	r3, #2
  }
}
 8005756:	4618      	mov	r0, r3
 8005758:	3720      	adds	r7, #32
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b086      	sub	sp, #24
 8005762:	af00      	add	r7, sp, #0
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	603b      	str	r3, [r7, #0]
 800576a:	4613      	mov	r3, r2
 800576c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800576e:	e03b      	b.n	80057e8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005776:	d037      	beq.n	80057e8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005778:	f7fc fbea 	bl	8001f50 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	6a3a      	ldr	r2, [r7, #32]
 8005784:	429a      	cmp	r2, r3
 8005786:	d302      	bcc.n	800578e <UART_WaitOnFlagUntilTimeout+0x30>
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e03a      	b.n	8005808 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d023      	beq.n	80057e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	2b80      	cmp	r3, #128	@ 0x80
 80057a4:	d020      	beq.n	80057e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2b40      	cmp	r3, #64	@ 0x40
 80057aa:	d01d      	beq.n	80057e8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0308 	and.w	r3, r3, #8
 80057b6:	2b08      	cmp	r3, #8
 80057b8:	d116      	bne.n	80057e8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80057ba:	2300      	movs	r3, #0
 80057bc:	617b      	str	r3, [r7, #20]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 f81d 	bl	8005810 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2208      	movs	r2, #8
 80057da:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e00f      	b.n	8005808 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	4013      	ands	r3, r2
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	bf0c      	ite	eq
 80057f8:	2301      	moveq	r3, #1
 80057fa:	2300      	movne	r3, #0
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	461a      	mov	r2, r3
 8005800:	79fb      	ldrb	r3, [r7, #7]
 8005802:	429a      	cmp	r2, r3
 8005804:	d0b4      	beq.n	8005770 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3718      	adds	r7, #24
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005810:	b480      	push	{r7}
 8005812:	b095      	sub	sp, #84	@ 0x54
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	330c      	adds	r3, #12
 800581e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005822:	e853 3f00 	ldrex	r3, [r3]
 8005826:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800582e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	330c      	adds	r3, #12
 8005836:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005838:	643a      	str	r2, [r7, #64]	@ 0x40
 800583a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800583e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005840:	e841 2300 	strex	r3, r2, [r1]
 8005844:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1e5      	bne.n	8005818 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3314      	adds	r3, #20
 8005852:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	e853 3f00 	ldrex	r3, [r3]
 800585a:	61fb      	str	r3, [r7, #28]
   return(result);
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	f023 0301 	bic.w	r3, r3, #1
 8005862:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3314      	adds	r3, #20
 800586a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800586c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800586e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005870:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005872:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005874:	e841 2300 	strex	r3, r2, [r1]
 8005878:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800587a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1e5      	bne.n	800584c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005884:	2b01      	cmp	r3, #1
 8005886:	d119      	bne.n	80058bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	330c      	adds	r3, #12
 800588e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	e853 3f00 	ldrex	r3, [r3]
 8005896:	60bb      	str	r3, [r7, #8]
   return(result);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f023 0310 	bic.w	r3, r3, #16
 800589e:	647b      	str	r3, [r7, #68]	@ 0x44
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	330c      	adds	r3, #12
 80058a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058a8:	61ba      	str	r2, [r7, #24]
 80058aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ac:	6979      	ldr	r1, [r7, #20]
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	e841 2300 	strex	r3, r2, [r1]
 80058b4:	613b      	str	r3, [r7, #16]
   return(result);
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1e5      	bne.n	8005888 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80058ca:	bf00      	nop
 80058cc:	3754      	adds	r7, #84	@ 0x54
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
	...

080058d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058dc:	b0c0      	sub	sp, #256	@ 0x100
 80058de:	af00      	add	r7, sp, #0
 80058e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80058f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f4:	68d9      	ldr	r1, [r3, #12]
 80058f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	ea40 0301 	orr.w	r3, r0, r1
 8005900:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	431a      	orrs	r2, r3
 8005910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	431a      	orrs	r2, r3
 8005918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	4313      	orrs	r3, r2
 8005920:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005930:	f021 010c 	bic.w	r1, r1, #12
 8005934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800593e:	430b      	orrs	r3, r1
 8005940:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800594e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005952:	6999      	ldr	r1, [r3, #24]
 8005954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	ea40 0301 	orr.w	r3, r0, r1
 800595e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	4b8f      	ldr	r3, [pc, #572]	@ (8005ba4 <UART_SetConfig+0x2cc>)
 8005968:	429a      	cmp	r2, r3
 800596a:	d005      	beq.n	8005978 <UART_SetConfig+0xa0>
 800596c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	4b8d      	ldr	r3, [pc, #564]	@ (8005ba8 <UART_SetConfig+0x2d0>)
 8005974:	429a      	cmp	r2, r3
 8005976:	d104      	bne.n	8005982 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005978:	f7ff fe02 	bl	8005580 <HAL_RCC_GetPCLK2Freq>
 800597c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005980:	e003      	b.n	800598a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005982:	f7ff fde9 	bl	8005558 <HAL_RCC_GetPCLK1Freq>
 8005986:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800598a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005994:	f040 810c 	bne.w	8005bb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005998:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800599c:	2200      	movs	r2, #0
 800599e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80059a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80059a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80059aa:	4622      	mov	r2, r4
 80059ac:	462b      	mov	r3, r5
 80059ae:	1891      	adds	r1, r2, r2
 80059b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80059b2:	415b      	adcs	r3, r3
 80059b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80059ba:	4621      	mov	r1, r4
 80059bc:	eb12 0801 	adds.w	r8, r2, r1
 80059c0:	4629      	mov	r1, r5
 80059c2:	eb43 0901 	adc.w	r9, r3, r1
 80059c6:	f04f 0200 	mov.w	r2, #0
 80059ca:	f04f 0300 	mov.w	r3, #0
 80059ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059da:	4690      	mov	r8, r2
 80059dc:	4699      	mov	r9, r3
 80059de:	4623      	mov	r3, r4
 80059e0:	eb18 0303 	adds.w	r3, r8, r3
 80059e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80059e8:	462b      	mov	r3, r5
 80059ea:	eb49 0303 	adc.w	r3, r9, r3
 80059ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80059f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80059fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005a02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a06:	460b      	mov	r3, r1
 8005a08:	18db      	adds	r3, r3, r3
 8005a0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	eb42 0303 	adc.w	r3, r2, r3
 8005a12:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005a1c:	f7fb f8d4 	bl	8000bc8 <__aeabi_uldivmod>
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	4b61      	ldr	r3, [pc, #388]	@ (8005bac <UART_SetConfig+0x2d4>)
 8005a26:	fba3 2302 	umull	r2, r3, r3, r2
 8005a2a:	095b      	lsrs	r3, r3, #5
 8005a2c:	011c      	lsls	r4, r3, #4
 8005a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a32:	2200      	movs	r2, #0
 8005a34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a38:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a40:	4642      	mov	r2, r8
 8005a42:	464b      	mov	r3, r9
 8005a44:	1891      	adds	r1, r2, r2
 8005a46:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a48:	415b      	adcs	r3, r3
 8005a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a50:	4641      	mov	r1, r8
 8005a52:	eb12 0a01 	adds.w	sl, r2, r1
 8005a56:	4649      	mov	r1, r9
 8005a58:	eb43 0b01 	adc.w	fp, r3, r1
 8005a5c:	f04f 0200 	mov.w	r2, #0
 8005a60:	f04f 0300 	mov.w	r3, #0
 8005a64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a70:	4692      	mov	sl, r2
 8005a72:	469b      	mov	fp, r3
 8005a74:	4643      	mov	r3, r8
 8005a76:	eb1a 0303 	adds.w	r3, sl, r3
 8005a7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a7e:	464b      	mov	r3, r9
 8005a80:	eb4b 0303 	adc.w	r3, fp, r3
 8005a84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a94:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	18db      	adds	r3, r3, r3
 8005aa0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	eb42 0303 	adc.w	r3, r2, r3
 8005aa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005aaa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005aae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005ab2:	f7fb f889 	bl	8000bc8 <__aeabi_uldivmod>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4611      	mov	r1, r2
 8005abc:	4b3b      	ldr	r3, [pc, #236]	@ (8005bac <UART_SetConfig+0x2d4>)
 8005abe:	fba3 2301 	umull	r2, r3, r3, r1
 8005ac2:	095b      	lsrs	r3, r3, #5
 8005ac4:	2264      	movs	r2, #100	@ 0x64
 8005ac6:	fb02 f303 	mul.w	r3, r2, r3
 8005aca:	1acb      	subs	r3, r1, r3
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005ad2:	4b36      	ldr	r3, [pc, #216]	@ (8005bac <UART_SetConfig+0x2d4>)
 8005ad4:	fba3 2302 	umull	r2, r3, r3, r2
 8005ad8:	095b      	lsrs	r3, r3, #5
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005ae0:	441c      	add	r4, r3
 8005ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005aec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005af0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005af4:	4642      	mov	r2, r8
 8005af6:	464b      	mov	r3, r9
 8005af8:	1891      	adds	r1, r2, r2
 8005afa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005afc:	415b      	adcs	r3, r3
 8005afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005b04:	4641      	mov	r1, r8
 8005b06:	1851      	adds	r1, r2, r1
 8005b08:	6339      	str	r1, [r7, #48]	@ 0x30
 8005b0a:	4649      	mov	r1, r9
 8005b0c:	414b      	adcs	r3, r1
 8005b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b10:	f04f 0200 	mov.w	r2, #0
 8005b14:	f04f 0300 	mov.w	r3, #0
 8005b18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005b1c:	4659      	mov	r1, fp
 8005b1e:	00cb      	lsls	r3, r1, #3
 8005b20:	4651      	mov	r1, sl
 8005b22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b26:	4651      	mov	r1, sl
 8005b28:	00ca      	lsls	r2, r1, #3
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	4603      	mov	r3, r0
 8005b30:	4642      	mov	r2, r8
 8005b32:	189b      	adds	r3, r3, r2
 8005b34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b38:	464b      	mov	r3, r9
 8005b3a:	460a      	mov	r2, r1
 8005b3c:	eb42 0303 	adc.w	r3, r2, r3
 8005b40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b50:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b58:	460b      	mov	r3, r1
 8005b5a:	18db      	adds	r3, r3, r3
 8005b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b5e:	4613      	mov	r3, r2
 8005b60:	eb42 0303 	adc.w	r3, r2, r3
 8005b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b6e:	f7fb f82b 	bl	8000bc8 <__aeabi_uldivmod>
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	4b0d      	ldr	r3, [pc, #52]	@ (8005bac <UART_SetConfig+0x2d4>)
 8005b78:	fba3 1302 	umull	r1, r3, r3, r2
 8005b7c:	095b      	lsrs	r3, r3, #5
 8005b7e:	2164      	movs	r1, #100	@ 0x64
 8005b80:	fb01 f303 	mul.w	r3, r1, r3
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	3332      	adds	r3, #50	@ 0x32
 8005b8a:	4a08      	ldr	r2, [pc, #32]	@ (8005bac <UART_SetConfig+0x2d4>)
 8005b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b90:	095b      	lsrs	r3, r3, #5
 8005b92:	f003 0207 	and.w	r2, r3, #7
 8005b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4422      	add	r2, r4
 8005b9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ba0:	e106      	b.n	8005db0 <UART_SetConfig+0x4d8>
 8005ba2:	bf00      	nop
 8005ba4:	40011000 	.word	0x40011000
 8005ba8:	40011400 	.word	0x40011400
 8005bac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005bba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005bbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005bc2:	4642      	mov	r2, r8
 8005bc4:	464b      	mov	r3, r9
 8005bc6:	1891      	adds	r1, r2, r2
 8005bc8:	6239      	str	r1, [r7, #32]
 8005bca:	415b      	adcs	r3, r3
 8005bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bd2:	4641      	mov	r1, r8
 8005bd4:	1854      	adds	r4, r2, r1
 8005bd6:	4649      	mov	r1, r9
 8005bd8:	eb43 0501 	adc.w	r5, r3, r1
 8005bdc:	f04f 0200 	mov.w	r2, #0
 8005be0:	f04f 0300 	mov.w	r3, #0
 8005be4:	00eb      	lsls	r3, r5, #3
 8005be6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bea:	00e2      	lsls	r2, r4, #3
 8005bec:	4614      	mov	r4, r2
 8005bee:	461d      	mov	r5, r3
 8005bf0:	4643      	mov	r3, r8
 8005bf2:	18e3      	adds	r3, r4, r3
 8005bf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005bf8:	464b      	mov	r3, r9
 8005bfa:	eb45 0303 	adc.w	r3, r5, r3
 8005bfe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c12:	f04f 0200 	mov.w	r2, #0
 8005c16:	f04f 0300 	mov.w	r3, #0
 8005c1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c1e:	4629      	mov	r1, r5
 8005c20:	008b      	lsls	r3, r1, #2
 8005c22:	4621      	mov	r1, r4
 8005c24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c28:	4621      	mov	r1, r4
 8005c2a:	008a      	lsls	r2, r1, #2
 8005c2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c30:	f7fa ffca 	bl	8000bc8 <__aeabi_uldivmod>
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	4b60      	ldr	r3, [pc, #384]	@ (8005dbc <UART_SetConfig+0x4e4>)
 8005c3a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c3e:	095b      	lsrs	r3, r3, #5
 8005c40:	011c      	lsls	r4, r3, #4
 8005c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c46:	2200      	movs	r2, #0
 8005c48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c4c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c54:	4642      	mov	r2, r8
 8005c56:	464b      	mov	r3, r9
 8005c58:	1891      	adds	r1, r2, r2
 8005c5a:	61b9      	str	r1, [r7, #24]
 8005c5c:	415b      	adcs	r3, r3
 8005c5e:	61fb      	str	r3, [r7, #28]
 8005c60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c64:	4641      	mov	r1, r8
 8005c66:	1851      	adds	r1, r2, r1
 8005c68:	6139      	str	r1, [r7, #16]
 8005c6a:	4649      	mov	r1, r9
 8005c6c:	414b      	adcs	r3, r1
 8005c6e:	617b      	str	r3, [r7, #20]
 8005c70:	f04f 0200 	mov.w	r2, #0
 8005c74:	f04f 0300 	mov.w	r3, #0
 8005c78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c7c:	4659      	mov	r1, fp
 8005c7e:	00cb      	lsls	r3, r1, #3
 8005c80:	4651      	mov	r1, sl
 8005c82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c86:	4651      	mov	r1, sl
 8005c88:	00ca      	lsls	r2, r1, #3
 8005c8a:	4610      	mov	r0, r2
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	4603      	mov	r3, r0
 8005c90:	4642      	mov	r2, r8
 8005c92:	189b      	adds	r3, r3, r2
 8005c94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c98:	464b      	mov	r3, r9
 8005c9a:	460a      	mov	r2, r1
 8005c9c:	eb42 0303 	adc.w	r3, r2, r3
 8005ca0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005cb0:	f04f 0200 	mov.w	r2, #0
 8005cb4:	f04f 0300 	mov.w	r3, #0
 8005cb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005cbc:	4649      	mov	r1, r9
 8005cbe:	008b      	lsls	r3, r1, #2
 8005cc0:	4641      	mov	r1, r8
 8005cc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cc6:	4641      	mov	r1, r8
 8005cc8:	008a      	lsls	r2, r1, #2
 8005cca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005cce:	f7fa ff7b 	bl	8000bc8 <__aeabi_uldivmod>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	4b38      	ldr	r3, [pc, #224]	@ (8005dbc <UART_SetConfig+0x4e4>)
 8005cda:	fba3 2301 	umull	r2, r3, r3, r1
 8005cde:	095b      	lsrs	r3, r3, #5
 8005ce0:	2264      	movs	r2, #100	@ 0x64
 8005ce2:	fb02 f303 	mul.w	r3, r2, r3
 8005ce6:	1acb      	subs	r3, r1, r3
 8005ce8:	011b      	lsls	r3, r3, #4
 8005cea:	3332      	adds	r3, #50	@ 0x32
 8005cec:	4a33      	ldr	r2, [pc, #204]	@ (8005dbc <UART_SetConfig+0x4e4>)
 8005cee:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf2:	095b      	lsrs	r3, r3, #5
 8005cf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cf8:	441c      	add	r4, r3
 8005cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cfe:	2200      	movs	r2, #0
 8005d00:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d02:	677a      	str	r2, [r7, #116]	@ 0x74
 8005d04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005d08:	4642      	mov	r2, r8
 8005d0a:	464b      	mov	r3, r9
 8005d0c:	1891      	adds	r1, r2, r2
 8005d0e:	60b9      	str	r1, [r7, #8]
 8005d10:	415b      	adcs	r3, r3
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d18:	4641      	mov	r1, r8
 8005d1a:	1851      	adds	r1, r2, r1
 8005d1c:	6039      	str	r1, [r7, #0]
 8005d1e:	4649      	mov	r1, r9
 8005d20:	414b      	adcs	r3, r1
 8005d22:	607b      	str	r3, [r7, #4]
 8005d24:	f04f 0200 	mov.w	r2, #0
 8005d28:	f04f 0300 	mov.w	r3, #0
 8005d2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d30:	4659      	mov	r1, fp
 8005d32:	00cb      	lsls	r3, r1, #3
 8005d34:	4651      	mov	r1, sl
 8005d36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d3a:	4651      	mov	r1, sl
 8005d3c:	00ca      	lsls	r2, r1, #3
 8005d3e:	4610      	mov	r0, r2
 8005d40:	4619      	mov	r1, r3
 8005d42:	4603      	mov	r3, r0
 8005d44:	4642      	mov	r2, r8
 8005d46:	189b      	adds	r3, r3, r2
 8005d48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d4a:	464b      	mov	r3, r9
 8005d4c:	460a      	mov	r2, r1
 8005d4e:	eb42 0303 	adc.w	r3, r2, r3
 8005d52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d5e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d60:	f04f 0200 	mov.w	r2, #0
 8005d64:	f04f 0300 	mov.w	r3, #0
 8005d68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d6c:	4649      	mov	r1, r9
 8005d6e:	008b      	lsls	r3, r1, #2
 8005d70:	4641      	mov	r1, r8
 8005d72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d76:	4641      	mov	r1, r8
 8005d78:	008a      	lsls	r2, r1, #2
 8005d7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d7e:	f7fa ff23 	bl	8000bc8 <__aeabi_uldivmod>
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	4b0d      	ldr	r3, [pc, #52]	@ (8005dbc <UART_SetConfig+0x4e4>)
 8005d88:	fba3 1302 	umull	r1, r3, r3, r2
 8005d8c:	095b      	lsrs	r3, r3, #5
 8005d8e:	2164      	movs	r1, #100	@ 0x64
 8005d90:	fb01 f303 	mul.w	r3, r1, r3
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	3332      	adds	r3, #50	@ 0x32
 8005d9a:	4a08      	ldr	r2, [pc, #32]	@ (8005dbc <UART_SetConfig+0x4e4>)
 8005d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005da0:	095b      	lsrs	r3, r3, #5
 8005da2:	f003 020f 	and.w	r2, r3, #15
 8005da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4422      	add	r2, r4
 8005dae:	609a      	str	r2, [r3, #8]
}
 8005db0:	bf00      	nop
 8005db2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005db6:	46bd      	mov	sp, r7
 8005db8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dbc:	51eb851f 	.word	0x51eb851f

08005dc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005dc0:	b084      	sub	sp, #16
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b084      	sub	sp, #16
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	f107 001c 	add.w	r0, r7, #28
 8005dce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005dd2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d123      	bne.n	8005e22 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dde:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005dee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e02:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d105      	bne.n	8005e16 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f001 fae8 	bl	80073ec <USB_CoreReset>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	73fb      	strb	r3, [r7, #15]
 8005e20:	e01b      	b.n	8005e5a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f001 fadc 	bl	80073ec <USB_CoreReset>
 8005e34:	4603      	mov	r3, r0
 8005e36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e38:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d106      	bne.n	8005e4e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e44:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	639a      	str	r2, [r3, #56]	@ 0x38
 8005e4c:	e005      	b.n	8005e5a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e52:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e5a:	7fbb      	ldrb	r3, [r7, #30]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d10b      	bne.n	8005e78 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f043 0206 	orr.w	r2, r3, #6
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f043 0220 	orr.w	r2, r3, #32
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e84:	b004      	add	sp, #16
 8005e86:	4770      	bx	lr

08005e88 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	4613      	mov	r3, r2
 8005e94:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005e96:	79fb      	ldrb	r3, [r7, #7]
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d165      	bne.n	8005f68 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4a41      	ldr	r2, [pc, #260]	@ (8005fa4 <USB_SetTurnaroundTime+0x11c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d906      	bls.n	8005eb2 <USB_SetTurnaroundTime+0x2a>
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	4a40      	ldr	r2, [pc, #256]	@ (8005fa8 <USB_SetTurnaroundTime+0x120>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d202      	bcs.n	8005eb2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005eac:	230f      	movs	r3, #15
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	e062      	b.n	8005f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	4a3c      	ldr	r2, [pc, #240]	@ (8005fa8 <USB_SetTurnaroundTime+0x120>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d306      	bcc.n	8005ec8 <USB_SetTurnaroundTime+0x40>
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	4a3b      	ldr	r2, [pc, #236]	@ (8005fac <USB_SetTurnaroundTime+0x124>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d202      	bcs.n	8005ec8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005ec2:	230e      	movs	r3, #14
 8005ec4:	617b      	str	r3, [r7, #20]
 8005ec6:	e057      	b.n	8005f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	4a38      	ldr	r2, [pc, #224]	@ (8005fac <USB_SetTurnaroundTime+0x124>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d306      	bcc.n	8005ede <USB_SetTurnaroundTime+0x56>
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	4a37      	ldr	r2, [pc, #220]	@ (8005fb0 <USB_SetTurnaroundTime+0x128>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d202      	bcs.n	8005ede <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005ed8:	230d      	movs	r3, #13
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	e04c      	b.n	8005f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	4a33      	ldr	r2, [pc, #204]	@ (8005fb0 <USB_SetTurnaroundTime+0x128>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d306      	bcc.n	8005ef4 <USB_SetTurnaroundTime+0x6c>
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	4a32      	ldr	r2, [pc, #200]	@ (8005fb4 <USB_SetTurnaroundTime+0x12c>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d802      	bhi.n	8005ef4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005eee:	230c      	movs	r3, #12
 8005ef0:	617b      	str	r3, [r7, #20]
 8005ef2:	e041      	b.n	8005f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	4a2f      	ldr	r2, [pc, #188]	@ (8005fb4 <USB_SetTurnaroundTime+0x12c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d906      	bls.n	8005f0a <USB_SetTurnaroundTime+0x82>
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	4a2e      	ldr	r2, [pc, #184]	@ (8005fb8 <USB_SetTurnaroundTime+0x130>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d802      	bhi.n	8005f0a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005f04:	230b      	movs	r3, #11
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	e036      	b.n	8005f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	4a2a      	ldr	r2, [pc, #168]	@ (8005fb8 <USB_SetTurnaroundTime+0x130>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d906      	bls.n	8005f20 <USB_SetTurnaroundTime+0x98>
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	4a29      	ldr	r2, [pc, #164]	@ (8005fbc <USB_SetTurnaroundTime+0x134>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d802      	bhi.n	8005f20 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005f1a:	230a      	movs	r3, #10
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	e02b      	b.n	8005f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	4a26      	ldr	r2, [pc, #152]	@ (8005fbc <USB_SetTurnaroundTime+0x134>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d906      	bls.n	8005f36 <USB_SetTurnaroundTime+0xae>
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	4a25      	ldr	r2, [pc, #148]	@ (8005fc0 <USB_SetTurnaroundTime+0x138>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d202      	bcs.n	8005f36 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005f30:	2309      	movs	r3, #9
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	e020      	b.n	8005f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	4a21      	ldr	r2, [pc, #132]	@ (8005fc0 <USB_SetTurnaroundTime+0x138>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d306      	bcc.n	8005f4c <USB_SetTurnaroundTime+0xc4>
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	4a20      	ldr	r2, [pc, #128]	@ (8005fc4 <USB_SetTurnaroundTime+0x13c>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d802      	bhi.n	8005f4c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005f46:	2308      	movs	r3, #8
 8005f48:	617b      	str	r3, [r7, #20]
 8005f4a:	e015      	b.n	8005f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	4a1d      	ldr	r2, [pc, #116]	@ (8005fc4 <USB_SetTurnaroundTime+0x13c>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d906      	bls.n	8005f62 <USB_SetTurnaroundTime+0xda>
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	4a1c      	ldr	r2, [pc, #112]	@ (8005fc8 <USB_SetTurnaroundTime+0x140>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d202      	bcs.n	8005f62 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005f5c:	2307      	movs	r3, #7
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	e00a      	b.n	8005f78 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005f62:	2306      	movs	r3, #6
 8005f64:	617b      	str	r3, [r7, #20]
 8005f66:	e007      	b.n	8005f78 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d102      	bne.n	8005f74 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005f6e:	2309      	movs	r3, #9
 8005f70:	617b      	str	r3, [r7, #20]
 8005f72:	e001      	b.n	8005f78 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005f74:	2309      	movs	r3, #9
 8005f76:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	68da      	ldr	r2, [r3, #12]
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	029b      	lsls	r3, r3, #10
 8005f8c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005f90:	431a      	orrs	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	371c      	adds	r7, #28
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	00d8acbf 	.word	0x00d8acbf
 8005fa8:	00e4e1c0 	.word	0x00e4e1c0
 8005fac:	00f42400 	.word	0x00f42400
 8005fb0:	01067380 	.word	0x01067380
 8005fb4:	011a499f 	.word	0x011a499f
 8005fb8:	01312cff 	.word	0x01312cff
 8005fbc:	014ca43f 	.word	0x014ca43f
 8005fc0:	016e3600 	.word	0x016e3600
 8005fc4:	01a6ab1f 	.word	0x01a6ab1f
 8005fc8:	01e84800 	.word	0x01e84800

08005fcc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f043 0201 	orr.w	r2, r3, #1
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b083      	sub	sp, #12
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f023 0201 	bic.w	r2, r3, #1
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	460b      	mov	r3, r1
 800601a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800601c:	2300      	movs	r3, #0
 800601e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800602c:	78fb      	ldrb	r3, [r7, #3]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d115      	bne.n	800605e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800603e:	200a      	movs	r0, #10
 8006040:	f7fb ff92 	bl	8001f68 <HAL_Delay>
      ms += 10U;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	330a      	adds	r3, #10
 8006048:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f001 f93f 	bl	80072ce <USB_GetMode>
 8006050:	4603      	mov	r3, r0
 8006052:	2b01      	cmp	r3, #1
 8006054:	d01e      	beq.n	8006094 <USB_SetCurrentMode+0x84>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2bc7      	cmp	r3, #199	@ 0xc7
 800605a:	d9f0      	bls.n	800603e <USB_SetCurrentMode+0x2e>
 800605c:	e01a      	b.n	8006094 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800605e:	78fb      	ldrb	r3, [r7, #3]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d115      	bne.n	8006090 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006070:	200a      	movs	r0, #10
 8006072:	f7fb ff79 	bl	8001f68 <HAL_Delay>
      ms += 10U;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	330a      	adds	r3, #10
 800607a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f001 f926 	bl	80072ce <USB_GetMode>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d005      	beq.n	8006094 <USB_SetCurrentMode+0x84>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2bc7      	cmp	r3, #199	@ 0xc7
 800608c:	d9f0      	bls.n	8006070 <USB_SetCurrentMode+0x60>
 800608e:	e001      	b.n	8006094 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e005      	b.n	80060a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2bc8      	cmp	r3, #200	@ 0xc8
 8006098:	d101      	bne.n	800609e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e000      	b.n	80060a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060a8:	b084      	sub	sp, #16
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b086      	sub	sp, #24
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80060b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80060c2:	2300      	movs	r3, #0
 80060c4:	613b      	str	r3, [r7, #16]
 80060c6:	e009      	b.n	80060dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	3340      	adds	r3, #64	@ 0x40
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	2200      	movs	r2, #0
 80060d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	3301      	adds	r3, #1
 80060da:	613b      	str	r3, [r7, #16]
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	2b0e      	cmp	r3, #14
 80060e0:	d9f2      	bls.n	80060c8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80060e2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d11c      	bne.n	8006124 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060f8:	f043 0302 	orr.w	r3, r3, #2
 80060fc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006102:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800610e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800611a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	639a      	str	r2, [r3, #56]	@ 0x38
 8006122:	e00b      	b.n	800613c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006128:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006134:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006142:	461a      	mov	r2, r3
 8006144:	2300      	movs	r3, #0
 8006146:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006148:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800614c:	2b01      	cmp	r3, #1
 800614e:	d10d      	bne.n	800616c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006150:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006154:	2b00      	cmp	r3, #0
 8006156:	d104      	bne.n	8006162 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006158:	2100      	movs	r1, #0
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f968 	bl	8006430 <USB_SetDevSpeed>
 8006160:	e008      	b.n	8006174 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006162:	2101      	movs	r1, #1
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f963 	bl	8006430 <USB_SetDevSpeed>
 800616a:	e003      	b.n	8006174 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800616c:	2103      	movs	r1, #3
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f95e 	bl	8006430 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006174:	2110      	movs	r1, #16
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f8fa 	bl	8006370 <USB_FlushTxFifo>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f924 	bl	80063d4 <USB_FlushRxFifo>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800619c:	461a      	mov	r2, r3
 800619e:	2300      	movs	r3, #0
 80061a0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061a8:	461a      	mov	r2, r3
 80061aa:	2300      	movs	r3, #0
 80061ac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061b4:	461a      	mov	r2, r3
 80061b6:	2300      	movs	r3, #0
 80061b8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061ba:	2300      	movs	r3, #0
 80061bc:	613b      	str	r3, [r7, #16]
 80061be:	e043      	b.n	8006248 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061d6:	d118      	bne.n	800620a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10a      	bne.n	80061f4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061ea:	461a      	mov	r2, r3
 80061ec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80061f0:	6013      	str	r3, [r2, #0]
 80061f2:	e013      	b.n	800621c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	015a      	lsls	r2, r3, #5
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	4413      	add	r3, r2
 80061fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006200:	461a      	mov	r2, r3
 8006202:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006206:	6013      	str	r3, [r2, #0]
 8006208:	e008      	b.n	800621c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	4413      	add	r3, r2
 8006212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006216:	461a      	mov	r2, r3
 8006218:	2300      	movs	r3, #0
 800621a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006228:	461a      	mov	r2, r3
 800622a:	2300      	movs	r3, #0
 800622c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	015a      	lsls	r2, r3, #5
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4413      	add	r3, r2
 8006236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800623a:	461a      	mov	r2, r3
 800623c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006240:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	3301      	adds	r3, #1
 8006246:	613b      	str	r3, [r7, #16]
 8006248:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800624c:	461a      	mov	r2, r3
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	4293      	cmp	r3, r2
 8006252:	d3b5      	bcc.n	80061c0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006254:	2300      	movs	r3, #0
 8006256:	613b      	str	r3, [r7, #16]
 8006258:	e043      	b.n	80062e2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800626c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006270:	d118      	bne.n	80062a4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10a      	bne.n	800628e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	4413      	add	r3, r2
 8006280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006284:	461a      	mov	r2, r3
 8006286:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800628a:	6013      	str	r3, [r2, #0]
 800628c:	e013      	b.n	80062b6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	4413      	add	r3, r2
 8006296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800629a:	461a      	mov	r2, r3
 800629c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80062a0:	6013      	str	r3, [r2, #0]
 80062a2:	e008      	b.n	80062b6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062b0:	461a      	mov	r2, r3
 80062b2:	2300      	movs	r3, #0
 80062b4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062c2:	461a      	mov	r2, r3
 80062c4:	2300      	movs	r3, #0
 80062c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062d4:	461a      	mov	r2, r3
 80062d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80062da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	3301      	adds	r3, #1
 80062e0:	613b      	str	r3, [r7, #16]
 80062e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80062e6:	461a      	mov	r2, r3
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d3b5      	bcc.n	800625a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006300:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800630e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006310:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006314:	2b00      	cmp	r3, #0
 8006316:	d105      	bne.n	8006324 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	f043 0210 	orr.w	r2, r3, #16
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	699a      	ldr	r2, [r3, #24]
 8006328:	4b10      	ldr	r3, [pc, #64]	@ (800636c <USB_DevInit+0x2c4>)
 800632a:	4313      	orrs	r3, r2
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006330:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006334:	2b00      	cmp	r3, #0
 8006336:	d005      	beq.n	8006344 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	f043 0208 	orr.w	r2, r3, #8
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006344:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006348:	2b01      	cmp	r3, #1
 800634a:	d107      	bne.n	800635c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006354:	f043 0304 	orr.w	r3, r3, #4
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800635c:	7dfb      	ldrb	r3, [r7, #23]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3718      	adds	r7, #24
 8006362:	46bd      	mov	sp, r7
 8006364:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006368:	b004      	add	sp, #16
 800636a:	4770      	bx	lr
 800636c:	803c3800 	.word	0x803c3800

08006370 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	3301      	adds	r3, #1
 8006382:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800638a:	d901      	bls.n	8006390 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e01b      	b.n	80063c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	2b00      	cmp	r3, #0
 8006396:	daf2      	bge.n	800637e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006398:	2300      	movs	r3, #0
 800639a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	019b      	lsls	r3, r3, #6
 80063a0:	f043 0220 	orr.w	r2, r3, #32
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3301      	adds	r3, #1
 80063ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063b4:	d901      	bls.n	80063ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e006      	b.n	80063c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f003 0320 	and.w	r3, r3, #32
 80063c2:	2b20      	cmp	r3, #32
 80063c4:	d0f0      	beq.n	80063a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063dc:	2300      	movs	r3, #0
 80063de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	3301      	adds	r3, #1
 80063e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063ec:	d901      	bls.n	80063f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e018      	b.n	8006424 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	daf2      	bge.n	80063e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80063fa:	2300      	movs	r3, #0
 80063fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2210      	movs	r2, #16
 8006402:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3301      	adds	r3, #1
 8006408:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006410:	d901      	bls.n	8006416 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e006      	b.n	8006424 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f003 0310 	and.w	r3, r3, #16
 800641e:	2b10      	cmp	r3, #16
 8006420:	d0f0      	beq.n	8006404 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	78fb      	ldrb	r3, [r7, #3]
 800644a:	68f9      	ldr	r1, [r7, #12]
 800644c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006450:	4313      	orrs	r3, r2
 8006452:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006462:	b480      	push	{r7}
 8006464:	b087      	sub	sp, #28
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f003 0306 	and.w	r3, r3, #6
 800647a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d102      	bne.n	8006488 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006482:	2300      	movs	r3, #0
 8006484:	75fb      	strb	r3, [r7, #23]
 8006486:	e00a      	b.n	800649e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2b02      	cmp	r3, #2
 800648c:	d002      	beq.n	8006494 <USB_GetDevSpeed+0x32>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2b06      	cmp	r3, #6
 8006492:	d102      	bne.n	800649a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006494:	2302      	movs	r3, #2
 8006496:	75fb      	strb	r3, [r7, #23]
 8006498:	e001      	b.n	800649e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800649a:	230f      	movs	r3, #15
 800649c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800649e:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	371c      	adds	r7, #28
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	785b      	ldrb	r3, [r3, #1]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d13a      	bne.n	800653e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064ce:	69da      	ldr	r2, [r3, #28]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	f003 030f 	and.w	r3, r3, #15
 80064d8:	2101      	movs	r1, #1
 80064da:	fa01 f303 	lsl.w	r3, r1, r3
 80064de:	b29b      	uxth	r3, r3
 80064e0:	68f9      	ldr	r1, [r7, #12]
 80064e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064e6:	4313      	orrs	r3, r2
 80064e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d155      	bne.n	80065ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	4413      	add	r3, r2
 8006508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	791b      	ldrb	r3, [r3, #4]
 800651a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800651c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	059b      	lsls	r3, r3, #22
 8006522:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006524:	4313      	orrs	r3, r2
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	0151      	lsls	r1, r2, #5
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	440a      	add	r2, r1
 800652e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006532:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006536:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800653a:	6013      	str	r3, [r2, #0]
 800653c:	e036      	b.n	80065ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006544:	69da      	ldr	r2, [r3, #28]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	f003 030f 	and.w	r3, r3, #15
 800654e:	2101      	movs	r1, #1
 8006550:	fa01 f303 	lsl.w	r3, r1, r3
 8006554:	041b      	lsls	r3, r3, #16
 8006556:	68f9      	ldr	r1, [r7, #12]
 8006558:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800655c:	4313      	orrs	r3, r2
 800655e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d11a      	bne.n	80065ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	4413      	add	r3, r2
 800657e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	791b      	ldrb	r3, [r3, #4]
 8006590:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006592:	430b      	orrs	r3, r1
 8006594:	4313      	orrs	r3, r2
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	0151      	lsls	r1, r2, #5
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	440a      	add	r2, r1
 800659e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
	...

080065bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	785b      	ldrb	r3, [r3, #1]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d161      	bne.n	800669c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065ee:	d11f      	bne.n	8006630 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	0151      	lsls	r1, r2, #5
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	440a      	add	r2, r1
 8006606:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800660a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800660e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	0151      	lsls	r1, r2, #5
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	440a      	add	r2, r1
 8006626:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800662a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800662e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006636:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	f003 030f 	and.w	r3, r3, #15
 8006640:	2101      	movs	r1, #1
 8006642:	fa01 f303 	lsl.w	r3, r1, r3
 8006646:	b29b      	uxth	r3, r3
 8006648:	43db      	mvns	r3, r3
 800664a:	68f9      	ldr	r1, [r7, #12]
 800664c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006650:	4013      	ands	r3, r2
 8006652:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800665a:	69da      	ldr	r2, [r3, #28]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	f003 030f 	and.w	r3, r3, #15
 8006664:	2101      	movs	r1, #1
 8006666:	fa01 f303 	lsl.w	r3, r1, r3
 800666a:	b29b      	uxth	r3, r3
 800666c:	43db      	mvns	r3, r3
 800666e:	68f9      	ldr	r1, [r7, #12]
 8006670:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006674:	4013      	ands	r3, r2
 8006676:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	015a      	lsls	r2, r3, #5
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4413      	add	r3, r2
 8006680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	0159      	lsls	r1, r3, #5
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	440b      	add	r3, r1
 800668e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006692:	4619      	mov	r1, r3
 8006694:	4b35      	ldr	r3, [pc, #212]	@ (800676c <USB_DeactivateEndpoint+0x1b0>)
 8006696:	4013      	ands	r3, r2
 8006698:	600b      	str	r3, [r1, #0]
 800669a:	e060      	b.n	800675e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	015a      	lsls	r2, r3, #5
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4413      	add	r3, r2
 80066a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066b2:	d11f      	bne.n	80066f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	0151      	lsls	r1, r2, #5
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	440a      	add	r2, r1
 80066ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80066d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	015a      	lsls	r2, r3, #5
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4413      	add	r3, r2
 80066dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	0151      	lsls	r1, r2, #5
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	440a      	add	r2, r1
 80066ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	f003 030f 	and.w	r3, r3, #15
 8006704:	2101      	movs	r1, #1
 8006706:	fa01 f303 	lsl.w	r3, r1, r3
 800670a:	041b      	lsls	r3, r3, #16
 800670c:	43db      	mvns	r3, r3
 800670e:	68f9      	ldr	r1, [r7, #12]
 8006710:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006714:	4013      	ands	r3, r2
 8006716:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800671e:	69da      	ldr	r2, [r3, #28]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	f003 030f 	and.w	r3, r3, #15
 8006728:	2101      	movs	r1, #1
 800672a:	fa01 f303 	lsl.w	r3, r1, r3
 800672e:	041b      	lsls	r3, r3, #16
 8006730:	43db      	mvns	r3, r3
 8006732:	68f9      	ldr	r1, [r7, #12]
 8006734:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006738:	4013      	ands	r3, r2
 800673a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	015a      	lsls	r2, r3, #5
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4413      	add	r3, r2
 8006744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	0159      	lsls	r1, r3, #5
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	440b      	add	r3, r1
 8006752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006756:	4619      	mov	r1, r3
 8006758:	4b05      	ldr	r3, [pc, #20]	@ (8006770 <USB_DeactivateEndpoint+0x1b4>)
 800675a:	4013      	ands	r3, r2
 800675c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	ec337800 	.word	0xec337800
 8006770:	eff37800 	.word	0xeff37800

08006774 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b08a      	sub	sp, #40	@ 0x28
 8006778:	af02      	add	r7, sp, #8
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	4613      	mov	r3, r2
 8006780:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	785b      	ldrb	r3, [r3, #1]
 8006790:	2b01      	cmp	r3, #1
 8006792:	f040 817f 	bne.w	8006a94 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d132      	bne.n	8006804 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	015a      	lsls	r2, r3, #5
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	4413      	add	r3, r2
 80067a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	0151      	lsls	r1, r2, #5
 80067b0:	69fa      	ldr	r2, [r7, #28]
 80067b2:	440a      	add	r2, r1
 80067b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067b8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80067bc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80067c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	0151      	lsls	r1, r2, #5
 80067d4:	69fa      	ldr	r2, [r7, #28]
 80067d6:	440a      	add	r2, r1
 80067d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80067e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	69ba      	ldr	r2, [r7, #24]
 80067f2:	0151      	lsls	r1, r2, #5
 80067f4:	69fa      	ldr	r2, [r7, #28]
 80067f6:	440a      	add	r2, r1
 80067f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067fc:	0cdb      	lsrs	r3, r3, #19
 80067fe:	04db      	lsls	r3, r3, #19
 8006800:	6113      	str	r3, [r2, #16]
 8006802:	e097      	b.n	8006934 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	4413      	add	r3, r2
 800680c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	0151      	lsls	r1, r2, #5
 8006816:	69fa      	ldr	r2, [r7, #28]
 8006818:	440a      	add	r2, r1
 800681a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800681e:	0cdb      	lsrs	r3, r3, #19
 8006820:	04db      	lsls	r3, r3, #19
 8006822:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	4413      	add	r3, r2
 800682c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	69ba      	ldr	r2, [r7, #24]
 8006834:	0151      	lsls	r1, r2, #5
 8006836:	69fa      	ldr	r2, [r7, #28]
 8006838:	440a      	add	r2, r1
 800683a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800683e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006842:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006846:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d11a      	bne.n	8006884 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	691a      	ldr	r2, [r3, #16]
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	429a      	cmp	r2, r3
 8006858:	d903      	bls.n	8006862 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	4413      	add	r3, r2
 800686a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	69ba      	ldr	r2, [r7, #24]
 8006872:	0151      	lsls	r1, r2, #5
 8006874:	69fa      	ldr	r2, [r7, #28]
 8006876:	440a      	add	r2, r1
 8006878:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800687c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006880:	6113      	str	r3, [r2, #16]
 8006882:	e044      	b.n	800690e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	691a      	ldr	r2, [r3, #16]
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	4413      	add	r3, r2
 800688e:	1e5a      	subs	r2, r3, #1
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	fbb2 f3f3 	udiv	r3, r2, r3
 8006898:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068a6:	691a      	ldr	r2, [r3, #16]
 80068a8:	8afb      	ldrh	r3, [r7, #22]
 80068aa:	04d9      	lsls	r1, r3, #19
 80068ac:	4ba4      	ldr	r3, [pc, #656]	@ (8006b40 <USB_EPStartXfer+0x3cc>)
 80068ae:	400b      	ands	r3, r1
 80068b0:	69b9      	ldr	r1, [r7, #24]
 80068b2:	0148      	lsls	r0, r1, #5
 80068b4:	69f9      	ldr	r1, [r7, #28]
 80068b6:	4401      	add	r1, r0
 80068b8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80068bc:	4313      	orrs	r3, r2
 80068be:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	791b      	ldrb	r3, [r3, #4]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d122      	bne.n	800690e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	0151      	lsls	r1, r2, #5
 80068da:	69fa      	ldr	r2, [r7, #28]
 80068dc:	440a      	add	r2, r1
 80068de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068e2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80068e6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	015a      	lsls	r2, r3, #5
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068f4:	691a      	ldr	r2, [r3, #16]
 80068f6:	8afb      	ldrh	r3, [r7, #22]
 80068f8:	075b      	lsls	r3, r3, #29
 80068fa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80068fe:	69b9      	ldr	r1, [r7, #24]
 8006900:	0148      	lsls	r0, r1, #5
 8006902:	69f9      	ldr	r1, [r7, #28]
 8006904:	4401      	add	r1, r0
 8006906:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800690a:	4313      	orrs	r3, r2
 800690c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	4413      	add	r3, r2
 8006916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800691a:	691a      	ldr	r2, [r3, #16]
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006924:	69b9      	ldr	r1, [r7, #24]
 8006926:	0148      	lsls	r0, r1, #5
 8006928:	69f9      	ldr	r1, [r7, #28]
 800692a:	4401      	add	r1, r0
 800692c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006930:	4313      	orrs	r3, r2
 8006932:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006934:	79fb      	ldrb	r3, [r7, #7]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d14b      	bne.n	80069d2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d009      	beq.n	8006956 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	4413      	add	r3, r2
 800694a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800694e:	461a      	mov	r2, r3
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	69db      	ldr	r3, [r3, #28]
 8006954:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	791b      	ldrb	r3, [r3, #4]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d128      	bne.n	80069b0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800696a:	2b00      	cmp	r3, #0
 800696c:	d110      	bne.n	8006990 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	015a      	lsls	r2, r3, #5
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	4413      	add	r3, r2
 8006976:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	0151      	lsls	r1, r2, #5
 8006980:	69fa      	ldr	r2, [r7, #28]
 8006982:	440a      	add	r2, r1
 8006984:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006988:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	e00f      	b.n	80069b0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	4413      	add	r3, r2
 8006998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	69ba      	ldr	r2, [r7, #24]
 80069a0:	0151      	lsls	r1, r2, #5
 80069a2:	69fa      	ldr	r2, [r7, #28]
 80069a4:	440a      	add	r2, r1
 80069a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069ae:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	69ba      	ldr	r2, [r7, #24]
 80069c0:	0151      	lsls	r1, r2, #5
 80069c2:	69fa      	ldr	r2, [r7, #28]
 80069c4:	440a      	add	r2, r1
 80069c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069ca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80069ce:	6013      	str	r3, [r2, #0]
 80069d0:	e166      	b.n	8006ca0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	69ba      	ldr	r2, [r7, #24]
 80069e2:	0151      	lsls	r1, r2, #5
 80069e4:	69fa      	ldr	r2, [r7, #28]
 80069e6:	440a      	add	r2, r1
 80069e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069ec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80069f0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	791b      	ldrb	r3, [r3, #4]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d015      	beq.n	8006a26 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 814e 	beq.w	8006ca0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	f003 030f 	and.w	r3, r3, #15
 8006a14:	2101      	movs	r1, #1
 8006a16:	fa01 f303 	lsl.w	r3, r1, r3
 8006a1a:	69f9      	ldr	r1, [r7, #28]
 8006a1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a20:	4313      	orrs	r3, r2
 8006a22:	634b      	str	r3, [r1, #52]	@ 0x34
 8006a24:	e13c      	b.n	8006ca0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d110      	bne.n	8006a58 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	015a      	lsls	r2, r3, #5
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	69ba      	ldr	r2, [r7, #24]
 8006a46:	0151      	lsls	r1, r2, #5
 8006a48:	69fa      	ldr	r2, [r7, #28]
 8006a4a:	440a      	add	r2, r1
 8006a4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a50:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006a54:	6013      	str	r3, [r2, #0]
 8006a56:	e00f      	b.n	8006a78 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	015a      	lsls	r2, r3, #5
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	69ba      	ldr	r2, [r7, #24]
 8006a68:	0151      	lsls	r1, r2, #5
 8006a6a:	69fa      	ldr	r2, [r7, #28]
 8006a6c:	440a      	add	r2, r1
 8006a6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a76:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	68d9      	ldr	r1, [r3, #12]
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	781a      	ldrb	r2, [r3, #0]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	b298      	uxth	r0, r3
 8006a86:	79fb      	ldrb	r3, [r7, #7]
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 f9b9 	bl	8006e04 <USB_WritePacket>
 8006a92:	e105      	b.n	8006ca0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	015a      	lsls	r2, r3, #5
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	69ba      	ldr	r2, [r7, #24]
 8006aa4:	0151      	lsls	r1, r2, #5
 8006aa6:	69fa      	ldr	r2, [r7, #28]
 8006aa8:	440a      	add	r2, r1
 8006aaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006aae:	0cdb      	lsrs	r3, r3, #19
 8006ab0:	04db      	lsls	r3, r3, #19
 8006ab2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	0151      	lsls	r1, r2, #5
 8006ac6:	69fa      	ldr	r2, [r7, #28]
 8006ac8:	440a      	add	r2, r1
 8006aca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ace:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006ad2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006ad6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d132      	bne.n	8006b44 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d003      	beq.n	8006aee <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	689a      	ldr	r2, [r3, #8]
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	689a      	ldr	r2, [r3, #8]
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b02:	691a      	ldr	r2, [r3, #16]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b0c:	69b9      	ldr	r1, [r7, #24]
 8006b0e:	0148      	lsls	r0, r1, #5
 8006b10:	69f9      	ldr	r1, [r7, #28]
 8006b12:	4401      	add	r1, r0
 8006b14:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	0151      	lsls	r1, r2, #5
 8006b2e:	69fa      	ldr	r2, [r7, #28]
 8006b30:	440a      	add	r2, r1
 8006b32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b36:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b3a:	6113      	str	r3, [r2, #16]
 8006b3c:	e062      	b.n	8006c04 <USB_EPStartXfer+0x490>
 8006b3e:	bf00      	nop
 8006b40:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d123      	bne.n	8006b94 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b58:	691a      	ldr	r2, [r3, #16]
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b62:	69b9      	ldr	r1, [r7, #24]
 8006b64:	0148      	lsls	r0, r1, #5
 8006b66:	69f9      	ldr	r1, [r7, #28]
 8006b68:	4401      	add	r1, r0
 8006b6a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	0151      	lsls	r1, r2, #5
 8006b84:	69fa      	ldr	r2, [r7, #28]
 8006b86:	440a      	add	r2, r1
 8006b88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b90:	6113      	str	r3, [r2, #16]
 8006b92:	e037      	b.n	8006c04 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	691a      	ldr	r2, [r3, #16]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	1e5a      	subs	r2, r3, #1
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	8afa      	ldrh	r2, [r7, #22]
 8006bb0:	fb03 f202 	mul.w	r2, r3, r2
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	015a      	lsls	r2, r3, #5
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bc4:	691a      	ldr	r2, [r3, #16]
 8006bc6:	8afb      	ldrh	r3, [r7, #22]
 8006bc8:	04d9      	lsls	r1, r3, #19
 8006bca:	4b38      	ldr	r3, [pc, #224]	@ (8006cac <USB_EPStartXfer+0x538>)
 8006bcc:	400b      	ands	r3, r1
 8006bce:	69b9      	ldr	r1, [r7, #24]
 8006bd0:	0148      	lsls	r0, r1, #5
 8006bd2:	69f9      	ldr	r1, [r7, #28]
 8006bd4:	4401      	add	r1, r0
 8006bd6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bea:	691a      	ldr	r2, [r3, #16]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bf4:	69b9      	ldr	r1, [r7, #24]
 8006bf6:	0148      	lsls	r0, r1, #5
 8006bf8:	69f9      	ldr	r1, [r7, #28]
 8006bfa:	4401      	add	r1, r0
 8006bfc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006c00:	4313      	orrs	r3, r2
 8006c02:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006c04:	79fb      	ldrb	r3, [r7, #7]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d10d      	bne.n	8006c26 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d009      	beq.n	8006c26 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	68d9      	ldr	r1, [r3, #12]
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	015a      	lsls	r2, r3, #5
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c22:	460a      	mov	r2, r1
 8006c24:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	791b      	ldrb	r3, [r3, #4]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d128      	bne.n	8006c80 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d110      	bne.n	8006c60 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	0151      	lsls	r1, r2, #5
 8006c50:	69fa      	ldr	r2, [r7, #28]
 8006c52:	440a      	add	r2, r1
 8006c54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c58:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006c5c:	6013      	str	r3, [r2, #0]
 8006c5e:	e00f      	b.n	8006c80 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	69ba      	ldr	r2, [r7, #24]
 8006c70:	0151      	lsls	r1, r2, #5
 8006c72:	69fa      	ldr	r2, [r7, #28]
 8006c74:	440a      	add	r2, r1
 8006c76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c7e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	69ba      	ldr	r2, [r7, #24]
 8006c90:	0151      	lsls	r1, r2, #5
 8006c92:	69fa      	ldr	r2, [r7, #28]
 8006c94:	440a      	add	r2, r1
 8006c96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c9a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006c9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3720      	adds	r7, #32
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	1ff80000 	.word	0x1ff80000

08006cb0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	785b      	ldrb	r3, [r3, #1]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d14a      	bne.n	8006d64 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ce2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ce6:	f040 8086 	bne.w	8006df6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	7812      	ldrb	r2, [r2, #0]
 8006cfe:	0151      	lsls	r1, r2, #5
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	440a      	add	r2, r1
 8006d04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d08:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006d0c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	7812      	ldrb	r2, [r2, #0]
 8006d22:	0151      	lsls	r1, r2, #5
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	440a      	add	r2, r1
 8006d28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	3301      	adds	r3, #1
 8006d36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d902      	bls.n	8006d48 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	75fb      	strb	r3, [r7, #23]
          break;
 8006d46:	e056      	b.n	8006df6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d60:	d0e7      	beq.n	8006d32 <USB_EPStopXfer+0x82>
 8006d62:	e048      	b.n	8006df6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d7c:	d13b      	bne.n	8006df6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	015a      	lsls	r2, r3, #5
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	7812      	ldrb	r2, [r2, #0]
 8006d92:	0151      	lsls	r1, r2, #5
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	440a      	add	r2, r1
 8006d98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d9c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006da0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	7812      	ldrb	r2, [r2, #0]
 8006db6:	0151      	lsls	r1, r2, #5
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	440a      	add	r2, r1
 8006dbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dc0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006dc4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d902      	bls.n	8006ddc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	75fb      	strb	r3, [r7, #23]
          break;
 8006dda:	e00c      	b.n	8006df6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006df0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006df4:	d0e7      	beq.n	8006dc6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	371c      	adds	r7, #28
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b089      	sub	sp, #36	@ 0x24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	4611      	mov	r1, r2
 8006e10:	461a      	mov	r2, r3
 8006e12:	460b      	mov	r3, r1
 8006e14:	71fb      	strb	r3, [r7, #7]
 8006e16:	4613      	mov	r3, r2
 8006e18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006e22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d123      	bne.n	8006e72 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006e2a:	88bb      	ldrh	r3, [r7, #4]
 8006e2c:	3303      	adds	r3, #3
 8006e2e:	089b      	lsrs	r3, r3, #2
 8006e30:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006e32:	2300      	movs	r3, #0
 8006e34:	61bb      	str	r3, [r7, #24]
 8006e36:	e018      	b.n	8006e6a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006e38:	79fb      	ldrb	r3, [r7, #7]
 8006e3a:	031a      	lsls	r2, r3, #12
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e44:	461a      	mov	r2, r3
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	3301      	adds	r3, #1
 8006e56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	3301      	adds	r3, #1
 8006e62:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	3301      	adds	r3, #1
 8006e68:	61bb      	str	r3, [r7, #24]
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d3e2      	bcc.n	8006e38 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3724      	adds	r7, #36	@ 0x24
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b08b      	sub	sp, #44	@ 0x2c
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e96:	88fb      	ldrh	r3, [r7, #6]
 8006e98:	089b      	lsrs	r3, r3, #2
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e9e:	88fb      	ldrh	r3, [r7, #6]
 8006ea0:	f003 0303 	and.w	r3, r3, #3
 8006ea4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	623b      	str	r3, [r7, #32]
 8006eaa:	e014      	b.n	8006ed6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb6:	601a      	str	r2, [r3, #0]
    pDest++;
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eba:	3301      	adds	r3, #1
 8006ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ecc:	3301      	adds	r3, #1
 8006ece:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	623b      	str	r3, [r7, #32]
 8006ed6:	6a3a      	ldr	r2, [r7, #32]
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d3e6      	bcc.n	8006eac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006ede:	8bfb      	ldrh	r3, [r7, #30]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d01e      	beq.n	8006f22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eee:	461a      	mov	r2, r3
 8006ef0:	f107 0310 	add.w	r3, r7, #16
 8006ef4:	6812      	ldr	r2, [r2, #0]
 8006ef6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	6a3b      	ldr	r3, [r7, #32]
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	00db      	lsls	r3, r3, #3
 8006f00:	fa22 f303 	lsr.w	r3, r2, r3
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f08:	701a      	strb	r2, [r3, #0]
      i++;
 8006f0a:	6a3b      	ldr	r3, [r7, #32]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f12:	3301      	adds	r3, #1
 8006f14:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006f16:	8bfb      	ldrh	r3, [r7, #30]
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006f1c:	8bfb      	ldrh	r3, [r7, #30]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1ea      	bne.n	8006ef8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	372c      	adds	r7, #44	@ 0x2c
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	785b      	ldrb	r3, [r3, #1]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d12c      	bne.n	8006fa6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	db12      	blt.n	8006f84 <USB_EPSetStall+0x54>
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00f      	beq.n	8006f84 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	0151      	lsls	r1, r2, #5
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	440a      	add	r2, r1
 8006f7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f7e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006f82:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	0151      	lsls	r1, r2, #5
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	440a      	add	r2, r1
 8006f9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006fa2:	6013      	str	r3, [r2, #0]
 8006fa4:	e02b      	b.n	8006ffe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	015a      	lsls	r2, r3, #5
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	4413      	add	r3, r2
 8006fae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	db12      	blt.n	8006fde <USB_EPSetStall+0xae>
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00f      	beq.n	8006fde <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	0151      	lsls	r1, r2, #5
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	440a      	add	r2, r1
 8006fd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fd8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006fdc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	0151      	lsls	r1, r2, #5
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	440a      	add	r2, r1
 8006ff4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ff8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006ffc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	785b      	ldrb	r3, [r3, #1]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d128      	bne.n	800707a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	0151      	lsls	r1, r2, #5
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	440a      	add	r2, r1
 800703e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007042:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007046:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	791b      	ldrb	r3, [r3, #4]
 800704c:	2b03      	cmp	r3, #3
 800704e:	d003      	beq.n	8007058 <USB_EPClearStall+0x4c>
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	791b      	ldrb	r3, [r3, #4]
 8007054:	2b02      	cmp	r3, #2
 8007056:	d138      	bne.n	80070ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	4413      	add	r3, r2
 8007060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	0151      	lsls	r1, r2, #5
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	440a      	add	r2, r1
 800706e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007076:	6013      	str	r3, [r2, #0]
 8007078:	e027      	b.n	80070ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	015a      	lsls	r2, r3, #5
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	4413      	add	r3, r2
 8007082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	0151      	lsls	r1, r2, #5
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	440a      	add	r2, r1
 8007090:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007094:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007098:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	791b      	ldrb	r3, [r3, #4]
 800709e:	2b03      	cmp	r3, #3
 80070a0:	d003      	beq.n	80070aa <USB_EPClearStall+0x9e>
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	791b      	ldrb	r3, [r3, #4]
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d10f      	bne.n	80070ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	015a      	lsls	r2, r3, #5
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	0151      	lsls	r1, r2, #5
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	440a      	add	r2, r1
 80070c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	460b      	mov	r3, r1
 80070e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070f6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80070fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	78fb      	ldrb	r3, [r7, #3]
 8007106:	011b      	lsls	r3, r3, #4
 8007108:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800710c:	68f9      	ldr	r1, [r7, #12]
 800710e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007112:	4313      	orrs	r3, r2
 8007114:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3714      	adds	r7, #20
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800713e:	f023 0303 	bic.w	r3, r3, #3
 8007142:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007152:	f023 0302 	bic.w	r3, r3, #2
 8007156:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007166:	b480      	push	{r7}
 8007168:	b085      	sub	sp, #20
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007180:	f023 0303 	bic.w	r3, r3, #3
 8007184:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007194:	f043 0302 	orr.w	r3, r3, #2
 8007198:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	695b      	ldr	r3, [r3, #20]
 80071b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	4013      	ands	r3, r2
 80071be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80071c0:	68fb      	ldr	r3, [r7, #12]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b085      	sub	sp, #20
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071ea:	69db      	ldr	r3, [r3, #28]
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	4013      	ands	r3, r2
 80071f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	0c1b      	lsrs	r3, r3, #16
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3714      	adds	r7, #20
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007202:	b480      	push	{r7}
 8007204:	b085      	sub	sp, #20
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800721e:	69db      	ldr	r3, [r3, #28]
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	4013      	ands	r3, r2
 8007224:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	b29b      	uxth	r3, r3
}
 800722a:	4618      	mov	r0, r3
 800722c:	3714      	adds	r7, #20
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007236:	b480      	push	{r7}
 8007238:	b085      	sub	sp, #20
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	460b      	mov	r3, r1
 8007240:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007246:	78fb      	ldrb	r3, [r7, #3]
 8007248:	015a      	lsls	r2, r3, #5
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	4413      	add	r3, r2
 800724e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	4013      	ands	r3, r2
 8007262:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007264:	68bb      	ldr	r3, [r7, #8]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007272:	b480      	push	{r7}
 8007274:	b087      	sub	sp, #28
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	460b      	mov	r3, r1
 800727c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007294:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007296:	78fb      	ldrb	r3, [r7, #3]
 8007298:	f003 030f 	and.w	r3, r3, #15
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	fa22 f303 	lsr.w	r3, r2, r3
 80072a2:	01db      	lsls	r3, r3, #7
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80072ac:	78fb      	ldrb	r3, [r7, #3]
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	4013      	ands	r3, r2
 80072be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80072c0:	68bb      	ldr	r3, [r7, #8]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	371c      	adds	r7, #28
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b083      	sub	sp, #12
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	695b      	ldr	r3, [r3, #20]
 80072da:	f003 0301 	and.w	r3, r3, #1
}
 80072de:	4618      	mov	r0, r3
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b085      	sub	sp, #20
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007304:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007308:	f023 0307 	bic.w	r3, r3, #7
 800730c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800731c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007320:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	460b      	mov	r3, r1
 800733a:	607a      	str	r2, [r7, #4]
 800733c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	333c      	adds	r3, #60	@ 0x3c
 8007346:	3304      	adds	r3, #4
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	4a26      	ldr	r2, [pc, #152]	@ (80073e8 <USB_EP0_OutStart+0xb8>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d90a      	bls.n	800736a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007360:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007364:	d101      	bne.n	800736a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007366:	2300      	movs	r3, #0
 8007368:	e037      	b.n	80073da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007370:	461a      	mov	r2, r3
 8007372:	2300      	movs	r3, #0
 8007374:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007384:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007388:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007398:	f043 0318 	orr.w	r3, r3, #24
 800739c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073ac:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80073b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80073b2:	7afb      	ldrb	r3, [r7, #11]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d10f      	bne.n	80073d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073be:	461a      	mov	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073d2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80073d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	371c      	adds	r7, #28
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	4f54300a 	.word	0x4f54300a

080073ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073f4:	2300      	movs	r3, #0
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	3301      	adds	r3, #1
 80073fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007404:	d901      	bls.n	800740a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e022      	b.n	8007450 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	2b00      	cmp	r3, #0
 8007410:	daf2      	bge.n	80073f8 <USB_CoreReset+0xc>

  count = 10U;
 8007412:	230a      	movs	r3, #10
 8007414:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007416:	e002      	b.n	800741e <USB_CoreReset+0x32>
  {
    count--;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	3b01      	subs	r3, #1
 800741c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1f9      	bne.n	8007418 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	f043 0201 	orr.w	r2, r3, #1
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	3301      	adds	r3, #1
 8007434:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800743c:	d901      	bls.n	8007442 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e006      	b.n	8007450 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b01      	cmp	r3, #1
 800744c:	d0f0      	beq.n	8007430 <USB_CoreReset+0x44>

  return HAL_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3714      	adds	r7, #20
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	460b      	mov	r3, r1
 8007466:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007468:	2010      	movs	r0, #16
 800746a:	f002 f943 	bl	80096f4 <USBD_static_malloc>
 800746e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d109      	bne.n	800748a <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	32b0      	adds	r2, #176	@ 0xb0
 8007480:	2100      	movs	r1, #0
 8007482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007486:	2302      	movs	r3, #2
 8007488:	e048      	b.n	800751c <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	32b0      	adds	r2, #176	@ 0xb0
 8007494:	68f9      	ldr	r1, [r7, #12]
 8007496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	32b0      	adds	r2, #176	@ 0xb0
 80074a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	7c1b      	ldrb	r3, [r3, #16]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10d      	bne.n	80074d2 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80074b6:	4b1b      	ldr	r3, [pc, #108]	@ (8007524 <USBD_HID_Init+0xc8>)
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	f003 020f 	and.w	r2, r3, #15
 80074be:	6879      	ldr	r1, [r7, #4]
 80074c0:	4613      	mov	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4413      	add	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	440b      	add	r3, r1
 80074ca:	331c      	adds	r3, #28
 80074cc:	2207      	movs	r2, #7
 80074ce:	601a      	str	r2, [r3, #0]
 80074d0:	e00c      	b.n	80074ec <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80074d2:	4b14      	ldr	r3, [pc, #80]	@ (8007524 <USBD_HID_Init+0xc8>)
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	f003 020f 	and.w	r2, r3, #15
 80074da:	6879      	ldr	r1, [r7, #4]
 80074dc:	4613      	mov	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	4413      	add	r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	440b      	add	r3, r1
 80074e6:	331c      	adds	r3, #28
 80074e8:	220a      	movs	r2, #10
 80074ea:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80074ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007524 <USBD_HID_Init+0xc8>)
 80074ee:	7819      	ldrb	r1, [r3, #0]
 80074f0:	2304      	movs	r3, #4
 80074f2:	2203      	movs	r2, #3
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f001 ffec 	bl	80094d2 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80074fa:	4b0a      	ldr	r3, [pc, #40]	@ (8007524 <USBD_HID_Init+0xc8>)
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	f003 020f 	and.w	r2, r3, #15
 8007502:	6879      	ldr	r1, [r7, #4]
 8007504:	4613      	mov	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	440b      	add	r3, r1
 800750e:	3323      	adds	r3, #35	@ 0x23
 8007510:	2201      	movs	r2, #1
 8007512:	701a      	strb	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2200      	movs	r2, #0
 8007518:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	2000015a 	.word	0x2000015a

08007528 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	460b      	mov	r3, r1
 8007532:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8007534:	4b1f      	ldr	r3, [pc, #124]	@ (80075b4 <USBD_HID_DeInit+0x8c>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	4619      	mov	r1, r3
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f001 ffef 	bl	800951e <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8007540:	4b1c      	ldr	r3, [pc, #112]	@ (80075b4 <USBD_HID_DeInit+0x8c>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	f003 020f 	and.w	r2, r3, #15
 8007548:	6879      	ldr	r1, [r7, #4]
 800754a:	4613      	mov	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	440b      	add	r3, r1
 8007554:	3323      	adds	r3, #35	@ 0x23
 8007556:	2200      	movs	r2, #0
 8007558:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800755a:	4b16      	ldr	r3, [pc, #88]	@ (80075b4 <USBD_HID_DeInit+0x8c>)
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	f003 020f 	and.w	r2, r3, #15
 8007562:	6879      	ldr	r1, [r7, #4]
 8007564:	4613      	mov	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	4413      	add	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	440b      	add	r3, r1
 800756e:	331c      	adds	r3, #28
 8007570:	2200      	movs	r2, #0
 8007572:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	32b0      	adds	r2, #176	@ 0xb0
 800757e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d011      	beq.n	80075aa <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	32b0      	adds	r2, #176	@ 0xb0
 8007590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007594:	4618      	mov	r0, r3
 8007596:	f002 f8bb 	bl	8009710 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	32b0      	adds	r2, #176	@ 0xb0
 80075a4:	2100      	movs	r1, #0
 80075a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	2000015a 	.word	0x2000015a

080075b8 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	32b0      	adds	r2, #176	@ 0xb0
 80075cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d0:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80075d2:	2300      	movs	r3, #0
 80075d4:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d101      	bne.n	80075e4 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80075e0:	2303      	movs	r3, #3
 80075e2:	e0e8      	b.n	80077b6 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d046      	beq.n	800767e <USBD_HID_Setup+0xc6>
 80075f0:	2b20      	cmp	r3, #32
 80075f2:	f040 80d8 	bne.w	80077a6 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	785b      	ldrb	r3, [r3, #1]
 80075fa:	3b02      	subs	r3, #2
 80075fc:	2b09      	cmp	r3, #9
 80075fe:	d836      	bhi.n	800766e <USBD_HID_Setup+0xb6>
 8007600:	a201      	add	r2, pc, #4	@ (adr r2, 8007608 <USBD_HID_Setup+0x50>)
 8007602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007606:	bf00      	nop
 8007608:	0800765f 	.word	0x0800765f
 800760c:	0800763f 	.word	0x0800763f
 8007610:	0800766f 	.word	0x0800766f
 8007614:	0800766f 	.word	0x0800766f
 8007618:	0800766f 	.word	0x0800766f
 800761c:	0800766f 	.word	0x0800766f
 8007620:	0800766f 	.word	0x0800766f
 8007624:	0800766f 	.word	0x0800766f
 8007628:	0800764d 	.word	0x0800764d
 800762c:	08007631 	.word	0x08007631
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	885b      	ldrh	r3, [r3, #2]
 8007634:	b2db      	uxtb	r3, r3
 8007636:	461a      	mov	r2, r3
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	601a      	str	r2, [r3, #0]
          break;
 800763c:	e01e      	b.n	800767c <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2201      	movs	r2, #1
 8007642:	4619      	mov	r1, r3
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f001 fbfb 	bl	8008e40 <USBD_CtlSendData>
          break;
 800764a:	e017      	b.n	800767c <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	885b      	ldrh	r3, [r3, #2]
 8007650:	0a1b      	lsrs	r3, r3, #8
 8007652:	b29b      	uxth	r3, r3
 8007654:	b2db      	uxtb	r3, r3
 8007656:	461a      	mov	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	605a      	str	r2, [r3, #4]
          break;
 800765c:	e00e      	b.n	800767c <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3304      	adds	r3, #4
 8007662:	2201      	movs	r2, #1
 8007664:	4619      	mov	r1, r3
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f001 fbea 	bl	8008e40 <USBD_CtlSendData>
          break;
 800766c:	e006      	b.n	800767c <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800766e:	6839      	ldr	r1, [r7, #0]
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f001 fb68 	bl	8008d46 <USBD_CtlError>
          ret = USBD_FAIL;
 8007676:	2303      	movs	r3, #3
 8007678:	75fb      	strb	r3, [r7, #23]
          break;
 800767a:	bf00      	nop
      }
      break;
 800767c:	e09a      	b.n	80077b4 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	785b      	ldrb	r3, [r3, #1]
 8007682:	2b0b      	cmp	r3, #11
 8007684:	f200 8086 	bhi.w	8007794 <USBD_HID_Setup+0x1dc>
 8007688:	a201      	add	r2, pc, #4	@ (adr r2, 8007690 <USBD_HID_Setup+0xd8>)
 800768a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768e:	bf00      	nop
 8007690:	080076c1 	.word	0x080076c1
 8007694:	080077a3 	.word	0x080077a3
 8007698:	08007795 	.word	0x08007795
 800769c:	08007795 	.word	0x08007795
 80076a0:	08007795 	.word	0x08007795
 80076a4:	08007795 	.word	0x08007795
 80076a8:	080076eb 	.word	0x080076eb
 80076ac:	08007795 	.word	0x08007795
 80076b0:	08007795 	.word	0x08007795
 80076b4:	08007795 	.word	0x08007795
 80076b8:	08007743 	.word	0x08007743
 80076bc:	0800776d 	.word	0x0800776d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b03      	cmp	r3, #3
 80076ca:	d107      	bne.n	80076dc <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80076cc:	f107 030a 	add.w	r3, r7, #10
 80076d0:	2202      	movs	r2, #2
 80076d2:	4619      	mov	r1, r3
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f001 fbb3 	bl	8008e40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076da:	e063      	b.n	80077a4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f001 fb31 	bl	8008d46 <USBD_CtlError>
            ret = USBD_FAIL;
 80076e4:	2303      	movs	r3, #3
 80076e6:	75fb      	strb	r3, [r7, #23]
          break;
 80076e8:	e05c      	b.n	80077a4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	885b      	ldrh	r3, [r3, #2]
 80076ee:	0a1b      	lsrs	r3, r3, #8
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	2b22      	cmp	r3, #34	@ 0x22
 80076f4:	d108      	bne.n	8007708 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	88db      	ldrh	r3, [r3, #6]
 80076fa:	2b4a      	cmp	r3, #74	@ 0x4a
 80076fc:	bf28      	it	cs
 80076fe:	234a      	movcs	r3, #74	@ 0x4a
 8007700:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8007702:	4b2f      	ldr	r3, [pc, #188]	@ (80077c0 <USBD_HID_Setup+0x208>)
 8007704:	613b      	str	r3, [r7, #16]
 8007706:	e015      	b.n	8007734 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	885b      	ldrh	r3, [r3, #2]
 800770c:	0a1b      	lsrs	r3, r3, #8
 800770e:	b29b      	uxth	r3, r3
 8007710:	2b21      	cmp	r3, #33	@ 0x21
 8007712:	d108      	bne.n	8007726 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8007714:	4b2b      	ldr	r3, [pc, #172]	@ (80077c4 <USBD_HID_Setup+0x20c>)
 8007716:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	88db      	ldrh	r3, [r3, #6]
 800771c:	2b09      	cmp	r3, #9
 800771e:	bf28      	it	cs
 8007720:	2309      	movcs	r3, #9
 8007722:	82bb      	strh	r3, [r7, #20]
 8007724:	e006      	b.n	8007734 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007726:	6839      	ldr	r1, [r7, #0]
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f001 fb0c 	bl	8008d46 <USBD_CtlError>
            ret = USBD_FAIL;
 800772e:	2303      	movs	r3, #3
 8007730:	75fb      	strb	r3, [r7, #23]
            break;
 8007732:	e037      	b.n	80077a4 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007734:	8abb      	ldrh	r3, [r7, #20]
 8007736:	461a      	mov	r2, r3
 8007738:	6939      	ldr	r1, [r7, #16]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f001 fb80 	bl	8008e40 <USBD_CtlSendData>
          break;
 8007740:	e030      	b.n	80077a4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b03      	cmp	r3, #3
 800774c:	d107      	bne.n	800775e <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	3308      	adds	r3, #8
 8007752:	2201      	movs	r2, #1
 8007754:	4619      	mov	r1, r3
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f001 fb72 	bl	8008e40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800775c:	e022      	b.n	80077a4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f001 faf0 	bl	8008d46 <USBD_CtlError>
            ret = USBD_FAIL;
 8007766:	2303      	movs	r3, #3
 8007768:	75fb      	strb	r3, [r7, #23]
          break;
 800776a:	e01b      	b.n	80077a4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b03      	cmp	r3, #3
 8007776:	d106      	bne.n	8007786 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	885b      	ldrh	r3, [r3, #2]
 800777c:	b2db      	uxtb	r3, r3
 800777e:	461a      	mov	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007784:	e00e      	b.n	80077a4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f001 fadc 	bl	8008d46 <USBD_CtlError>
            ret = USBD_FAIL;
 800778e:	2303      	movs	r3, #3
 8007790:	75fb      	strb	r3, [r7, #23]
          break;
 8007792:	e007      	b.n	80077a4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f001 fad5 	bl	8008d46 <USBD_CtlError>
          ret = USBD_FAIL;
 800779c:	2303      	movs	r3, #3
 800779e:	75fb      	strb	r3, [r7, #23]
          break;
 80077a0:	e000      	b.n	80077a4 <USBD_HID_Setup+0x1ec>
          break;
 80077a2:	bf00      	nop
      }
      break;
 80077a4:	e006      	b.n	80077b4 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80077a6:	6839      	ldr	r1, [r7, #0]
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f001 facc 	bl	8008d46 <USBD_CtlError>
      ret = USBD_FAIL;
 80077ae:	2303      	movs	r3, #3
 80077b0:	75fb      	strb	r3, [r7, #23]
      break;
 80077b2:	bf00      	nop
  }

  return (uint8_t)ret;
 80077b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3718      	adds	r7, #24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	20000110 	.word	0x20000110
 80077c4:	200000f8 	.word	0x200000f8

080077c8 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	4613      	mov	r3, r2
 80077d4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	32b0      	adds	r2, #176	@ 0xb0
 80077e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e4:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e014      	b.n	800781a <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	2b03      	cmp	r3, #3
 80077fa:	d10d      	bne.n	8007818 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	7b1b      	ldrb	r3, [r3, #12]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d109      	bne.n	8007818 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	2201      	movs	r2, #1
 8007808:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800780a:	4b06      	ldr	r3, [pc, #24]	@ (8007824 <USBD_HID_SendReport+0x5c>)
 800780c:	7819      	ldrb	r1, [r3, #0]
 800780e:	88fb      	ldrh	r3, [r7, #6]
 8007810:	68ba      	ldr	r2, [r7, #8]
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f001 ff2b 	bl	800966e <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3718      	adds	r7, #24
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	2000015a 	.word	0x2000015a

08007828 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007830:	2181      	movs	r1, #129	@ 0x81
 8007832:	4809      	ldr	r0, [pc, #36]	@ (8007858 <USBD_HID_GetFSCfgDesc+0x30>)
 8007834:	f000 fc4e 	bl	80080d4 <USBD_GetEpDesc>
 8007838:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d002      	beq.n	8007846 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	220a      	movs	r2, #10
 8007844:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2222      	movs	r2, #34	@ 0x22
 800784a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800784c:	4b02      	ldr	r3, [pc, #8]	@ (8007858 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	200000d4 	.word	0x200000d4

0800785c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007864:	2181      	movs	r1, #129	@ 0x81
 8007866:	4809      	ldr	r0, [pc, #36]	@ (800788c <USBD_HID_GetHSCfgDesc+0x30>)
 8007868:	f000 fc34 	bl	80080d4 <USBD_GetEpDesc>
 800786c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d002      	beq.n	800787a <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2207      	movs	r2, #7
 8007878:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2222      	movs	r2, #34	@ 0x22
 800787e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007880:	4b02      	ldr	r3, [pc, #8]	@ (800788c <USBD_HID_GetHSCfgDesc+0x30>)
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	200000d4 	.word	0x200000d4

08007890 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007898:	2181      	movs	r1, #129	@ 0x81
 800789a:	4809      	ldr	r0, [pc, #36]	@ (80078c0 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 800789c:	f000 fc1a 	bl	80080d4 <USBD_GetEpDesc>
 80078a0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d002      	beq.n	80078ae <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	220a      	movs	r2, #10
 80078ac:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2222      	movs	r2, #34	@ 0x22
 80078b2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80078b4:	4b02      	ldr	r3, [pc, #8]	@ (80078c0 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	200000d4 	.word	0x200000d4

080078c4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	460b      	mov	r3, r1
 80078ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	32b0      	adds	r2, #176	@ 0xb0
 80078da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078de:	2200      	movs	r2, #0
 80078e0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	220a      	movs	r2, #10
 80078fc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80078fe:	4b03      	ldr	r3, [pc, #12]	@ (800790c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007900:	4618      	mov	r0, r3
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	20000104 	.word	0x20000104

08007910 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	4613      	mov	r3, r2
 800791c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d101      	bne.n	8007928 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007924:	2303      	movs	r3, #3
 8007926:	e01f      	b.n	8007968 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d003      	beq.n	800794e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	68ba      	ldr	r2, [r7, #8]
 800794a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	79fa      	ldrb	r2, [r7, #7]
 800795a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f001 fd51 	bl	8009404 <USBD_LL_Init>
 8007962:	4603      	mov	r3, r0
 8007964:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007966:	7dfb      	ldrb	r3, [r7, #23]
}
 8007968:	4618      	mov	r0, r3
 800796a:	3718      	adds	r7, #24
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800797a:	2300      	movs	r3, #0
 800797c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d101      	bne.n	8007988 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007984:	2303      	movs	r3, #3
 8007986:	e025      	b.n	80079d4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	32ae      	adds	r2, #174	@ 0xae
 800799a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800799e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00f      	beq.n	80079c4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	32ae      	adds	r2, #174	@ 0xae
 80079ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b4:	f107 020e 	add.w	r2, r7, #14
 80079b8:	4610      	mov	r0, r2
 80079ba:	4798      	blx	r3
 80079bc:	4602      	mov	r2, r0
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80079ca:	1c5a      	adds	r2, r3, #1
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3710      	adds	r7, #16
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 fd59 	bl	800949c <USBD_LL_Start>
 80079ea:	4603      	mov	r3, r0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80079fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b084      	sub	sp, #16
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	460b      	mov	r3, r1
 8007a14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a16:	2300      	movs	r3, #0
 8007a18:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d009      	beq.n	8007a38 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	78fa      	ldrb	r2, [r7, #3]
 8007a2e:	4611      	mov	r1, r2
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	4798      	blx	r3
 8007a34:	4603      	mov	r3, r0
 8007a36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b084      	sub	sp, #16
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	78fa      	ldrb	r2, [r7, #3]
 8007a5c:	4611      	mov	r1, r2
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	4798      	blx	r3
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d001      	beq.n	8007a6c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b084      	sub	sp, #16
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
 8007a7e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f001 f922 	bl	8008cd2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007aaa:	f003 031f 	and.w	r3, r3, #31
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d01a      	beq.n	8007ae8 <USBD_LL_SetupStage+0x72>
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d822      	bhi.n	8007afc <USBD_LL_SetupStage+0x86>
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d002      	beq.n	8007ac0 <USBD_LL_SetupStage+0x4a>
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d00a      	beq.n	8007ad4 <USBD_LL_SetupStage+0x5e>
 8007abe:	e01d      	b.n	8007afc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fb77 	bl	80081bc <USBD_StdDevReq>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ad2:	e020      	b.n	8007b16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007ada:	4619      	mov	r1, r3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 fbdf 	bl	80082a0 <USBD_StdItfReq>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ae6:	e016      	b.n	8007b16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fc41 	bl	8008378 <USBD_StdEPReq>
 8007af6:	4603      	mov	r3, r0
 8007af8:	73fb      	strb	r3, [r7, #15]
      break;
 8007afa:	e00c      	b.n	8007b16 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007b02:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f001 fd26 	bl	800955c <USBD_LL_StallEP>
 8007b10:	4603      	mov	r3, r0
 8007b12:	73fb      	strb	r3, [r7, #15]
      break;
 8007b14:	bf00      	nop
  }

  return ret;
 8007b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	607a      	str	r2, [r7, #4]
 8007b2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007b32:	7afb      	ldrb	r3, [r7, #11]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d177      	bne.n	8007c28 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007b3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	f040 80a1 	bne.w	8007c8e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	8992      	ldrh	r2, [r2, #12]
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d91c      	bls.n	8007b92 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	8992      	ldrh	r2, [r2, #12]
 8007b60:	1a9a      	subs	r2, r3, r2
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	693a      	ldr	r2, [r7, #16]
 8007b6c:	8992      	ldrh	r2, [r2, #12]
 8007b6e:	441a      	add	r2, r3
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	6919      	ldr	r1, [r3, #16]
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	899b      	ldrh	r3, [r3, #12]
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	4293      	cmp	r3, r2
 8007b84:	bf38      	it	cc
 8007b86:	4613      	movcc	r3, r2
 8007b88:	461a      	mov	r2, r3
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f001 f987 	bl	8008e9e <USBD_CtlContinueRx>
 8007b90:	e07d      	b.n	8007c8e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007b98:	f003 031f 	and.w	r3, r3, #31
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d014      	beq.n	8007bca <USBD_LL_DataOutStage+0xaa>
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d81d      	bhi.n	8007be0 <USBD_LL_DataOutStage+0xc0>
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d002      	beq.n	8007bae <USBD_LL_DataOutStage+0x8e>
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d003      	beq.n	8007bb4 <USBD_LL_DataOutStage+0x94>
 8007bac:	e018      	b.n	8007be0 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	75bb      	strb	r3, [r7, #22]
            break;
 8007bb2:	e018      	b.n	8007be6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f000 fa6e 	bl	80080a0 <USBD_CoreFindIF>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	75bb      	strb	r3, [r7, #22]
            break;
 8007bc8:	e00d      	b.n	8007be6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f000 fa70 	bl	80080ba <USBD_CoreFindEP>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	75bb      	strb	r3, [r7, #22]
            break;
 8007bde:	e002      	b.n	8007be6 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007be0:	2300      	movs	r3, #0
 8007be2:	75bb      	strb	r3, [r7, #22]
            break;
 8007be4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007be6:	7dbb      	ldrb	r3, [r7, #22]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d119      	bne.n	8007c20 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b03      	cmp	r3, #3
 8007bf6:	d113      	bne.n	8007c20 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007bf8:	7dba      	ldrb	r2, [r7, #22]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	32ae      	adds	r2, #174	@ 0xae
 8007bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00b      	beq.n	8007c20 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8007c08:	7dba      	ldrb	r2, [r7, #22]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007c10:	7dba      	ldrb	r2, [r7, #22]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	32ae      	adds	r2, #174	@ 0xae
 8007c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f001 f94d 	bl	8008ec0 <USBD_CtlSendStatus>
 8007c26:	e032      	b.n	8007c8e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007c28:	7afb      	ldrb	r3, [r7, #11]
 8007c2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	4619      	mov	r1, r3
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f000 fa41 	bl	80080ba <USBD_CoreFindEP>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c3c:	7dbb      	ldrb	r3, [r7, #22]
 8007c3e:	2bff      	cmp	r3, #255	@ 0xff
 8007c40:	d025      	beq.n	8007c8e <USBD_LL_DataOutStage+0x16e>
 8007c42:	7dbb      	ldrb	r3, [r7, #22]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d122      	bne.n	8007c8e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	2b03      	cmp	r3, #3
 8007c52:	d117      	bne.n	8007c84 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007c54:	7dba      	ldrb	r2, [r7, #22]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	32ae      	adds	r2, #174	@ 0xae
 8007c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00f      	beq.n	8007c84 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007c64:	7dba      	ldrb	r2, [r7, #22]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007c6c:	7dba      	ldrb	r2, [r7, #22]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	32ae      	adds	r2, #174	@ 0xae
 8007c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	7afa      	ldrb	r2, [r7, #11]
 8007c7a:	4611      	mov	r1, r2
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	4798      	blx	r3
 8007c80:	4603      	mov	r3, r0
 8007c82:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8007c8a:	7dfb      	ldrb	r3, [r7, #23]
 8007c8c:	e000      	b.n	8007c90 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3718      	adds	r7, #24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	607a      	str	r2, [r7, #4]
 8007ca4:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007ca6:	7afb      	ldrb	r3, [r7, #11]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d178      	bne.n	8007d9e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	3314      	adds	r3, #20
 8007cb0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d163      	bne.n	8007d84 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	8992      	ldrh	r2, [r2, #12]
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d91c      	bls.n	8007d02 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	693a      	ldr	r2, [r7, #16]
 8007cce:	8992      	ldrh	r2, [r2, #12]
 8007cd0:	1a9a      	subs	r2, r3, r2
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	693a      	ldr	r2, [r7, #16]
 8007cdc:	8992      	ldrh	r2, [r2, #12]
 8007cde:	441a      	add	r2, r3
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	6919      	ldr	r1, [r3, #16]
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	461a      	mov	r2, r3
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f001 f8c4 	bl	8008e7c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f001 fcd8 	bl	80096b0 <USBD_LL_PrepareReceive>
 8007d00:	e040      	b.n	8007d84 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	899b      	ldrh	r3, [r3, #12]
 8007d06:	461a      	mov	r2, r3
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d11c      	bne.n	8007d4a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d316      	bcc.n	8007d4a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d20f      	bcs.n	8007d4a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f001 f8a4 	bl	8008e7c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	2200      	movs	r2, #0
 8007d40:	2100      	movs	r1, #0
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f001 fcb4 	bl	80096b0 <USBD_LL_PrepareReceive>
 8007d48:	e01c      	b.n	8007d84 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b03      	cmp	r3, #3
 8007d54:	d10f      	bne.n	8007d76 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d009      	beq.n	8007d76 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d76:	2180      	movs	r1, #128	@ 0x80
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f001 fbef 	bl	800955c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f001 f8b1 	bl	8008ee6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d03a      	beq.n	8007e04 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f7ff fe30 	bl	80079f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007d9c:	e032      	b.n	8007e04 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007d9e:	7afb      	ldrb	r3, [r7, #11]
 8007da0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	4619      	mov	r1, r3
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f000 f986 	bl	80080ba <USBD_CoreFindEP>
 8007dae:	4603      	mov	r3, r0
 8007db0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007db2:	7dfb      	ldrb	r3, [r7, #23]
 8007db4:	2bff      	cmp	r3, #255	@ 0xff
 8007db6:	d025      	beq.n	8007e04 <USBD_LL_DataInStage+0x16c>
 8007db8:	7dfb      	ldrb	r3, [r7, #23]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d122      	bne.n	8007e04 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b03      	cmp	r3, #3
 8007dc8:	d11c      	bne.n	8007e04 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007dca:	7dfa      	ldrb	r2, [r7, #23]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	32ae      	adds	r2, #174	@ 0xae
 8007dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d014      	beq.n	8007e04 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007dda:	7dfa      	ldrb	r2, [r7, #23]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007de2:	7dfa      	ldrb	r2, [r7, #23]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	32ae      	adds	r2, #174	@ 0xae
 8007de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	7afa      	ldrb	r2, [r7, #11]
 8007df0:	4611      	mov	r1, r2
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	4798      	blx	r3
 8007df6:	4603      	mov	r3, r0
 8007df8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007dfa:	7dbb      	ldrb	r3, [r7, #22]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d001      	beq.n	8007e04 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007e00:	7dbb      	ldrb	r3, [r7, #22]
 8007e02:	e000      	b.n	8007e06 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3718      	adds	r7, #24
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b084      	sub	sp, #16
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d014      	beq.n	8007e74 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00e      	beq.n	8007e74 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	6852      	ldr	r2, [r2, #4]
 8007e62:	b2d2      	uxtb	r2, r2
 8007e64:	4611      	mov	r1, r2
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	4798      	blx	r3
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d001      	beq.n	8007e74 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007e70:	2303      	movs	r3, #3
 8007e72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e74:	2340      	movs	r3, #64	@ 0x40
 8007e76:	2200      	movs	r2, #0
 8007e78:	2100      	movs	r1, #0
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f001 fb29 	bl	80094d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2240      	movs	r2, #64	@ 0x40
 8007e8c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e90:	2340      	movs	r3, #64	@ 0x40
 8007e92:	2200      	movs	r2, #0
 8007e94:	2180      	movs	r1, #128	@ 0x80
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f001 fb1b 	bl	80094d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2240      	movs	r2, #64	@ 0x40
 8007ea8:	841a      	strh	r2, [r3, #32]

  return ret;
 8007eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	78fa      	ldrb	r2, [r7, #3]
 8007ec4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	2b04      	cmp	r3, #4
 8007ee6:	d006      	beq.n	8007ef6 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2204      	movs	r2, #4
 8007efa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b04      	cmp	r3, #4
 8007f1e:	d106      	bne.n	8007f2e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007f26:	b2da      	uxtb	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	2b03      	cmp	r3, #3
 8007f4e:	d110      	bne.n	8007f72 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00b      	beq.n	8007f72 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d005      	beq.n	8007f72 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f6c:	69db      	ldr	r3, [r3, #28]
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	460b      	mov	r3, r1
 8007f86:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	32ae      	adds	r2, #174	@ 0xae
 8007f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e01c      	b.n	8007fd8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d115      	bne.n	8007fd6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	32ae      	adds	r2, #174	@ 0xae
 8007fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00b      	beq.n	8007fd6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	32ae      	adds	r2, #174	@ 0xae
 8007fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fcc:	6a1b      	ldr	r3, [r3, #32]
 8007fce:	78fa      	ldrb	r2, [r7, #3]
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	32ae      	adds	r2, #174	@ 0xae
 8007ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d101      	bne.n	8008002 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e01c      	b.n	800803c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b03      	cmp	r3, #3
 800800c:	d115      	bne.n	800803a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	32ae      	adds	r2, #174	@ 0xae
 8008018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800801c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00b      	beq.n	800803a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	32ae      	adds	r2, #174	@ 0xae
 800802c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008032:	78fa      	ldrb	r2, [r7, #3]
 8008034:	4611      	mov	r1, r2
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	370c      	adds	r7, #12
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00e      	beq.n	8008096 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	6852      	ldr	r2, [r2, #4]
 8008084:	b2d2      	uxtb	r2, r2
 8008086:	4611      	mov	r1, r2
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	4798      	blx	r3
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008092:	2303      	movs	r3, #3
 8008094:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008096:	7bfb      	ldrb	r3, [r7, #15]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80080ac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	370c      	adds	r7, #12
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80080ba:	b480      	push	{r7}
 80080bc:	b083      	sub	sp, #12
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
 80080c2:	460b      	mov	r3, r1
 80080c4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80080c6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b086      	sub	sp, #24
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	460b      	mov	r3, r1
 80080de:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80080e8:	2300      	movs	r3, #0
 80080ea:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	885b      	ldrh	r3, [r3, #2]
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	7812      	ldrb	r2, [r2, #0]
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d91f      	bls.n	800813a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008100:	e013      	b.n	800812a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008102:	f107 030a 	add.w	r3, r7, #10
 8008106:	4619      	mov	r1, r3
 8008108:	6978      	ldr	r0, [r7, #20]
 800810a:	f000 f81b 	bl	8008144 <USBD_GetNextDesc>
 800810e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	785b      	ldrb	r3, [r3, #1]
 8008114:	2b05      	cmp	r3, #5
 8008116:	d108      	bne.n	800812a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	789b      	ldrb	r3, [r3, #2]
 8008120:	78fa      	ldrb	r2, [r7, #3]
 8008122:	429a      	cmp	r2, r3
 8008124:	d008      	beq.n	8008138 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008126:	2300      	movs	r3, #0
 8008128:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	885b      	ldrh	r3, [r3, #2]
 800812e:	b29a      	uxth	r2, r3
 8008130:	897b      	ldrh	r3, [r7, #10]
 8008132:	429a      	cmp	r2, r3
 8008134:	d8e5      	bhi.n	8008102 <USBD_GetEpDesc+0x2e>
 8008136:	e000      	b.n	800813a <USBD_GetEpDesc+0x66>
          break;
 8008138:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800813a:	693b      	ldr	r3, [r7, #16]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3718      	adds	r7, #24
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	881b      	ldrh	r3, [r3, #0]
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	7812      	ldrb	r2, [r2, #0]
 800815a:	4413      	add	r3, r2
 800815c:	b29a      	uxth	r2, r3
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	461a      	mov	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4413      	add	r3, r2
 800816c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800816e:	68fb      	ldr	r3, [r7, #12]
}
 8008170:	4618      	mov	r0, r3
 8008172:	3714      	adds	r7, #20
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800817c:	b480      	push	{r7}
 800817e:	b087      	sub	sp, #28
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	3301      	adds	r3, #1
 8008192:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800819a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800819e:	021b      	lsls	r3, r3, #8
 80081a0:	b21a      	sxth	r2, r3
 80081a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	b21b      	sxth	r3, r3
 80081aa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80081ac:	89fb      	ldrh	r3, [r7, #14]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	371c      	adds	r7, #28
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
	...

080081bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80081d2:	2b40      	cmp	r3, #64	@ 0x40
 80081d4:	d005      	beq.n	80081e2 <USBD_StdDevReq+0x26>
 80081d6:	2b40      	cmp	r3, #64	@ 0x40
 80081d8:	d857      	bhi.n	800828a <USBD_StdDevReq+0xce>
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00f      	beq.n	80081fe <USBD_StdDevReq+0x42>
 80081de:	2b20      	cmp	r3, #32
 80081e0:	d153      	bne.n	800828a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	32ae      	adds	r2, #174	@ 0xae
 80081ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	4798      	blx	r3
 80081f8:	4603      	mov	r3, r0
 80081fa:	73fb      	strb	r3, [r7, #15]
      break;
 80081fc:	e04a      	b.n	8008294 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	785b      	ldrb	r3, [r3, #1]
 8008202:	2b09      	cmp	r3, #9
 8008204:	d83b      	bhi.n	800827e <USBD_StdDevReq+0xc2>
 8008206:	a201      	add	r2, pc, #4	@ (adr r2, 800820c <USBD_StdDevReq+0x50>)
 8008208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820c:	08008261 	.word	0x08008261
 8008210:	08008275 	.word	0x08008275
 8008214:	0800827f 	.word	0x0800827f
 8008218:	0800826b 	.word	0x0800826b
 800821c:	0800827f 	.word	0x0800827f
 8008220:	0800823f 	.word	0x0800823f
 8008224:	08008235 	.word	0x08008235
 8008228:	0800827f 	.word	0x0800827f
 800822c:	08008257 	.word	0x08008257
 8008230:	08008249 	.word	0x08008249
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008234:	6839      	ldr	r1, [r7, #0]
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fa3e 	bl	80086b8 <USBD_GetDescriptor>
          break;
 800823c:	e024      	b.n	8008288 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800823e:	6839      	ldr	r1, [r7, #0]
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fba3 	bl	800898c <USBD_SetAddress>
          break;
 8008246:	e01f      	b.n	8008288 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fbe2 	bl	8008a14 <USBD_SetConfig>
 8008250:	4603      	mov	r3, r0
 8008252:	73fb      	strb	r3, [r7, #15]
          break;
 8008254:	e018      	b.n	8008288 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008256:	6839      	ldr	r1, [r7, #0]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 fc85 	bl	8008b68 <USBD_GetConfig>
          break;
 800825e:	e013      	b.n	8008288 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008260:	6839      	ldr	r1, [r7, #0]
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fcb6 	bl	8008bd4 <USBD_GetStatus>
          break;
 8008268:	e00e      	b.n	8008288 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fce5 	bl	8008c3c <USBD_SetFeature>
          break;
 8008272:	e009      	b.n	8008288 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008274:	6839      	ldr	r1, [r7, #0]
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fd09 	bl	8008c8e <USBD_ClrFeature>
          break;
 800827c:	e004      	b.n	8008288 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800827e:	6839      	ldr	r1, [r7, #0]
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 fd60 	bl	8008d46 <USBD_CtlError>
          break;
 8008286:	bf00      	nop
      }
      break;
 8008288:	e004      	b.n	8008294 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800828a:	6839      	ldr	r1, [r7, #0]
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fd5a 	bl	8008d46 <USBD_CtlError>
      break;
 8008292:	bf00      	nop
  }

  return ret;
 8008294:	7bfb      	ldrb	r3, [r7, #15]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop

080082a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80082b6:	2b40      	cmp	r3, #64	@ 0x40
 80082b8:	d005      	beq.n	80082c6 <USBD_StdItfReq+0x26>
 80082ba:	2b40      	cmp	r3, #64	@ 0x40
 80082bc:	d852      	bhi.n	8008364 <USBD_StdItfReq+0xc4>
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d001      	beq.n	80082c6 <USBD_StdItfReq+0x26>
 80082c2:	2b20      	cmp	r3, #32
 80082c4:	d14e      	bne.n	8008364 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	3b01      	subs	r3, #1
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d840      	bhi.n	8008356 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	889b      	ldrh	r3, [r3, #4]
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d836      	bhi.n	800834c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	889b      	ldrh	r3, [r3, #4]
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	4619      	mov	r1, r3
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7ff feda 	bl	80080a0 <USBD_CoreFindIF>
 80082ec:	4603      	mov	r3, r0
 80082ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082f0:	7bbb      	ldrb	r3, [r7, #14]
 80082f2:	2bff      	cmp	r3, #255	@ 0xff
 80082f4:	d01d      	beq.n	8008332 <USBD_StdItfReq+0x92>
 80082f6:	7bbb      	ldrb	r3, [r7, #14]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d11a      	bne.n	8008332 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80082fc:	7bba      	ldrb	r2, [r7, #14]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	32ae      	adds	r2, #174	@ 0xae
 8008302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00f      	beq.n	800832c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800830c:	7bba      	ldrb	r2, [r7, #14]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008314:	7bba      	ldrb	r2, [r7, #14]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	32ae      	adds	r2, #174	@ 0xae
 800831a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	6839      	ldr	r1, [r7, #0]
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	4798      	blx	r3
 8008326:	4603      	mov	r3, r0
 8008328:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800832a:	e004      	b.n	8008336 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800832c:	2303      	movs	r3, #3
 800832e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008330:	e001      	b.n	8008336 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008332:	2303      	movs	r3, #3
 8008334:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	88db      	ldrh	r3, [r3, #6]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d110      	bne.n	8008360 <USBD_StdItfReq+0xc0>
 800833e:	7bfb      	ldrb	r3, [r7, #15]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10d      	bne.n	8008360 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fdbb 	bl	8008ec0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800834a:	e009      	b.n	8008360 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800834c:	6839      	ldr	r1, [r7, #0]
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fcf9 	bl	8008d46 <USBD_CtlError>
          break;
 8008354:	e004      	b.n	8008360 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008356:	6839      	ldr	r1, [r7, #0]
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 fcf4 	bl	8008d46 <USBD_CtlError>
          break;
 800835e:	e000      	b.n	8008362 <USBD_StdItfReq+0xc2>
          break;
 8008360:	bf00      	nop
      }
      break;
 8008362:	e004      	b.n	800836e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fced 	bl	8008d46 <USBD_CtlError>
      break;
 800836c:	bf00      	nop
  }

  return ret;
 800836e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008382:	2300      	movs	r3, #0
 8008384:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	889b      	ldrh	r3, [r3, #4]
 800838a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008394:	2b40      	cmp	r3, #64	@ 0x40
 8008396:	d007      	beq.n	80083a8 <USBD_StdEPReq+0x30>
 8008398:	2b40      	cmp	r3, #64	@ 0x40
 800839a:	f200 8181 	bhi.w	80086a0 <USBD_StdEPReq+0x328>
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d02a      	beq.n	80083f8 <USBD_StdEPReq+0x80>
 80083a2:	2b20      	cmp	r3, #32
 80083a4:	f040 817c 	bne.w	80086a0 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80083a8:	7bbb      	ldrb	r3, [r7, #14]
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f7ff fe84 	bl	80080ba <USBD_CoreFindEP>
 80083b2:	4603      	mov	r3, r0
 80083b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083b6:	7b7b      	ldrb	r3, [r7, #13]
 80083b8:	2bff      	cmp	r3, #255	@ 0xff
 80083ba:	f000 8176 	beq.w	80086aa <USBD_StdEPReq+0x332>
 80083be:	7b7b      	ldrb	r3, [r7, #13]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f040 8172 	bne.w	80086aa <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80083c6:	7b7a      	ldrb	r2, [r7, #13]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80083ce:	7b7a      	ldrb	r2, [r7, #13]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	32ae      	adds	r2, #174	@ 0xae
 80083d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f000 8165 	beq.w	80086aa <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80083e0:	7b7a      	ldrb	r2, [r7, #13]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	32ae      	adds	r2, #174	@ 0xae
 80083e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	6839      	ldr	r1, [r7, #0]
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	4798      	blx	r3
 80083f2:	4603      	mov	r3, r0
 80083f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80083f6:	e158      	b.n	80086aa <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	785b      	ldrb	r3, [r3, #1]
 80083fc:	2b03      	cmp	r3, #3
 80083fe:	d008      	beq.n	8008412 <USBD_StdEPReq+0x9a>
 8008400:	2b03      	cmp	r3, #3
 8008402:	f300 8147 	bgt.w	8008694 <USBD_StdEPReq+0x31c>
 8008406:	2b00      	cmp	r3, #0
 8008408:	f000 809b 	beq.w	8008542 <USBD_StdEPReq+0x1ca>
 800840c:	2b01      	cmp	r3, #1
 800840e:	d03c      	beq.n	800848a <USBD_StdEPReq+0x112>
 8008410:	e140      	b.n	8008694 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b02      	cmp	r3, #2
 800841c:	d002      	beq.n	8008424 <USBD_StdEPReq+0xac>
 800841e:	2b03      	cmp	r3, #3
 8008420:	d016      	beq.n	8008450 <USBD_StdEPReq+0xd8>
 8008422:	e02c      	b.n	800847e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008424:	7bbb      	ldrb	r3, [r7, #14]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00d      	beq.n	8008446 <USBD_StdEPReq+0xce>
 800842a:	7bbb      	ldrb	r3, [r7, #14]
 800842c:	2b80      	cmp	r3, #128	@ 0x80
 800842e:	d00a      	beq.n	8008446 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008430:	7bbb      	ldrb	r3, [r7, #14]
 8008432:	4619      	mov	r1, r3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f001 f891 	bl	800955c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800843a:	2180      	movs	r1, #128	@ 0x80
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f001 f88d 	bl	800955c <USBD_LL_StallEP>
 8008442:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008444:	e020      	b.n	8008488 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fc7c 	bl	8008d46 <USBD_CtlError>
              break;
 800844e:	e01b      	b.n	8008488 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	885b      	ldrh	r3, [r3, #2]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10e      	bne.n	8008476 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008458:	7bbb      	ldrb	r3, [r7, #14]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00b      	beq.n	8008476 <USBD_StdEPReq+0xfe>
 800845e:	7bbb      	ldrb	r3, [r7, #14]
 8008460:	2b80      	cmp	r3, #128	@ 0x80
 8008462:	d008      	beq.n	8008476 <USBD_StdEPReq+0xfe>
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	88db      	ldrh	r3, [r3, #6]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d104      	bne.n	8008476 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800846c:	7bbb      	ldrb	r3, [r7, #14]
 800846e:	4619      	mov	r1, r3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f001 f873 	bl	800955c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fd22 	bl	8008ec0 <USBD_CtlSendStatus>

              break;
 800847c:	e004      	b.n	8008488 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fc60 	bl	8008d46 <USBD_CtlError>
              break;
 8008486:	bf00      	nop
          }
          break;
 8008488:	e109      	b.n	800869e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008490:	b2db      	uxtb	r3, r3
 8008492:	2b02      	cmp	r3, #2
 8008494:	d002      	beq.n	800849c <USBD_StdEPReq+0x124>
 8008496:	2b03      	cmp	r3, #3
 8008498:	d016      	beq.n	80084c8 <USBD_StdEPReq+0x150>
 800849a:	e04b      	b.n	8008534 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800849c:	7bbb      	ldrb	r3, [r7, #14]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00d      	beq.n	80084be <USBD_StdEPReq+0x146>
 80084a2:	7bbb      	ldrb	r3, [r7, #14]
 80084a4:	2b80      	cmp	r3, #128	@ 0x80
 80084a6:	d00a      	beq.n	80084be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80084a8:	7bbb      	ldrb	r3, [r7, #14]
 80084aa:	4619      	mov	r1, r3
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f001 f855 	bl	800955c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80084b2:	2180      	movs	r1, #128	@ 0x80
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f001 f851 	bl	800955c <USBD_LL_StallEP>
 80084ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084bc:	e040      	b.n	8008540 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fc40 	bl	8008d46 <USBD_CtlError>
              break;
 80084c6:	e03b      	b.n	8008540 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	885b      	ldrh	r3, [r3, #2]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d136      	bne.n	800853e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80084d0:	7bbb      	ldrb	r3, [r7, #14]
 80084d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d004      	beq.n	80084e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80084da:	7bbb      	ldrb	r3, [r7, #14]
 80084dc:	4619      	mov	r1, r3
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f001 f85b 	bl	800959a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 fceb 	bl	8008ec0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80084ea:	7bbb      	ldrb	r3, [r7, #14]
 80084ec:	4619      	mov	r1, r3
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7ff fde3 	bl	80080ba <USBD_CoreFindEP>
 80084f4:	4603      	mov	r3, r0
 80084f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084f8:	7b7b      	ldrb	r3, [r7, #13]
 80084fa:	2bff      	cmp	r3, #255	@ 0xff
 80084fc:	d01f      	beq.n	800853e <USBD_StdEPReq+0x1c6>
 80084fe:	7b7b      	ldrb	r3, [r7, #13]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d11c      	bne.n	800853e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008504:	7b7a      	ldrb	r2, [r7, #13]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800850c:	7b7a      	ldrb	r2, [r7, #13]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	32ae      	adds	r2, #174	@ 0xae
 8008512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d010      	beq.n	800853e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800851c:	7b7a      	ldrb	r2, [r7, #13]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	32ae      	adds	r2, #174	@ 0xae
 8008522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	6839      	ldr	r1, [r7, #0]
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	4798      	blx	r3
 800852e:	4603      	mov	r3, r0
 8008530:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008532:	e004      	b.n	800853e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008534:	6839      	ldr	r1, [r7, #0]
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fc05 	bl	8008d46 <USBD_CtlError>
              break;
 800853c:	e000      	b.n	8008540 <USBD_StdEPReq+0x1c8>
              break;
 800853e:	bf00      	nop
          }
          break;
 8008540:	e0ad      	b.n	800869e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b02      	cmp	r3, #2
 800854c:	d002      	beq.n	8008554 <USBD_StdEPReq+0x1dc>
 800854e:	2b03      	cmp	r3, #3
 8008550:	d033      	beq.n	80085ba <USBD_StdEPReq+0x242>
 8008552:	e099      	b.n	8008688 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008554:	7bbb      	ldrb	r3, [r7, #14]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d007      	beq.n	800856a <USBD_StdEPReq+0x1f2>
 800855a:	7bbb      	ldrb	r3, [r7, #14]
 800855c:	2b80      	cmp	r3, #128	@ 0x80
 800855e:	d004      	beq.n	800856a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008560:	6839      	ldr	r1, [r7, #0]
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fbef 	bl	8008d46 <USBD_CtlError>
                break;
 8008568:	e093      	b.n	8008692 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800856a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800856e:	2b00      	cmp	r3, #0
 8008570:	da0b      	bge.n	800858a <USBD_StdEPReq+0x212>
 8008572:	7bbb      	ldrb	r3, [r7, #14]
 8008574:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008578:	4613      	mov	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4413      	add	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	3310      	adds	r3, #16
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	4413      	add	r3, r2
 8008586:	3304      	adds	r3, #4
 8008588:	e00b      	b.n	80085a2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800858a:	7bbb      	ldrb	r3, [r7, #14]
 800858c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008590:	4613      	mov	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	4413      	add	r3, r2
 80085a0:	3304      	adds	r3, #4
 80085a2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	2200      	movs	r2, #0
 80085a8:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	330e      	adds	r3, #14
 80085ae:	2202      	movs	r2, #2
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fc44 	bl	8008e40 <USBD_CtlSendData>
              break;
 80085b8:	e06b      	b.n	8008692 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80085ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	da11      	bge.n	80085e6 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80085c2:	7bbb      	ldrb	r3, [r7, #14]
 80085c4:	f003 020f 	and.w	r2, r3, #15
 80085c8:	6879      	ldr	r1, [r7, #4]
 80085ca:	4613      	mov	r3, r2
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	4413      	add	r3, r2
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	440b      	add	r3, r1
 80085d4:	3323      	adds	r3, #35	@ 0x23
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d117      	bne.n	800860c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fbb1 	bl	8008d46 <USBD_CtlError>
                  break;
 80085e4:	e055      	b.n	8008692 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80085e6:	7bbb      	ldrb	r3, [r7, #14]
 80085e8:	f003 020f 	and.w	r2, r3, #15
 80085ec:	6879      	ldr	r1, [r7, #4]
 80085ee:	4613      	mov	r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	4413      	add	r3, r2
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	440b      	add	r3, r1
 80085f8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d104      	bne.n	800860c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008602:	6839      	ldr	r1, [r7, #0]
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fb9e 	bl	8008d46 <USBD_CtlError>
                  break;
 800860a:	e042      	b.n	8008692 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800860c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008610:	2b00      	cmp	r3, #0
 8008612:	da0b      	bge.n	800862c <USBD_StdEPReq+0x2b4>
 8008614:	7bbb      	ldrb	r3, [r7, #14]
 8008616:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800861a:	4613      	mov	r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	4413      	add	r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	3310      	adds	r3, #16
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	4413      	add	r3, r2
 8008628:	3304      	adds	r3, #4
 800862a:	e00b      	b.n	8008644 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800862c:	7bbb      	ldrb	r3, [r7, #14]
 800862e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008632:	4613      	mov	r3, r2
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4413      	add	r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	4413      	add	r3, r2
 8008642:	3304      	adds	r3, #4
 8008644:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008646:	7bbb      	ldrb	r3, [r7, #14]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d002      	beq.n	8008652 <USBD_StdEPReq+0x2da>
 800864c:	7bbb      	ldrb	r3, [r7, #14]
 800864e:	2b80      	cmp	r3, #128	@ 0x80
 8008650:	d103      	bne.n	800865a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	2200      	movs	r2, #0
 8008656:	739a      	strb	r2, [r3, #14]
 8008658:	e00e      	b.n	8008678 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800865a:	7bbb      	ldrb	r3, [r7, #14]
 800865c:	4619      	mov	r1, r3
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 ffba 	bl	80095d8 <USBD_LL_IsStallEP>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d003      	beq.n	8008672 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	2201      	movs	r2, #1
 800866e:	739a      	strb	r2, [r3, #14]
 8008670:	e002      	b.n	8008678 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	2200      	movs	r2, #0
 8008676:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	330e      	adds	r3, #14
 800867c:	2202      	movs	r2, #2
 800867e:	4619      	mov	r1, r3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 fbdd 	bl	8008e40 <USBD_CtlSendData>
              break;
 8008686:	e004      	b.n	8008692 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8008688:	6839      	ldr	r1, [r7, #0]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fb5b 	bl	8008d46 <USBD_CtlError>
              break;
 8008690:	bf00      	nop
          }
          break;
 8008692:	e004      	b.n	800869e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fb55 	bl	8008d46 <USBD_CtlError>
          break;
 800869c:	bf00      	nop
      }
      break;
 800869e:	e005      	b.n	80086ac <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80086a0:	6839      	ldr	r1, [r7, #0]
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 fb4f 	bl	8008d46 <USBD_CtlError>
      break;
 80086a8:	e000      	b.n	80086ac <USBD_StdEPReq+0x334>
      break;
 80086aa:	bf00      	nop
  }

  return ret;
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
	...

080086b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80086c2:	2300      	movs	r3, #0
 80086c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80086c6:	2300      	movs	r3, #0
 80086c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80086ca:	2300      	movs	r3, #0
 80086cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	885b      	ldrh	r3, [r3, #2]
 80086d2:	0a1b      	lsrs	r3, r3, #8
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	3b01      	subs	r3, #1
 80086d8:	2b06      	cmp	r3, #6
 80086da:	f200 8128 	bhi.w	800892e <USBD_GetDescriptor+0x276>
 80086de:	a201      	add	r2, pc, #4	@ (adr r2, 80086e4 <USBD_GetDescriptor+0x2c>)
 80086e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e4:	08008701 	.word	0x08008701
 80086e8:	08008719 	.word	0x08008719
 80086ec:	08008759 	.word	0x08008759
 80086f0:	0800892f 	.word	0x0800892f
 80086f4:	0800892f 	.word	0x0800892f
 80086f8:	080088cf 	.word	0x080088cf
 80086fc:	080088fb 	.word	0x080088fb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	7c12      	ldrb	r2, [r2, #16]
 800870c:	f107 0108 	add.w	r1, r7, #8
 8008710:	4610      	mov	r0, r2
 8008712:	4798      	blx	r3
 8008714:	60f8      	str	r0, [r7, #12]
      break;
 8008716:	e112      	b.n	800893e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	7c1b      	ldrb	r3, [r3, #16]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10d      	bne.n	800873c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008728:	f107 0208 	add.w	r2, r7, #8
 800872c:	4610      	mov	r0, r2
 800872e:	4798      	blx	r3
 8008730:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	3301      	adds	r3, #1
 8008736:	2202      	movs	r2, #2
 8008738:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800873a:	e100      	b.n	800893e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008744:	f107 0208 	add.w	r2, r7, #8
 8008748:	4610      	mov	r0, r2
 800874a:	4798      	blx	r3
 800874c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	3301      	adds	r3, #1
 8008752:	2202      	movs	r2, #2
 8008754:	701a      	strb	r2, [r3, #0]
      break;
 8008756:	e0f2      	b.n	800893e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	885b      	ldrh	r3, [r3, #2]
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b05      	cmp	r3, #5
 8008760:	f200 80ac 	bhi.w	80088bc <USBD_GetDescriptor+0x204>
 8008764:	a201      	add	r2, pc, #4	@ (adr r2, 800876c <USBD_GetDescriptor+0xb4>)
 8008766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876a:	bf00      	nop
 800876c:	08008785 	.word	0x08008785
 8008770:	080087b9 	.word	0x080087b9
 8008774:	080087ed 	.word	0x080087ed
 8008778:	08008821 	.word	0x08008821
 800877c:	08008855 	.word	0x08008855
 8008780:	08008889 	.word	0x08008889
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00b      	beq.n	80087a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	7c12      	ldrb	r2, [r2, #16]
 800879c:	f107 0108 	add.w	r1, r7, #8
 80087a0:	4610      	mov	r0, r2
 80087a2:	4798      	blx	r3
 80087a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087a6:	e091      	b.n	80088cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 facb 	bl	8008d46 <USBD_CtlError>
            err++;
 80087b0:	7afb      	ldrb	r3, [r7, #11]
 80087b2:	3301      	adds	r3, #1
 80087b4:	72fb      	strb	r3, [r7, #11]
          break;
 80087b6:	e089      	b.n	80088cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00b      	beq.n	80087dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	7c12      	ldrb	r2, [r2, #16]
 80087d0:	f107 0108 	add.w	r1, r7, #8
 80087d4:	4610      	mov	r0, r2
 80087d6:	4798      	blx	r3
 80087d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087da:	e077      	b.n	80088cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087dc:	6839      	ldr	r1, [r7, #0]
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 fab1 	bl	8008d46 <USBD_CtlError>
            err++;
 80087e4:	7afb      	ldrb	r3, [r7, #11]
 80087e6:	3301      	adds	r3, #1
 80087e8:	72fb      	strb	r3, [r7, #11]
          break;
 80087ea:	e06f      	b.n	80088cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00b      	beq.n	8008810 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	7c12      	ldrb	r2, [r2, #16]
 8008804:	f107 0108 	add.w	r1, r7, #8
 8008808:	4610      	mov	r0, r2
 800880a:	4798      	blx	r3
 800880c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800880e:	e05d      	b.n	80088cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fa97 	bl	8008d46 <USBD_CtlError>
            err++;
 8008818:	7afb      	ldrb	r3, [r7, #11]
 800881a:	3301      	adds	r3, #1
 800881c:	72fb      	strb	r3, [r7, #11]
          break;
 800881e:	e055      	b.n	80088cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00b      	beq.n	8008844 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	7c12      	ldrb	r2, [r2, #16]
 8008838:	f107 0108 	add.w	r1, r7, #8
 800883c:	4610      	mov	r0, r2
 800883e:	4798      	blx	r3
 8008840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008842:	e043      	b.n	80088cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008844:	6839      	ldr	r1, [r7, #0]
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fa7d 	bl	8008d46 <USBD_CtlError>
            err++;
 800884c:	7afb      	ldrb	r3, [r7, #11]
 800884e:	3301      	adds	r3, #1
 8008850:	72fb      	strb	r3, [r7, #11]
          break;
 8008852:	e03b      	b.n	80088cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800885a:	695b      	ldr	r3, [r3, #20]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00b      	beq.n	8008878 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008866:	695b      	ldr	r3, [r3, #20]
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	7c12      	ldrb	r2, [r2, #16]
 800886c:	f107 0108 	add.w	r1, r7, #8
 8008870:	4610      	mov	r0, r2
 8008872:	4798      	blx	r3
 8008874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008876:	e029      	b.n	80088cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fa63 	bl	8008d46 <USBD_CtlError>
            err++;
 8008880:	7afb      	ldrb	r3, [r7, #11]
 8008882:	3301      	adds	r3, #1
 8008884:	72fb      	strb	r3, [r7, #11]
          break;
 8008886:	e021      	b.n	80088cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800888e:	699b      	ldr	r3, [r3, #24]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00b      	beq.n	80088ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	7c12      	ldrb	r2, [r2, #16]
 80088a0:	f107 0108 	add.w	r1, r7, #8
 80088a4:	4610      	mov	r0, r2
 80088a6:	4798      	blx	r3
 80088a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088aa:	e00f      	b.n	80088cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 fa49 	bl	8008d46 <USBD_CtlError>
            err++;
 80088b4:	7afb      	ldrb	r3, [r7, #11]
 80088b6:	3301      	adds	r3, #1
 80088b8:	72fb      	strb	r3, [r7, #11]
          break;
 80088ba:	e007      	b.n	80088cc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80088bc:	6839      	ldr	r1, [r7, #0]
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fa41 	bl	8008d46 <USBD_CtlError>
          err++;
 80088c4:	7afb      	ldrb	r3, [r7, #11]
 80088c6:	3301      	adds	r3, #1
 80088c8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80088ca:	bf00      	nop
      }
      break;
 80088cc:	e037      	b.n	800893e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	7c1b      	ldrb	r3, [r3, #16]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d109      	bne.n	80088ea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088de:	f107 0208 	add.w	r2, r7, #8
 80088e2:	4610      	mov	r0, r2
 80088e4:	4798      	blx	r3
 80088e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088e8:	e029      	b.n	800893e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80088ea:	6839      	ldr	r1, [r7, #0]
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 fa2a 	bl	8008d46 <USBD_CtlError>
        err++;
 80088f2:	7afb      	ldrb	r3, [r7, #11]
 80088f4:	3301      	adds	r3, #1
 80088f6:	72fb      	strb	r3, [r7, #11]
      break;
 80088f8:	e021      	b.n	800893e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	7c1b      	ldrb	r3, [r3, #16]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10d      	bne.n	800891e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800890a:	f107 0208 	add.w	r2, r7, #8
 800890e:	4610      	mov	r0, r2
 8008910:	4798      	blx	r3
 8008912:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	3301      	adds	r3, #1
 8008918:	2207      	movs	r2, #7
 800891a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800891c:	e00f      	b.n	800893e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800891e:	6839      	ldr	r1, [r7, #0]
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fa10 	bl	8008d46 <USBD_CtlError>
        err++;
 8008926:	7afb      	ldrb	r3, [r7, #11]
 8008928:	3301      	adds	r3, #1
 800892a:	72fb      	strb	r3, [r7, #11]
      break;
 800892c:	e007      	b.n	800893e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800892e:	6839      	ldr	r1, [r7, #0]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 fa08 	bl	8008d46 <USBD_CtlError>
      err++;
 8008936:	7afb      	ldrb	r3, [r7, #11]
 8008938:	3301      	adds	r3, #1
 800893a:	72fb      	strb	r3, [r7, #11]
      break;
 800893c:	bf00      	nop
  }

  if (err != 0U)
 800893e:	7afb      	ldrb	r3, [r7, #11]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d11e      	bne.n	8008982 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	88db      	ldrh	r3, [r3, #6]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d016      	beq.n	800897a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800894c:	893b      	ldrh	r3, [r7, #8]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00e      	beq.n	8008970 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	88da      	ldrh	r2, [r3, #6]
 8008956:	893b      	ldrh	r3, [r7, #8]
 8008958:	4293      	cmp	r3, r2
 800895a:	bf28      	it	cs
 800895c:	4613      	movcs	r3, r2
 800895e:	b29b      	uxth	r3, r3
 8008960:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008962:	893b      	ldrh	r3, [r7, #8]
 8008964:	461a      	mov	r2, r3
 8008966:	68f9      	ldr	r1, [r7, #12]
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fa69 	bl	8008e40 <USBD_CtlSendData>
 800896e:	e009      	b.n	8008984 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f9e7 	bl	8008d46 <USBD_CtlError>
 8008978:	e004      	b.n	8008984 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 faa0 	bl	8008ec0 <USBD_CtlSendStatus>
 8008980:	e000      	b.n	8008984 <USBD_GetDescriptor+0x2cc>
    return;
 8008982:	bf00      	nop
  }
}
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop

0800898c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	889b      	ldrh	r3, [r3, #4]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d131      	bne.n	8008a02 <USBD_SetAddress+0x76>
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	88db      	ldrh	r3, [r3, #6]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d12d      	bne.n	8008a02 <USBD_SetAddress+0x76>
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	885b      	ldrh	r3, [r3, #2]
 80089aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80089ac:	d829      	bhi.n	8008a02 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	885b      	ldrh	r3, [r3, #2]
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	2b03      	cmp	r3, #3
 80089c4:	d104      	bne.n	80089d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80089c6:	6839      	ldr	r1, [r7, #0]
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 f9bc 	bl	8008d46 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ce:	e01d      	b.n	8008a0c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	7bfa      	ldrb	r2, [r7, #15]
 80089d4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	4619      	mov	r1, r3
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fe27 	bl	8009630 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fa6c 	bl	8008ec0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d004      	beq.n	80089f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2202      	movs	r2, #2
 80089f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089f6:	e009      	b.n	8008a0c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a00:	e004      	b.n	8008a0c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008a02:	6839      	ldr	r1, [r7, #0]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f99e 	bl	8008d46 <USBD_CtlError>
  }
}
 8008a0a:	bf00      	nop
 8008a0c:	bf00      	nop
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	885b      	ldrh	r3, [r3, #2]
 8008a26:	b2da      	uxtb	r2, r3
 8008a28:	4b4e      	ldr	r3, [pc, #312]	@ (8008b64 <USBD_SetConfig+0x150>)
 8008a2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a2c:	4b4d      	ldr	r3, [pc, #308]	@ (8008b64 <USBD_SetConfig+0x150>)
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d905      	bls.n	8008a40 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008a34:	6839      	ldr	r1, [r7, #0]
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f985 	bl	8008d46 <USBD_CtlError>
    return USBD_FAIL;
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	e08c      	b.n	8008b5a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	d002      	beq.n	8008a52 <USBD_SetConfig+0x3e>
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d029      	beq.n	8008aa4 <USBD_SetConfig+0x90>
 8008a50:	e075      	b.n	8008b3e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008a52:	4b44      	ldr	r3, [pc, #272]	@ (8008b64 <USBD_SetConfig+0x150>)
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d020      	beq.n	8008a9c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008a5a:	4b42      	ldr	r3, [pc, #264]	@ (8008b64 <USBD_SetConfig+0x150>)
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	461a      	mov	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a64:	4b3f      	ldr	r3, [pc, #252]	@ (8008b64 <USBD_SetConfig+0x150>)
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	4619      	mov	r1, r3
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f7fe ffcd 	bl	8007a0a <USBD_SetClassConfig>
 8008a70:	4603      	mov	r3, r0
 8008a72:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d008      	beq.n	8008a8c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f962 	bl	8008d46 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2202      	movs	r2, #2
 8008a86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a8a:	e065      	b.n	8008b58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 fa17 	bl	8008ec0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2203      	movs	r2, #3
 8008a96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008a9a:	e05d      	b.n	8008b58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fa0f 	bl	8008ec0 <USBD_CtlSendStatus>
      break;
 8008aa2:	e059      	b.n	8008b58 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008aa4:	4b2f      	ldr	r3, [pc, #188]	@ (8008b64 <USBD_SetConfig+0x150>)
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d112      	bne.n	8008ad2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2202      	movs	r2, #2
 8008ab0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8008b64 <USBD_SetConfig+0x150>)
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	461a      	mov	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008abe:	4b29      	ldr	r3, [pc, #164]	@ (8008b64 <USBD_SetConfig+0x150>)
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7fe ffbc 	bl	8007a42 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f9f8 	bl	8008ec0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ad0:	e042      	b.n	8008b58 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008ad2:	4b24      	ldr	r3, [pc, #144]	@ (8008b64 <USBD_SetConfig+0x150>)
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d02a      	beq.n	8008b36 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f7fe ffaa 	bl	8007a42 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008aee:	4b1d      	ldr	r3, [pc, #116]	@ (8008b64 <USBD_SetConfig+0x150>)
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	461a      	mov	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008af8:	4b1a      	ldr	r3, [pc, #104]	@ (8008b64 <USBD_SetConfig+0x150>)
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	4619      	mov	r1, r3
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f7fe ff83 	bl	8007a0a <USBD_SetClassConfig>
 8008b04:	4603      	mov	r3, r0
 8008b06:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008b08:	7bfb      	ldrb	r3, [r7, #15]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00f      	beq.n	8008b2e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 f918 	bl	8008d46 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f7fe ff8f 	bl	8007a42 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2202      	movs	r2, #2
 8008b28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008b2c:	e014      	b.n	8008b58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 f9c6 	bl	8008ec0 <USBD_CtlSendStatus>
      break;
 8008b34:	e010      	b.n	8008b58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 f9c2 	bl	8008ec0 <USBD_CtlSendStatus>
      break;
 8008b3c:	e00c      	b.n	8008b58 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008b3e:	6839      	ldr	r1, [r7, #0]
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 f900 	bl	8008d46 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b46:	4b07      	ldr	r3, [pc, #28]	@ (8008b64 <USBD_SetConfig+0x150>)
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f7fe ff78 	bl	8007a42 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008b52:	2303      	movs	r3, #3
 8008b54:	73fb      	strb	r3, [r7, #15]
      break;
 8008b56:	bf00      	nop
  }

  return ret;
 8008b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	2000031c 	.word	0x2000031c

08008b68 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	88db      	ldrh	r3, [r3, #6]
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d004      	beq.n	8008b84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b7a:	6839      	ldr	r1, [r7, #0]
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f8e2 	bl	8008d46 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b82:	e023      	b.n	8008bcc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	2b02      	cmp	r3, #2
 8008b8e:	dc02      	bgt.n	8008b96 <USBD_GetConfig+0x2e>
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	dc03      	bgt.n	8008b9c <USBD_GetConfig+0x34>
 8008b94:	e015      	b.n	8008bc2 <USBD_GetConfig+0x5a>
 8008b96:	2b03      	cmp	r3, #3
 8008b98:	d00b      	beq.n	8008bb2 <USBD_GetConfig+0x4a>
 8008b9a:	e012      	b.n	8008bc2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	3308      	adds	r3, #8
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	4619      	mov	r1, r3
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f948 	bl	8008e40 <USBD_CtlSendData>
        break;
 8008bb0:	e00c      	b.n	8008bcc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	3304      	adds	r3, #4
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	4619      	mov	r1, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f940 	bl	8008e40 <USBD_CtlSendData>
        break;
 8008bc0:	e004      	b.n	8008bcc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008bc2:	6839      	ldr	r1, [r7, #0]
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 f8be 	bl	8008d46 <USBD_CtlError>
        break;
 8008bca:	bf00      	nop
}
 8008bcc:	bf00      	nop
 8008bce:	3708      	adds	r7, #8
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	3b01      	subs	r3, #1
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	d81e      	bhi.n	8008c2a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	88db      	ldrh	r3, [r3, #6]
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d004      	beq.n	8008bfe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008bf4:	6839      	ldr	r1, [r7, #0]
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f8a5 	bl	8008d46 <USBD_CtlError>
        break;
 8008bfc:	e01a      	b.n	8008c34 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2201      	movs	r2, #1
 8008c02:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d005      	beq.n	8008c1a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	f043 0202 	orr.w	r2, r3, #2
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	330c      	adds	r3, #12
 8008c1e:	2202      	movs	r2, #2
 8008c20:	4619      	mov	r1, r3
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 f90c 	bl	8008e40 <USBD_CtlSendData>
      break;
 8008c28:	e004      	b.n	8008c34 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f88a 	bl	8008d46 <USBD_CtlError>
      break;
 8008c32:	bf00      	nop
  }
}
 8008c34:	bf00      	nop
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	885b      	ldrh	r3, [r3, #2]
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d107      	bne.n	8008c5e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2201      	movs	r2, #1
 8008c52:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 f932 	bl	8008ec0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008c5c:	e013      	b.n	8008c86 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	885b      	ldrh	r3, [r3, #2]
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d10b      	bne.n	8008c7e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	889b      	ldrh	r3, [r3, #4]
 8008c6a:	0a1b      	lsrs	r3, r3, #8
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	b2da      	uxtb	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 f922 	bl	8008ec0 <USBD_CtlSendStatus>
}
 8008c7c:	e003      	b.n	8008c86 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008c7e:	6839      	ldr	r1, [r7, #0]
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 f860 	bl	8008d46 <USBD_CtlError>
}
 8008c86:	bf00      	nop
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b082      	sub	sp, #8
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d80b      	bhi.n	8008cbe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	885b      	ldrh	r3, [r3, #2]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d10c      	bne.n	8008cc8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f902 	bl	8008ec0 <USBD_CtlSendStatus>
      }
      break;
 8008cbc:	e004      	b.n	8008cc8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008cbe:	6839      	ldr	r1, [r7, #0]
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f840 	bl	8008d46 <USBD_CtlError>
      break;
 8008cc6:	e000      	b.n	8008cca <USBD_ClrFeature+0x3c>
      break;
 8008cc8:	bf00      	nop
  }
}
 8008cca:	bf00      	nop
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b084      	sub	sp, #16
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
 8008cda:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	781a      	ldrb	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	3301      	adds	r3, #1
 8008cec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	781a      	ldrb	r2, [r3, #0]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f7ff fa3d 	bl	800817c <SWAPBYTE>
 8008d02:	4603      	mov	r3, r0
 8008d04:	461a      	mov	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	3301      	adds	r3, #1
 8008d14:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f7ff fa30 	bl	800817c <SWAPBYTE>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	461a      	mov	r2, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	3301      	adds	r3, #1
 8008d28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f7ff fa23 	bl	800817c <SWAPBYTE>
 8008d36:	4603      	mov	r3, r0
 8008d38:	461a      	mov	r2, r3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	80da      	strh	r2, [r3, #6]
}
 8008d3e:	bf00      	nop
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b082      	sub	sp, #8
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
 8008d4e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d50:	2180      	movs	r1, #128	@ 0x80
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 fc02 	bl	800955c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008d58:	2100      	movs	r1, #0
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 fbfe 	bl	800955c <USBD_LL_StallEP>
}
 8008d60:	bf00      	nop
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b086      	sub	sp, #24
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d74:	2300      	movs	r3, #0
 8008d76:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d042      	beq.n	8008e04 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008d82:	6938      	ldr	r0, [r7, #16]
 8008d84:	f000 f842 	bl	8008e0c <USBD_GetLen>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	005b      	lsls	r3, r3, #1
 8008d8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d92:	d808      	bhi.n	8008da6 <USBD_GetString+0x3e>
 8008d94:	6938      	ldr	r0, [r7, #16]
 8008d96:	f000 f839 	bl	8008e0c <USBD_GetLen>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	005b      	lsls	r3, r3, #1
 8008da2:	b29a      	uxth	r2, r3
 8008da4:	e001      	b.n	8008daa <USBD_GetString+0x42>
 8008da6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008dae:	7dfb      	ldrb	r3, [r7, #23]
 8008db0:	68ba      	ldr	r2, [r7, #8]
 8008db2:	4413      	add	r3, r2
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	7812      	ldrb	r2, [r2, #0]
 8008db8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008dba:	7dfb      	ldrb	r3, [r7, #23]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008dc0:	7dfb      	ldrb	r3, [r7, #23]
 8008dc2:	68ba      	ldr	r2, [r7, #8]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	2203      	movs	r2, #3
 8008dc8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008dca:	7dfb      	ldrb	r3, [r7, #23]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008dd0:	e013      	b.n	8008dfa <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008dd2:	7dfb      	ldrb	r3, [r7, #23]
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	693a      	ldr	r2, [r7, #16]
 8008dda:	7812      	ldrb	r2, [r2, #0]
 8008ddc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	3301      	adds	r3, #1
 8008de2:	613b      	str	r3, [r7, #16]
    idx++;
 8008de4:	7dfb      	ldrb	r3, [r7, #23]
 8008de6:	3301      	adds	r3, #1
 8008de8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008dea:	7dfb      	ldrb	r3, [r7, #23]
 8008dec:	68ba      	ldr	r2, [r7, #8]
 8008dee:	4413      	add	r3, r2
 8008df0:	2200      	movs	r2, #0
 8008df2:	701a      	strb	r2, [r3, #0]
    idx++;
 8008df4:	7dfb      	ldrb	r3, [r7, #23]
 8008df6:	3301      	adds	r3, #1
 8008df8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d1e7      	bne.n	8008dd2 <USBD_GetString+0x6a>
 8008e02:	e000      	b.n	8008e06 <USBD_GetString+0x9e>
    return;
 8008e04:	bf00      	nop
  }
}
 8008e06:	3718      	adds	r7, #24
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008e14:	2300      	movs	r3, #0
 8008e16:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008e1c:	e005      	b.n	8008e2a <USBD_GetLen+0x1e>
  {
    len++;
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
 8008e20:	3301      	adds	r3, #1
 8008e22:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	3301      	adds	r3, #1
 8008e28:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d1f5      	bne.n	8008e1e <USBD_GetLen+0x12>
  }

  return len;
 8008e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3714      	adds	r7, #20
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f000 fbfe 	bl	800966e <USBD_LL_Transmit>

  return USBD_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f000 fbed 	bl	800966e <USBD_LL_Transmit>

  return USBD_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b084      	sub	sp, #16
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	60f8      	str	r0, [r7, #12]
 8008ea6:	60b9      	str	r1, [r7, #8]
 8008ea8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	68ba      	ldr	r2, [r7, #8]
 8008eae:	2100      	movs	r1, #0
 8008eb0:	68f8      	ldr	r0, [r7, #12]
 8008eb2:	f000 fbfd 	bl	80096b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008eb6:	2300      	movs	r3, #0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3710      	adds	r7, #16
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2204      	movs	r2, #4
 8008ecc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fbc9 	bl	800966e <USBD_LL_Transmit>

  return USBD_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b082      	sub	sp, #8
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2205      	movs	r2, #5
 8008ef2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	2200      	movs	r2, #0
 8008efa:	2100      	movs	r1, #0
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fbd7 	bl	80096b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008f10:	2200      	movs	r2, #0
 8008f12:	490e      	ldr	r1, [pc, #56]	@ (8008f4c <MX_USB_DEVICE_Init+0x40>)
 8008f14:	480e      	ldr	r0, [pc, #56]	@ (8008f50 <MX_USB_DEVICE_Init+0x44>)
 8008f16:	f7fe fcfb 	bl	8007910 <USBD_Init>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d001      	beq.n	8008f24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008f20:	f7f8 fafe 	bl	8001520 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008f24:	490b      	ldr	r1, [pc, #44]	@ (8008f54 <MX_USB_DEVICE_Init+0x48>)
 8008f26:	480a      	ldr	r0, [pc, #40]	@ (8008f50 <MX_USB_DEVICE_Init+0x44>)
 8008f28:	f7fe fd22 	bl	8007970 <USBD_RegisterClass>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d001      	beq.n	8008f36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008f32:	f7f8 faf5 	bl	8001520 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008f36:	4806      	ldr	r0, [pc, #24]	@ (8008f50 <MX_USB_DEVICE_Init+0x44>)
 8008f38:	f7fe fd50 	bl	80079dc <USBD_Start>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d001      	beq.n	8008f46 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008f42:	f7f8 faed 	bl	8001520 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f46:	bf00      	nop
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	2000015c 	.word	0x2000015c
 8008f50:	20000320 	.word	0x20000320
 8008f54:	2000009c 	.word	0x2000009c

08008f58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	4603      	mov	r3, r0
 8008f60:	6039      	str	r1, [r7, #0]
 8008f62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	2212      	movs	r2, #18
 8008f68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f6a:	4b03      	ldr	r3, [pc, #12]	@ (8008f78 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	370c      	adds	r7, #12
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr
 8008f78:	20000178 	.word	0x20000178

08008f7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	4603      	mov	r3, r0
 8008f84:	6039      	str	r1, [r7, #0]
 8008f86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	2204      	movs	r2, #4
 8008f8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f8e:	4b03      	ldr	r3, [pc, #12]	@ (8008f9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr
 8008f9c:	2000018c 	.word	0x2000018c

08008fa0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	6039      	str	r1, [r7, #0]
 8008faa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fac:	79fb      	ldrb	r3, [r7, #7]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d105      	bne.n	8008fbe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008fb2:	683a      	ldr	r2, [r7, #0]
 8008fb4:	4907      	ldr	r1, [pc, #28]	@ (8008fd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008fb6:	4808      	ldr	r0, [pc, #32]	@ (8008fd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008fb8:	f7ff fed6 	bl	8008d68 <USBD_GetString>
 8008fbc:	e004      	b.n	8008fc8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	4904      	ldr	r1, [pc, #16]	@ (8008fd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008fc2:	4805      	ldr	r0, [pc, #20]	@ (8008fd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008fc4:	f7ff fed0 	bl	8008d68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fc8:	4b02      	ldr	r3, [pc, #8]	@ (8008fd4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	200005fc 	.word	0x200005fc
 8008fd8:	0800a89c 	.word	0x0800a89c

08008fdc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	6039      	str	r1, [r7, #0]
 8008fe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008fe8:	683a      	ldr	r2, [r7, #0]
 8008fea:	4904      	ldr	r1, [pc, #16]	@ (8008ffc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008fec:	4804      	ldr	r0, [pc, #16]	@ (8009000 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008fee:	f7ff febb 	bl	8008d68 <USBD_GetString>
  return USBD_StrDesc;
 8008ff2:	4b02      	ldr	r3, [pc, #8]	@ (8008ffc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	200005fc 	.word	0x200005fc
 8009000:	0800a8a0 	.word	0x0800a8a0

08009004 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	4603      	mov	r3, r0
 800900c:	6039      	str	r1, [r7, #0]
 800900e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	221a      	movs	r2, #26
 8009014:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009016:	f000 f843 	bl	80090a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800901a:	4b02      	ldr	r3, [pc, #8]	@ (8009024 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800901c:	4618      	mov	r0, r3
 800901e:	3708      	adds	r7, #8
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	20000190 	.word	0x20000190

08009028 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	4603      	mov	r3, r0
 8009030:	6039      	str	r1, [r7, #0]
 8009032:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009034:	79fb      	ldrb	r3, [r7, #7]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d105      	bne.n	8009046 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	4907      	ldr	r1, [pc, #28]	@ (800905c <USBD_FS_ConfigStrDescriptor+0x34>)
 800903e:	4808      	ldr	r0, [pc, #32]	@ (8009060 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009040:	f7ff fe92 	bl	8008d68 <USBD_GetString>
 8009044:	e004      	b.n	8009050 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009046:	683a      	ldr	r2, [r7, #0]
 8009048:	4904      	ldr	r1, [pc, #16]	@ (800905c <USBD_FS_ConfigStrDescriptor+0x34>)
 800904a:	4805      	ldr	r0, [pc, #20]	@ (8009060 <USBD_FS_ConfigStrDescriptor+0x38>)
 800904c:	f7ff fe8c 	bl	8008d68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009050:	4b02      	ldr	r3, [pc, #8]	@ (800905c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009052:	4618      	mov	r0, r3
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	200005fc 	.word	0x200005fc
 8009060:	0800a8b4 	.word	0x0800a8b4

08009064 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	4603      	mov	r3, r0
 800906c:	6039      	str	r1, [r7, #0]
 800906e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009070:	79fb      	ldrb	r3, [r7, #7]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d105      	bne.n	8009082 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009076:	683a      	ldr	r2, [r7, #0]
 8009078:	4907      	ldr	r1, [pc, #28]	@ (8009098 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800907a:	4808      	ldr	r0, [pc, #32]	@ (800909c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800907c:	f7ff fe74 	bl	8008d68 <USBD_GetString>
 8009080:	e004      	b.n	800908c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009082:	683a      	ldr	r2, [r7, #0]
 8009084:	4904      	ldr	r1, [pc, #16]	@ (8009098 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009086:	4805      	ldr	r0, [pc, #20]	@ (800909c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009088:	f7ff fe6e 	bl	8008d68 <USBD_GetString>
  }
  return USBD_StrDesc;
 800908c:	4b02      	ldr	r3, [pc, #8]	@ (8009098 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800908e:	4618      	mov	r0, r3
 8009090:	3708      	adds	r7, #8
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	200005fc 	.word	0x200005fc
 800909c:	0800a8c0 	.word	0x0800a8c0

080090a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80090a6:	4b0f      	ldr	r3, [pc, #60]	@ (80090e4 <Get_SerialNum+0x44>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80090ac:	4b0e      	ldr	r3, [pc, #56]	@ (80090e8 <Get_SerialNum+0x48>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80090b2:	4b0e      	ldr	r3, [pc, #56]	@ (80090ec <Get_SerialNum+0x4c>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4413      	add	r3, r2
 80090be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d009      	beq.n	80090da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80090c6:	2208      	movs	r2, #8
 80090c8:	4909      	ldr	r1, [pc, #36]	@ (80090f0 <Get_SerialNum+0x50>)
 80090ca:	68f8      	ldr	r0, [r7, #12]
 80090cc:	f000 f814 	bl	80090f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80090d0:	2204      	movs	r2, #4
 80090d2:	4908      	ldr	r1, [pc, #32]	@ (80090f4 <Get_SerialNum+0x54>)
 80090d4:	68b8      	ldr	r0, [r7, #8]
 80090d6:	f000 f80f 	bl	80090f8 <IntToUnicode>
  }
}
 80090da:	bf00      	nop
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	1fff7a10 	.word	0x1fff7a10
 80090e8:	1fff7a14 	.word	0x1fff7a14
 80090ec:	1fff7a18 	.word	0x1fff7a18
 80090f0:	20000192 	.word	0x20000192
 80090f4:	200001a2 	.word	0x200001a2

080090f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b087      	sub	sp, #28
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	4613      	mov	r3, r2
 8009104:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009106:	2300      	movs	r3, #0
 8009108:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800910a:	2300      	movs	r3, #0
 800910c:	75fb      	strb	r3, [r7, #23]
 800910e:	e027      	b.n	8009160 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	0f1b      	lsrs	r3, r3, #28
 8009114:	2b09      	cmp	r3, #9
 8009116:	d80b      	bhi.n	8009130 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	0f1b      	lsrs	r3, r3, #28
 800911c:	b2da      	uxtb	r2, r3
 800911e:	7dfb      	ldrb	r3, [r7, #23]
 8009120:	005b      	lsls	r3, r3, #1
 8009122:	4619      	mov	r1, r3
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	440b      	add	r3, r1
 8009128:	3230      	adds	r2, #48	@ 0x30
 800912a:	b2d2      	uxtb	r2, r2
 800912c:	701a      	strb	r2, [r3, #0]
 800912e:	e00a      	b.n	8009146 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	0f1b      	lsrs	r3, r3, #28
 8009134:	b2da      	uxtb	r2, r3
 8009136:	7dfb      	ldrb	r3, [r7, #23]
 8009138:	005b      	lsls	r3, r3, #1
 800913a:	4619      	mov	r1, r3
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	440b      	add	r3, r1
 8009140:	3237      	adds	r2, #55	@ 0x37
 8009142:	b2d2      	uxtb	r2, r2
 8009144:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	011b      	lsls	r3, r3, #4
 800914a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800914c:	7dfb      	ldrb	r3, [r7, #23]
 800914e:	005b      	lsls	r3, r3, #1
 8009150:	3301      	adds	r3, #1
 8009152:	68ba      	ldr	r2, [r7, #8]
 8009154:	4413      	add	r3, r2
 8009156:	2200      	movs	r2, #0
 8009158:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800915a:	7dfb      	ldrb	r3, [r7, #23]
 800915c:	3301      	adds	r3, #1
 800915e:	75fb      	strb	r3, [r7, #23]
 8009160:	7dfa      	ldrb	r2, [r7, #23]
 8009162:	79fb      	ldrb	r3, [r7, #7]
 8009164:	429a      	cmp	r2, r3
 8009166:	d3d3      	bcc.n	8009110 <IntToUnicode+0x18>
  }
}
 8009168:	bf00      	nop
 800916a:	bf00      	nop
 800916c:	371c      	adds	r7, #28
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr
	...

08009178 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b08a      	sub	sp, #40	@ 0x28
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009180:	f107 0314 	add.w	r3, r7, #20
 8009184:	2200      	movs	r2, #0
 8009186:	601a      	str	r2, [r3, #0]
 8009188:	605a      	str	r2, [r3, #4]
 800918a:	609a      	str	r2, [r3, #8]
 800918c:	60da      	str	r2, [r3, #12]
 800918e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009198:	d13a      	bne.n	8009210 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800919a:	2300      	movs	r3, #0
 800919c:	613b      	str	r3, [r7, #16]
 800919e:	4b1e      	ldr	r3, [pc, #120]	@ (8009218 <HAL_PCD_MspInit+0xa0>)
 80091a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091a2:	4a1d      	ldr	r2, [pc, #116]	@ (8009218 <HAL_PCD_MspInit+0xa0>)
 80091a4:	f043 0301 	orr.w	r3, r3, #1
 80091a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80091aa:	4b1b      	ldr	r3, [pc, #108]	@ (8009218 <HAL_PCD_MspInit+0xa0>)
 80091ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ae:	f003 0301 	and.w	r3, r3, #1
 80091b2:	613b      	str	r3, [r7, #16]
 80091b4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80091b6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80091ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091bc:	2302      	movs	r3, #2
 80091be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091c0:	2300      	movs	r3, #0
 80091c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091c4:	2303      	movs	r3, #3
 80091c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80091c8:	230a      	movs	r3, #10
 80091ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091cc:	f107 0314 	add.w	r3, r7, #20
 80091d0:	4619      	mov	r1, r3
 80091d2:	4812      	ldr	r0, [pc, #72]	@ (800921c <HAL_PCD_MspInit+0xa4>)
 80091d4:	f7f8 fffe 	bl	80021d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80091d8:	4b0f      	ldr	r3, [pc, #60]	@ (8009218 <HAL_PCD_MspInit+0xa0>)
 80091da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091dc:	4a0e      	ldr	r2, [pc, #56]	@ (8009218 <HAL_PCD_MspInit+0xa0>)
 80091de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091e2:	6353      	str	r3, [r2, #52]	@ 0x34
 80091e4:	2300      	movs	r3, #0
 80091e6:	60fb      	str	r3, [r7, #12]
 80091e8:	4b0b      	ldr	r3, [pc, #44]	@ (8009218 <HAL_PCD_MspInit+0xa0>)
 80091ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091ec:	4a0a      	ldr	r2, [pc, #40]	@ (8009218 <HAL_PCD_MspInit+0xa0>)
 80091ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80091f2:	6453      	str	r3, [r2, #68]	@ 0x44
 80091f4:	4b08      	ldr	r3, [pc, #32]	@ (8009218 <HAL_PCD_MspInit+0xa0>)
 80091f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091fc:	60fb      	str	r3, [r7, #12]
 80091fe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009200:	2200      	movs	r2, #0
 8009202:	2100      	movs	r1, #0
 8009204:	2043      	movs	r0, #67	@ 0x43
 8009206:	f7f8 ffae 	bl	8002166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800920a:	2043      	movs	r0, #67	@ 0x43
 800920c:	f7f8 ffc7 	bl	800219e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009210:	bf00      	nop
 8009212:	3728      	adds	r7, #40	@ 0x28
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}
 8009218:	40023800 	.word	0x40023800
 800921c:	40020000 	.word	0x40020000

08009220 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009234:	4619      	mov	r1, r3
 8009236:	4610      	mov	r0, r2
 8009238:	f7fe fc1d 	bl	8007a76 <USBD_LL_SetupStage>
}
 800923c:	bf00      	nop
 800923e:	3708      	adds	r7, #8
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	460b      	mov	r3, r1
 800924e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009256:	78fa      	ldrb	r2, [r7, #3]
 8009258:	6879      	ldr	r1, [r7, #4]
 800925a:	4613      	mov	r3, r2
 800925c:	00db      	lsls	r3, r3, #3
 800925e:	4413      	add	r3, r2
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	440b      	add	r3, r1
 8009264:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	78fb      	ldrb	r3, [r7, #3]
 800926c:	4619      	mov	r1, r3
 800926e:	f7fe fc57 	bl	8007b20 <USBD_LL_DataOutStage>
}
 8009272:	bf00      	nop
 8009274:	3708      	adds	r7, #8
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b082      	sub	sp, #8
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
 8009282:	460b      	mov	r3, r1
 8009284:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800928c:	78fa      	ldrb	r2, [r7, #3]
 800928e:	6879      	ldr	r1, [r7, #4]
 8009290:	4613      	mov	r3, r2
 8009292:	00db      	lsls	r3, r3, #3
 8009294:	4413      	add	r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	440b      	add	r3, r1
 800929a:	3320      	adds	r3, #32
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	78fb      	ldrb	r3, [r7, #3]
 80092a0:	4619      	mov	r1, r3
 80092a2:	f7fe fcf9 	bl	8007c98 <USBD_LL_DataInStage>
}
 80092a6:	bf00      	nop
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b082      	sub	sp, #8
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092bc:	4618      	mov	r0, r3
 80092be:	f7fe fe3d 	bl	8007f3c <USBD_LL_SOF>
}
 80092c2:	bf00      	nop
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b084      	sub	sp, #16
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80092d2:	2301      	movs	r3, #1
 80092d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	79db      	ldrb	r3, [r3, #7]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d102      	bne.n	80092e4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80092de:	2300      	movs	r3, #0
 80092e0:	73fb      	strb	r3, [r7, #15]
 80092e2:	e008      	b.n	80092f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	79db      	ldrb	r3, [r3, #7]
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d102      	bne.n	80092f2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80092ec:	2301      	movs	r3, #1
 80092ee:	73fb      	strb	r3, [r7, #15]
 80092f0:	e001      	b.n	80092f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80092f2:	f7f8 f915 	bl	8001520 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092fc:	7bfa      	ldrb	r2, [r7, #15]
 80092fe:	4611      	mov	r1, r2
 8009300:	4618      	mov	r0, r3
 8009302:	f7fe fdd7 	bl	8007eb4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800930c:	4618      	mov	r0, r3
 800930e:	f7fe fd7e 	bl	8007e0e <USBD_LL_Reset>
}
 8009312:	bf00      	nop
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
	...

0800931c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800932a:	4618      	mov	r0, r3
 800932c:	f7fe fdd2 	bl	8007ed4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	6812      	ldr	r2, [r2, #0]
 800933e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009342:	f043 0301 	orr.w	r3, r3, #1
 8009346:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	7adb      	ldrb	r3, [r3, #11]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d005      	beq.n	800935c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009350:	4b04      	ldr	r3, [pc, #16]	@ (8009364 <HAL_PCD_SuspendCallback+0x48>)
 8009352:	691b      	ldr	r3, [r3, #16]
 8009354:	4a03      	ldr	r2, [pc, #12]	@ (8009364 <HAL_PCD_SuspendCallback+0x48>)
 8009356:	f043 0306 	orr.w	r3, r3, #6
 800935a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800935c:	bf00      	nop
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	e000ed00 	.word	0xe000ed00

08009368 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009376:	4618      	mov	r0, r3
 8009378:	f7fe fdc8 	bl	8007f0c <USBD_LL_Resume>
}
 800937c:	bf00      	nop
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	460b      	mov	r3, r1
 800938e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009396:	78fa      	ldrb	r2, [r7, #3]
 8009398:	4611      	mov	r1, r2
 800939a:	4618      	mov	r0, r3
 800939c:	f7fe fe20 	bl	8007fe0 <USBD_LL_IsoOUTIncomplete>
}
 80093a0:	bf00      	nop
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	460b      	mov	r3, r1
 80093b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093ba:	78fa      	ldrb	r2, [r7, #3]
 80093bc:	4611      	mov	r1, r2
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fe fddc 	bl	8007f7c <USBD_LL_IsoINIncomplete>
}
 80093c4:	bf00      	nop
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093da:	4618      	mov	r0, r3
 80093dc:	f7fe fe32 	bl	8008044 <USBD_LL_DevConnected>
}
 80093e0:	bf00      	nop
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7fe fe2f 	bl	800805a <USBD_LL_DevDisconnected>
}
 80093fc:	bf00      	nop
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d13c      	bne.n	800948e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009414:	4a20      	ldr	r2, [pc, #128]	@ (8009498 <USBD_LL_Init+0x94>)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a1e      	ldr	r2, [pc, #120]	@ (8009498 <USBD_LL_Init+0x94>)
 8009420:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009424:	4b1c      	ldr	r3, [pc, #112]	@ (8009498 <USBD_LL_Init+0x94>)
 8009426:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800942a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800942c:	4b1a      	ldr	r3, [pc, #104]	@ (8009498 <USBD_LL_Init+0x94>)
 800942e:	2204      	movs	r2, #4
 8009430:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009432:	4b19      	ldr	r3, [pc, #100]	@ (8009498 <USBD_LL_Init+0x94>)
 8009434:	2202      	movs	r2, #2
 8009436:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009438:	4b17      	ldr	r3, [pc, #92]	@ (8009498 <USBD_LL_Init+0x94>)
 800943a:	2200      	movs	r2, #0
 800943c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800943e:	4b16      	ldr	r3, [pc, #88]	@ (8009498 <USBD_LL_Init+0x94>)
 8009440:	2202      	movs	r2, #2
 8009442:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009444:	4b14      	ldr	r3, [pc, #80]	@ (8009498 <USBD_LL_Init+0x94>)
 8009446:	2200      	movs	r2, #0
 8009448:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800944a:	4b13      	ldr	r3, [pc, #76]	@ (8009498 <USBD_LL_Init+0x94>)
 800944c:	2200      	movs	r2, #0
 800944e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009450:	4b11      	ldr	r3, [pc, #68]	@ (8009498 <USBD_LL_Init+0x94>)
 8009452:	2200      	movs	r2, #0
 8009454:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009456:	4b10      	ldr	r3, [pc, #64]	@ (8009498 <USBD_LL_Init+0x94>)
 8009458:	2200      	movs	r2, #0
 800945a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800945c:	4b0e      	ldr	r3, [pc, #56]	@ (8009498 <USBD_LL_Init+0x94>)
 800945e:	2200      	movs	r2, #0
 8009460:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009462:	480d      	ldr	r0, [pc, #52]	@ (8009498 <USBD_LL_Init+0x94>)
 8009464:	f7fa f9ce 	bl	8003804 <HAL_PCD_Init>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d001      	beq.n	8009472 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800946e:	f7f8 f857 	bl	8001520 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009472:	2180      	movs	r1, #128	@ 0x80
 8009474:	4808      	ldr	r0, [pc, #32]	@ (8009498 <USBD_LL_Init+0x94>)
 8009476:	f7fb fbe2 	bl	8004c3e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800947a:	2240      	movs	r2, #64	@ 0x40
 800947c:	2100      	movs	r1, #0
 800947e:	4806      	ldr	r0, [pc, #24]	@ (8009498 <USBD_LL_Init+0x94>)
 8009480:	f7fb fb96 	bl	8004bb0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009484:	2280      	movs	r2, #128	@ 0x80
 8009486:	2101      	movs	r1, #1
 8009488:	4803      	ldr	r0, [pc, #12]	@ (8009498 <USBD_LL_Init+0x94>)
 800948a:	f7fb fb91 	bl	8004bb0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800948e:	2300      	movs	r3, #0
}
 8009490:	4618      	mov	r0, r3
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	200007fc 	.word	0x200007fc

0800949c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094a4:	2300      	movs	r3, #0
 80094a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094a8:	2300      	movs	r3, #0
 80094aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7fa fab5 	bl	8003a22 <HAL_PCD_Start>
 80094b8:	4603      	mov	r3, r0
 80094ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
 80094be:	4618      	mov	r0, r3
 80094c0:	f000 f930 	bl	8009724 <USBD_Get_USB_Status>
 80094c4:	4603      	mov	r3, r0
 80094c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b084      	sub	sp, #16
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
 80094da:	4608      	mov	r0, r1
 80094dc:	4611      	mov	r1, r2
 80094de:	461a      	mov	r2, r3
 80094e0:	4603      	mov	r3, r0
 80094e2:	70fb      	strb	r3, [r7, #3]
 80094e4:	460b      	mov	r3, r1
 80094e6:	70bb      	strb	r3, [r7, #2]
 80094e8:	4613      	mov	r3, r2
 80094ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094f0:	2300      	movs	r3, #0
 80094f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80094fa:	78bb      	ldrb	r3, [r7, #2]
 80094fc:	883a      	ldrh	r2, [r7, #0]
 80094fe:	78f9      	ldrb	r1, [r7, #3]
 8009500:	f7fa ff89 	bl	8004416 <HAL_PCD_EP_Open>
 8009504:	4603      	mov	r3, r0
 8009506:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009508:	7bfb      	ldrb	r3, [r7, #15]
 800950a:	4618      	mov	r0, r3
 800950c:	f000 f90a 	bl	8009724 <USBD_Get_USB_Status>
 8009510:	4603      	mov	r3, r0
 8009512:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009514:	7bbb      	ldrb	r3, [r7, #14]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b084      	sub	sp, #16
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	460b      	mov	r3, r1
 8009528:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800952e:	2300      	movs	r3, #0
 8009530:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009538:	78fa      	ldrb	r2, [r7, #3]
 800953a:	4611      	mov	r1, r2
 800953c:	4618      	mov	r0, r3
 800953e:	f7fa ffd4 	bl	80044ea <HAL_PCD_EP_Close>
 8009542:	4603      	mov	r3, r0
 8009544:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009546:	7bfb      	ldrb	r3, [r7, #15]
 8009548:	4618      	mov	r0, r3
 800954a:	f000 f8eb 	bl	8009724 <USBD_Get_USB_Status>
 800954e:	4603      	mov	r3, r0
 8009550:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009552:	7bbb      	ldrb	r3, [r7, #14]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3710      	adds	r7, #16
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	460b      	mov	r3, r1
 8009566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009568:	2300      	movs	r3, #0
 800956a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800956c:	2300      	movs	r3, #0
 800956e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009576:	78fa      	ldrb	r2, [r7, #3]
 8009578:	4611      	mov	r1, r2
 800957a:	4618      	mov	r0, r3
 800957c:	f7fb f874 	bl	8004668 <HAL_PCD_EP_SetStall>
 8009580:	4603      	mov	r3, r0
 8009582:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009584:	7bfb      	ldrb	r3, [r7, #15]
 8009586:	4618      	mov	r0, r3
 8009588:	f000 f8cc 	bl	8009724 <USBD_Get_USB_Status>
 800958c:	4603      	mov	r3, r0
 800958e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009590:	7bbb      	ldrb	r3, [r7, #14]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b084      	sub	sp, #16
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	460b      	mov	r3, r1
 80095a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095a6:	2300      	movs	r3, #0
 80095a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095aa:	2300      	movs	r3, #0
 80095ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095b4:	78fa      	ldrb	r2, [r7, #3]
 80095b6:	4611      	mov	r1, r2
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7fb f8b8 	bl	800472e <HAL_PCD_EP_ClrStall>
 80095be:	4603      	mov	r3, r0
 80095c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095c2:	7bfb      	ldrb	r3, [r7, #15]
 80095c4:	4618      	mov	r0, r3
 80095c6:	f000 f8ad 	bl	8009724 <USBD_Get_USB_Status>
 80095ca:	4603      	mov	r3, r0
 80095cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3710      	adds	r7, #16
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095d8:	b480      	push	{r7}
 80095da:	b085      	sub	sp, #20
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	460b      	mov	r3, r1
 80095e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80095ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	da0b      	bge.n	800960c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80095f4:	78fb      	ldrb	r3, [r7, #3]
 80095f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095fa:	68f9      	ldr	r1, [r7, #12]
 80095fc:	4613      	mov	r3, r2
 80095fe:	00db      	lsls	r3, r3, #3
 8009600:	4413      	add	r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	440b      	add	r3, r1
 8009606:	3316      	adds	r3, #22
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	e00b      	b.n	8009624 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800960c:	78fb      	ldrb	r3, [r7, #3]
 800960e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009612:	68f9      	ldr	r1, [r7, #12]
 8009614:	4613      	mov	r3, r2
 8009616:	00db      	lsls	r3, r3, #3
 8009618:	4413      	add	r3, r2
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	440b      	add	r3, r1
 800961e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009622:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009624:	4618      	mov	r0, r3
 8009626:	3714      	adds	r7, #20
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	460b      	mov	r3, r1
 800963a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800963c:	2300      	movs	r3, #0
 800963e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009640:	2300      	movs	r3, #0
 8009642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800964a:	78fa      	ldrb	r2, [r7, #3]
 800964c:	4611      	mov	r1, r2
 800964e:	4618      	mov	r0, r3
 8009650:	f7fa febd 	bl	80043ce <HAL_PCD_SetAddress>
 8009654:	4603      	mov	r3, r0
 8009656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009658:	7bfb      	ldrb	r3, [r7, #15]
 800965a:	4618      	mov	r0, r3
 800965c:	f000 f862 	bl	8009724 <USBD_Get_USB_Status>
 8009660:	4603      	mov	r3, r0
 8009662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009664:	7bbb      	ldrb	r3, [r7, #14]
}
 8009666:	4618      	mov	r0, r3
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b086      	sub	sp, #24
 8009672:	af00      	add	r7, sp, #0
 8009674:	60f8      	str	r0, [r7, #12]
 8009676:	607a      	str	r2, [r7, #4]
 8009678:	603b      	str	r3, [r7, #0]
 800967a:	460b      	mov	r3, r1
 800967c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800967e:	2300      	movs	r3, #0
 8009680:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800968c:	7af9      	ldrb	r1, [r7, #11]
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	f7fa ffaf 	bl	80045f4 <HAL_PCD_EP_Transmit>
 8009696:	4603      	mov	r3, r0
 8009698:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800969a:	7dfb      	ldrb	r3, [r7, #23]
 800969c:	4618      	mov	r0, r3
 800969e:	f000 f841 	bl	8009724 <USBD_Get_USB_Status>
 80096a2:	4603      	mov	r3, r0
 80096a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3718      	adds	r7, #24
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b086      	sub	sp, #24
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	607a      	str	r2, [r7, #4]
 80096ba:	603b      	str	r3, [r7, #0]
 80096bc:	460b      	mov	r3, r1
 80096be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096c0:	2300      	movs	r3, #0
 80096c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096c4:	2300      	movs	r3, #0
 80096c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80096ce:	7af9      	ldrb	r1, [r7, #11]
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	f7fa ff53 	bl	800457e <HAL_PCD_EP_Receive>
 80096d8:	4603      	mov	r3, r0
 80096da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096dc:	7dfb      	ldrb	r3, [r7, #23]
 80096de:	4618      	mov	r0, r3
 80096e0:	f000 f820 	bl	8009724 <USBD_Get_USB_Status>
 80096e4:	4603      	mov	r3, r0
 80096e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3718      	adds	r7, #24
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
	...

080096f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80096fc:	4b03      	ldr	r3, [pc, #12]	@ (800970c <USBD_static_malloc+0x18>)
}
 80096fe:	4618      	mov	r0, r3
 8009700:	370c      	adds	r7, #12
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop
 800970c:	20000ce0 	.word	0x20000ce0

08009710 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]

}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	4603      	mov	r3, r0
 800972c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009732:	79fb      	ldrb	r3, [r7, #7]
 8009734:	2b03      	cmp	r3, #3
 8009736:	d817      	bhi.n	8009768 <USBD_Get_USB_Status+0x44>
 8009738:	a201      	add	r2, pc, #4	@ (adr r2, 8009740 <USBD_Get_USB_Status+0x1c>)
 800973a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973e:	bf00      	nop
 8009740:	08009751 	.word	0x08009751
 8009744:	08009757 	.word	0x08009757
 8009748:	0800975d 	.word	0x0800975d
 800974c:	08009763 	.word	0x08009763
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009750:	2300      	movs	r3, #0
 8009752:	73fb      	strb	r3, [r7, #15]
    break;
 8009754:	e00b      	b.n	800976e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009756:	2303      	movs	r3, #3
 8009758:	73fb      	strb	r3, [r7, #15]
    break;
 800975a:	e008      	b.n	800976e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800975c:	2301      	movs	r3, #1
 800975e:	73fb      	strb	r3, [r7, #15]
    break;
 8009760:	e005      	b.n	800976e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009762:	2303      	movs	r3, #3
 8009764:	73fb      	strb	r3, [r7, #15]
    break;
 8009766:	e002      	b.n	800976e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009768:	2303      	movs	r3, #3
 800976a:	73fb      	strb	r3, [r7, #15]
    break;
 800976c:	bf00      	nop
  }
  return usb_status;
 800976e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3714      	adds	r7, #20
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <siprintf>:
 800977c:	b40e      	push	{r1, r2, r3}
 800977e:	b510      	push	{r4, lr}
 8009780:	b09d      	sub	sp, #116	@ 0x74
 8009782:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009784:	9002      	str	r0, [sp, #8]
 8009786:	9006      	str	r0, [sp, #24]
 8009788:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800978c:	480a      	ldr	r0, [pc, #40]	@ (80097b8 <siprintf+0x3c>)
 800978e:	9107      	str	r1, [sp, #28]
 8009790:	9104      	str	r1, [sp, #16]
 8009792:	490a      	ldr	r1, [pc, #40]	@ (80097bc <siprintf+0x40>)
 8009794:	f853 2b04 	ldr.w	r2, [r3], #4
 8009798:	9105      	str	r1, [sp, #20]
 800979a:	2400      	movs	r4, #0
 800979c:	a902      	add	r1, sp, #8
 800979e:	6800      	ldr	r0, [r0, #0]
 80097a0:	9301      	str	r3, [sp, #4]
 80097a2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80097a4:	f000 f994 	bl	8009ad0 <_svfiprintf_r>
 80097a8:	9b02      	ldr	r3, [sp, #8]
 80097aa:	701c      	strb	r4, [r3, #0]
 80097ac:	b01d      	add	sp, #116	@ 0x74
 80097ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097b2:	b003      	add	sp, #12
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	200001ac 	.word	0x200001ac
 80097bc:	ffff0208 	.word	0xffff0208

080097c0 <memset>:
 80097c0:	4402      	add	r2, r0
 80097c2:	4603      	mov	r3, r0
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d100      	bne.n	80097ca <memset+0xa>
 80097c8:	4770      	bx	lr
 80097ca:	f803 1b01 	strb.w	r1, [r3], #1
 80097ce:	e7f9      	b.n	80097c4 <memset+0x4>

080097d0 <__errno>:
 80097d0:	4b01      	ldr	r3, [pc, #4]	@ (80097d8 <__errno+0x8>)
 80097d2:	6818      	ldr	r0, [r3, #0]
 80097d4:	4770      	bx	lr
 80097d6:	bf00      	nop
 80097d8:	200001ac 	.word	0x200001ac

080097dc <__libc_init_array>:
 80097dc:	b570      	push	{r4, r5, r6, lr}
 80097de:	4d0d      	ldr	r5, [pc, #52]	@ (8009814 <__libc_init_array+0x38>)
 80097e0:	4c0d      	ldr	r4, [pc, #52]	@ (8009818 <__libc_init_array+0x3c>)
 80097e2:	1b64      	subs	r4, r4, r5
 80097e4:	10a4      	asrs	r4, r4, #2
 80097e6:	2600      	movs	r6, #0
 80097e8:	42a6      	cmp	r6, r4
 80097ea:	d109      	bne.n	8009800 <__libc_init_array+0x24>
 80097ec:	4d0b      	ldr	r5, [pc, #44]	@ (800981c <__libc_init_array+0x40>)
 80097ee:	4c0c      	ldr	r4, [pc, #48]	@ (8009820 <__libc_init_array+0x44>)
 80097f0:	f000 ffd0 	bl	800a794 <_init>
 80097f4:	1b64      	subs	r4, r4, r5
 80097f6:	10a4      	asrs	r4, r4, #2
 80097f8:	2600      	movs	r6, #0
 80097fa:	42a6      	cmp	r6, r4
 80097fc:	d105      	bne.n	800980a <__libc_init_array+0x2e>
 80097fe:	bd70      	pop	{r4, r5, r6, pc}
 8009800:	f855 3b04 	ldr.w	r3, [r5], #4
 8009804:	4798      	blx	r3
 8009806:	3601      	adds	r6, #1
 8009808:	e7ee      	b.n	80097e8 <__libc_init_array+0xc>
 800980a:	f855 3b04 	ldr.w	r3, [r5], #4
 800980e:	4798      	blx	r3
 8009810:	3601      	adds	r6, #1
 8009812:	e7f2      	b.n	80097fa <__libc_init_array+0x1e>
 8009814:	0800a9a8 	.word	0x0800a9a8
 8009818:	0800a9a8 	.word	0x0800a9a8
 800981c:	0800a9a8 	.word	0x0800a9a8
 8009820:	0800a9ac 	.word	0x0800a9ac

08009824 <__retarget_lock_acquire_recursive>:
 8009824:	4770      	bx	lr

08009826 <__retarget_lock_release_recursive>:
 8009826:	4770      	bx	lr

08009828 <_free_r>:
 8009828:	b538      	push	{r3, r4, r5, lr}
 800982a:	4605      	mov	r5, r0
 800982c:	2900      	cmp	r1, #0
 800982e:	d041      	beq.n	80098b4 <_free_r+0x8c>
 8009830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009834:	1f0c      	subs	r4, r1, #4
 8009836:	2b00      	cmp	r3, #0
 8009838:	bfb8      	it	lt
 800983a:	18e4      	addlt	r4, r4, r3
 800983c:	f000 f8e0 	bl	8009a00 <__malloc_lock>
 8009840:	4a1d      	ldr	r2, [pc, #116]	@ (80098b8 <_free_r+0x90>)
 8009842:	6813      	ldr	r3, [r2, #0]
 8009844:	b933      	cbnz	r3, 8009854 <_free_r+0x2c>
 8009846:	6063      	str	r3, [r4, #4]
 8009848:	6014      	str	r4, [r2, #0]
 800984a:	4628      	mov	r0, r5
 800984c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009850:	f000 b8dc 	b.w	8009a0c <__malloc_unlock>
 8009854:	42a3      	cmp	r3, r4
 8009856:	d908      	bls.n	800986a <_free_r+0x42>
 8009858:	6820      	ldr	r0, [r4, #0]
 800985a:	1821      	adds	r1, r4, r0
 800985c:	428b      	cmp	r3, r1
 800985e:	bf01      	itttt	eq
 8009860:	6819      	ldreq	r1, [r3, #0]
 8009862:	685b      	ldreq	r3, [r3, #4]
 8009864:	1809      	addeq	r1, r1, r0
 8009866:	6021      	streq	r1, [r4, #0]
 8009868:	e7ed      	b.n	8009846 <_free_r+0x1e>
 800986a:	461a      	mov	r2, r3
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	b10b      	cbz	r3, 8009874 <_free_r+0x4c>
 8009870:	42a3      	cmp	r3, r4
 8009872:	d9fa      	bls.n	800986a <_free_r+0x42>
 8009874:	6811      	ldr	r1, [r2, #0]
 8009876:	1850      	adds	r0, r2, r1
 8009878:	42a0      	cmp	r0, r4
 800987a:	d10b      	bne.n	8009894 <_free_r+0x6c>
 800987c:	6820      	ldr	r0, [r4, #0]
 800987e:	4401      	add	r1, r0
 8009880:	1850      	adds	r0, r2, r1
 8009882:	4283      	cmp	r3, r0
 8009884:	6011      	str	r1, [r2, #0]
 8009886:	d1e0      	bne.n	800984a <_free_r+0x22>
 8009888:	6818      	ldr	r0, [r3, #0]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	6053      	str	r3, [r2, #4]
 800988e:	4408      	add	r0, r1
 8009890:	6010      	str	r0, [r2, #0]
 8009892:	e7da      	b.n	800984a <_free_r+0x22>
 8009894:	d902      	bls.n	800989c <_free_r+0x74>
 8009896:	230c      	movs	r3, #12
 8009898:	602b      	str	r3, [r5, #0]
 800989a:	e7d6      	b.n	800984a <_free_r+0x22>
 800989c:	6820      	ldr	r0, [r4, #0]
 800989e:	1821      	adds	r1, r4, r0
 80098a0:	428b      	cmp	r3, r1
 80098a2:	bf04      	itt	eq
 80098a4:	6819      	ldreq	r1, [r3, #0]
 80098a6:	685b      	ldreq	r3, [r3, #4]
 80098a8:	6063      	str	r3, [r4, #4]
 80098aa:	bf04      	itt	eq
 80098ac:	1809      	addeq	r1, r1, r0
 80098ae:	6021      	streq	r1, [r4, #0]
 80098b0:	6054      	str	r4, [r2, #4]
 80098b2:	e7ca      	b.n	800984a <_free_r+0x22>
 80098b4:	bd38      	pop	{r3, r4, r5, pc}
 80098b6:	bf00      	nop
 80098b8:	20000e38 	.word	0x20000e38

080098bc <sbrk_aligned>:
 80098bc:	b570      	push	{r4, r5, r6, lr}
 80098be:	4e0f      	ldr	r6, [pc, #60]	@ (80098fc <sbrk_aligned+0x40>)
 80098c0:	460c      	mov	r4, r1
 80098c2:	6831      	ldr	r1, [r6, #0]
 80098c4:	4605      	mov	r5, r0
 80098c6:	b911      	cbnz	r1, 80098ce <sbrk_aligned+0x12>
 80098c8:	f000 fba4 	bl	800a014 <_sbrk_r>
 80098cc:	6030      	str	r0, [r6, #0]
 80098ce:	4621      	mov	r1, r4
 80098d0:	4628      	mov	r0, r5
 80098d2:	f000 fb9f 	bl	800a014 <_sbrk_r>
 80098d6:	1c43      	adds	r3, r0, #1
 80098d8:	d103      	bne.n	80098e2 <sbrk_aligned+0x26>
 80098da:	f04f 34ff 	mov.w	r4, #4294967295
 80098de:	4620      	mov	r0, r4
 80098e0:	bd70      	pop	{r4, r5, r6, pc}
 80098e2:	1cc4      	adds	r4, r0, #3
 80098e4:	f024 0403 	bic.w	r4, r4, #3
 80098e8:	42a0      	cmp	r0, r4
 80098ea:	d0f8      	beq.n	80098de <sbrk_aligned+0x22>
 80098ec:	1a21      	subs	r1, r4, r0
 80098ee:	4628      	mov	r0, r5
 80098f0:	f000 fb90 	bl	800a014 <_sbrk_r>
 80098f4:	3001      	adds	r0, #1
 80098f6:	d1f2      	bne.n	80098de <sbrk_aligned+0x22>
 80098f8:	e7ef      	b.n	80098da <sbrk_aligned+0x1e>
 80098fa:	bf00      	nop
 80098fc:	20000e34 	.word	0x20000e34

08009900 <_malloc_r>:
 8009900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009904:	1ccd      	adds	r5, r1, #3
 8009906:	f025 0503 	bic.w	r5, r5, #3
 800990a:	3508      	adds	r5, #8
 800990c:	2d0c      	cmp	r5, #12
 800990e:	bf38      	it	cc
 8009910:	250c      	movcc	r5, #12
 8009912:	2d00      	cmp	r5, #0
 8009914:	4606      	mov	r6, r0
 8009916:	db01      	blt.n	800991c <_malloc_r+0x1c>
 8009918:	42a9      	cmp	r1, r5
 800991a:	d904      	bls.n	8009926 <_malloc_r+0x26>
 800991c:	230c      	movs	r3, #12
 800991e:	6033      	str	r3, [r6, #0]
 8009920:	2000      	movs	r0, #0
 8009922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009926:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80099fc <_malloc_r+0xfc>
 800992a:	f000 f869 	bl	8009a00 <__malloc_lock>
 800992e:	f8d8 3000 	ldr.w	r3, [r8]
 8009932:	461c      	mov	r4, r3
 8009934:	bb44      	cbnz	r4, 8009988 <_malloc_r+0x88>
 8009936:	4629      	mov	r1, r5
 8009938:	4630      	mov	r0, r6
 800993a:	f7ff ffbf 	bl	80098bc <sbrk_aligned>
 800993e:	1c43      	adds	r3, r0, #1
 8009940:	4604      	mov	r4, r0
 8009942:	d158      	bne.n	80099f6 <_malloc_r+0xf6>
 8009944:	f8d8 4000 	ldr.w	r4, [r8]
 8009948:	4627      	mov	r7, r4
 800994a:	2f00      	cmp	r7, #0
 800994c:	d143      	bne.n	80099d6 <_malloc_r+0xd6>
 800994e:	2c00      	cmp	r4, #0
 8009950:	d04b      	beq.n	80099ea <_malloc_r+0xea>
 8009952:	6823      	ldr	r3, [r4, #0]
 8009954:	4639      	mov	r1, r7
 8009956:	4630      	mov	r0, r6
 8009958:	eb04 0903 	add.w	r9, r4, r3
 800995c:	f000 fb5a 	bl	800a014 <_sbrk_r>
 8009960:	4581      	cmp	r9, r0
 8009962:	d142      	bne.n	80099ea <_malloc_r+0xea>
 8009964:	6821      	ldr	r1, [r4, #0]
 8009966:	1a6d      	subs	r5, r5, r1
 8009968:	4629      	mov	r1, r5
 800996a:	4630      	mov	r0, r6
 800996c:	f7ff ffa6 	bl	80098bc <sbrk_aligned>
 8009970:	3001      	adds	r0, #1
 8009972:	d03a      	beq.n	80099ea <_malloc_r+0xea>
 8009974:	6823      	ldr	r3, [r4, #0]
 8009976:	442b      	add	r3, r5
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	f8d8 3000 	ldr.w	r3, [r8]
 800997e:	685a      	ldr	r2, [r3, #4]
 8009980:	bb62      	cbnz	r2, 80099dc <_malloc_r+0xdc>
 8009982:	f8c8 7000 	str.w	r7, [r8]
 8009986:	e00f      	b.n	80099a8 <_malloc_r+0xa8>
 8009988:	6822      	ldr	r2, [r4, #0]
 800998a:	1b52      	subs	r2, r2, r5
 800998c:	d420      	bmi.n	80099d0 <_malloc_r+0xd0>
 800998e:	2a0b      	cmp	r2, #11
 8009990:	d917      	bls.n	80099c2 <_malloc_r+0xc2>
 8009992:	1961      	adds	r1, r4, r5
 8009994:	42a3      	cmp	r3, r4
 8009996:	6025      	str	r5, [r4, #0]
 8009998:	bf18      	it	ne
 800999a:	6059      	strne	r1, [r3, #4]
 800999c:	6863      	ldr	r3, [r4, #4]
 800999e:	bf08      	it	eq
 80099a0:	f8c8 1000 	streq.w	r1, [r8]
 80099a4:	5162      	str	r2, [r4, r5]
 80099a6:	604b      	str	r3, [r1, #4]
 80099a8:	4630      	mov	r0, r6
 80099aa:	f000 f82f 	bl	8009a0c <__malloc_unlock>
 80099ae:	f104 000b 	add.w	r0, r4, #11
 80099b2:	1d23      	adds	r3, r4, #4
 80099b4:	f020 0007 	bic.w	r0, r0, #7
 80099b8:	1ac2      	subs	r2, r0, r3
 80099ba:	bf1c      	itt	ne
 80099bc:	1a1b      	subne	r3, r3, r0
 80099be:	50a3      	strne	r3, [r4, r2]
 80099c0:	e7af      	b.n	8009922 <_malloc_r+0x22>
 80099c2:	6862      	ldr	r2, [r4, #4]
 80099c4:	42a3      	cmp	r3, r4
 80099c6:	bf0c      	ite	eq
 80099c8:	f8c8 2000 	streq.w	r2, [r8]
 80099cc:	605a      	strne	r2, [r3, #4]
 80099ce:	e7eb      	b.n	80099a8 <_malloc_r+0xa8>
 80099d0:	4623      	mov	r3, r4
 80099d2:	6864      	ldr	r4, [r4, #4]
 80099d4:	e7ae      	b.n	8009934 <_malloc_r+0x34>
 80099d6:	463c      	mov	r4, r7
 80099d8:	687f      	ldr	r7, [r7, #4]
 80099da:	e7b6      	b.n	800994a <_malloc_r+0x4a>
 80099dc:	461a      	mov	r2, r3
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	42a3      	cmp	r3, r4
 80099e2:	d1fb      	bne.n	80099dc <_malloc_r+0xdc>
 80099e4:	2300      	movs	r3, #0
 80099e6:	6053      	str	r3, [r2, #4]
 80099e8:	e7de      	b.n	80099a8 <_malloc_r+0xa8>
 80099ea:	230c      	movs	r3, #12
 80099ec:	6033      	str	r3, [r6, #0]
 80099ee:	4630      	mov	r0, r6
 80099f0:	f000 f80c 	bl	8009a0c <__malloc_unlock>
 80099f4:	e794      	b.n	8009920 <_malloc_r+0x20>
 80099f6:	6005      	str	r5, [r0, #0]
 80099f8:	e7d6      	b.n	80099a8 <_malloc_r+0xa8>
 80099fa:	bf00      	nop
 80099fc:	20000e38 	.word	0x20000e38

08009a00 <__malloc_lock>:
 8009a00:	4801      	ldr	r0, [pc, #4]	@ (8009a08 <__malloc_lock+0x8>)
 8009a02:	f7ff bf0f 	b.w	8009824 <__retarget_lock_acquire_recursive>
 8009a06:	bf00      	nop
 8009a08:	20000e30 	.word	0x20000e30

08009a0c <__malloc_unlock>:
 8009a0c:	4801      	ldr	r0, [pc, #4]	@ (8009a14 <__malloc_unlock+0x8>)
 8009a0e:	f7ff bf0a 	b.w	8009826 <__retarget_lock_release_recursive>
 8009a12:	bf00      	nop
 8009a14:	20000e30 	.word	0x20000e30

08009a18 <__ssputs_r>:
 8009a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a1c:	688e      	ldr	r6, [r1, #8]
 8009a1e:	461f      	mov	r7, r3
 8009a20:	42be      	cmp	r6, r7
 8009a22:	680b      	ldr	r3, [r1, #0]
 8009a24:	4682      	mov	sl, r0
 8009a26:	460c      	mov	r4, r1
 8009a28:	4690      	mov	r8, r2
 8009a2a:	d82d      	bhi.n	8009a88 <__ssputs_r+0x70>
 8009a2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009a34:	d026      	beq.n	8009a84 <__ssputs_r+0x6c>
 8009a36:	6965      	ldr	r5, [r4, #20]
 8009a38:	6909      	ldr	r1, [r1, #16]
 8009a3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a3e:	eba3 0901 	sub.w	r9, r3, r1
 8009a42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a46:	1c7b      	adds	r3, r7, #1
 8009a48:	444b      	add	r3, r9
 8009a4a:	106d      	asrs	r5, r5, #1
 8009a4c:	429d      	cmp	r5, r3
 8009a4e:	bf38      	it	cc
 8009a50:	461d      	movcc	r5, r3
 8009a52:	0553      	lsls	r3, r2, #21
 8009a54:	d527      	bpl.n	8009aa6 <__ssputs_r+0x8e>
 8009a56:	4629      	mov	r1, r5
 8009a58:	f7ff ff52 	bl	8009900 <_malloc_r>
 8009a5c:	4606      	mov	r6, r0
 8009a5e:	b360      	cbz	r0, 8009aba <__ssputs_r+0xa2>
 8009a60:	6921      	ldr	r1, [r4, #16]
 8009a62:	464a      	mov	r2, r9
 8009a64:	f000 fae6 	bl	800a034 <memcpy>
 8009a68:	89a3      	ldrh	r3, [r4, #12]
 8009a6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a72:	81a3      	strh	r3, [r4, #12]
 8009a74:	6126      	str	r6, [r4, #16]
 8009a76:	6165      	str	r5, [r4, #20]
 8009a78:	444e      	add	r6, r9
 8009a7a:	eba5 0509 	sub.w	r5, r5, r9
 8009a7e:	6026      	str	r6, [r4, #0]
 8009a80:	60a5      	str	r5, [r4, #8]
 8009a82:	463e      	mov	r6, r7
 8009a84:	42be      	cmp	r6, r7
 8009a86:	d900      	bls.n	8009a8a <__ssputs_r+0x72>
 8009a88:	463e      	mov	r6, r7
 8009a8a:	6820      	ldr	r0, [r4, #0]
 8009a8c:	4632      	mov	r2, r6
 8009a8e:	4641      	mov	r1, r8
 8009a90:	f000 faa6 	bl	8009fe0 <memmove>
 8009a94:	68a3      	ldr	r3, [r4, #8]
 8009a96:	1b9b      	subs	r3, r3, r6
 8009a98:	60a3      	str	r3, [r4, #8]
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	4433      	add	r3, r6
 8009a9e:	6023      	str	r3, [r4, #0]
 8009aa0:	2000      	movs	r0, #0
 8009aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aa6:	462a      	mov	r2, r5
 8009aa8:	f000 fad2 	bl	800a050 <_realloc_r>
 8009aac:	4606      	mov	r6, r0
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	d1e0      	bne.n	8009a74 <__ssputs_r+0x5c>
 8009ab2:	6921      	ldr	r1, [r4, #16]
 8009ab4:	4650      	mov	r0, sl
 8009ab6:	f7ff feb7 	bl	8009828 <_free_r>
 8009aba:	230c      	movs	r3, #12
 8009abc:	f8ca 3000 	str.w	r3, [sl]
 8009ac0:	89a3      	ldrh	r3, [r4, #12]
 8009ac2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ac6:	81a3      	strh	r3, [r4, #12]
 8009ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8009acc:	e7e9      	b.n	8009aa2 <__ssputs_r+0x8a>
	...

08009ad0 <_svfiprintf_r>:
 8009ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad4:	4698      	mov	r8, r3
 8009ad6:	898b      	ldrh	r3, [r1, #12]
 8009ad8:	061b      	lsls	r3, r3, #24
 8009ada:	b09d      	sub	sp, #116	@ 0x74
 8009adc:	4607      	mov	r7, r0
 8009ade:	460d      	mov	r5, r1
 8009ae0:	4614      	mov	r4, r2
 8009ae2:	d510      	bpl.n	8009b06 <_svfiprintf_r+0x36>
 8009ae4:	690b      	ldr	r3, [r1, #16]
 8009ae6:	b973      	cbnz	r3, 8009b06 <_svfiprintf_r+0x36>
 8009ae8:	2140      	movs	r1, #64	@ 0x40
 8009aea:	f7ff ff09 	bl	8009900 <_malloc_r>
 8009aee:	6028      	str	r0, [r5, #0]
 8009af0:	6128      	str	r0, [r5, #16]
 8009af2:	b930      	cbnz	r0, 8009b02 <_svfiprintf_r+0x32>
 8009af4:	230c      	movs	r3, #12
 8009af6:	603b      	str	r3, [r7, #0]
 8009af8:	f04f 30ff 	mov.w	r0, #4294967295
 8009afc:	b01d      	add	sp, #116	@ 0x74
 8009afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b02:	2340      	movs	r3, #64	@ 0x40
 8009b04:	616b      	str	r3, [r5, #20]
 8009b06:	2300      	movs	r3, #0
 8009b08:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b0a:	2320      	movs	r3, #32
 8009b0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b10:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b14:	2330      	movs	r3, #48	@ 0x30
 8009b16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009cb4 <_svfiprintf_r+0x1e4>
 8009b1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b1e:	f04f 0901 	mov.w	r9, #1
 8009b22:	4623      	mov	r3, r4
 8009b24:	469a      	mov	sl, r3
 8009b26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b2a:	b10a      	cbz	r2, 8009b30 <_svfiprintf_r+0x60>
 8009b2c:	2a25      	cmp	r2, #37	@ 0x25
 8009b2e:	d1f9      	bne.n	8009b24 <_svfiprintf_r+0x54>
 8009b30:	ebba 0b04 	subs.w	fp, sl, r4
 8009b34:	d00b      	beq.n	8009b4e <_svfiprintf_r+0x7e>
 8009b36:	465b      	mov	r3, fp
 8009b38:	4622      	mov	r2, r4
 8009b3a:	4629      	mov	r1, r5
 8009b3c:	4638      	mov	r0, r7
 8009b3e:	f7ff ff6b 	bl	8009a18 <__ssputs_r>
 8009b42:	3001      	adds	r0, #1
 8009b44:	f000 80a7 	beq.w	8009c96 <_svfiprintf_r+0x1c6>
 8009b48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b4a:	445a      	add	r2, fp
 8009b4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	f000 809f 	beq.w	8009c96 <_svfiprintf_r+0x1c6>
 8009b58:	2300      	movs	r3, #0
 8009b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b62:	f10a 0a01 	add.w	sl, sl, #1
 8009b66:	9304      	str	r3, [sp, #16]
 8009b68:	9307      	str	r3, [sp, #28]
 8009b6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b70:	4654      	mov	r4, sl
 8009b72:	2205      	movs	r2, #5
 8009b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b78:	484e      	ldr	r0, [pc, #312]	@ (8009cb4 <_svfiprintf_r+0x1e4>)
 8009b7a:	f7f6 fb41 	bl	8000200 <memchr>
 8009b7e:	9a04      	ldr	r2, [sp, #16]
 8009b80:	b9d8      	cbnz	r0, 8009bba <_svfiprintf_r+0xea>
 8009b82:	06d0      	lsls	r0, r2, #27
 8009b84:	bf44      	itt	mi
 8009b86:	2320      	movmi	r3, #32
 8009b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b8c:	0711      	lsls	r1, r2, #28
 8009b8e:	bf44      	itt	mi
 8009b90:	232b      	movmi	r3, #43	@ 0x2b
 8009b92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b96:	f89a 3000 	ldrb.w	r3, [sl]
 8009b9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b9c:	d015      	beq.n	8009bca <_svfiprintf_r+0xfa>
 8009b9e:	9a07      	ldr	r2, [sp, #28]
 8009ba0:	4654      	mov	r4, sl
 8009ba2:	2000      	movs	r0, #0
 8009ba4:	f04f 0c0a 	mov.w	ip, #10
 8009ba8:	4621      	mov	r1, r4
 8009baa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bae:	3b30      	subs	r3, #48	@ 0x30
 8009bb0:	2b09      	cmp	r3, #9
 8009bb2:	d94b      	bls.n	8009c4c <_svfiprintf_r+0x17c>
 8009bb4:	b1b0      	cbz	r0, 8009be4 <_svfiprintf_r+0x114>
 8009bb6:	9207      	str	r2, [sp, #28]
 8009bb8:	e014      	b.n	8009be4 <_svfiprintf_r+0x114>
 8009bba:	eba0 0308 	sub.w	r3, r0, r8
 8009bbe:	fa09 f303 	lsl.w	r3, r9, r3
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	9304      	str	r3, [sp, #16]
 8009bc6:	46a2      	mov	sl, r4
 8009bc8:	e7d2      	b.n	8009b70 <_svfiprintf_r+0xa0>
 8009bca:	9b03      	ldr	r3, [sp, #12]
 8009bcc:	1d19      	adds	r1, r3, #4
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	9103      	str	r1, [sp, #12]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	bfbb      	ittet	lt
 8009bd6:	425b      	neglt	r3, r3
 8009bd8:	f042 0202 	orrlt.w	r2, r2, #2
 8009bdc:	9307      	strge	r3, [sp, #28]
 8009bde:	9307      	strlt	r3, [sp, #28]
 8009be0:	bfb8      	it	lt
 8009be2:	9204      	strlt	r2, [sp, #16]
 8009be4:	7823      	ldrb	r3, [r4, #0]
 8009be6:	2b2e      	cmp	r3, #46	@ 0x2e
 8009be8:	d10a      	bne.n	8009c00 <_svfiprintf_r+0x130>
 8009bea:	7863      	ldrb	r3, [r4, #1]
 8009bec:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bee:	d132      	bne.n	8009c56 <_svfiprintf_r+0x186>
 8009bf0:	9b03      	ldr	r3, [sp, #12]
 8009bf2:	1d1a      	adds	r2, r3, #4
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	9203      	str	r2, [sp, #12]
 8009bf8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009bfc:	3402      	adds	r4, #2
 8009bfe:	9305      	str	r3, [sp, #20]
 8009c00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009cc4 <_svfiprintf_r+0x1f4>
 8009c04:	7821      	ldrb	r1, [r4, #0]
 8009c06:	2203      	movs	r2, #3
 8009c08:	4650      	mov	r0, sl
 8009c0a:	f7f6 faf9 	bl	8000200 <memchr>
 8009c0e:	b138      	cbz	r0, 8009c20 <_svfiprintf_r+0x150>
 8009c10:	9b04      	ldr	r3, [sp, #16]
 8009c12:	eba0 000a 	sub.w	r0, r0, sl
 8009c16:	2240      	movs	r2, #64	@ 0x40
 8009c18:	4082      	lsls	r2, r0
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	3401      	adds	r4, #1
 8009c1e:	9304      	str	r3, [sp, #16]
 8009c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c24:	4824      	ldr	r0, [pc, #144]	@ (8009cb8 <_svfiprintf_r+0x1e8>)
 8009c26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c2a:	2206      	movs	r2, #6
 8009c2c:	f7f6 fae8 	bl	8000200 <memchr>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	d036      	beq.n	8009ca2 <_svfiprintf_r+0x1d2>
 8009c34:	4b21      	ldr	r3, [pc, #132]	@ (8009cbc <_svfiprintf_r+0x1ec>)
 8009c36:	bb1b      	cbnz	r3, 8009c80 <_svfiprintf_r+0x1b0>
 8009c38:	9b03      	ldr	r3, [sp, #12]
 8009c3a:	3307      	adds	r3, #7
 8009c3c:	f023 0307 	bic.w	r3, r3, #7
 8009c40:	3308      	adds	r3, #8
 8009c42:	9303      	str	r3, [sp, #12]
 8009c44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c46:	4433      	add	r3, r6
 8009c48:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c4a:	e76a      	b.n	8009b22 <_svfiprintf_r+0x52>
 8009c4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c50:	460c      	mov	r4, r1
 8009c52:	2001      	movs	r0, #1
 8009c54:	e7a8      	b.n	8009ba8 <_svfiprintf_r+0xd8>
 8009c56:	2300      	movs	r3, #0
 8009c58:	3401      	adds	r4, #1
 8009c5a:	9305      	str	r3, [sp, #20]
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	f04f 0c0a 	mov.w	ip, #10
 8009c62:	4620      	mov	r0, r4
 8009c64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c68:	3a30      	subs	r2, #48	@ 0x30
 8009c6a:	2a09      	cmp	r2, #9
 8009c6c:	d903      	bls.n	8009c76 <_svfiprintf_r+0x1a6>
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d0c6      	beq.n	8009c00 <_svfiprintf_r+0x130>
 8009c72:	9105      	str	r1, [sp, #20]
 8009c74:	e7c4      	b.n	8009c00 <_svfiprintf_r+0x130>
 8009c76:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c7a:	4604      	mov	r4, r0
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e7f0      	b.n	8009c62 <_svfiprintf_r+0x192>
 8009c80:	ab03      	add	r3, sp, #12
 8009c82:	9300      	str	r3, [sp, #0]
 8009c84:	462a      	mov	r2, r5
 8009c86:	4b0e      	ldr	r3, [pc, #56]	@ (8009cc0 <_svfiprintf_r+0x1f0>)
 8009c88:	a904      	add	r1, sp, #16
 8009c8a:	4638      	mov	r0, r7
 8009c8c:	f3af 8000 	nop.w
 8009c90:	1c42      	adds	r2, r0, #1
 8009c92:	4606      	mov	r6, r0
 8009c94:	d1d6      	bne.n	8009c44 <_svfiprintf_r+0x174>
 8009c96:	89ab      	ldrh	r3, [r5, #12]
 8009c98:	065b      	lsls	r3, r3, #25
 8009c9a:	f53f af2d 	bmi.w	8009af8 <_svfiprintf_r+0x28>
 8009c9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ca0:	e72c      	b.n	8009afc <_svfiprintf_r+0x2c>
 8009ca2:	ab03      	add	r3, sp, #12
 8009ca4:	9300      	str	r3, [sp, #0]
 8009ca6:	462a      	mov	r2, r5
 8009ca8:	4b05      	ldr	r3, [pc, #20]	@ (8009cc0 <_svfiprintf_r+0x1f0>)
 8009caa:	a904      	add	r1, sp, #16
 8009cac:	4638      	mov	r0, r7
 8009cae:	f000 f879 	bl	8009da4 <_printf_i>
 8009cb2:	e7ed      	b.n	8009c90 <_svfiprintf_r+0x1c0>
 8009cb4:	0800a8e8 	.word	0x0800a8e8
 8009cb8:	0800a8f2 	.word	0x0800a8f2
 8009cbc:	00000000 	.word	0x00000000
 8009cc0:	08009a19 	.word	0x08009a19
 8009cc4:	0800a8ee 	.word	0x0800a8ee

08009cc8 <_printf_common>:
 8009cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ccc:	4616      	mov	r6, r2
 8009cce:	4698      	mov	r8, r3
 8009cd0:	688a      	ldr	r2, [r1, #8]
 8009cd2:	690b      	ldr	r3, [r1, #16]
 8009cd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	bfb8      	it	lt
 8009cdc:	4613      	movlt	r3, r2
 8009cde:	6033      	str	r3, [r6, #0]
 8009ce0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009ce4:	4607      	mov	r7, r0
 8009ce6:	460c      	mov	r4, r1
 8009ce8:	b10a      	cbz	r2, 8009cee <_printf_common+0x26>
 8009cea:	3301      	adds	r3, #1
 8009cec:	6033      	str	r3, [r6, #0]
 8009cee:	6823      	ldr	r3, [r4, #0]
 8009cf0:	0699      	lsls	r1, r3, #26
 8009cf2:	bf42      	ittt	mi
 8009cf4:	6833      	ldrmi	r3, [r6, #0]
 8009cf6:	3302      	addmi	r3, #2
 8009cf8:	6033      	strmi	r3, [r6, #0]
 8009cfa:	6825      	ldr	r5, [r4, #0]
 8009cfc:	f015 0506 	ands.w	r5, r5, #6
 8009d00:	d106      	bne.n	8009d10 <_printf_common+0x48>
 8009d02:	f104 0a19 	add.w	sl, r4, #25
 8009d06:	68e3      	ldr	r3, [r4, #12]
 8009d08:	6832      	ldr	r2, [r6, #0]
 8009d0a:	1a9b      	subs	r3, r3, r2
 8009d0c:	42ab      	cmp	r3, r5
 8009d0e:	dc26      	bgt.n	8009d5e <_printf_common+0x96>
 8009d10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009d14:	6822      	ldr	r2, [r4, #0]
 8009d16:	3b00      	subs	r3, #0
 8009d18:	bf18      	it	ne
 8009d1a:	2301      	movne	r3, #1
 8009d1c:	0692      	lsls	r2, r2, #26
 8009d1e:	d42b      	bmi.n	8009d78 <_printf_common+0xb0>
 8009d20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009d24:	4641      	mov	r1, r8
 8009d26:	4638      	mov	r0, r7
 8009d28:	47c8      	blx	r9
 8009d2a:	3001      	adds	r0, #1
 8009d2c:	d01e      	beq.n	8009d6c <_printf_common+0xa4>
 8009d2e:	6823      	ldr	r3, [r4, #0]
 8009d30:	6922      	ldr	r2, [r4, #16]
 8009d32:	f003 0306 	and.w	r3, r3, #6
 8009d36:	2b04      	cmp	r3, #4
 8009d38:	bf02      	ittt	eq
 8009d3a:	68e5      	ldreq	r5, [r4, #12]
 8009d3c:	6833      	ldreq	r3, [r6, #0]
 8009d3e:	1aed      	subeq	r5, r5, r3
 8009d40:	68a3      	ldr	r3, [r4, #8]
 8009d42:	bf0c      	ite	eq
 8009d44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d48:	2500      	movne	r5, #0
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	bfc4      	itt	gt
 8009d4e:	1a9b      	subgt	r3, r3, r2
 8009d50:	18ed      	addgt	r5, r5, r3
 8009d52:	2600      	movs	r6, #0
 8009d54:	341a      	adds	r4, #26
 8009d56:	42b5      	cmp	r5, r6
 8009d58:	d11a      	bne.n	8009d90 <_printf_common+0xc8>
 8009d5a:	2000      	movs	r0, #0
 8009d5c:	e008      	b.n	8009d70 <_printf_common+0xa8>
 8009d5e:	2301      	movs	r3, #1
 8009d60:	4652      	mov	r2, sl
 8009d62:	4641      	mov	r1, r8
 8009d64:	4638      	mov	r0, r7
 8009d66:	47c8      	blx	r9
 8009d68:	3001      	adds	r0, #1
 8009d6a:	d103      	bne.n	8009d74 <_printf_common+0xac>
 8009d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d74:	3501      	adds	r5, #1
 8009d76:	e7c6      	b.n	8009d06 <_printf_common+0x3e>
 8009d78:	18e1      	adds	r1, r4, r3
 8009d7a:	1c5a      	adds	r2, r3, #1
 8009d7c:	2030      	movs	r0, #48	@ 0x30
 8009d7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009d82:	4422      	add	r2, r4
 8009d84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009d88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009d8c:	3302      	adds	r3, #2
 8009d8e:	e7c7      	b.n	8009d20 <_printf_common+0x58>
 8009d90:	2301      	movs	r3, #1
 8009d92:	4622      	mov	r2, r4
 8009d94:	4641      	mov	r1, r8
 8009d96:	4638      	mov	r0, r7
 8009d98:	47c8      	blx	r9
 8009d9a:	3001      	adds	r0, #1
 8009d9c:	d0e6      	beq.n	8009d6c <_printf_common+0xa4>
 8009d9e:	3601      	adds	r6, #1
 8009da0:	e7d9      	b.n	8009d56 <_printf_common+0x8e>
	...

08009da4 <_printf_i>:
 8009da4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009da8:	7e0f      	ldrb	r7, [r1, #24]
 8009daa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009dac:	2f78      	cmp	r7, #120	@ 0x78
 8009dae:	4691      	mov	r9, r2
 8009db0:	4680      	mov	r8, r0
 8009db2:	460c      	mov	r4, r1
 8009db4:	469a      	mov	sl, r3
 8009db6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009dba:	d807      	bhi.n	8009dcc <_printf_i+0x28>
 8009dbc:	2f62      	cmp	r7, #98	@ 0x62
 8009dbe:	d80a      	bhi.n	8009dd6 <_printf_i+0x32>
 8009dc0:	2f00      	cmp	r7, #0
 8009dc2:	f000 80d1 	beq.w	8009f68 <_printf_i+0x1c4>
 8009dc6:	2f58      	cmp	r7, #88	@ 0x58
 8009dc8:	f000 80b8 	beq.w	8009f3c <_printf_i+0x198>
 8009dcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009dd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009dd4:	e03a      	b.n	8009e4c <_printf_i+0xa8>
 8009dd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009dda:	2b15      	cmp	r3, #21
 8009ddc:	d8f6      	bhi.n	8009dcc <_printf_i+0x28>
 8009dde:	a101      	add	r1, pc, #4	@ (adr r1, 8009de4 <_printf_i+0x40>)
 8009de0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009de4:	08009e3d 	.word	0x08009e3d
 8009de8:	08009e51 	.word	0x08009e51
 8009dec:	08009dcd 	.word	0x08009dcd
 8009df0:	08009dcd 	.word	0x08009dcd
 8009df4:	08009dcd 	.word	0x08009dcd
 8009df8:	08009dcd 	.word	0x08009dcd
 8009dfc:	08009e51 	.word	0x08009e51
 8009e00:	08009dcd 	.word	0x08009dcd
 8009e04:	08009dcd 	.word	0x08009dcd
 8009e08:	08009dcd 	.word	0x08009dcd
 8009e0c:	08009dcd 	.word	0x08009dcd
 8009e10:	08009f4f 	.word	0x08009f4f
 8009e14:	08009e7b 	.word	0x08009e7b
 8009e18:	08009f09 	.word	0x08009f09
 8009e1c:	08009dcd 	.word	0x08009dcd
 8009e20:	08009dcd 	.word	0x08009dcd
 8009e24:	08009f71 	.word	0x08009f71
 8009e28:	08009dcd 	.word	0x08009dcd
 8009e2c:	08009e7b 	.word	0x08009e7b
 8009e30:	08009dcd 	.word	0x08009dcd
 8009e34:	08009dcd 	.word	0x08009dcd
 8009e38:	08009f11 	.word	0x08009f11
 8009e3c:	6833      	ldr	r3, [r6, #0]
 8009e3e:	1d1a      	adds	r2, r3, #4
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	6032      	str	r2, [r6, #0]
 8009e44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	e09c      	b.n	8009f8a <_printf_i+0x1e6>
 8009e50:	6833      	ldr	r3, [r6, #0]
 8009e52:	6820      	ldr	r0, [r4, #0]
 8009e54:	1d19      	adds	r1, r3, #4
 8009e56:	6031      	str	r1, [r6, #0]
 8009e58:	0606      	lsls	r6, r0, #24
 8009e5a:	d501      	bpl.n	8009e60 <_printf_i+0xbc>
 8009e5c:	681d      	ldr	r5, [r3, #0]
 8009e5e:	e003      	b.n	8009e68 <_printf_i+0xc4>
 8009e60:	0645      	lsls	r5, r0, #25
 8009e62:	d5fb      	bpl.n	8009e5c <_printf_i+0xb8>
 8009e64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009e68:	2d00      	cmp	r5, #0
 8009e6a:	da03      	bge.n	8009e74 <_printf_i+0xd0>
 8009e6c:	232d      	movs	r3, #45	@ 0x2d
 8009e6e:	426d      	negs	r5, r5
 8009e70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e74:	4858      	ldr	r0, [pc, #352]	@ (8009fd8 <_printf_i+0x234>)
 8009e76:	230a      	movs	r3, #10
 8009e78:	e011      	b.n	8009e9e <_printf_i+0xfa>
 8009e7a:	6821      	ldr	r1, [r4, #0]
 8009e7c:	6833      	ldr	r3, [r6, #0]
 8009e7e:	0608      	lsls	r0, r1, #24
 8009e80:	f853 5b04 	ldr.w	r5, [r3], #4
 8009e84:	d402      	bmi.n	8009e8c <_printf_i+0xe8>
 8009e86:	0649      	lsls	r1, r1, #25
 8009e88:	bf48      	it	mi
 8009e8a:	b2ad      	uxthmi	r5, r5
 8009e8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8009e8e:	4852      	ldr	r0, [pc, #328]	@ (8009fd8 <_printf_i+0x234>)
 8009e90:	6033      	str	r3, [r6, #0]
 8009e92:	bf14      	ite	ne
 8009e94:	230a      	movne	r3, #10
 8009e96:	2308      	moveq	r3, #8
 8009e98:	2100      	movs	r1, #0
 8009e9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009e9e:	6866      	ldr	r6, [r4, #4]
 8009ea0:	60a6      	str	r6, [r4, #8]
 8009ea2:	2e00      	cmp	r6, #0
 8009ea4:	db05      	blt.n	8009eb2 <_printf_i+0x10e>
 8009ea6:	6821      	ldr	r1, [r4, #0]
 8009ea8:	432e      	orrs	r6, r5
 8009eaa:	f021 0104 	bic.w	r1, r1, #4
 8009eae:	6021      	str	r1, [r4, #0]
 8009eb0:	d04b      	beq.n	8009f4a <_printf_i+0x1a6>
 8009eb2:	4616      	mov	r6, r2
 8009eb4:	fbb5 f1f3 	udiv	r1, r5, r3
 8009eb8:	fb03 5711 	mls	r7, r3, r1, r5
 8009ebc:	5dc7      	ldrb	r7, [r0, r7]
 8009ebe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ec2:	462f      	mov	r7, r5
 8009ec4:	42bb      	cmp	r3, r7
 8009ec6:	460d      	mov	r5, r1
 8009ec8:	d9f4      	bls.n	8009eb4 <_printf_i+0x110>
 8009eca:	2b08      	cmp	r3, #8
 8009ecc:	d10b      	bne.n	8009ee6 <_printf_i+0x142>
 8009ece:	6823      	ldr	r3, [r4, #0]
 8009ed0:	07df      	lsls	r7, r3, #31
 8009ed2:	d508      	bpl.n	8009ee6 <_printf_i+0x142>
 8009ed4:	6923      	ldr	r3, [r4, #16]
 8009ed6:	6861      	ldr	r1, [r4, #4]
 8009ed8:	4299      	cmp	r1, r3
 8009eda:	bfde      	ittt	le
 8009edc:	2330      	movle	r3, #48	@ 0x30
 8009ede:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009ee2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009ee6:	1b92      	subs	r2, r2, r6
 8009ee8:	6122      	str	r2, [r4, #16]
 8009eea:	f8cd a000 	str.w	sl, [sp]
 8009eee:	464b      	mov	r3, r9
 8009ef0:	aa03      	add	r2, sp, #12
 8009ef2:	4621      	mov	r1, r4
 8009ef4:	4640      	mov	r0, r8
 8009ef6:	f7ff fee7 	bl	8009cc8 <_printf_common>
 8009efa:	3001      	adds	r0, #1
 8009efc:	d14a      	bne.n	8009f94 <_printf_i+0x1f0>
 8009efe:	f04f 30ff 	mov.w	r0, #4294967295
 8009f02:	b004      	add	sp, #16
 8009f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f08:	6823      	ldr	r3, [r4, #0]
 8009f0a:	f043 0320 	orr.w	r3, r3, #32
 8009f0e:	6023      	str	r3, [r4, #0]
 8009f10:	4832      	ldr	r0, [pc, #200]	@ (8009fdc <_printf_i+0x238>)
 8009f12:	2778      	movs	r7, #120	@ 0x78
 8009f14:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009f18:	6823      	ldr	r3, [r4, #0]
 8009f1a:	6831      	ldr	r1, [r6, #0]
 8009f1c:	061f      	lsls	r7, r3, #24
 8009f1e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009f22:	d402      	bmi.n	8009f2a <_printf_i+0x186>
 8009f24:	065f      	lsls	r7, r3, #25
 8009f26:	bf48      	it	mi
 8009f28:	b2ad      	uxthmi	r5, r5
 8009f2a:	6031      	str	r1, [r6, #0]
 8009f2c:	07d9      	lsls	r1, r3, #31
 8009f2e:	bf44      	itt	mi
 8009f30:	f043 0320 	orrmi.w	r3, r3, #32
 8009f34:	6023      	strmi	r3, [r4, #0]
 8009f36:	b11d      	cbz	r5, 8009f40 <_printf_i+0x19c>
 8009f38:	2310      	movs	r3, #16
 8009f3a:	e7ad      	b.n	8009e98 <_printf_i+0xf4>
 8009f3c:	4826      	ldr	r0, [pc, #152]	@ (8009fd8 <_printf_i+0x234>)
 8009f3e:	e7e9      	b.n	8009f14 <_printf_i+0x170>
 8009f40:	6823      	ldr	r3, [r4, #0]
 8009f42:	f023 0320 	bic.w	r3, r3, #32
 8009f46:	6023      	str	r3, [r4, #0]
 8009f48:	e7f6      	b.n	8009f38 <_printf_i+0x194>
 8009f4a:	4616      	mov	r6, r2
 8009f4c:	e7bd      	b.n	8009eca <_printf_i+0x126>
 8009f4e:	6833      	ldr	r3, [r6, #0]
 8009f50:	6825      	ldr	r5, [r4, #0]
 8009f52:	6961      	ldr	r1, [r4, #20]
 8009f54:	1d18      	adds	r0, r3, #4
 8009f56:	6030      	str	r0, [r6, #0]
 8009f58:	062e      	lsls	r6, r5, #24
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	d501      	bpl.n	8009f62 <_printf_i+0x1be>
 8009f5e:	6019      	str	r1, [r3, #0]
 8009f60:	e002      	b.n	8009f68 <_printf_i+0x1c4>
 8009f62:	0668      	lsls	r0, r5, #25
 8009f64:	d5fb      	bpl.n	8009f5e <_printf_i+0x1ba>
 8009f66:	8019      	strh	r1, [r3, #0]
 8009f68:	2300      	movs	r3, #0
 8009f6a:	6123      	str	r3, [r4, #16]
 8009f6c:	4616      	mov	r6, r2
 8009f6e:	e7bc      	b.n	8009eea <_printf_i+0x146>
 8009f70:	6833      	ldr	r3, [r6, #0]
 8009f72:	1d1a      	adds	r2, r3, #4
 8009f74:	6032      	str	r2, [r6, #0]
 8009f76:	681e      	ldr	r6, [r3, #0]
 8009f78:	6862      	ldr	r2, [r4, #4]
 8009f7a:	2100      	movs	r1, #0
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	f7f6 f93f 	bl	8000200 <memchr>
 8009f82:	b108      	cbz	r0, 8009f88 <_printf_i+0x1e4>
 8009f84:	1b80      	subs	r0, r0, r6
 8009f86:	6060      	str	r0, [r4, #4]
 8009f88:	6863      	ldr	r3, [r4, #4]
 8009f8a:	6123      	str	r3, [r4, #16]
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f92:	e7aa      	b.n	8009eea <_printf_i+0x146>
 8009f94:	6923      	ldr	r3, [r4, #16]
 8009f96:	4632      	mov	r2, r6
 8009f98:	4649      	mov	r1, r9
 8009f9a:	4640      	mov	r0, r8
 8009f9c:	47d0      	blx	sl
 8009f9e:	3001      	adds	r0, #1
 8009fa0:	d0ad      	beq.n	8009efe <_printf_i+0x15a>
 8009fa2:	6823      	ldr	r3, [r4, #0]
 8009fa4:	079b      	lsls	r3, r3, #30
 8009fa6:	d413      	bmi.n	8009fd0 <_printf_i+0x22c>
 8009fa8:	68e0      	ldr	r0, [r4, #12]
 8009faa:	9b03      	ldr	r3, [sp, #12]
 8009fac:	4298      	cmp	r0, r3
 8009fae:	bfb8      	it	lt
 8009fb0:	4618      	movlt	r0, r3
 8009fb2:	e7a6      	b.n	8009f02 <_printf_i+0x15e>
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	4632      	mov	r2, r6
 8009fb8:	4649      	mov	r1, r9
 8009fba:	4640      	mov	r0, r8
 8009fbc:	47d0      	blx	sl
 8009fbe:	3001      	adds	r0, #1
 8009fc0:	d09d      	beq.n	8009efe <_printf_i+0x15a>
 8009fc2:	3501      	adds	r5, #1
 8009fc4:	68e3      	ldr	r3, [r4, #12]
 8009fc6:	9903      	ldr	r1, [sp, #12]
 8009fc8:	1a5b      	subs	r3, r3, r1
 8009fca:	42ab      	cmp	r3, r5
 8009fcc:	dcf2      	bgt.n	8009fb4 <_printf_i+0x210>
 8009fce:	e7eb      	b.n	8009fa8 <_printf_i+0x204>
 8009fd0:	2500      	movs	r5, #0
 8009fd2:	f104 0619 	add.w	r6, r4, #25
 8009fd6:	e7f5      	b.n	8009fc4 <_printf_i+0x220>
 8009fd8:	0800a8f9 	.word	0x0800a8f9
 8009fdc:	0800a90a 	.word	0x0800a90a

08009fe0 <memmove>:
 8009fe0:	4288      	cmp	r0, r1
 8009fe2:	b510      	push	{r4, lr}
 8009fe4:	eb01 0402 	add.w	r4, r1, r2
 8009fe8:	d902      	bls.n	8009ff0 <memmove+0x10>
 8009fea:	4284      	cmp	r4, r0
 8009fec:	4623      	mov	r3, r4
 8009fee:	d807      	bhi.n	800a000 <memmove+0x20>
 8009ff0:	1e43      	subs	r3, r0, #1
 8009ff2:	42a1      	cmp	r1, r4
 8009ff4:	d008      	beq.n	800a008 <memmove+0x28>
 8009ff6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ffa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ffe:	e7f8      	b.n	8009ff2 <memmove+0x12>
 800a000:	4402      	add	r2, r0
 800a002:	4601      	mov	r1, r0
 800a004:	428a      	cmp	r2, r1
 800a006:	d100      	bne.n	800a00a <memmove+0x2a>
 800a008:	bd10      	pop	{r4, pc}
 800a00a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a00e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a012:	e7f7      	b.n	800a004 <memmove+0x24>

0800a014 <_sbrk_r>:
 800a014:	b538      	push	{r3, r4, r5, lr}
 800a016:	4d06      	ldr	r5, [pc, #24]	@ (800a030 <_sbrk_r+0x1c>)
 800a018:	2300      	movs	r3, #0
 800a01a:	4604      	mov	r4, r0
 800a01c:	4608      	mov	r0, r1
 800a01e:	602b      	str	r3, [r5, #0]
 800a020:	f7f7 febe 	bl	8001da0 <_sbrk>
 800a024:	1c43      	adds	r3, r0, #1
 800a026:	d102      	bne.n	800a02e <_sbrk_r+0x1a>
 800a028:	682b      	ldr	r3, [r5, #0]
 800a02a:	b103      	cbz	r3, 800a02e <_sbrk_r+0x1a>
 800a02c:	6023      	str	r3, [r4, #0]
 800a02e:	bd38      	pop	{r3, r4, r5, pc}
 800a030:	20000e2c 	.word	0x20000e2c

0800a034 <memcpy>:
 800a034:	440a      	add	r2, r1
 800a036:	4291      	cmp	r1, r2
 800a038:	f100 33ff 	add.w	r3, r0, #4294967295
 800a03c:	d100      	bne.n	800a040 <memcpy+0xc>
 800a03e:	4770      	bx	lr
 800a040:	b510      	push	{r4, lr}
 800a042:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a046:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a04a:	4291      	cmp	r1, r2
 800a04c:	d1f9      	bne.n	800a042 <memcpy+0xe>
 800a04e:	bd10      	pop	{r4, pc}

0800a050 <_realloc_r>:
 800a050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a054:	4607      	mov	r7, r0
 800a056:	4614      	mov	r4, r2
 800a058:	460d      	mov	r5, r1
 800a05a:	b921      	cbnz	r1, 800a066 <_realloc_r+0x16>
 800a05c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a060:	4611      	mov	r1, r2
 800a062:	f7ff bc4d 	b.w	8009900 <_malloc_r>
 800a066:	b92a      	cbnz	r2, 800a074 <_realloc_r+0x24>
 800a068:	f7ff fbde 	bl	8009828 <_free_r>
 800a06c:	4625      	mov	r5, r4
 800a06e:	4628      	mov	r0, r5
 800a070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a074:	f000 f81a 	bl	800a0ac <_malloc_usable_size_r>
 800a078:	4284      	cmp	r4, r0
 800a07a:	4606      	mov	r6, r0
 800a07c:	d802      	bhi.n	800a084 <_realloc_r+0x34>
 800a07e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a082:	d8f4      	bhi.n	800a06e <_realloc_r+0x1e>
 800a084:	4621      	mov	r1, r4
 800a086:	4638      	mov	r0, r7
 800a088:	f7ff fc3a 	bl	8009900 <_malloc_r>
 800a08c:	4680      	mov	r8, r0
 800a08e:	b908      	cbnz	r0, 800a094 <_realloc_r+0x44>
 800a090:	4645      	mov	r5, r8
 800a092:	e7ec      	b.n	800a06e <_realloc_r+0x1e>
 800a094:	42b4      	cmp	r4, r6
 800a096:	4622      	mov	r2, r4
 800a098:	4629      	mov	r1, r5
 800a09a:	bf28      	it	cs
 800a09c:	4632      	movcs	r2, r6
 800a09e:	f7ff ffc9 	bl	800a034 <memcpy>
 800a0a2:	4629      	mov	r1, r5
 800a0a4:	4638      	mov	r0, r7
 800a0a6:	f7ff fbbf 	bl	8009828 <_free_r>
 800a0aa:	e7f1      	b.n	800a090 <_realloc_r+0x40>

0800a0ac <_malloc_usable_size_r>:
 800a0ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0b0:	1f18      	subs	r0, r3, #4
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	bfbc      	itt	lt
 800a0b6:	580b      	ldrlt	r3, [r1, r0]
 800a0b8:	18c0      	addlt	r0, r0, r3
 800a0ba:	4770      	bx	lr

0800a0bc <atan2>:
 800a0bc:	f000 baa4 	b.w	800a608 <__ieee754_atan2>

0800a0c0 <sqrt>:
 800a0c0:	b538      	push	{r3, r4, r5, lr}
 800a0c2:	ed2d 8b02 	vpush	{d8}
 800a0c6:	ec55 4b10 	vmov	r4, r5, d0
 800a0ca:	f000 f9c5 	bl	800a458 <__ieee754_sqrt>
 800a0ce:	4622      	mov	r2, r4
 800a0d0:	462b      	mov	r3, r5
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	4629      	mov	r1, r5
 800a0d6:	eeb0 8a40 	vmov.f32	s16, s0
 800a0da:	eef0 8a60 	vmov.f32	s17, s1
 800a0de:	f7f6 fd35 	bl	8000b4c <__aeabi_dcmpun>
 800a0e2:	b990      	cbnz	r0, 800a10a <sqrt+0x4a>
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	4629      	mov	r1, r5
 800a0ec:	f7f6 fd06 	bl	8000afc <__aeabi_dcmplt>
 800a0f0:	b158      	cbz	r0, 800a10a <sqrt+0x4a>
 800a0f2:	f7ff fb6d 	bl	80097d0 <__errno>
 800a0f6:	2321      	movs	r3, #33	@ 0x21
 800a0f8:	6003      	str	r3, [r0, #0]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	4610      	mov	r0, r2
 800a100:	4619      	mov	r1, r3
 800a102:	f7f6 fbb3 	bl	800086c <__aeabi_ddiv>
 800a106:	ec41 0b18 	vmov	d8, r0, r1
 800a10a:	eeb0 0a48 	vmov.f32	s0, s16
 800a10e:	eef0 0a68 	vmov.f32	s1, s17
 800a112:	ecbd 8b02 	vpop	{d8}
 800a116:	bd38      	pop	{r3, r4, r5, pc}

0800a118 <atan>:
 800a118:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a11c:	ec55 4b10 	vmov	r4, r5, d0
 800a120:	4bbf      	ldr	r3, [pc, #764]	@ (800a420 <atan+0x308>)
 800a122:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800a126:	429e      	cmp	r6, r3
 800a128:	46ab      	mov	fp, r5
 800a12a:	d918      	bls.n	800a15e <atan+0x46>
 800a12c:	4bbd      	ldr	r3, [pc, #756]	@ (800a424 <atan+0x30c>)
 800a12e:	429e      	cmp	r6, r3
 800a130:	d801      	bhi.n	800a136 <atan+0x1e>
 800a132:	d109      	bne.n	800a148 <atan+0x30>
 800a134:	b144      	cbz	r4, 800a148 <atan+0x30>
 800a136:	4622      	mov	r2, r4
 800a138:	462b      	mov	r3, r5
 800a13a:	4620      	mov	r0, r4
 800a13c:	4629      	mov	r1, r5
 800a13e:	f7f6 f8b5 	bl	80002ac <__adddf3>
 800a142:	4604      	mov	r4, r0
 800a144:	460d      	mov	r5, r1
 800a146:	e006      	b.n	800a156 <atan+0x3e>
 800a148:	f1bb 0f00 	cmp.w	fp, #0
 800a14c:	f340 812b 	ble.w	800a3a6 <atan+0x28e>
 800a150:	a597      	add	r5, pc, #604	@ (adr r5, 800a3b0 <atan+0x298>)
 800a152:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a156:	ec45 4b10 	vmov	d0, r4, r5
 800a15a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a15e:	4bb2      	ldr	r3, [pc, #712]	@ (800a428 <atan+0x310>)
 800a160:	429e      	cmp	r6, r3
 800a162:	d813      	bhi.n	800a18c <atan+0x74>
 800a164:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a168:	429e      	cmp	r6, r3
 800a16a:	d80c      	bhi.n	800a186 <atan+0x6e>
 800a16c:	a392      	add	r3, pc, #584	@ (adr r3, 800a3b8 <atan+0x2a0>)
 800a16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a172:	4620      	mov	r0, r4
 800a174:	4629      	mov	r1, r5
 800a176:	f7f6 f899 	bl	80002ac <__adddf3>
 800a17a:	4bac      	ldr	r3, [pc, #688]	@ (800a42c <atan+0x314>)
 800a17c:	2200      	movs	r2, #0
 800a17e:	f7f6 fcdb 	bl	8000b38 <__aeabi_dcmpgt>
 800a182:	2800      	cmp	r0, #0
 800a184:	d1e7      	bne.n	800a156 <atan+0x3e>
 800a186:	f04f 3aff 	mov.w	sl, #4294967295
 800a18a:	e029      	b.n	800a1e0 <atan+0xc8>
 800a18c:	f000 f95c 	bl	800a448 <fabs>
 800a190:	4ba7      	ldr	r3, [pc, #668]	@ (800a430 <atan+0x318>)
 800a192:	429e      	cmp	r6, r3
 800a194:	ec55 4b10 	vmov	r4, r5, d0
 800a198:	f200 80bc 	bhi.w	800a314 <atan+0x1fc>
 800a19c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a1a0:	429e      	cmp	r6, r3
 800a1a2:	f200 809e 	bhi.w	800a2e2 <atan+0x1ca>
 800a1a6:	4622      	mov	r2, r4
 800a1a8:	462b      	mov	r3, r5
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	4629      	mov	r1, r5
 800a1ae:	f7f6 f87d 	bl	80002ac <__adddf3>
 800a1b2:	4b9e      	ldr	r3, [pc, #632]	@ (800a42c <atan+0x314>)
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f7f6 f877 	bl	80002a8 <__aeabi_dsub>
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	4606      	mov	r6, r0
 800a1be:	460f      	mov	r7, r1
 800a1c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	4629      	mov	r1, r5
 800a1c8:	f7f6 f870 	bl	80002ac <__adddf3>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	4630      	mov	r0, r6
 800a1d2:	4639      	mov	r1, r7
 800a1d4:	f7f6 fb4a 	bl	800086c <__aeabi_ddiv>
 800a1d8:	f04f 0a00 	mov.w	sl, #0
 800a1dc:	4604      	mov	r4, r0
 800a1de:	460d      	mov	r5, r1
 800a1e0:	4622      	mov	r2, r4
 800a1e2:	462b      	mov	r3, r5
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	4629      	mov	r1, r5
 800a1e8:	f7f6 fa16 	bl	8000618 <__aeabi_dmul>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	4680      	mov	r8, r0
 800a1f2:	4689      	mov	r9, r1
 800a1f4:	f7f6 fa10 	bl	8000618 <__aeabi_dmul>
 800a1f8:	a371      	add	r3, pc, #452	@ (adr r3, 800a3c0 <atan+0x2a8>)
 800a1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fe:	4606      	mov	r6, r0
 800a200:	460f      	mov	r7, r1
 800a202:	f7f6 fa09 	bl	8000618 <__aeabi_dmul>
 800a206:	a370      	add	r3, pc, #448	@ (adr r3, 800a3c8 <atan+0x2b0>)
 800a208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20c:	f7f6 f84e 	bl	80002ac <__adddf3>
 800a210:	4632      	mov	r2, r6
 800a212:	463b      	mov	r3, r7
 800a214:	f7f6 fa00 	bl	8000618 <__aeabi_dmul>
 800a218:	a36d      	add	r3, pc, #436	@ (adr r3, 800a3d0 <atan+0x2b8>)
 800a21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21e:	f7f6 f845 	bl	80002ac <__adddf3>
 800a222:	4632      	mov	r2, r6
 800a224:	463b      	mov	r3, r7
 800a226:	f7f6 f9f7 	bl	8000618 <__aeabi_dmul>
 800a22a:	a36b      	add	r3, pc, #428	@ (adr r3, 800a3d8 <atan+0x2c0>)
 800a22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a230:	f7f6 f83c 	bl	80002ac <__adddf3>
 800a234:	4632      	mov	r2, r6
 800a236:	463b      	mov	r3, r7
 800a238:	f7f6 f9ee 	bl	8000618 <__aeabi_dmul>
 800a23c:	a368      	add	r3, pc, #416	@ (adr r3, 800a3e0 <atan+0x2c8>)
 800a23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a242:	f7f6 f833 	bl	80002ac <__adddf3>
 800a246:	4632      	mov	r2, r6
 800a248:	463b      	mov	r3, r7
 800a24a:	f7f6 f9e5 	bl	8000618 <__aeabi_dmul>
 800a24e:	a366      	add	r3, pc, #408	@ (adr r3, 800a3e8 <atan+0x2d0>)
 800a250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a254:	f7f6 f82a 	bl	80002ac <__adddf3>
 800a258:	4642      	mov	r2, r8
 800a25a:	464b      	mov	r3, r9
 800a25c:	f7f6 f9dc 	bl	8000618 <__aeabi_dmul>
 800a260:	a363      	add	r3, pc, #396	@ (adr r3, 800a3f0 <atan+0x2d8>)
 800a262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a266:	4680      	mov	r8, r0
 800a268:	4689      	mov	r9, r1
 800a26a:	4630      	mov	r0, r6
 800a26c:	4639      	mov	r1, r7
 800a26e:	f7f6 f9d3 	bl	8000618 <__aeabi_dmul>
 800a272:	a361      	add	r3, pc, #388	@ (adr r3, 800a3f8 <atan+0x2e0>)
 800a274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a278:	f7f6 f816 	bl	80002a8 <__aeabi_dsub>
 800a27c:	4632      	mov	r2, r6
 800a27e:	463b      	mov	r3, r7
 800a280:	f7f6 f9ca 	bl	8000618 <__aeabi_dmul>
 800a284:	a35e      	add	r3, pc, #376	@ (adr r3, 800a400 <atan+0x2e8>)
 800a286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28a:	f7f6 f80d 	bl	80002a8 <__aeabi_dsub>
 800a28e:	4632      	mov	r2, r6
 800a290:	463b      	mov	r3, r7
 800a292:	f7f6 f9c1 	bl	8000618 <__aeabi_dmul>
 800a296:	a35c      	add	r3, pc, #368	@ (adr r3, 800a408 <atan+0x2f0>)
 800a298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29c:	f7f6 f804 	bl	80002a8 <__aeabi_dsub>
 800a2a0:	4632      	mov	r2, r6
 800a2a2:	463b      	mov	r3, r7
 800a2a4:	f7f6 f9b8 	bl	8000618 <__aeabi_dmul>
 800a2a8:	a359      	add	r3, pc, #356	@ (adr r3, 800a410 <atan+0x2f8>)
 800a2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ae:	f7f5 fffb 	bl	80002a8 <__aeabi_dsub>
 800a2b2:	4632      	mov	r2, r6
 800a2b4:	463b      	mov	r3, r7
 800a2b6:	f7f6 f9af 	bl	8000618 <__aeabi_dmul>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	460b      	mov	r3, r1
 800a2be:	4640      	mov	r0, r8
 800a2c0:	4649      	mov	r1, r9
 800a2c2:	f7f5 fff3 	bl	80002ac <__adddf3>
 800a2c6:	4622      	mov	r2, r4
 800a2c8:	462b      	mov	r3, r5
 800a2ca:	f7f6 f9a5 	bl	8000618 <__aeabi_dmul>
 800a2ce:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	d148      	bne.n	800a36a <atan+0x252>
 800a2d8:	4620      	mov	r0, r4
 800a2da:	4629      	mov	r1, r5
 800a2dc:	f7f5 ffe4 	bl	80002a8 <__aeabi_dsub>
 800a2e0:	e72f      	b.n	800a142 <atan+0x2a>
 800a2e2:	4b52      	ldr	r3, [pc, #328]	@ (800a42c <atan+0x314>)
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	4629      	mov	r1, r5
 800a2ea:	f7f5 ffdd 	bl	80002a8 <__aeabi_dsub>
 800a2ee:	4b4f      	ldr	r3, [pc, #316]	@ (800a42c <atan+0x314>)
 800a2f0:	4606      	mov	r6, r0
 800a2f2:	460f      	mov	r7, r1
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	4629      	mov	r1, r5
 800a2fa:	f7f5 ffd7 	bl	80002ac <__adddf3>
 800a2fe:	4602      	mov	r2, r0
 800a300:	460b      	mov	r3, r1
 800a302:	4630      	mov	r0, r6
 800a304:	4639      	mov	r1, r7
 800a306:	f7f6 fab1 	bl	800086c <__aeabi_ddiv>
 800a30a:	f04f 0a01 	mov.w	sl, #1
 800a30e:	4604      	mov	r4, r0
 800a310:	460d      	mov	r5, r1
 800a312:	e765      	b.n	800a1e0 <atan+0xc8>
 800a314:	4b47      	ldr	r3, [pc, #284]	@ (800a434 <atan+0x31c>)
 800a316:	429e      	cmp	r6, r3
 800a318:	d21c      	bcs.n	800a354 <atan+0x23c>
 800a31a:	4b47      	ldr	r3, [pc, #284]	@ (800a438 <atan+0x320>)
 800a31c:	2200      	movs	r2, #0
 800a31e:	4620      	mov	r0, r4
 800a320:	4629      	mov	r1, r5
 800a322:	f7f5 ffc1 	bl	80002a8 <__aeabi_dsub>
 800a326:	4b44      	ldr	r3, [pc, #272]	@ (800a438 <atan+0x320>)
 800a328:	4606      	mov	r6, r0
 800a32a:	460f      	mov	r7, r1
 800a32c:	2200      	movs	r2, #0
 800a32e:	4620      	mov	r0, r4
 800a330:	4629      	mov	r1, r5
 800a332:	f7f6 f971 	bl	8000618 <__aeabi_dmul>
 800a336:	4b3d      	ldr	r3, [pc, #244]	@ (800a42c <atan+0x314>)
 800a338:	2200      	movs	r2, #0
 800a33a:	f7f5 ffb7 	bl	80002ac <__adddf3>
 800a33e:	4602      	mov	r2, r0
 800a340:	460b      	mov	r3, r1
 800a342:	4630      	mov	r0, r6
 800a344:	4639      	mov	r1, r7
 800a346:	f7f6 fa91 	bl	800086c <__aeabi_ddiv>
 800a34a:	f04f 0a02 	mov.w	sl, #2
 800a34e:	4604      	mov	r4, r0
 800a350:	460d      	mov	r5, r1
 800a352:	e745      	b.n	800a1e0 <atan+0xc8>
 800a354:	4622      	mov	r2, r4
 800a356:	462b      	mov	r3, r5
 800a358:	4938      	ldr	r1, [pc, #224]	@ (800a43c <atan+0x324>)
 800a35a:	2000      	movs	r0, #0
 800a35c:	f7f6 fa86 	bl	800086c <__aeabi_ddiv>
 800a360:	f04f 0a03 	mov.w	sl, #3
 800a364:	4604      	mov	r4, r0
 800a366:	460d      	mov	r5, r1
 800a368:	e73a      	b.n	800a1e0 <atan+0xc8>
 800a36a:	4b35      	ldr	r3, [pc, #212]	@ (800a440 <atan+0x328>)
 800a36c:	4e35      	ldr	r6, [pc, #212]	@ (800a444 <atan+0x32c>)
 800a36e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a376:	f7f5 ff97 	bl	80002a8 <__aeabi_dsub>
 800a37a:	4622      	mov	r2, r4
 800a37c:	462b      	mov	r3, r5
 800a37e:	f7f5 ff93 	bl	80002a8 <__aeabi_dsub>
 800a382:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a386:	4602      	mov	r2, r0
 800a388:	460b      	mov	r3, r1
 800a38a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a38e:	f7f5 ff8b 	bl	80002a8 <__aeabi_dsub>
 800a392:	f1bb 0f00 	cmp.w	fp, #0
 800a396:	4604      	mov	r4, r0
 800a398:	460d      	mov	r5, r1
 800a39a:	f6bf aedc 	bge.w	800a156 <atan+0x3e>
 800a39e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a3a2:	461d      	mov	r5, r3
 800a3a4:	e6d7      	b.n	800a156 <atan+0x3e>
 800a3a6:	a51c      	add	r5, pc, #112	@ (adr r5, 800a418 <atan+0x300>)
 800a3a8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a3ac:	e6d3      	b.n	800a156 <atan+0x3e>
 800a3ae:	bf00      	nop
 800a3b0:	54442d18 	.word	0x54442d18
 800a3b4:	3ff921fb 	.word	0x3ff921fb
 800a3b8:	8800759c 	.word	0x8800759c
 800a3bc:	7e37e43c 	.word	0x7e37e43c
 800a3c0:	e322da11 	.word	0xe322da11
 800a3c4:	3f90ad3a 	.word	0x3f90ad3a
 800a3c8:	24760deb 	.word	0x24760deb
 800a3cc:	3fa97b4b 	.word	0x3fa97b4b
 800a3d0:	a0d03d51 	.word	0xa0d03d51
 800a3d4:	3fb10d66 	.word	0x3fb10d66
 800a3d8:	c54c206e 	.word	0xc54c206e
 800a3dc:	3fb745cd 	.word	0x3fb745cd
 800a3e0:	920083ff 	.word	0x920083ff
 800a3e4:	3fc24924 	.word	0x3fc24924
 800a3e8:	5555550d 	.word	0x5555550d
 800a3ec:	3fd55555 	.word	0x3fd55555
 800a3f0:	2c6a6c2f 	.word	0x2c6a6c2f
 800a3f4:	bfa2b444 	.word	0xbfa2b444
 800a3f8:	52defd9a 	.word	0x52defd9a
 800a3fc:	3fadde2d 	.word	0x3fadde2d
 800a400:	af749a6d 	.word	0xaf749a6d
 800a404:	3fb3b0f2 	.word	0x3fb3b0f2
 800a408:	fe231671 	.word	0xfe231671
 800a40c:	3fbc71c6 	.word	0x3fbc71c6
 800a410:	9998ebc4 	.word	0x9998ebc4
 800a414:	3fc99999 	.word	0x3fc99999
 800a418:	54442d18 	.word	0x54442d18
 800a41c:	bff921fb 	.word	0xbff921fb
 800a420:	440fffff 	.word	0x440fffff
 800a424:	7ff00000 	.word	0x7ff00000
 800a428:	3fdbffff 	.word	0x3fdbffff
 800a42c:	3ff00000 	.word	0x3ff00000
 800a430:	3ff2ffff 	.word	0x3ff2ffff
 800a434:	40038000 	.word	0x40038000
 800a438:	3ff80000 	.word	0x3ff80000
 800a43c:	bff00000 	.word	0xbff00000
 800a440:	0800a920 	.word	0x0800a920
 800a444:	0800a940 	.word	0x0800a940

0800a448 <fabs>:
 800a448:	ec51 0b10 	vmov	r0, r1, d0
 800a44c:	4602      	mov	r2, r0
 800a44e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a452:	ec43 2b10 	vmov	d0, r2, r3
 800a456:	4770      	bx	lr

0800a458 <__ieee754_sqrt>:
 800a458:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a45c:	4a66      	ldr	r2, [pc, #408]	@ (800a5f8 <__ieee754_sqrt+0x1a0>)
 800a45e:	ec55 4b10 	vmov	r4, r5, d0
 800a462:	43aa      	bics	r2, r5
 800a464:	462b      	mov	r3, r5
 800a466:	4621      	mov	r1, r4
 800a468:	d110      	bne.n	800a48c <__ieee754_sqrt+0x34>
 800a46a:	4622      	mov	r2, r4
 800a46c:	4620      	mov	r0, r4
 800a46e:	4629      	mov	r1, r5
 800a470:	f7f6 f8d2 	bl	8000618 <__aeabi_dmul>
 800a474:	4602      	mov	r2, r0
 800a476:	460b      	mov	r3, r1
 800a478:	4620      	mov	r0, r4
 800a47a:	4629      	mov	r1, r5
 800a47c:	f7f5 ff16 	bl	80002ac <__adddf3>
 800a480:	4604      	mov	r4, r0
 800a482:	460d      	mov	r5, r1
 800a484:	ec45 4b10 	vmov	d0, r4, r5
 800a488:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a48c:	2d00      	cmp	r5, #0
 800a48e:	dc0e      	bgt.n	800a4ae <__ieee754_sqrt+0x56>
 800a490:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a494:	4322      	orrs	r2, r4
 800a496:	d0f5      	beq.n	800a484 <__ieee754_sqrt+0x2c>
 800a498:	b19d      	cbz	r5, 800a4c2 <__ieee754_sqrt+0x6a>
 800a49a:	4622      	mov	r2, r4
 800a49c:	4620      	mov	r0, r4
 800a49e:	4629      	mov	r1, r5
 800a4a0:	f7f5 ff02 	bl	80002a8 <__aeabi_dsub>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	f7f6 f9e0 	bl	800086c <__aeabi_ddiv>
 800a4ac:	e7e8      	b.n	800a480 <__ieee754_sqrt+0x28>
 800a4ae:	152a      	asrs	r2, r5, #20
 800a4b0:	d115      	bne.n	800a4de <__ieee754_sqrt+0x86>
 800a4b2:	2000      	movs	r0, #0
 800a4b4:	e009      	b.n	800a4ca <__ieee754_sqrt+0x72>
 800a4b6:	0acb      	lsrs	r3, r1, #11
 800a4b8:	3a15      	subs	r2, #21
 800a4ba:	0549      	lsls	r1, r1, #21
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d0fa      	beq.n	800a4b6 <__ieee754_sqrt+0x5e>
 800a4c0:	e7f7      	b.n	800a4b2 <__ieee754_sqrt+0x5a>
 800a4c2:	462a      	mov	r2, r5
 800a4c4:	e7fa      	b.n	800a4bc <__ieee754_sqrt+0x64>
 800a4c6:	005b      	lsls	r3, r3, #1
 800a4c8:	3001      	adds	r0, #1
 800a4ca:	02dc      	lsls	r4, r3, #11
 800a4cc:	d5fb      	bpl.n	800a4c6 <__ieee754_sqrt+0x6e>
 800a4ce:	1e44      	subs	r4, r0, #1
 800a4d0:	1b12      	subs	r2, r2, r4
 800a4d2:	f1c0 0420 	rsb	r4, r0, #32
 800a4d6:	fa21 f404 	lsr.w	r4, r1, r4
 800a4da:	4323      	orrs	r3, r4
 800a4dc:	4081      	lsls	r1, r0
 800a4de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4e2:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800a4e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a4ea:	07d2      	lsls	r2, r2, #31
 800a4ec:	bf5c      	itt	pl
 800a4ee:	005b      	lslpl	r3, r3, #1
 800a4f0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a4f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a4f8:	bf58      	it	pl
 800a4fa:	0049      	lslpl	r1, r1, #1
 800a4fc:	2600      	movs	r6, #0
 800a4fe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a502:	107f      	asrs	r7, r7, #1
 800a504:	0049      	lsls	r1, r1, #1
 800a506:	2016      	movs	r0, #22
 800a508:	4632      	mov	r2, r6
 800a50a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a50e:	1915      	adds	r5, r2, r4
 800a510:	429d      	cmp	r5, r3
 800a512:	bfde      	ittt	le
 800a514:	192a      	addle	r2, r5, r4
 800a516:	1b5b      	suble	r3, r3, r5
 800a518:	1936      	addle	r6, r6, r4
 800a51a:	0fcd      	lsrs	r5, r1, #31
 800a51c:	3801      	subs	r0, #1
 800a51e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800a522:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a526:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a52a:	d1f0      	bne.n	800a50e <__ieee754_sqrt+0xb6>
 800a52c:	4605      	mov	r5, r0
 800a52e:	2420      	movs	r4, #32
 800a530:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a534:	4293      	cmp	r3, r2
 800a536:	eb0c 0e00 	add.w	lr, ip, r0
 800a53a:	dc02      	bgt.n	800a542 <__ieee754_sqrt+0xea>
 800a53c:	d113      	bne.n	800a566 <__ieee754_sqrt+0x10e>
 800a53e:	458e      	cmp	lr, r1
 800a540:	d811      	bhi.n	800a566 <__ieee754_sqrt+0x10e>
 800a542:	f1be 0f00 	cmp.w	lr, #0
 800a546:	eb0e 000c 	add.w	r0, lr, ip
 800a54a:	da3f      	bge.n	800a5cc <__ieee754_sqrt+0x174>
 800a54c:	2800      	cmp	r0, #0
 800a54e:	db3d      	blt.n	800a5cc <__ieee754_sqrt+0x174>
 800a550:	f102 0801 	add.w	r8, r2, #1
 800a554:	1a9b      	subs	r3, r3, r2
 800a556:	458e      	cmp	lr, r1
 800a558:	bf88      	it	hi
 800a55a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a55e:	eba1 010e 	sub.w	r1, r1, lr
 800a562:	4465      	add	r5, ip
 800a564:	4642      	mov	r2, r8
 800a566:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a56a:	3c01      	subs	r4, #1
 800a56c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a570:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a574:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a578:	d1dc      	bne.n	800a534 <__ieee754_sqrt+0xdc>
 800a57a:	4319      	orrs	r1, r3
 800a57c:	d01b      	beq.n	800a5b6 <__ieee754_sqrt+0x15e>
 800a57e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800a5fc <__ieee754_sqrt+0x1a4>
 800a582:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800a600 <__ieee754_sqrt+0x1a8>
 800a586:	e9da 0100 	ldrd	r0, r1, [sl]
 800a58a:	e9db 2300 	ldrd	r2, r3, [fp]
 800a58e:	f7f5 fe8b 	bl	80002a8 <__aeabi_dsub>
 800a592:	e9da 8900 	ldrd	r8, r9, [sl]
 800a596:	4602      	mov	r2, r0
 800a598:	460b      	mov	r3, r1
 800a59a:	4640      	mov	r0, r8
 800a59c:	4649      	mov	r1, r9
 800a59e:	f7f6 fab7 	bl	8000b10 <__aeabi_dcmple>
 800a5a2:	b140      	cbz	r0, 800a5b6 <__ieee754_sqrt+0x15e>
 800a5a4:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a5a8:	e9da 0100 	ldrd	r0, r1, [sl]
 800a5ac:	e9db 2300 	ldrd	r2, r3, [fp]
 800a5b0:	d10e      	bne.n	800a5d0 <__ieee754_sqrt+0x178>
 800a5b2:	3601      	adds	r6, #1
 800a5b4:	4625      	mov	r5, r4
 800a5b6:	1073      	asrs	r3, r6, #1
 800a5b8:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800a5bc:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800a5c0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800a5c4:	086b      	lsrs	r3, r5, #1
 800a5c6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800a5ca:	e759      	b.n	800a480 <__ieee754_sqrt+0x28>
 800a5cc:	4690      	mov	r8, r2
 800a5ce:	e7c1      	b.n	800a554 <__ieee754_sqrt+0xfc>
 800a5d0:	f7f5 fe6c 	bl	80002ac <__adddf3>
 800a5d4:	e9da 8900 	ldrd	r8, r9, [sl]
 800a5d8:	4602      	mov	r2, r0
 800a5da:	460b      	mov	r3, r1
 800a5dc:	4640      	mov	r0, r8
 800a5de:	4649      	mov	r1, r9
 800a5e0:	f7f6 fa8c 	bl	8000afc <__aeabi_dcmplt>
 800a5e4:	b120      	cbz	r0, 800a5f0 <__ieee754_sqrt+0x198>
 800a5e6:	1cab      	adds	r3, r5, #2
 800a5e8:	bf08      	it	eq
 800a5ea:	3601      	addeq	r6, #1
 800a5ec:	3502      	adds	r5, #2
 800a5ee:	e7e2      	b.n	800a5b6 <__ieee754_sqrt+0x15e>
 800a5f0:	1c6b      	adds	r3, r5, #1
 800a5f2:	f023 0501 	bic.w	r5, r3, #1
 800a5f6:	e7de      	b.n	800a5b6 <__ieee754_sqrt+0x15e>
 800a5f8:	7ff00000 	.word	0x7ff00000
 800a5fc:	0800a968 	.word	0x0800a968
 800a600:	0800a960 	.word	0x0800a960
 800a604:	00000000 	.word	0x00000000

0800a608 <__ieee754_atan2>:
 800a608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a60c:	ec57 6b11 	vmov	r6, r7, d1
 800a610:	4273      	negs	r3, r6
 800a612:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800a790 <__ieee754_atan2+0x188>
 800a616:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800a61a:	4333      	orrs	r3, r6
 800a61c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a620:	4543      	cmp	r3, r8
 800a622:	ec51 0b10 	vmov	r0, r1, d0
 800a626:	4635      	mov	r5, r6
 800a628:	d809      	bhi.n	800a63e <__ieee754_atan2+0x36>
 800a62a:	4244      	negs	r4, r0
 800a62c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a630:	4304      	orrs	r4, r0
 800a632:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a636:	4544      	cmp	r4, r8
 800a638:	468e      	mov	lr, r1
 800a63a:	4681      	mov	r9, r0
 800a63c:	d907      	bls.n	800a64e <__ieee754_atan2+0x46>
 800a63e:	4632      	mov	r2, r6
 800a640:	463b      	mov	r3, r7
 800a642:	f7f5 fe33 	bl	80002ac <__adddf3>
 800a646:	ec41 0b10 	vmov	d0, r0, r1
 800a64a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a64e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800a652:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800a656:	4334      	orrs	r4, r6
 800a658:	d103      	bne.n	800a662 <__ieee754_atan2+0x5a>
 800a65a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a65e:	f7ff bd5b 	b.w	800a118 <atan>
 800a662:	17bc      	asrs	r4, r7, #30
 800a664:	f004 0402 	and.w	r4, r4, #2
 800a668:	ea53 0909 	orrs.w	r9, r3, r9
 800a66c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a670:	d107      	bne.n	800a682 <__ieee754_atan2+0x7a>
 800a672:	2c02      	cmp	r4, #2
 800a674:	d05f      	beq.n	800a736 <__ieee754_atan2+0x12e>
 800a676:	2c03      	cmp	r4, #3
 800a678:	d1e5      	bne.n	800a646 <__ieee754_atan2+0x3e>
 800a67a:	a143      	add	r1, pc, #268	@ (adr r1, 800a788 <__ieee754_atan2+0x180>)
 800a67c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a680:	e7e1      	b.n	800a646 <__ieee754_atan2+0x3e>
 800a682:	4315      	orrs	r5, r2
 800a684:	d106      	bne.n	800a694 <__ieee754_atan2+0x8c>
 800a686:	f1be 0f00 	cmp.w	lr, #0
 800a68a:	db5f      	blt.n	800a74c <__ieee754_atan2+0x144>
 800a68c:	a136      	add	r1, pc, #216	@ (adr r1, 800a768 <__ieee754_atan2+0x160>)
 800a68e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a692:	e7d8      	b.n	800a646 <__ieee754_atan2+0x3e>
 800a694:	4542      	cmp	r2, r8
 800a696:	d10f      	bne.n	800a6b8 <__ieee754_atan2+0xb0>
 800a698:	4293      	cmp	r3, r2
 800a69a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a69e:	d107      	bne.n	800a6b0 <__ieee754_atan2+0xa8>
 800a6a0:	2c02      	cmp	r4, #2
 800a6a2:	d84c      	bhi.n	800a73e <__ieee754_atan2+0x136>
 800a6a4:	4b36      	ldr	r3, [pc, #216]	@ (800a780 <__ieee754_atan2+0x178>)
 800a6a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a6aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a6ae:	e7ca      	b.n	800a646 <__ieee754_atan2+0x3e>
 800a6b0:	2c02      	cmp	r4, #2
 800a6b2:	d848      	bhi.n	800a746 <__ieee754_atan2+0x13e>
 800a6b4:	4b33      	ldr	r3, [pc, #204]	@ (800a784 <__ieee754_atan2+0x17c>)
 800a6b6:	e7f6      	b.n	800a6a6 <__ieee754_atan2+0x9e>
 800a6b8:	4543      	cmp	r3, r8
 800a6ba:	d0e4      	beq.n	800a686 <__ieee754_atan2+0x7e>
 800a6bc:	1a9b      	subs	r3, r3, r2
 800a6be:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800a6c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a6c6:	da1e      	bge.n	800a706 <__ieee754_atan2+0xfe>
 800a6c8:	2f00      	cmp	r7, #0
 800a6ca:	da01      	bge.n	800a6d0 <__ieee754_atan2+0xc8>
 800a6cc:	323c      	adds	r2, #60	@ 0x3c
 800a6ce:	db1e      	blt.n	800a70e <__ieee754_atan2+0x106>
 800a6d0:	4632      	mov	r2, r6
 800a6d2:	463b      	mov	r3, r7
 800a6d4:	f7f6 f8ca 	bl	800086c <__aeabi_ddiv>
 800a6d8:	ec41 0b10 	vmov	d0, r0, r1
 800a6dc:	f7ff feb4 	bl	800a448 <fabs>
 800a6e0:	f7ff fd1a 	bl	800a118 <atan>
 800a6e4:	ec51 0b10 	vmov	r0, r1, d0
 800a6e8:	2c01      	cmp	r4, #1
 800a6ea:	d013      	beq.n	800a714 <__ieee754_atan2+0x10c>
 800a6ec:	2c02      	cmp	r4, #2
 800a6ee:	d015      	beq.n	800a71c <__ieee754_atan2+0x114>
 800a6f0:	2c00      	cmp	r4, #0
 800a6f2:	d0a8      	beq.n	800a646 <__ieee754_atan2+0x3e>
 800a6f4:	a318      	add	r3, pc, #96	@ (adr r3, 800a758 <__ieee754_atan2+0x150>)
 800a6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fa:	f7f5 fdd5 	bl	80002a8 <__aeabi_dsub>
 800a6fe:	a318      	add	r3, pc, #96	@ (adr r3, 800a760 <__ieee754_atan2+0x158>)
 800a700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a704:	e014      	b.n	800a730 <__ieee754_atan2+0x128>
 800a706:	a118      	add	r1, pc, #96	@ (adr r1, 800a768 <__ieee754_atan2+0x160>)
 800a708:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a70c:	e7ec      	b.n	800a6e8 <__ieee754_atan2+0xe0>
 800a70e:	2000      	movs	r0, #0
 800a710:	2100      	movs	r1, #0
 800a712:	e7e9      	b.n	800a6e8 <__ieee754_atan2+0xe0>
 800a714:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a718:	4619      	mov	r1, r3
 800a71a:	e794      	b.n	800a646 <__ieee754_atan2+0x3e>
 800a71c:	a30e      	add	r3, pc, #56	@ (adr r3, 800a758 <__ieee754_atan2+0x150>)
 800a71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a722:	f7f5 fdc1 	bl	80002a8 <__aeabi_dsub>
 800a726:	4602      	mov	r2, r0
 800a728:	460b      	mov	r3, r1
 800a72a:	a10d      	add	r1, pc, #52	@ (adr r1, 800a760 <__ieee754_atan2+0x158>)
 800a72c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a730:	f7f5 fdba 	bl	80002a8 <__aeabi_dsub>
 800a734:	e787      	b.n	800a646 <__ieee754_atan2+0x3e>
 800a736:	a10a      	add	r1, pc, #40	@ (adr r1, 800a760 <__ieee754_atan2+0x158>)
 800a738:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a73c:	e783      	b.n	800a646 <__ieee754_atan2+0x3e>
 800a73e:	a10c      	add	r1, pc, #48	@ (adr r1, 800a770 <__ieee754_atan2+0x168>)
 800a740:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a744:	e77f      	b.n	800a646 <__ieee754_atan2+0x3e>
 800a746:	2000      	movs	r0, #0
 800a748:	2100      	movs	r1, #0
 800a74a:	e77c      	b.n	800a646 <__ieee754_atan2+0x3e>
 800a74c:	a10a      	add	r1, pc, #40	@ (adr r1, 800a778 <__ieee754_atan2+0x170>)
 800a74e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a752:	e778      	b.n	800a646 <__ieee754_atan2+0x3e>
 800a754:	f3af 8000 	nop.w
 800a758:	33145c07 	.word	0x33145c07
 800a75c:	3ca1a626 	.word	0x3ca1a626
 800a760:	54442d18 	.word	0x54442d18
 800a764:	400921fb 	.word	0x400921fb
 800a768:	54442d18 	.word	0x54442d18
 800a76c:	3ff921fb 	.word	0x3ff921fb
 800a770:	54442d18 	.word	0x54442d18
 800a774:	3fe921fb 	.word	0x3fe921fb
 800a778:	54442d18 	.word	0x54442d18
 800a77c:	bff921fb 	.word	0xbff921fb
 800a780:	0800a988 	.word	0x0800a988
 800a784:	0800a970 	.word	0x0800a970
 800a788:	54442d18 	.word	0x54442d18
 800a78c:	c00921fb 	.word	0xc00921fb
 800a790:	7ff00000 	.word	0x7ff00000

0800a794 <_init>:
 800a794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a796:	bf00      	nop
 800a798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a79a:	bc08      	pop	{r3}
 800a79c:	469e      	mov	lr, r3
 800a79e:	4770      	bx	lr

0800a7a0 <_fini>:
 800a7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a2:	bf00      	nop
 800a7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7a6:	bc08      	pop	{r3}
 800a7a8:	469e      	mov	lr, r3
 800a7aa:	4770      	bx	lr
