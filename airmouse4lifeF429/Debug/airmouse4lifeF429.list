
airmouse4lifeF429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a71c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800a8d0  0800a8d0  0000b8d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aac0  0800aac0  0000c1fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800aac0  0800aac0  0000bac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aac8  0800aac8  0000c1fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aac8  0800aac8  0000bac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aacc  0800aacc  0000bacc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  0800aad0  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1fc  2**0
                  CONTENTS
 10 .bss          00000c3c  20000200  20000200  0000c200  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000e3c  20000e3c  0000c200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000143e8  00000000  00000000  0000c22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003270  00000000  00000000  00020614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001060  00000000  00000000  00023888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c91  00000000  00000000  000248e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026238  00000000  00000000  00025579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000166aa  00000000  00000000  0004b7b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8da3  00000000  00000000  00061e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013abfe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c30  00000000  00000000  0013ac44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0013f874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000200 	.word	0x20000200
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a8b4 	.word	0x0800a8b4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000204 	.word	0x20000204
 80001ec:	0800a8b4 	.word	0x0800a8b4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b988 	b.w	8000ef0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	468e      	mov	lr, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	4688      	mov	r8, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d962      	bls.n	8000cd4 <__udivmoddi4+0xdc>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	b14e      	cbz	r6, 8000c28 <__udivmoddi4+0x30>
 8000c14:	f1c6 0320 	rsb	r3, r6, #32
 8000c18:	fa01 f806 	lsl.w	r8, r1, r6
 8000c1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c20:	40b7      	lsls	r7, r6
 8000c22:	ea43 0808 	orr.w	r8, r3, r8
 8000c26:	40b4      	lsls	r4, r6
 8000c28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c2c:	fa1f fc87 	uxth.w	ip, r7
 8000c30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c34:	0c23      	lsrs	r3, r4, #16
 8000c36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c4c:	f080 80ea 	bcs.w	8000e24 <__udivmoddi4+0x22c>
 8000c50:	429a      	cmp	r2, r3
 8000c52:	f240 80e7 	bls.w	8000e24 <__udivmoddi4+0x22c>
 8000c56:	3902      	subs	r1, #2
 8000c58:	443b      	add	r3, r7
 8000c5a:	1a9a      	subs	r2, r3, r2
 8000c5c:	b2a3      	uxth	r3, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6e:	459c      	cmp	ip, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x8e>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c78:	f080 80d6 	bcs.w	8000e28 <__udivmoddi4+0x230>
 8000c7c:	459c      	cmp	ip, r3
 8000c7e:	f240 80d3 	bls.w	8000e28 <__udivmoddi4+0x230>
 8000c82:	443b      	add	r3, r7
 8000c84:	3802      	subs	r0, #2
 8000c86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8a:	eba3 030c 	sub.w	r3, r3, ip
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11d      	cbz	r5, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40f3      	lsrs	r3, r6
 8000c94:	2200      	movs	r2, #0
 8000c96:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d905      	bls.n	8000cae <__udivmoddi4+0xb6>
 8000ca2:	b10d      	cbz	r5, 8000ca8 <__udivmoddi4+0xb0>
 8000ca4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4608      	mov	r0, r1
 8000cac:	e7f5      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cae:	fab3 f183 	clz	r1, r3
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d146      	bne.n	8000d44 <__udivmoddi4+0x14c>
 8000cb6:	4573      	cmp	r3, lr
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xc8>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 8105 	bhi.w	8000eca <__udivmoddi4+0x2d2>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	4690      	mov	r8, r2
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0e5      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cce:	e9c5 4800 	strd	r4, r8, [r5]
 8000cd2:	e7e2      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f000 8090 	beq.w	8000dfa <__udivmoddi4+0x202>
 8000cda:	fab2 f682 	clz	r6, r2
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	f040 80a4 	bne.w	8000e2c <__udivmoddi4+0x234>
 8000ce4:	1a8a      	subs	r2, r1, r2
 8000ce6:	0c03      	lsrs	r3, r0, #16
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	b280      	uxth	r0, r0
 8000cee:	b2bc      	uxth	r4, r7
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cf6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x11e>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x11c>
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	f200 80e0 	bhi.w	8000ed4 <__udivmoddi4+0x2dc>
 8000d14:	46c4      	mov	ip, r8
 8000d16:	1a9b      	subs	r3, r3, r2
 8000d18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d24:	fb02 f404 	mul.w	r4, r2, r4
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x144>
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x142>
 8000d34:	429c      	cmp	r4, r3
 8000d36:	f200 80ca 	bhi.w	8000ece <__udivmoddi4+0x2d6>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	1b1b      	subs	r3, r3, r4
 8000d3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d42:	e7a5      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d44:	f1c1 0620 	rsb	r6, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4e:	431f      	orrs	r7, r3
 8000d50:	fa0e f401 	lsl.w	r4, lr, r1
 8000d54:	fa20 f306 	lsr.w	r3, r0, r6
 8000d58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d60:	4323      	orrs	r3, r4
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	fa1f fc87 	uxth.w	ip, r7
 8000d6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d6e:	0c1c      	lsrs	r4, r3, #16
 8000d70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x1a0>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d8a:	f080 809c 	bcs.w	8000ec6 <__udivmoddi4+0x2ce>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f240 8099 	bls.w	8000ec6 <__udivmoddi4+0x2ce>
 8000d94:	3802      	subs	r0, #2
 8000d96:	443c      	add	r4, r7
 8000d98:	eba4 040e 	sub.w	r4, r4, lr
 8000d9c:	fa1f fe83 	uxth.w	lr, r3
 8000da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da4:	fb09 4413 	mls	r4, r9, r3, r4
 8000da8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db0:	45a4      	cmp	ip, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1ce>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dba:	f080 8082 	bcs.w	8000ec2 <__udivmoddi4+0x2ca>
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d97f      	bls.n	8000ec2 <__udivmoddi4+0x2ca>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	443c      	add	r4, r7
 8000dc6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dca:	eba4 040c 	sub.w	r4, r4, ip
 8000dce:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dd2:	4564      	cmp	r4, ip
 8000dd4:	4673      	mov	r3, lr
 8000dd6:	46e1      	mov	r9, ip
 8000dd8:	d362      	bcc.n	8000ea0 <__udivmoddi4+0x2a8>
 8000dda:	d05f      	beq.n	8000e9c <__udivmoddi4+0x2a4>
 8000ddc:	b15d      	cbz	r5, 8000df6 <__udivmoddi4+0x1fe>
 8000dde:	ebb8 0203 	subs.w	r2, r8, r3
 8000de2:	eb64 0409 	sbc.w	r4, r4, r9
 8000de6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dea:	fa22 f301 	lsr.w	r3, r2, r1
 8000dee:	431e      	orrs	r6, r3
 8000df0:	40cc      	lsrs	r4, r1
 8000df2:	e9c5 6400 	strd	r6, r4, [r5]
 8000df6:	2100      	movs	r1, #0
 8000df8:	e74f      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000dfa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dfe:	0c01      	lsrs	r1, r0, #16
 8000e00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e04:	b280      	uxth	r0, r0
 8000e06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	4638      	mov	r0, r7
 8000e0e:	463c      	mov	r4, r7
 8000e10:	46b8      	mov	r8, r7
 8000e12:	46be      	mov	lr, r7
 8000e14:	2620      	movs	r6, #32
 8000e16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e1a:	eba2 0208 	sub.w	r2, r2, r8
 8000e1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e22:	e766      	b.n	8000cf2 <__udivmoddi4+0xfa>
 8000e24:	4601      	mov	r1, r0
 8000e26:	e718      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e28:	4610      	mov	r0, r2
 8000e2a:	e72c      	b.n	8000c86 <__udivmoddi4+0x8e>
 8000e2c:	f1c6 0220 	rsb	r2, r6, #32
 8000e30:	fa2e f302 	lsr.w	r3, lr, r2
 8000e34:	40b7      	lsls	r7, r6
 8000e36:	40b1      	lsls	r1, r6
 8000e38:	fa20 f202 	lsr.w	r2, r0, r2
 8000e3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e40:	430a      	orrs	r2, r1
 8000e42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e46:	b2bc      	uxth	r4, r7
 8000e48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb08 f904 	mul.w	r9, r8, r4
 8000e56:	40b0      	lsls	r0, r6
 8000e58:	4589      	cmp	r9, r1
 8000e5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e5e:	b280      	uxth	r0, r0
 8000e60:	d93e      	bls.n	8000ee0 <__udivmoddi4+0x2e8>
 8000e62:	1879      	adds	r1, r7, r1
 8000e64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e68:	d201      	bcs.n	8000e6e <__udivmoddi4+0x276>
 8000e6a:	4589      	cmp	r9, r1
 8000e6c:	d81f      	bhi.n	8000eae <__udivmoddi4+0x2b6>
 8000e6e:	eba1 0109 	sub.w	r1, r1, r9
 8000e72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e76:	fb09 f804 	mul.w	r8, r9, r4
 8000e7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e7e:	b292      	uxth	r2, r2
 8000e80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e84:	4542      	cmp	r2, r8
 8000e86:	d229      	bcs.n	8000edc <__udivmoddi4+0x2e4>
 8000e88:	18ba      	adds	r2, r7, r2
 8000e8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e8e:	d2c4      	bcs.n	8000e1a <__udivmoddi4+0x222>
 8000e90:	4542      	cmp	r2, r8
 8000e92:	d2c2      	bcs.n	8000e1a <__udivmoddi4+0x222>
 8000e94:	f1a9 0102 	sub.w	r1, r9, #2
 8000e98:	443a      	add	r2, r7
 8000e9a:	e7be      	b.n	8000e1a <__udivmoddi4+0x222>
 8000e9c:	45f0      	cmp	r8, lr
 8000e9e:	d29d      	bcs.n	8000ddc <__udivmoddi4+0x1e4>
 8000ea0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ea4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	46e1      	mov	r9, ip
 8000eac:	e796      	b.n	8000ddc <__udivmoddi4+0x1e4>
 8000eae:	eba7 0909 	sub.w	r9, r7, r9
 8000eb2:	4449      	add	r1, r9
 8000eb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000eb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ebc:	fb09 f804 	mul.w	r8, r9, r4
 8000ec0:	e7db      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ec2:	4673      	mov	r3, lr
 8000ec4:	e77f      	b.n	8000dc6 <__udivmoddi4+0x1ce>
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	e766      	b.n	8000d98 <__udivmoddi4+0x1a0>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e6fd      	b.n	8000cca <__udivmoddi4+0xd2>
 8000ece:	443b      	add	r3, r7
 8000ed0:	3a02      	subs	r2, #2
 8000ed2:	e733      	b.n	8000d3c <__udivmoddi4+0x144>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	443b      	add	r3, r7
 8000eda:	e71c      	b.n	8000d16 <__udivmoddi4+0x11e>
 8000edc:	4649      	mov	r1, r9
 8000ede:	e79c      	b.n	8000e1a <__udivmoddi4+0x222>
 8000ee0:	eba1 0109 	sub.w	r1, r1, r9
 8000ee4:	46c4      	mov	ip, r8
 8000ee6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eea:	fb09 f804 	mul.w	r8, r9, r4
 8000eee:	e7c4      	b.n	8000e7a <__udivmoddi4+0x282>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000efa:	4a13      	ldr	r2, [pc, #76]	@ (8000f48 <MX_I2C1_Init+0x54>)
 8000efc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000efe:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f00:	4a12      	ldr	r2, [pc, #72]	@ (8000f4c <MX_I2C1_Init+0x58>)
 8000f02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f12:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f1e:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f24:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f30:	4804      	ldr	r0, [pc, #16]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f32:	f001 fba3 	bl	800267c <HAL_I2C_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f3c:	f000 faf4 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2000021c 	.word	0x2000021c
 8000f48:	40005400 	.word	0x40005400
 8000f4c:	000186a0 	.word	0x000186a0

08000f50 <SendDataOverUART>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SendDataOverUART(MPU6050_t *MPU6050)
{
 8000f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f54:	b0b8      	sub	sp, #224	@ 0xe0
 8000f56:	af04      	add	r7, sp, #16
 8000f58:	6078      	str	r0, [r7, #4]

    // Format: time,Ax,Ay,Az,Gx,Gy,Gz,Temp
    sprintf(
        buffer,
        "x:%d.%02d, y:%d.%02d, z:%d.%02d\r\n",
        (int)MPU6050->Ax, abs((int)(MPU6050->Ax * 100) % 100),
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    sprintf(
 8000f60:	4610      	mov	r0, r2
 8000f62:	4619      	mov	r1, r3
 8000f64:	f7ff fe08 	bl	8000b78 <__aeabi_d2iz>
 8000f68:	4680      	mov	r8, r0
        (int)MPU6050->Ax, abs((int)(MPU6050->Ax * 100) % 100),
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000f70:	f04f 0200 	mov.w	r2, #0
 8000f74:	4b42      	ldr	r3, [pc, #264]	@ (8001080 <SendDataOverUART+0x130>)
 8000f76:	f7ff fb4f 	bl	8000618 <__aeabi_dmul>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4610      	mov	r0, r2
 8000f80:	4619      	mov	r1, r3
 8000f82:	f7ff fdf9 	bl	8000b78 <__aeabi_d2iz>
 8000f86:	4602      	mov	r2, r0
 8000f88:	4b3e      	ldr	r3, [pc, #248]	@ (8001084 <SendDataOverUART+0x134>)
 8000f8a:	fb83 1302 	smull	r1, r3, r3, r2
 8000f8e:	1159      	asrs	r1, r3, #5
 8000f90:	17d3      	asrs	r3, r2, #31
 8000f92:	1acb      	subs	r3, r1, r3
 8000f94:	2164      	movs	r1, #100	@ 0x64
 8000f96:	fb01 f303 	mul.w	r3, r1, r3
 8000f9a:	1ad3      	subs	r3, r2, r3
    sprintf(
 8000f9c:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
 8000fa0:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
        (int)MPU6050->Ay, abs((int)(MPU6050->Ay * 100) % 100),
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    sprintf(
 8000faa:	4610      	mov	r0, r2
 8000fac:	4619      	mov	r1, r3
 8000fae:	f7ff fde3 	bl	8000b78 <__aeabi_d2iz>
 8000fb2:	4606      	mov	r6, r0
        (int)MPU6050->Ay, abs((int)(MPU6050->Ay * 100) % 100),
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	4b30      	ldr	r3, [pc, #192]	@ (8001080 <SendDataOverUART+0x130>)
 8000fc0:	f7ff fb2a 	bl	8000618 <__aeabi_dmul>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f7ff fdd4 	bl	8000b78 <__aeabi_d2iz>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	4b2c      	ldr	r3, [pc, #176]	@ (8001084 <SendDataOverUART+0x134>)
 8000fd4:	fb83 1302 	smull	r1, r3, r3, r2
 8000fd8:	1159      	asrs	r1, r3, #5
 8000fda:	17d3      	asrs	r3, r2, #31
 8000fdc:	1acb      	subs	r3, r1, r3
 8000fde:	2164      	movs	r1, #100	@ 0x64
 8000fe0:	fb01 f303 	mul.w	r3, r1, r3
 8000fe4:	1ad3      	subs	r3, r2, r3
    sprintf(
 8000fe6:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8000fea:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
        (int)MPU6050->Az, abs((int)(MPU6050->Az * 100) % 100)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
    sprintf(
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f7ff fdbe 	bl	8000b78 <__aeabi_d2iz>
 8000ffc:	6038      	str	r0, [r7, #0]
        (int)MPU6050->Az, abs((int)(MPU6050->Az * 100) % 100)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001004:	f04f 0200 	mov.w	r2, #0
 8001008:	4b1d      	ldr	r3, [pc, #116]	@ (8001080 <SendDataOverUART+0x130>)
 800100a:	f7ff fb05 	bl	8000618 <__aeabi_dmul>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	f7ff fdaf 	bl	8000b78 <__aeabi_d2iz>
 800101a:	4602      	mov	r2, r0
 800101c:	4b19      	ldr	r3, [pc, #100]	@ (8001084 <SendDataOverUART+0x134>)
 800101e:	fb83 1302 	smull	r1, r3, r3, r2
 8001022:	1159      	asrs	r1, r3, #5
 8001024:	17d3      	asrs	r3, r2, #31
 8001026:	1acb      	subs	r3, r1, r3
 8001028:	2164      	movs	r1, #100	@ 0x64
 800102a:	fb01 f303 	mul.w	r3, r1, r3
 800102e:	1ad3      	subs	r3, r2, r3
    sprintf(
 8001030:	2b00      	cmp	r3, #0
 8001032:	bfb8      	it	lt
 8001034:	425b      	neglt	r3, r3
 8001036:	f107 0008 	add.w	r0, r7, #8
 800103a:	9303      	str	r3, [sp, #12]
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	9302      	str	r3, [sp, #8]
 8001040:	9401      	str	r4, [sp, #4]
 8001042:	9600      	str	r6, [sp, #0]
 8001044:	462b      	mov	r3, r5
 8001046:	4642      	mov	r2, r8
 8001048:	490f      	ldr	r1, [pc, #60]	@ (8001088 <SendDataOverUART+0x138>)
 800104a:	f008 fc25 	bl	8009898 <siprintf>
//        (int)MPU6050->Gz, abs((int)(MPU6050->Gz * 100) % 100),
//        (int)MPU6050->Temperature, abs((int)(MPU6050->Temperature * 100) % 100)
    );

    // Send the data over UART
    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 800104e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001052:	480e      	ldr	r0, [pc, #56]	@ (800108c <SendDataOverUART+0x13c>)
 8001054:	f001 faf7 	bl	8002646 <HAL_GPIO_TogglePin>
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff f8c7 	bl	80001f0 <strlen>
 8001062:	4603      	mov	r3, r0
 8001064:	b29a      	uxth	r2, r3
 8001066:	f107 0108 	add.w	r1, r7, #8
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	4808      	ldr	r0, [pc, #32]	@ (8001090 <SendDataOverUART+0x140>)
 8001070:	f004 fb78 	bl	8005764 <HAL_UART_Transmit>
}
 8001074:	bf00      	nop
 8001076:	37d0      	adds	r7, #208	@ 0xd0
 8001078:	46bd      	mov	sp, r7
 800107a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800107e:	bf00      	nop
 8001080:	40590000 	.word	0x40590000
 8001084:	51eb851f 	.word	0x51eb851f
 8001088:	0800a8d0 	.word	0x0800a8d0
 800108c:	40021800 	.word	0x40021800
 8001090:	200002c8 	.word	0x200002c8

08001094 <Scan_I2C_Addresses>:


void Scan_I2C_Addresses(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08e      	sub	sp, #56	@ 0x38
 8001098:	af00      	add	r7, sp, #0
    uint8_t i;
    uint8_t ret;
    char buffer[50];

    sprintf(buffer, "Scanning I2C addresses...\r\n");
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	4930      	ldr	r1, [pc, #192]	@ (8001160 <Scan_I2C_Addresses+0xcc>)
 800109e:	4618      	mov	r0, r3
 80010a0:	f008 fbfa 	bl	8009898 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff f8a2 	bl	80001f0 <strlen>
 80010ac:	4603      	mov	r3, r0
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	1d39      	adds	r1, r7, #4
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	482b      	ldr	r0, [pc, #172]	@ (8001164 <Scan_I2C_Addresses+0xd0>)
 80010b8:	f004 fb54 	bl	8005764 <HAL_UART_Transmit>

    for(i = 1; i < 128; i++)
 80010bc:	2301      	movs	r3, #1
 80010be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80010c2:	e02e      	b.n	8001122 <Scan_I2C_Addresses+0x8e>
    {
        ret = HAL_I2C_IsDeviceReady(&hi2c1, (i << 1), 2, 100);
 80010c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	b299      	uxth	r1, r3
 80010ce:	2364      	movs	r3, #100	@ 0x64
 80010d0:	2202      	movs	r2, #2
 80010d2:	4825      	ldr	r0, [pc, #148]	@ (8001168 <Scan_I2C_Addresses+0xd4>)
 80010d4:	f001 ff42 	bl	8002f5c <HAL_I2C_IsDeviceReady>
 80010d8:	4603      	mov	r3, r0
 80010da:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

        if(ret == HAL_OK)
 80010de:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d118      	bne.n	8001118 <Scan_I2C_Addresses+0x84>
        {
            sprintf(buffer, "I2C device found at address: 0x%02X\r\n", i);
 80010e6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	491f      	ldr	r1, [pc, #124]	@ (800116c <Scan_I2C_Addresses+0xd8>)
 80010ee:	4618      	mov	r0, r3
 80010f0:	f008 fbd2 	bl	8009898 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f87a 	bl	80001f0 <strlen>
 80010fc:	4603      	mov	r3, r0
 80010fe:	b29a      	uxth	r2, r3
 8001100:	1d39      	adds	r1, r7, #4
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	4817      	ldr	r0, [pc, #92]	@ (8001164 <Scan_I2C_Addresses+0xd0>)
 8001108:	f004 fb2c 	bl	8005764 <HAL_UART_Transmit>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13,GPIO_PIN_SET);
 800110c:	2201      	movs	r2, #1
 800110e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001112:	4817      	ldr	r0, [pc, #92]	@ (8001170 <Scan_I2C_Addresses+0xdc>)
 8001114:	f001 fa7e 	bl	8002614 <HAL_GPIO_WritePin>
    for(i = 1; i < 128; i++)
 8001118:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800111c:	3301      	adds	r3, #1
 800111e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001122:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001126:	2b00      	cmp	r3, #0
 8001128:	dacc      	bge.n	80010c4 <Scan_I2C_Addresses+0x30>
        }
    }

    sprintf(buffer, "I2C scan completed\r\n");
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	4911      	ldr	r1, [pc, #68]	@ (8001174 <Scan_I2C_Addresses+0xe0>)
 800112e:	4618      	mov	r0, r3
 8001130:	f008 fbb2 	bl	8009898 <siprintf>
    HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,GPIO_PIN_SET);
 8001134:	2201      	movs	r2, #1
 8001136:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800113a:	480d      	ldr	r0, [pc, #52]	@ (8001170 <Scan_I2C_Addresses+0xdc>)
 800113c:	f001 fa6a 	bl	8002614 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f854 	bl	80001f0 <strlen>
 8001148:	4603      	mov	r3, r0
 800114a:	b29a      	uxth	r2, r3
 800114c:	1d39      	adds	r1, r7, #4
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	4804      	ldr	r0, [pc, #16]	@ (8001164 <Scan_I2C_Addresses+0xd0>)
 8001154:	f004 fb06 	bl	8005764 <HAL_UART_Transmit>
}
 8001158:	bf00      	nop
 800115a:	3738      	adds	r7, #56	@ 0x38
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	0800a8f4 	.word	0x0800a8f4
 8001164:	200002c8 	.word	0x200002c8
 8001168:	2000021c 	.word	0x2000021c
 800116c:	0800a910 	.word	0x0800a910
 8001170:	40021800 	.word	0x40021800
 8001174:	0800a938 	.word	0x0800a938

08001178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001178:	b5b0      	push	{r4, r5, r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117e:	f000 fef5 	bl	8001f6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001182:	f000 f8ad 	bl	80012e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001186:	f000 f93f 	bl	8001408 <MX_GPIO_Init>
  MX_I2C1_Init();
 800118a:	f7ff feb3 	bl	8000ef4 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800118e:	f007 ff4b 	bl	8009028 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8001192:	f000 f90f 	bl	80013b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Scan_I2C_Addresses();
 8001196:	f7ff ff7d 	bl	8001094 <Scan_I2C_Addresses>

  uint8_t init_attempts = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	71fb      	strb	r3, [r7, #7]

 while(MPU6050_Init(&hi2c1) == 1) {
 800119e:	e018      	b.n	80011d2 <main+0x5a>
   init_attempts++;
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	3301      	adds	r3, #1
 80011a4:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1, (uint8_t *)"MPU6050 Init Failed, retrying...\r\n", 34, HAL_MAX_DELAY);
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	2222      	movs	r2, #34	@ 0x22
 80011ac:	4943      	ldr	r1, [pc, #268]	@ (80012bc <main+0x144>)
 80011ae:	4844      	ldr	r0, [pc, #272]	@ (80012c0 <main+0x148>)
 80011b0:	f004 fad8 	bl	8005764 <HAL_UART_Transmit>
   HAL_Delay(500);
 80011b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011b8:	f000 ff4a 	bl	8002050 <HAL_Delay>
   if(init_attempts > 10) {
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	2b0a      	cmp	r3, #10
 80011c0:	d907      	bls.n	80011d2 <main+0x5a>
     HAL_UART_Transmit(&huart1, (uint8_t *)"MPU6050 Init Failed permanently!\r\n", 35, HAL_MAX_DELAY);
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	2223      	movs	r2, #35	@ 0x23
 80011c8:	493e      	ldr	r1, [pc, #248]	@ (80012c4 <main+0x14c>)
 80011ca:	483d      	ldr	r0, [pc, #244]	@ (80012c0 <main+0x148>)
 80011cc:	f004 faca 	bl	8005764 <HAL_UART_Transmit>
     break;
 80011d0:	e005      	b.n	80011de <main+0x66>
 while(MPU6050_Init(&hi2c1) == 1) {
 80011d2:	483d      	ldr	r0, [pc, #244]	@ (80012c8 <main+0x150>)
 80011d4:	f000 f9ae 	bl	8001534 <MPU6050_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d0e0      	beq.n	80011a0 <main+0x28>
   }
 }

 if(init_attempts <= 10) {
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	2b0a      	cmp	r3, #10
 80011e2:	d80c      	bhi.n	80011fe <main+0x86>
	 HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011ea:	4838      	ldr	r0, [pc, #224]	@ (80012cc <main+0x154>)
 80011ec:	f001 fa12 	bl	8002614 <HAL_GPIO_WritePin>
	 HAL_UART_Transmit(&huart1, (uint8_t *)"MPU6050 Initialized Successfully!\r\n", 36, HAL_MAX_DELAY);
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295
 80011f4:	2224      	movs	r2, #36	@ 0x24
 80011f6:	4936      	ldr	r1, [pc, #216]	@ (80012d0 <main+0x158>)
 80011f8:	4831      	ldr	r0, [pc, #196]	@ (80012c0 <main+0x148>)
 80011fa:	f004 fab3 	bl	8005764 <HAL_UART_Transmit>
 }

 HAL_Delay(1000);
 80011fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001202:	f000 ff25 	bl	8002050 <HAL_Delay>

  while (1)
  {
    /* USER CODE END WHILE */

	    MPU6050_Read_All(&hi2c1, &MPU6050);
 8001206:	4933      	ldr	r1, [pc, #204]	@ (80012d4 <main+0x15c>)
 8001208:	482f      	ldr	r0, [pc, #188]	@ (80012c8 <main+0x150>)
 800120a:	f000 f9f1 	bl	80015f0 <MPU6050_Read_All>
	    SendDataOverUART(&MPU6050);
 800120e:	4831      	ldr	r0, [pc, #196]	@ (80012d4 <main+0x15c>)
 8001210:	f7ff fe9e 	bl	8000f50 <SendDataOverUART>

	    int8_t xMove = (int8_t)(MPU6050.Ax / 1000.0f * sensitivity);
 8001214:	4b2f      	ldr	r3, [pc, #188]	@ (80012d4 <main+0x15c>)
 8001216:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800121a:	f04f 0200 	mov.w	r2, #0
 800121e:	4b2e      	ldr	r3, [pc, #184]	@ (80012d8 <main+0x160>)
 8001220:	f7ff fb24 	bl	800086c <__aeabi_ddiv>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4614      	mov	r4, r2
 800122a:	461d      	mov	r5, r3
 800122c:	230a      	movs	r3, #10
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f988 	bl	8000544 <__aeabi_i2d>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4620      	mov	r0, r4
 800123a:	4629      	mov	r1, r5
 800123c:	f7ff f9ec 	bl	8000618 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	f7ff fc96 	bl	8000b78 <__aeabi_d2iz>
 800124c:	4603      	mov	r3, r0
 800124e:	71bb      	strb	r3, [r7, #6]
	    int8_t yMove = (int8_t)(MPU6050.Ay / 1000.0f * sensitivity);
 8001250:	4b20      	ldr	r3, [pc, #128]	@ (80012d4 <main+0x15c>)
 8001252:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	4b1f      	ldr	r3, [pc, #124]	@ (80012d8 <main+0x160>)
 800125c:	f7ff fb06 	bl	800086c <__aeabi_ddiv>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4614      	mov	r4, r2
 8001266:	461d      	mov	r5, r3
 8001268:	230a      	movs	r3, #10
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f96a 	bl	8000544 <__aeabi_i2d>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4620      	mov	r0, r4
 8001276:	4629      	mov	r1, r5
 8001278:	f7ff f9ce 	bl	8000618 <__aeabi_dmul>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff fc78 	bl	8000b78 <__aeabi_d2iz>
 8001288:	4603      	mov	r3, r0
 800128a:	717b      	strb	r3, [r7, #5]

	    // Prepare HID report
	    uint8_t HID_Buffer[3] = {0};
 800128c:	463b      	mov	r3, r7
 800128e:	2100      	movs	r1, #0
 8001290:	460a      	mov	r2, r1
 8001292:	801a      	strh	r2, [r3, #0]
 8001294:	460a      	mov	r2, r1
 8001296:	709a      	strb	r2, [r3, #2]
	    HID_Buffer[1] = xMove;
 8001298:	79bb      	ldrb	r3, [r7, #6]
 800129a:	707b      	strb	r3, [r7, #1]
	    HID_Buffer[2] = -yMove;
 800129c:	797b      	ldrb	r3, [r7, #5]
 800129e:	425b      	negs	r3, r3
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	70bb      	strb	r3, [r7, #2]

	    // Send HID report
	    USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 80012a4:	463b      	mov	r3, r7
 80012a6:	2203      	movs	r2, #3
 80012a8:	4619      	mov	r1, r3
 80012aa:	480c      	ldr	r0, [pc, #48]	@ (80012dc <main+0x164>)
 80012ac:	f006 fb1a 	bl	80078e4 <USBD_HID_SendReport>
	    HAL_Delay(10);
 80012b0:	200a      	movs	r0, #10
 80012b2:	f000 fecd 	bl	8002050 <HAL_Delay>
  {
 80012b6:	bf00      	nop
 80012b8:	e7a5      	b.n	8001206 <main+0x8e>
 80012ba:	bf00      	nop
 80012bc:	0800a950 	.word	0x0800a950
 80012c0:	200002c8 	.word	0x200002c8
 80012c4:	0800a974 	.word	0x0800a974
 80012c8:	2000021c 	.word	0x2000021c
 80012cc:	40021800 	.word	0x40021800
 80012d0:	0800a998 	.word	0x0800a998
 80012d4:	20000270 	.word	0x20000270
 80012d8:	408f4000 	.word	0x408f4000
 80012dc:	20000320 	.word	0x20000320

080012e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b094      	sub	sp, #80	@ 0x50
 80012e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e6:	f107 0320 	add.w	r3, r7, #32
 80012ea:	2230      	movs	r2, #48	@ 0x30
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f008 faf4 	bl	80098dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	4b28      	ldr	r3, [pc, #160]	@ (80013ac <SystemClock_Config+0xcc>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130c:	4a27      	ldr	r2, [pc, #156]	@ (80013ac <SystemClock_Config+0xcc>)
 800130e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001312:	6413      	str	r3, [r2, #64]	@ 0x40
 8001314:	4b25      	ldr	r3, [pc, #148]	@ (80013ac <SystemClock_Config+0xcc>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001320:	2300      	movs	r3, #0
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	4b22      	ldr	r3, [pc, #136]	@ (80013b0 <SystemClock_Config+0xd0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800132c:	4a20      	ldr	r2, [pc, #128]	@ (80013b0 <SystemClock_Config+0xd0>)
 800132e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b1e      	ldr	r3, [pc, #120]	@ (80013b0 <SystemClock_Config+0xd0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001340:	2301      	movs	r3, #1
 8001342:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001344:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001348:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134a:	2302      	movs	r3, #2
 800134c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800134e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001352:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001354:	2304      	movs	r3, #4
 8001356:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001358:	2348      	movs	r3, #72	@ 0x48
 800135a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800135c:	2302      	movs	r3, #2
 800135e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001360:	2303      	movs	r3, #3
 8001362:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001364:	f107 0320 	add.w	r3, r7, #32
 8001368:	4618      	mov	r0, r3
 800136a:	f003 fd13 	bl	8004d94 <HAL_RCC_OscConfig>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001374:	f000 f8d8 	bl	8001528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001378:	230f      	movs	r3, #15
 800137a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137c:	2302      	movs	r3, #2
 800137e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001384:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001388:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	2102      	movs	r1, #2
 8001394:	4618      	mov	r0, r3
 8001396:	f003 ff75 	bl	8005284 <HAL_RCC_ClockConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013a0:	f000 f8c2 	bl	8001528 <Error_Handler>
  }
}
 80013a4:	bf00      	nop
 80013a6:	3750      	adds	r7, #80	@ 0x50
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40007000 	.word	0x40007000

080013b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013b8:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <MX_USART1_UART_Init+0x4c>)
 80013ba:	4a12      	ldr	r2, [pc, #72]	@ (8001404 <MX_USART1_UART_Init+0x50>)
 80013bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013be:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <MX_USART1_UART_Init+0x4c>)
 80013c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <MX_USART1_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <MX_USART1_UART_Init+0x4c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <MX_USART1_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013d8:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <MX_USART1_UART_Init+0x4c>)
 80013da:	220c      	movs	r2, #12
 80013dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <MX_USART1_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e4:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <MX_USART1_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	@ (8001400 <MX_USART1_UART_Init+0x4c>)
 80013ec:	f004 f96a 	bl	80056c4 <HAL_UART_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013f6:	f000 f897 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200002c8 	.word	0x200002c8
 8001404:	40011000 	.word	0x40011000

08001408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	@ 0x28
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	4b3e      	ldr	r3, [pc, #248]	@ (800151c <MX_GPIO_Init+0x114>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	4a3d      	ldr	r2, [pc, #244]	@ (800151c <MX_GPIO_Init+0x114>)
 8001428:	f043 0308 	orr.w	r3, r3, #8
 800142c:	6313      	str	r3, [r2, #48]	@ 0x30
 800142e:	4b3b      	ldr	r3, [pc, #236]	@ (800151c <MX_GPIO_Init+0x114>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]


  // UART GPIO Configuration
  GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 800143a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800143e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800144c:	2307      	movs	r3, #7
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	4832      	ldr	r0, [pc, #200]	@ (8001520 <MX_GPIO_Init+0x118>)
 8001458:	f000 ff30 	bl	80022bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 800145c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001462:	2301      	movs	r3, #1
 8001464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	482b      	ldr	r0, [pc, #172]	@ (8001524 <MX_GPIO_Init+0x11c>)
 8001476:	f000 ff21 	bl	80022bc <HAL_GPIO_Init>


  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b27      	ldr	r3, [pc, #156]	@ (800151c <MX_GPIO_Init+0x114>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	4a26      	ldr	r2, [pc, #152]	@ (800151c <MX_GPIO_Init+0x114>)
 8001484:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001488:	6313      	str	r3, [r2, #48]	@ 0x30
 800148a:	4b24      	ldr	r3, [pc, #144]	@ (800151c <MX_GPIO_Init+0x114>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	4b20      	ldr	r3, [pc, #128]	@ (800151c <MX_GPIO_Init+0x114>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	4a1f      	ldr	r2, [pc, #124]	@ (800151c <MX_GPIO_Init+0x114>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a6:	4b1d      	ldr	r3, [pc, #116]	@ (800151c <MX_GPIO_Init+0x114>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	4b19      	ldr	r3, [pc, #100]	@ (800151c <MX_GPIO_Init+0x114>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	4a18      	ldr	r2, [pc, #96]	@ (800151c <MX_GPIO_Init+0x114>)
 80014bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c2:	4b16      	ldr	r3, [pc, #88]	@ (800151c <MX_GPIO_Init+0x114>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	603b      	str	r3, [r7, #0]
 80014d2:	4b12      	ldr	r3, [pc, #72]	@ (800151c <MX_GPIO_Init+0x114>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	4a11      	ldr	r2, [pc, #68]	@ (800151c <MX_GPIO_Init+0x114>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014de:	4b0f      	ldr	r3, [pc, #60]	@ (800151c <MX_GPIO_Init+0x114>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80014f0:	480c      	ldr	r0, [pc, #48]	@ (8001524 <MX_GPIO_Init+0x11c>)
 80014f2:	f001 f88f 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80014f6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80014fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	4805      	ldr	r0, [pc, #20]	@ (8001524 <MX_GPIO_Init+0x11c>)
 8001510:	f000 fed4 	bl	80022bc <HAL_GPIO_Init>

  // NOTE: I2C GPIO configuration is now handled in HAL_I2C_MspInit()
  // Remove the I2C GPIO configuration from here to avoid conflicts

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001514:	bf00      	nop
 8001516:	3728      	adds	r7, #40	@ 0x28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	40020000 	.word	0x40020000
 8001524:	40021800 	.word	0x40021800

08001528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800152c:	b672      	cpsid	i
}
 800152e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <Error_Handler+0x8>

08001534 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af04      	add	r7, sp, #16
 800153a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800153c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001540:	9302      	str	r3, [sp, #8]
 8001542:	2301      	movs	r3, #1
 8001544:	9301      	str	r3, [sp, #4]
 8001546:	f107 030f 	add.w	r3, r7, #15
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	2301      	movs	r3, #1
 800154e:	2275      	movs	r2, #117	@ 0x75
 8001550:	21d0      	movs	r1, #208	@ 0xd0
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f001 fad0 	bl	8002af8 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	2b68      	cmp	r3, #104	@ 0x68
 800155c:	d141      	bne.n	80015e2 <MPU6050_Init+0xae>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001562:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001566:	9302      	str	r3, [sp, #8]
 8001568:	2301      	movs	r3, #1
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	f107 030e 	add.w	r3, r7, #14
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	2301      	movs	r3, #1
 8001574:	226b      	movs	r2, #107	@ 0x6b
 8001576:	21d0      	movs	r1, #208	@ 0xd0
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f001 f9c3 	bl	8002904 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800157e:	2307      	movs	r3, #7
 8001580:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001582:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001586:	9302      	str	r3, [sp, #8]
 8001588:	2301      	movs	r3, #1
 800158a:	9301      	str	r3, [sp, #4]
 800158c:	f107 030e 	add.w	r3, r7, #14
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	2301      	movs	r3, #1
 8001594:	2219      	movs	r2, #25
 8001596:	21d0      	movs	r1, #208	@ 0xd0
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f001 f9b3 	bl	8002904 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800159e:	2300      	movs	r3, #0
 80015a0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80015a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015a6:	9302      	str	r3, [sp, #8]
 80015a8:	2301      	movs	r3, #1
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	f107 030e 	add.w	r3, r7, #14
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	2301      	movs	r3, #1
 80015b4:	221c      	movs	r2, #28
 80015b6:	21d0      	movs	r1, #208	@ 0xd0
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f001 f9a3 	bl	8002904 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80015be:	2300      	movs	r3, #0
 80015c0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80015c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015c6:	9302      	str	r3, [sp, #8]
 80015c8:	2301      	movs	r3, #1
 80015ca:	9301      	str	r3, [sp, #4]
 80015cc:	f107 030e 	add.w	r3, r7, #14
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	2301      	movs	r3, #1
 80015d4:	221b      	movs	r2, #27
 80015d6:	21d0      	movs	r1, #208	@ 0xd0
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f001 f993 	bl	8002904 <HAL_I2C_Mem_Write>
        return 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	e000      	b.n	80015e4 <MPU6050_Init+0xb0>
    }
    return 1;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	0000      	movs	r0, r0
	...

080015f0 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80015f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015f4:	b094      	sub	sp, #80	@ 0x50
 80015f6:	af04      	add	r7, sp, #16
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80015fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001600:	9302      	str	r3, [sp, #8]
 8001602:	230e      	movs	r3, #14
 8001604:	9301      	str	r3, [sp, #4]
 8001606:	f107 0308 	add.w	r3, r7, #8
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2301      	movs	r3, #1
 800160e:	223b      	movs	r2, #59	@ 0x3b
 8001610:	21d0      	movs	r1, #208	@ 0xd0
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f001 fa70 	bl	8002af8 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001618:	7a3b      	ldrb	r3, [r7, #8]
 800161a:	b21b      	sxth	r3, r3
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	b21a      	sxth	r2, r3
 8001620:	7a7b      	ldrb	r3, [r7, #9]
 8001622:	b21b      	sxth	r3, r3
 8001624:	4313      	orrs	r3, r2
 8001626:	b21a      	sxth	r2, r3
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 800162c:	7abb      	ldrb	r3, [r7, #10]
 800162e:	b21b      	sxth	r3, r3
 8001630:	021b      	lsls	r3, r3, #8
 8001632:	b21a      	sxth	r2, r3
 8001634:	7afb      	ldrb	r3, [r7, #11]
 8001636:	b21b      	sxth	r3, r3
 8001638:	4313      	orrs	r3, r2
 800163a:	b21a      	sxth	r2, r3
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001640:	7b3b      	ldrb	r3, [r7, #12]
 8001642:	b21b      	sxth	r3, r3
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	b21a      	sxth	r2, r3
 8001648:	7b7b      	ldrb	r3, [r7, #13]
 800164a:	b21b      	sxth	r3, r3
 800164c:	4313      	orrs	r3, r2
 800164e:	b21a      	sxth	r2, r3
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001654:	7bbb      	ldrb	r3, [r7, #14]
 8001656:	b21b      	sxth	r3, r3
 8001658:	021b      	lsls	r3, r3, #8
 800165a:	b21a      	sxth	r2, r3
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	b21b      	sxth	r3, r3
 8001660:	4313      	orrs	r3, r2
 8001662:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001664:	7c3b      	ldrb	r3, [r7, #16]
 8001666:	b21b      	sxth	r3, r3
 8001668:	021b      	lsls	r3, r3, #8
 800166a:	b21a      	sxth	r2, r3
 800166c:	7c7b      	ldrb	r3, [r7, #17]
 800166e:	b21b      	sxth	r3, r3
 8001670:	4313      	orrs	r3, r2
 8001672:	b21a      	sxth	r2, r3
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001678:	7cbb      	ldrb	r3, [r7, #18]
 800167a:	b21b      	sxth	r3, r3
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	b21a      	sxth	r2, r3
 8001680:	7cfb      	ldrb	r3, [r7, #19]
 8001682:	b21b      	sxth	r3, r3
 8001684:	4313      	orrs	r3, r2
 8001686:	b21a      	sxth	r2, r3
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 800168c:	7d3b      	ldrb	r3, [r7, #20]
 800168e:	b21b      	sxth	r3, r3
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b21a      	sxth	r2, r3
 8001694:	7d7b      	ldrb	r3, [r7, #21]
 8001696:	b21b      	sxth	r3, r3
 8001698:	4313      	orrs	r3, r2
 800169a:	b21a      	sxth	r2, r3
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW * 981 / lsb;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a6:	461a      	mov	r2, r3
 80016a8:	f240 33d5 	movw	r3, #981	@ 0x3d5
 80016ac:	fb02 f303 	mul.w	r3, r2, r3
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe ff47 	bl	8000544 <__aeabi_i2d>
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	4bc3      	ldr	r3, [pc, #780]	@ (80019c8 <MPU6050_Read_All+0x3d8>)
 80016bc:	f7ff f8d6 	bl	800086c <__aeabi_ddiv>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	6839      	ldr	r1, [r7, #0]
 80016c6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW * 981 / lsb;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016d0:	461a      	mov	r2, r3
 80016d2:	f240 33d5 	movw	r3, #981	@ 0x3d5
 80016d6:	fb02 f303 	mul.w	r3, r2, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe ff32 	bl	8000544 <__aeabi_i2d>
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	4bb8      	ldr	r3, [pc, #736]	@ (80019c8 <MPU6050_Read_All+0x3d8>)
 80016e6:	f7ff f8c1 	bl	800086c <__aeabi_ddiv>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	6839      	ldr	r1, [r7, #0]
 80016f0:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW * 981 / Accel_Z_corrector;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016fa:	461a      	mov	r2, r3
 80016fc:	f240 33d5 	movw	r3, #981	@ 0x3d5
 8001700:	fb02 f303 	mul.w	r3, r2, r3
 8001704:	4618      	mov	r0, r3
 8001706:	f7fe ff1d 	bl	8000544 <__aeabi_i2d>
 800170a:	a3a9      	add	r3, pc, #676	@ (adr r3, 80019b0 <MPU6050_Read_All+0x3c0>)
 800170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001710:	f7ff f8ac 	bl	800086c <__aeabi_ddiv>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	6839      	ldr	r1, [r7, #0]
 800171a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 800171e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001722:	ee07 3a90 	vmov	s15, r3
 8001726:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800172a:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 80019cc <MPU6050_Read_All+0x3dc>
 800172e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001732:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 80019d0 <MPU6050_Read_All+0x3e0>
 8001736:	ee77 7a87 	vadd.f32	s15, s15, s14
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fefc 	bl	8000544 <__aeabi_i2d>
 800174c:	a39a      	add	r3, pc, #616	@ (adr r3, 80019b8 <MPU6050_Read_All+0x3c8>)
 800174e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001752:	f7ff f88b 	bl	800086c <__aeabi_ddiv>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	6839      	ldr	r1, [r7, #0]
 800175c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe feec 	bl	8000544 <__aeabi_i2d>
 800176c:	a392      	add	r3, pc, #584	@ (adr r3, 80019b8 <MPU6050_Read_All+0x3c8>)
 800176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001772:	f7ff f87b 	bl	800086c <__aeabi_ddiv>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	6839      	ldr	r1, [r7, #0]
 800177c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fedc 	bl	8000544 <__aeabi_i2d>
 800178c:	a38a      	add	r3, pc, #552	@ (adr r3, 80019b8 <MPU6050_Read_All+0x3c8>)
 800178e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001792:	f7ff f86b 	bl	800086c <__aeabi_ddiv>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	6839      	ldr	r1, [r7, #0]
 800179c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 80017a0:	f000 fc4a 	bl	8002038 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	4b8b      	ldr	r3, [pc, #556]	@ (80019d4 <MPU6050_Read_All+0x3e4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe feb9 	bl	8000524 <__aeabi_ui2d>
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	4b88      	ldr	r3, [pc, #544]	@ (80019d8 <MPU6050_Read_All+0x3e8>)
 80017b8:	f7ff f858 	bl	800086c <__aeabi_ddiv>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 80017c4:	f000 fc38 	bl	8002038 <HAL_GetTick>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4a82      	ldr	r2, [pc, #520]	@ (80019d4 <MPU6050_Read_All+0x3e4>)
 80017cc:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d4:	461a      	mov	r2, r3
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017dc:	fb03 f202 	mul.w	r2, r3, r2
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017e6:	4619      	mov	r1, r3
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017ee:	fb01 f303 	mul.w	r3, r1, r3
 80017f2:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe fea5 	bl	8000544 <__aeabi_i2d>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	ec43 2b10 	vmov	d0, r2, r3
 8001802:	f008 fceb 	bl	800a1dc <sqrt>
 8001806:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	f04f 0300 	mov.w	r3, #0
 8001812:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001816:	f7ff f967 	bl	8000ae8 <__aeabi_dcmpeq>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d11f      	bne.n	8001860 <MPU6050_Read_All+0x270>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fe8c 	bl	8000544 <__aeabi_i2d>
 800182c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001830:	f7ff f81c 	bl	800086c <__aeabi_ddiv>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	ec43 2b17 	vmov	d7, r2, r3
 800183c:	eeb0 0a47 	vmov.f32	s0, s14
 8001840:	eef0 0a67 	vmov.f32	s1, s15
 8001844:	f008 fcf8 	bl	800a238 <atan>
 8001848:	ec51 0b10 	vmov	r0, r1, d0
 800184c:	a35c      	add	r3, pc, #368	@ (adr r3, 80019c0 <MPU6050_Read_All+0x3d0>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	f7fe fee1 	bl	8000618 <__aeabi_dmul>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 800185e:	e005      	b.n	800186c <MPU6050_Read_All+0x27c>
    } else {
        roll = 0.0;
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001872:	425b      	negs	r3, r3
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fe65 	bl	8000544 <__aeabi_i2d>
 800187a:	4682      	mov	sl, r0
 800187c:	468b      	mov	fp, r1
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fe5d 	bl	8000544 <__aeabi_i2d>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	ec43 2b11 	vmov	d1, r2, r3
 8001892:	ec4b ab10 	vmov	d0, sl, fp
 8001896:	f008 fc9f 	bl	800a1d8 <atan2>
 800189a:	ec51 0b10 	vmov	r0, r1, d0
 800189e:	a348      	add	r3, pc, #288	@ (adr r3, 80019c0 <MPU6050_Read_All+0x3d0>)
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	f7fe feb8 	bl	8000618 <__aeabi_dmul>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	4b49      	ldr	r3, [pc, #292]	@ (80019dc <MPU6050_Read_All+0x3ec>)
 80018b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80018ba:	f7ff f91f 	bl	8000afc <__aeabi_dcmplt>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00a      	beq.n	80018da <MPU6050_Read_All+0x2ea>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	4b44      	ldr	r3, [pc, #272]	@ (80019e0 <MPU6050_Read_All+0x3f0>)
 80018d0:	f7ff f932 	bl	8000b38 <__aeabi_dcmpgt>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d114      	bne.n	8001904 <MPU6050_Read_All+0x314>
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	4b40      	ldr	r3, [pc, #256]	@ (80019e0 <MPU6050_Read_All+0x3f0>)
 80018e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80018e4:	f7ff f928 	bl	8000b38 <__aeabi_dcmpgt>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d015      	beq.n	800191a <MPU6050_Read_All+0x32a>
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	4b38      	ldr	r3, [pc, #224]	@ (80019dc <MPU6050_Read_All+0x3ec>)
 80018fa:	f7ff f8ff 	bl	8000afc <__aeabi_dcmplt>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00a      	beq.n	800191a <MPU6050_Read_All+0x32a>
        KalmanY.angle = pitch;
 8001904:	4937      	ldr	r1, [pc, #220]	@ (80019e4 <MPU6050_Read_All+0x3f4>)
 8001906:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800190a:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 800190e:	6839      	ldr	r1, [r7, #0]
 8001910:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001914:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001918:	e014      	b.n	8001944 <MPU6050_Read_All+0x354>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8001920:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8001924:	eeb0 1a47 	vmov.f32	s2, s14
 8001928:	eef0 1a67 	vmov.f32	s3, s15
 800192c:	ed97 0b06 	vldr	d0, [r7, #24]
 8001930:	482c      	ldr	r0, [pc, #176]	@ (80019e4 <MPU6050_Read_All+0x3f4>)
 8001932:	f000 f85b 	bl	80019ec <Kalman_getAngle>
 8001936:	eeb0 7a40 	vmov.f32	s14, s0
 800193a:	eef0 7a60 	vmov.f32	s15, s1
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800194a:	4690      	mov	r8, r2
 800194c:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	4b22      	ldr	r3, [pc, #136]	@ (80019e0 <MPU6050_Read_All+0x3f0>)
 8001956:	4640      	mov	r0, r8
 8001958:	4649      	mov	r1, r9
 800195a:	f7ff f8ed 	bl	8000b38 <__aeabi_dcmpgt>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d008      	beq.n	8001976 <MPU6050_Read_All+0x386>
        DataStruct->Gx = -DataStruct->Gx;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800196a:	4614      	mov	r4, r2
 800196c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 800197c:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8001980:	eeb0 1a47 	vmov.f32	s2, s14
 8001984:	eef0 1a67 	vmov.f32	s3, s15
 8001988:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 800198c:	4816      	ldr	r0, [pc, #88]	@ (80019e8 <MPU6050_Read_All+0x3f8>)
 800198e:	f000 f82d 	bl	80019ec <Kalman_getAngle>
 8001992:	eeb0 7a40 	vmov.f32	s14, s0
 8001996:	eef0 7a60 	vmov.f32	s15, s1
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48

}
 80019a0:	bf00      	nop
 80019a2:	3740      	adds	r7, #64	@ 0x40
 80019a4:	46bd      	mov	sp, r7
 80019a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019aa:	bf00      	nop
 80019ac:	f3af 8000 	nop.w
 80019b0:	00000000 	.word	0x00000000
 80019b4:	40cc2900 	.word	0x40cc2900
 80019b8:	00000000 	.word	0x00000000
 80019bc:	40606000 	.word	0x40606000
 80019c0:	1a63c1f8 	.word	0x1a63c1f8
 80019c4:	404ca5dc 	.word	0x404ca5dc
 80019c8:	40d00000 	.word	0x40d00000
 80019cc:	43aa0000 	.word	0x43aa0000
 80019d0:	42121eb8 	.word	0x42121eb8
 80019d4:	20000310 	.word	0x20000310
 80019d8:	408f4000 	.word	0x408f4000
 80019dc:	c0568000 	.word	0xc0568000
 80019e0:	40568000 	.word	0x40568000
 80019e4:	20000048 	.word	0x20000048
 80019e8:	20000000 	.word	0x20000000

080019ec <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 80019ec:	b5b0      	push	{r4, r5, r7, lr}
 80019ee:	b096      	sub	sp, #88	@ 0x58
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	61f8      	str	r0, [r7, #28]
 80019f4:	ed87 0b04 	vstr	d0, [r7, #16]
 80019f8:	ed87 1b02 	vstr	d1, [r7, #8]
 80019fc:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001a06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a0a:	f7fe fc4d 	bl	80002a8 <__aeabi_dsub>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001a20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a24:	f7fe fdf8 	bl	8000618 <__aeabi_dmul>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	4629      	mov	r1, r5
 8001a30:	f7fe fc3c 	bl	80002ac <__adddf3>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	69f9      	ldr	r1, [r7, #28]
 8001a3a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001a4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a4e:	f7fe fde3 	bl	8000618 <__aeabi_dmul>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4610      	mov	r0, r2
 8001a58:	4619      	mov	r1, r3
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001a60:	f7fe fc22 	bl	80002a8 <__aeabi_dsub>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001a72:	f7fe fc19 	bl	80002a8 <__aeabi_dsub>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a84:	f7fe fc12 	bl	80002ac <__adddf3>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a94:	f7fe fdc0 	bl	8000618 <__aeabi_dmul>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4620      	mov	r0, r4
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	f7fe fc04 	bl	80002ac <__adddf3>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	69f9      	ldr	r1, [r7, #28]
 8001aaa:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001aba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001abe:	f7fe fdab 	bl	8000618 <__aeabi_dmul>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	4629      	mov	r1, r5
 8001aca:	f7fe fbed 	bl	80002a8 <__aeabi_dsub>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	69f9      	ldr	r1, [r7, #28]
 8001ad4:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ae8:	f7fe fd96 	bl	8000618 <__aeabi_dmul>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4620      	mov	r0, r4
 8001af2:	4629      	mov	r1, r5
 8001af4:	f7fe fbd8 	bl	80002a8 <__aeabi_dsub>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	69f9      	ldr	r1, [r7, #28]
 8001afe:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001b0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b12:	f7fe fd81 	bl	8000618 <__aeabi_dmul>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	f7fe fbc5 	bl	80002ac <__adddf3>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	69f9      	ldr	r1, [r7, #28]
 8001b28:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001b38:	f7fe fbb8 	bl	80002ac <__adddf3>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001b4a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b4e:	f7fe fe8d 	bl	800086c <__aeabi_ddiv>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001b60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b64:	f7fe fe82 	bl	800086c <__aeabi_ddiv>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b76:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b7a:	f7fe fb95 	bl	80002a8 <__aeabi_dsub>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001b8c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b90:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001b94:	f7fe fd40 	bl	8000618 <__aeabi_dmul>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	f7fe fb84 	bl	80002ac <__adddf3>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	69f9      	ldr	r1, [r7, #28]
 8001baa:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001bb4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001bb8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001bbc:	f7fe fd2c 	bl	8000618 <__aeabi_dmul>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	4629      	mov	r1, r5
 8001bc8:	f7fe fb70 	bl	80002ac <__adddf3>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	69f9      	ldr	r1, [r7, #28]
 8001bd2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001bdc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001be6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001bf0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bf4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001bf8:	f7fe fd0e 	bl	8000618 <__aeabi_dmul>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4620      	mov	r0, r4
 8001c02:	4629      	mov	r1, r5
 8001c04:	f7fe fb50 	bl	80002a8 <__aeabi_dsub>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	69f9      	ldr	r1, [r7, #28]
 8001c0e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001c18:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c1c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001c20:	f7fe fcfa 	bl	8000618 <__aeabi_dmul>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4620      	mov	r0, r4
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	f7fe fb3c 	bl	80002a8 <__aeabi_dsub>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	69f9      	ldr	r1, [r7, #28]
 8001c36:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001c40:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001c48:	f7fe fce6 	bl	8000618 <__aeabi_dmul>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4620      	mov	r0, r4
 8001c52:	4629      	mov	r1, r5
 8001c54:	f7fe fb28 	bl	80002a8 <__aeabi_dsub>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	69f9      	ldr	r1, [r7, #28]
 8001c5e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001c68:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c6c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001c70:	f7fe fcd2 	bl	8000618 <__aeabi_dmul>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4620      	mov	r0, r4
 8001c7a:	4629      	mov	r1, r5
 8001c7c:	f7fe fb14 	bl	80002a8 <__aeabi_dsub>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	69f9      	ldr	r1, [r7, #28]
 8001c86:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001c90:	ec43 2b17 	vmov	d7, r2, r3
};
 8001c94:	eeb0 0a47 	vmov.f32	s0, s14
 8001c98:	eef0 0a67 	vmov.f32	s1, s15
 8001c9c:	3758      	adds	r7, #88	@ 0x58
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	607b      	str	r3, [r7, #4]
 8001cae:	4b10      	ldr	r3, [pc, #64]	@ (8001cf0 <HAL_MspInit+0x4c>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	4a0f      	ldr	r2, [pc, #60]	@ (8001cf0 <HAL_MspInit+0x4c>)
 8001cb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cba:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf0 <HAL_MspInit+0x4c>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	603b      	str	r3, [r7, #0]
 8001cca:	4b09      	ldr	r3, [pc, #36]	@ (8001cf0 <HAL_MspInit+0x4c>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	4a08      	ldr	r2, [pc, #32]	@ (8001cf0 <HAL_MspInit+0x4c>)
 8001cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd6:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <HAL_MspInit+0x4c>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800

08001cf4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	@ 0x28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a19      	ldr	r2, [pc, #100]	@ (8001d78 <HAL_I2C_MspInit+0x84>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d12b      	bne.n	8001d6e <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	4b18      	ldr	r3, [pc, #96]	@ (8001d7c <HAL_I2C_MspInit+0x88>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1e:	4a17      	ldr	r2, [pc, #92]	@ (8001d7c <HAL_I2C_MspInit+0x88>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d26:	4b15      	ldr	r3, [pc, #84]	@ (8001d7c <HAL_I2C_MspInit+0x88>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d32:	23c0      	movs	r3, #192	@ 0xc0
 8001d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d36:	2312      	movs	r3, #18
 8001d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d42:	2304      	movs	r3, #4
 8001d44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	480c      	ldr	r0, [pc, #48]	@ (8001d80 <HAL_I2C_MspInit+0x8c>)
 8001d4e:	f000 fab5 	bl	80022bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	4b09      	ldr	r3, [pc, #36]	@ (8001d7c <HAL_I2C_MspInit+0x88>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	4a08      	ldr	r2, [pc, #32]	@ (8001d7c <HAL_I2C_MspInit+0x88>)
 8001d5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d62:	4b06      	ldr	r3, [pc, #24]	@ (8001d7c <HAL_I2C_MspInit+0x88>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001d6e:	bf00      	nop
 8001d70:	3728      	adds	r7, #40	@ 0x28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40005400 	.word	0x40005400
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40020400 	.word	0x40020400

08001d84 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	@ 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a19      	ldr	r2, [pc, #100]	@ (8001e08 <HAL_UART_MspInit+0x84>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d12c      	bne.n	8001e00 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	4b18      	ldr	r3, [pc, #96]	@ (8001e0c <HAL_UART_MspInit+0x88>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dae:	4a17      	ldr	r2, [pc, #92]	@ (8001e0c <HAL_UART_MspInit+0x88>)
 8001db0:	f043 0310 	orr.w	r3, r3, #16
 8001db4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001db6:	4b15      	ldr	r3, [pc, #84]	@ (8001e0c <HAL_UART_MspInit+0x88>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dba:	f003 0310 	and.w	r3, r3, #16
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <HAL_UART_MspInit+0x88>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dca:	4a10      	ldr	r2, [pc, #64]	@ (8001e0c <HAL_UART_MspInit+0x88>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e0c <HAL_UART_MspInit+0x88>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001dde:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dec:	2303      	movs	r3, #3
 8001dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001df0:	2307      	movs	r3, #7
 8001df2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4805      	ldr	r0, [pc, #20]	@ (8001e10 <HAL_UART_MspInit+0x8c>)
 8001dfc:	f000 fa5e 	bl	80022bc <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001e00:	bf00      	nop
 8001e02:	3728      	adds	r7, #40	@ 0x28
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40011000 	.word	0x40011000
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40020000 	.word	0x40020000

08001e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <NMI_Handler+0x4>

08001e1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <HardFault_Handler+0x4>

08001e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <MemManage_Handler+0x4>

08001e2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <BusFault_Handler+0x4>

08001e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <UsageFault_Handler+0x4>

08001e3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e6a:	f000 f8d1 	bl	8002010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e78:	4802      	ldr	r0, [pc, #8]	@ (8001e84 <OTG_FS_IRQHandler+0x10>)
 8001e7a:	f001 fe95 	bl	8003ba8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	200007fc 	.word	0x200007fc

08001e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e90:	4a14      	ldr	r2, [pc, #80]	@ (8001ee4 <_sbrk+0x5c>)
 8001e92:	4b15      	ldr	r3, [pc, #84]	@ (8001ee8 <_sbrk+0x60>)
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e9c:	4b13      	ldr	r3, [pc, #76]	@ (8001eec <_sbrk+0x64>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d102      	bne.n	8001eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <_sbrk+0x64>)
 8001ea6:	4a12      	ldr	r2, [pc, #72]	@ (8001ef0 <_sbrk+0x68>)
 8001ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eaa:	4b10      	ldr	r3, [pc, #64]	@ (8001eec <_sbrk+0x64>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d207      	bcs.n	8001ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eb8:	f007 fd18 	bl	80098ec <__errno>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec6:	e009      	b.n	8001edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec8:	4b08      	ldr	r3, [pc, #32]	@ (8001eec <_sbrk+0x64>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ece:	4b07      	ldr	r3, [pc, #28]	@ (8001eec <_sbrk+0x64>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	4a05      	ldr	r2, [pc, #20]	@ (8001eec <_sbrk+0x64>)
 8001ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eda:	68fb      	ldr	r3, [r7, #12]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20030000 	.word	0x20030000
 8001ee8:	00000400 	.word	0x00000400
 8001eec:	20000314 	.word	0x20000314
 8001ef0:	20000e40 	.word	0x20000e40

08001ef4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ef8:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <SystemInit+0x20>)
 8001efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001efe:	4a05      	ldr	r2, [pc, #20]	@ (8001f14 <SystemInit+0x20>)
 8001f00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001f18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f1c:	f7ff ffea 	bl	8001ef4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f20:	480c      	ldr	r0, [pc, #48]	@ (8001f54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f22:	490d      	ldr	r1, [pc, #52]	@ (8001f58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f24:	4a0d      	ldr	r2, [pc, #52]	@ (8001f5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f28:	e002      	b.n	8001f30 <LoopCopyDataInit>

08001f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f2e:	3304      	adds	r3, #4

08001f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f34:	d3f9      	bcc.n	8001f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f36:	4a0a      	ldr	r2, [pc, #40]	@ (8001f60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f38:	4c0a      	ldr	r4, [pc, #40]	@ (8001f64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f3c:	e001      	b.n	8001f42 <LoopFillZerobss>

08001f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f40:	3204      	adds	r2, #4

08001f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f44:	d3fb      	bcc.n	8001f3e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f46:	f007 fcd7 	bl	80098f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f4a:	f7ff f915 	bl	8001178 <main>
  bx  lr    
 8001f4e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f50:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f58:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001f5c:	0800aad0 	.word	0x0800aad0
  ldr r2, =_sbss
 8001f60:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8001f64:	20000e3c 	.word	0x20000e3c

08001f68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f68:	e7fe      	b.n	8001f68 <ADC_IRQHandler>
	...

08001f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f70:	4b0e      	ldr	r3, [pc, #56]	@ (8001fac <HAL_Init+0x40>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0d      	ldr	r2, [pc, #52]	@ (8001fac <HAL_Init+0x40>)
 8001f76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <HAL_Init+0x40>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0a      	ldr	r2, [pc, #40]	@ (8001fac <HAL_Init+0x40>)
 8001f82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f88:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <HAL_Init+0x40>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a07      	ldr	r2, [pc, #28]	@ (8001fac <HAL_Init+0x40>)
 8001f8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f94:	2003      	movs	r0, #3
 8001f96:	f000 f94f 	bl	8002238 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f9a:	200f      	movs	r0, #15
 8001f9c:	f000 f808 	bl	8001fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa0:	f7ff fe80 	bl	8001ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40023c00 	.word	0x40023c00

08001fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb8:	4b12      	ldr	r3, [pc, #72]	@ (8002004 <HAL_InitTick+0x54>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b12      	ldr	r3, [pc, #72]	@ (8002008 <HAL_InitTick+0x58>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 f967 	bl	80022a2 <HAL_SYSTICK_Config>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00e      	b.n	8001ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b0f      	cmp	r3, #15
 8001fe2:	d80a      	bhi.n	8001ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fec:	f000 f92f 	bl	800224e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ff0:	4a06      	ldr	r2, [pc, #24]	@ (800200c <HAL_InitTick+0x5c>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e000      	b.n	8001ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000090 	.word	0x20000090
 8002008:	20000098 	.word	0x20000098
 800200c:	20000094 	.word	0x20000094

08002010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002014:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <HAL_IncTick+0x20>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <HAL_IncTick+0x24>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4413      	add	r3, r2
 8002020:	4a04      	ldr	r2, [pc, #16]	@ (8002034 <HAL_IncTick+0x24>)
 8002022:	6013      	str	r3, [r2, #0]
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000098 	.word	0x20000098
 8002034:	20000318 	.word	0x20000318

08002038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return uwTick;
 800203c:	4b03      	ldr	r3, [pc, #12]	@ (800204c <HAL_GetTick+0x14>)
 800203e:	681b      	ldr	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	20000318 	.word	0x20000318

08002050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002058:	f7ff ffee 	bl	8002038 <HAL_GetTick>
 800205c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002068:	d005      	beq.n	8002076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800206a:	4b0a      	ldr	r3, [pc, #40]	@ (8002094 <HAL_Delay+0x44>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4413      	add	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002076:	bf00      	nop
 8002078:	f7ff ffde 	bl	8002038 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	429a      	cmp	r2, r3
 8002086:	d8f7      	bhi.n	8002078 <HAL_Delay+0x28>
  {
  }
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000098 	.word	0x20000098

08002098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a8:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <__NVIC_SetPriorityGrouping+0x44>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020b4:	4013      	ands	r3, r2
 80020b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ca:	4a04      	ldr	r2, [pc, #16]	@ (80020dc <__NVIC_SetPriorityGrouping+0x44>)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	60d3      	str	r3, [r2, #12]
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e4:	4b04      	ldr	r3, [pc, #16]	@ (80020f8 <__NVIC_GetPriorityGrouping+0x18>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	0a1b      	lsrs	r3, r3, #8
 80020ea:	f003 0307 	and.w	r3, r3, #7
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	2b00      	cmp	r3, #0
 800210c:	db0b      	blt.n	8002126 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	f003 021f 	and.w	r2, r3, #31
 8002114:	4907      	ldr	r1, [pc, #28]	@ (8002134 <__NVIC_EnableIRQ+0x38>)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	2001      	movs	r0, #1
 800211e:	fa00 f202 	lsl.w	r2, r0, r2
 8002122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000e100 	.word	0xe000e100

08002138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	6039      	str	r1, [r7, #0]
 8002142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002148:	2b00      	cmp	r3, #0
 800214a:	db0a      	blt.n	8002162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	b2da      	uxtb	r2, r3
 8002150:	490c      	ldr	r1, [pc, #48]	@ (8002184 <__NVIC_SetPriority+0x4c>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	0112      	lsls	r2, r2, #4
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	440b      	add	r3, r1
 800215c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002160:	e00a      	b.n	8002178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4908      	ldr	r1, [pc, #32]	@ (8002188 <__NVIC_SetPriority+0x50>)
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	3b04      	subs	r3, #4
 8002170:	0112      	lsls	r2, r2, #4
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	440b      	add	r3, r1
 8002176:	761a      	strb	r2, [r3, #24]
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000e100 	.word	0xe000e100
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	@ 0x24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f1c3 0307 	rsb	r3, r3, #7
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	bf28      	it	cs
 80021aa:	2304      	movcs	r3, #4
 80021ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3304      	adds	r3, #4
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d902      	bls.n	80021bc <NVIC_EncodePriority+0x30>
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3b03      	subs	r3, #3
 80021ba:	e000      	b.n	80021be <NVIC_EncodePriority+0x32>
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c0:	f04f 32ff 	mov.w	r2, #4294967295
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43da      	mvns	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	401a      	ands	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d4:	f04f 31ff 	mov.w	r1, #4294967295
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	fa01 f303 	lsl.w	r3, r1, r3
 80021de:	43d9      	mvns	r1, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	4313      	orrs	r3, r2
         );
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3724      	adds	r7, #36	@ 0x24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002204:	d301      	bcc.n	800220a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002206:	2301      	movs	r3, #1
 8002208:	e00f      	b.n	800222a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800220a:	4a0a      	ldr	r2, [pc, #40]	@ (8002234 <SysTick_Config+0x40>)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002212:	210f      	movs	r1, #15
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
 8002218:	f7ff ff8e 	bl	8002138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800221c:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <SysTick_Config+0x40>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002222:	4b04      	ldr	r3, [pc, #16]	@ (8002234 <SysTick_Config+0x40>)
 8002224:	2207      	movs	r2, #7
 8002226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	e000e010 	.word	0xe000e010

08002238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ff29 	bl	8002098 <__NVIC_SetPriorityGrouping>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800224e:	b580      	push	{r7, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002260:	f7ff ff3e 	bl	80020e0 <__NVIC_GetPriorityGrouping>
 8002264:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	6978      	ldr	r0, [r7, #20]
 800226c:	f7ff ff8e 	bl	800218c <NVIC_EncodePriority>
 8002270:	4602      	mov	r2, r0
 8002272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff5d 	bl	8002138 <__NVIC_SetPriority>
}
 800227e:	bf00      	nop
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff31 	bl	80020fc <__NVIC_EnableIRQ>
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff ffa2 	bl	80021f4 <SysTick_Config>
 80022b0:	4603      	mov	r3, r0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022bc:	b480      	push	{r7}
 80022be:	b089      	sub	sp, #36	@ 0x24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
 80022d6:	e177      	b.n	80025c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022d8:	2201      	movs	r2, #1
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	f040 8166 	bne.w	80025c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d005      	beq.n	800230e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800230a:	2b02      	cmp	r3, #2
 800230c:	d130      	bne.n	8002370 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	2203      	movs	r2, #3
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002344:	2201      	movs	r2, #1
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 0201 	and.w	r2, r3, #1
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b03      	cmp	r3, #3
 800237a:	d017      	beq.n	80023ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	2203      	movs	r2, #3
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d123      	bne.n	8002400 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	08da      	lsrs	r2, r3, #3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3208      	adds	r2, #8
 80023c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	220f      	movs	r2, #15
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	08da      	lsrs	r2, r3, #3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3208      	adds	r2, #8
 80023fa:	69b9      	ldr	r1, [r7, #24]
 80023fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	2203      	movs	r2, #3
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 0203 	and.w	r2, r3, #3
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 80c0 	beq.w	80025c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	4b66      	ldr	r3, [pc, #408]	@ (80025e0 <HAL_GPIO_Init+0x324>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244a:	4a65      	ldr	r2, [pc, #404]	@ (80025e0 <HAL_GPIO_Init+0x324>)
 800244c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002450:	6453      	str	r3, [r2, #68]	@ 0x44
 8002452:	4b63      	ldr	r3, [pc, #396]	@ (80025e0 <HAL_GPIO_Init+0x324>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002456:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800245e:	4a61      	ldr	r2, [pc, #388]	@ (80025e4 <HAL_GPIO_Init+0x328>)
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	089b      	lsrs	r3, r3, #2
 8002464:	3302      	adds	r3, #2
 8002466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	220f      	movs	r2, #15
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a58      	ldr	r2, [pc, #352]	@ (80025e8 <HAL_GPIO_Init+0x32c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d037      	beq.n	80024fa <HAL_GPIO_Init+0x23e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a57      	ldr	r2, [pc, #348]	@ (80025ec <HAL_GPIO_Init+0x330>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d031      	beq.n	80024f6 <HAL_GPIO_Init+0x23a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a56      	ldr	r2, [pc, #344]	@ (80025f0 <HAL_GPIO_Init+0x334>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d02b      	beq.n	80024f2 <HAL_GPIO_Init+0x236>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a55      	ldr	r2, [pc, #340]	@ (80025f4 <HAL_GPIO_Init+0x338>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d025      	beq.n	80024ee <HAL_GPIO_Init+0x232>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a54      	ldr	r2, [pc, #336]	@ (80025f8 <HAL_GPIO_Init+0x33c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d01f      	beq.n	80024ea <HAL_GPIO_Init+0x22e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a53      	ldr	r2, [pc, #332]	@ (80025fc <HAL_GPIO_Init+0x340>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d019      	beq.n	80024e6 <HAL_GPIO_Init+0x22a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a52      	ldr	r2, [pc, #328]	@ (8002600 <HAL_GPIO_Init+0x344>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d013      	beq.n	80024e2 <HAL_GPIO_Init+0x226>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a51      	ldr	r2, [pc, #324]	@ (8002604 <HAL_GPIO_Init+0x348>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00d      	beq.n	80024de <HAL_GPIO_Init+0x222>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a50      	ldr	r2, [pc, #320]	@ (8002608 <HAL_GPIO_Init+0x34c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d007      	beq.n	80024da <HAL_GPIO_Init+0x21e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a4f      	ldr	r2, [pc, #316]	@ (800260c <HAL_GPIO_Init+0x350>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d101      	bne.n	80024d6 <HAL_GPIO_Init+0x21a>
 80024d2:	2309      	movs	r3, #9
 80024d4:	e012      	b.n	80024fc <HAL_GPIO_Init+0x240>
 80024d6:	230a      	movs	r3, #10
 80024d8:	e010      	b.n	80024fc <HAL_GPIO_Init+0x240>
 80024da:	2308      	movs	r3, #8
 80024dc:	e00e      	b.n	80024fc <HAL_GPIO_Init+0x240>
 80024de:	2307      	movs	r3, #7
 80024e0:	e00c      	b.n	80024fc <HAL_GPIO_Init+0x240>
 80024e2:	2306      	movs	r3, #6
 80024e4:	e00a      	b.n	80024fc <HAL_GPIO_Init+0x240>
 80024e6:	2305      	movs	r3, #5
 80024e8:	e008      	b.n	80024fc <HAL_GPIO_Init+0x240>
 80024ea:	2304      	movs	r3, #4
 80024ec:	e006      	b.n	80024fc <HAL_GPIO_Init+0x240>
 80024ee:	2303      	movs	r3, #3
 80024f0:	e004      	b.n	80024fc <HAL_GPIO_Init+0x240>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e002      	b.n	80024fc <HAL_GPIO_Init+0x240>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <HAL_GPIO_Init+0x240>
 80024fa:	2300      	movs	r3, #0
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	f002 0203 	and.w	r2, r2, #3
 8002502:	0092      	lsls	r2, r2, #2
 8002504:	4093      	lsls	r3, r2
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800250c:	4935      	ldr	r1, [pc, #212]	@ (80025e4 <HAL_GPIO_Init+0x328>)
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	3302      	adds	r3, #2
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800251a:	4b3d      	ldr	r3, [pc, #244]	@ (8002610 <HAL_GPIO_Init+0x354>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800253e:	4a34      	ldr	r2, [pc, #208]	@ (8002610 <HAL_GPIO_Init+0x354>)
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002544:	4b32      	ldr	r3, [pc, #200]	@ (8002610 <HAL_GPIO_Init+0x354>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002568:	4a29      	ldr	r2, [pc, #164]	@ (8002610 <HAL_GPIO_Init+0x354>)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800256e:	4b28      	ldr	r3, [pc, #160]	@ (8002610 <HAL_GPIO_Init+0x354>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002592:	4a1f      	ldr	r2, [pc, #124]	@ (8002610 <HAL_GPIO_Init+0x354>)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002598:	4b1d      	ldr	r3, [pc, #116]	@ (8002610 <HAL_GPIO_Init+0x354>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025bc:	4a14      	ldr	r2, [pc, #80]	@ (8002610 <HAL_GPIO_Init+0x354>)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3301      	adds	r3, #1
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	2b0f      	cmp	r3, #15
 80025cc:	f67f ae84 	bls.w	80022d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025d0:	bf00      	nop
 80025d2:	bf00      	nop
 80025d4:	3724      	adds	r7, #36	@ 0x24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40013800 	.word	0x40013800
 80025e8:	40020000 	.word	0x40020000
 80025ec:	40020400 	.word	0x40020400
 80025f0:	40020800 	.word	0x40020800
 80025f4:	40020c00 	.word	0x40020c00
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40021400 	.word	0x40021400
 8002600:	40021800 	.word	0x40021800
 8002604:	40021c00 	.word	0x40021c00
 8002608:	40022000 	.word	0x40022000
 800260c:	40022400 	.word	0x40022400
 8002610:	40013c00 	.word	0x40013c00

08002614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	807b      	strh	r3, [r7, #2]
 8002620:	4613      	mov	r3, r2
 8002622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002624:	787b      	ldrb	r3, [r7, #1]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800262a:	887a      	ldrh	r2, [r7, #2]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002630:	e003      	b.n	800263a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002632:	887b      	ldrh	r3, [r7, #2]
 8002634:	041a      	lsls	r2, r3, #16
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	619a      	str	r2, [r3, #24]
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002646:	b480      	push	{r7}
 8002648:	b085      	sub	sp, #20
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	460b      	mov	r3, r1
 8002650:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002658:	887a      	ldrh	r2, [r7, #2]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4013      	ands	r3, r2
 800265e:	041a      	lsls	r2, r3, #16
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	43d9      	mvns	r1, r3
 8002664:	887b      	ldrh	r3, [r7, #2]
 8002666:	400b      	ands	r3, r1
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	619a      	str	r2, [r3, #24]
}
 800266e:	bf00      	nop
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e12b      	b.n	80028e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d106      	bne.n	80026a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff fb26 	bl	8001cf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2224      	movs	r2, #36	@ 0x24
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0201 	bic.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026e0:	f002 ffc8 	bl	8005674 <HAL_RCC_GetPCLK1Freq>
 80026e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	4a81      	ldr	r2, [pc, #516]	@ (80028f0 <HAL_I2C_Init+0x274>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d807      	bhi.n	8002700 <HAL_I2C_Init+0x84>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4a80      	ldr	r2, [pc, #512]	@ (80028f4 <HAL_I2C_Init+0x278>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	bf94      	ite	ls
 80026f8:	2301      	movls	r3, #1
 80026fa:	2300      	movhi	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	e006      	b.n	800270e <HAL_I2C_Init+0x92>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4a7d      	ldr	r2, [pc, #500]	@ (80028f8 <HAL_I2C_Init+0x27c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	bf94      	ite	ls
 8002708:	2301      	movls	r3, #1
 800270a:	2300      	movhi	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e0e7      	b.n	80028e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4a78      	ldr	r2, [pc, #480]	@ (80028fc <HAL_I2C_Init+0x280>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	0c9b      	lsrs	r3, r3, #18
 8002720:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	430a      	orrs	r2, r1
 8002734:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	4a6a      	ldr	r2, [pc, #424]	@ (80028f0 <HAL_I2C_Init+0x274>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d802      	bhi.n	8002750 <HAL_I2C_Init+0xd4>
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	3301      	adds	r3, #1
 800274e:	e009      	b.n	8002764 <HAL_I2C_Init+0xe8>
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002756:	fb02 f303 	mul.w	r3, r2, r3
 800275a:	4a69      	ldr	r2, [pc, #420]	@ (8002900 <HAL_I2C_Init+0x284>)
 800275c:	fba2 2303 	umull	r2, r3, r2, r3
 8002760:	099b      	lsrs	r3, r3, #6
 8002762:	3301      	adds	r3, #1
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	430b      	orrs	r3, r1
 800276a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002776:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	495c      	ldr	r1, [pc, #368]	@ (80028f0 <HAL_I2C_Init+0x274>)
 8002780:	428b      	cmp	r3, r1
 8002782:	d819      	bhi.n	80027b8 <HAL_I2C_Init+0x13c>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1e59      	subs	r1, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002792:	1c59      	adds	r1, r3, #1
 8002794:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002798:	400b      	ands	r3, r1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00a      	beq.n	80027b4 <HAL_I2C_Init+0x138>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1e59      	subs	r1, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ac:	3301      	adds	r3, #1
 80027ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b2:	e051      	b.n	8002858 <HAL_I2C_Init+0x1dc>
 80027b4:	2304      	movs	r3, #4
 80027b6:	e04f      	b.n	8002858 <HAL_I2C_Init+0x1dc>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d111      	bne.n	80027e4 <HAL_I2C_Init+0x168>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	1e58      	subs	r0, r3, #1
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6859      	ldr	r1, [r3, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	440b      	add	r3, r1
 80027ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80027d2:	3301      	adds	r3, #1
 80027d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d8:	2b00      	cmp	r3, #0
 80027da:	bf0c      	ite	eq
 80027dc:	2301      	moveq	r3, #1
 80027de:	2300      	movne	r3, #0
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	e012      	b.n	800280a <HAL_I2C_Init+0x18e>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	1e58      	subs	r0, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6859      	ldr	r1, [r3, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	0099      	lsls	r1, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027fa:	3301      	adds	r3, #1
 80027fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002800:	2b00      	cmp	r3, #0
 8002802:	bf0c      	ite	eq
 8002804:	2301      	moveq	r3, #1
 8002806:	2300      	movne	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_I2C_Init+0x196>
 800280e:	2301      	movs	r3, #1
 8002810:	e022      	b.n	8002858 <HAL_I2C_Init+0x1dc>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10e      	bne.n	8002838 <HAL_I2C_Init+0x1bc>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	1e58      	subs	r0, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6859      	ldr	r1, [r3, #4]
 8002822:	460b      	mov	r3, r1
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	440b      	add	r3, r1
 8002828:	fbb0 f3f3 	udiv	r3, r0, r3
 800282c:	3301      	adds	r3, #1
 800282e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002836:	e00f      	b.n	8002858 <HAL_I2C_Init+0x1dc>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	1e58      	subs	r0, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6859      	ldr	r1, [r3, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	0099      	lsls	r1, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	fbb0 f3f3 	udiv	r3, r0, r3
 800284e:	3301      	adds	r3, #1
 8002850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002854:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	6809      	ldr	r1, [r1, #0]
 800285c:	4313      	orrs	r3, r2
 800285e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69da      	ldr	r2, [r3, #28]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002886:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6911      	ldr	r1, [r2, #16]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	68d2      	ldr	r2, [r2, #12]
 8002892:	4311      	orrs	r1, r2
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	430b      	orrs	r3, r1
 800289a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695a      	ldr	r2, [r3, #20]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0201 	orr.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2220      	movs	r2, #32
 80028d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	000186a0 	.word	0x000186a0
 80028f4:	001e847f 	.word	0x001e847f
 80028f8:	003d08ff 	.word	0x003d08ff
 80028fc:	431bde83 	.word	0x431bde83
 8002900:	10624dd3 	.word	0x10624dd3

08002904 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af02      	add	r7, sp, #8
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	4608      	mov	r0, r1
 800290e:	4611      	mov	r1, r2
 8002910:	461a      	mov	r2, r3
 8002912:	4603      	mov	r3, r0
 8002914:	817b      	strh	r3, [r7, #10]
 8002916:	460b      	mov	r3, r1
 8002918:	813b      	strh	r3, [r7, #8]
 800291a:	4613      	mov	r3, r2
 800291c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800291e:	f7ff fb8b 	bl	8002038 <HAL_GetTick>
 8002922:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b20      	cmp	r3, #32
 800292e:	f040 80d9 	bne.w	8002ae4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	2319      	movs	r3, #25
 8002938:	2201      	movs	r2, #1
 800293a:	496d      	ldr	r1, [pc, #436]	@ (8002af0 <HAL_I2C_Mem_Write+0x1ec>)
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 fdb9 	bl	80034b4 <I2C_WaitOnFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002948:	2302      	movs	r3, #2
 800294a:	e0cc      	b.n	8002ae6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <HAL_I2C_Mem_Write+0x56>
 8002956:	2302      	movs	r3, #2
 8002958:	e0c5      	b.n	8002ae6 <HAL_I2C_Mem_Write+0x1e2>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b01      	cmp	r3, #1
 800296e:	d007      	beq.n	8002980 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0201 	orr.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800298e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2221      	movs	r2, #33	@ 0x21
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2240      	movs	r2, #64	@ 0x40
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6a3a      	ldr	r2, [r7, #32]
 80029aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80029b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4a4d      	ldr	r2, [pc, #308]	@ (8002af4 <HAL_I2C_Mem_Write+0x1f0>)
 80029c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029c2:	88f8      	ldrh	r0, [r7, #6]
 80029c4:	893a      	ldrh	r2, [r7, #8]
 80029c6:	8979      	ldrh	r1, [r7, #10]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	9301      	str	r3, [sp, #4]
 80029cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	4603      	mov	r3, r0
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 fbf0 	bl	80031b8 <I2C_RequestMemoryWrite>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d052      	beq.n	8002a84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e081      	b.n	8002ae6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 fe7e 	bl	80036e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00d      	beq.n	8002a0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d107      	bne.n	8002a0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e06b      	b.n	8002ae6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a12:	781a      	ldrb	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d11b      	bne.n	8002a84 <HAL_I2C_Mem_Write+0x180>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d017      	beq.n	8002a84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a58:	781a      	ldrb	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1aa      	bne.n	80029e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 fe71 	bl	8003778 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00d      	beq.n	8002ab8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d107      	bne.n	8002ab4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ab2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e016      	b.n	8002ae6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2220      	movs	r2, #32
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	e000      	b.n	8002ae6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ae4:	2302      	movs	r3, #2
  }
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	00100002 	.word	0x00100002
 8002af4:	ffff0000 	.word	0xffff0000

08002af8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08c      	sub	sp, #48	@ 0x30
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	4608      	mov	r0, r1
 8002b02:	4611      	mov	r1, r2
 8002b04:	461a      	mov	r2, r3
 8002b06:	4603      	mov	r3, r0
 8002b08:	817b      	strh	r3, [r7, #10]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	813b      	strh	r3, [r7, #8]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b12:	f7ff fa91 	bl	8002038 <HAL_GetTick>
 8002b16:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	f040 8214 	bne.w	8002f4e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	2319      	movs	r3, #25
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	497b      	ldr	r1, [pc, #492]	@ (8002d1c <HAL_I2C_Mem_Read+0x224>)
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 fcbf 	bl	80034b4 <I2C_WaitOnFlagUntilTimeout>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e207      	b.n	8002f50 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_I2C_Mem_Read+0x56>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e200      	b.n	8002f50 <HAL_I2C_Mem_Read+0x458>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d007      	beq.n	8002b74 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2222      	movs	r2, #34	@ 0x22
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2240      	movs	r2, #64	@ 0x40
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002ba4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4a5b      	ldr	r2, [pc, #364]	@ (8002d20 <HAL_I2C_Mem_Read+0x228>)
 8002bb4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bb6:	88f8      	ldrh	r0, [r7, #6]
 8002bb8:	893a      	ldrh	r2, [r7, #8]
 8002bba:	8979      	ldrh	r1, [r7, #10]
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbe:	9301      	str	r3, [sp, #4]
 8002bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 fb8c 	bl	80032e4 <I2C_RequestMemoryRead>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e1bc      	b.n	8002f50 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d113      	bne.n	8002c06 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bde:	2300      	movs	r3, #0
 8002be0:	623b      	str	r3, [r7, #32]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	623b      	str	r3, [r7, #32]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	623b      	str	r3, [r7, #32]
 8002bf2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	e190      	b.n	8002f28 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d11b      	bne.n	8002c46 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61fb      	str	r3, [r7, #28]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	61fb      	str	r3, [r7, #28]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	61fb      	str	r3, [r7, #28]
 8002c32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	e170      	b.n	8002f28 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d11b      	bne.n	8002c86 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61bb      	str	r3, [r7, #24]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	61bb      	str	r3, [r7, #24]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	61bb      	str	r3, [r7, #24]
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	e150      	b.n	8002f28 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c9c:	e144      	b.n	8002f28 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	f200 80f1 	bhi.w	8002e8a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d123      	bne.n	8002cf8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cb2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 fda7 	bl	8003808 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e145      	b.n	8002f50 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691a      	ldr	r2, [r3, #16]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002cf6:	e117      	b.n	8002f28 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d14e      	bne.n	8002d9e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d06:	2200      	movs	r2, #0
 8002d08:	4906      	ldr	r1, [pc, #24]	@ (8002d24 <HAL_I2C_Mem_Read+0x22c>)
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 fbd2 	bl	80034b4 <I2C_WaitOnFlagUntilTimeout>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d008      	beq.n	8002d28 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e11a      	b.n	8002f50 <HAL_I2C_Mem_Read+0x458>
 8002d1a:	bf00      	nop
 8002d1c:	00100002 	.word	0x00100002
 8002d20:	ffff0000 	.word	0xffff0000
 8002d24:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691a      	ldr	r2, [r3, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d9c:	e0c4      	b.n	8002f28 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da4:	2200      	movs	r2, #0
 8002da6:	496c      	ldr	r1, [pc, #432]	@ (8002f58 <HAL_I2C_Mem_Read+0x460>)
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 fb83 	bl	80034b4 <I2C_WaitOnFlagUntilTimeout>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0cb      	b.n	8002f50 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691a      	ldr	r2, [r3, #16]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e00:	2200      	movs	r2, #0
 8002e02:	4955      	ldr	r1, [pc, #340]	@ (8002f58 <HAL_I2C_Mem_Read+0x460>)
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 fb55 	bl	80034b4 <I2C_WaitOnFlagUntilTimeout>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e09d      	b.n	8002f50 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691a      	ldr	r2, [r3, #16]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e88:	e04e      	b.n	8002f28 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e8c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 fcba 	bl	8003808 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e058      	b.n	8002f50 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d124      	bne.n	8002f28 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d107      	bne.n	8002ef6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ef4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f47f aeb6 	bne.w	8002c9e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	e000      	b.n	8002f50 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002f4e:	2302      	movs	r3, #2
  }
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3728      	adds	r7, #40	@ 0x28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	00010004 	.word	0x00010004

08002f5c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08a      	sub	sp, #40	@ 0x28
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	607a      	str	r2, [r7, #4]
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002f6c:	f7ff f864 	bl	8002038 <HAL_GetTick>
 8002f70:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	f040 8111 	bne.w	80031a6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	2319      	movs	r3, #25
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	4988      	ldr	r1, [pc, #544]	@ (80031b0 <HAL_I2C_IsDeviceReady+0x254>)
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 fa90 	bl	80034b4 <I2C_WaitOnFlagUntilTimeout>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e104      	b.n	80031a8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_I2C_IsDeviceReady+0x50>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e0fd      	b.n	80031a8 <HAL_I2C_IsDeviceReady+0x24c>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d007      	beq.n	8002fd2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f042 0201 	orr.w	r2, r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fe0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2224      	movs	r2, #36	@ 0x24
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4a70      	ldr	r2, [pc, #448]	@ (80031b4 <HAL_I2C_IsDeviceReady+0x258>)
 8002ff4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003004:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2200      	movs	r2, #0
 800300e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 fa4e 	bl	80034b4 <I2C_WaitOnFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00d      	beq.n	800303a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003028:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800302c:	d103      	bne.n	8003036 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003034:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e0b6      	b.n	80031a8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800303a:	897b      	ldrh	r3, [r7, #10]
 800303c:	b2db      	uxtb	r3, r3
 800303e:	461a      	mov	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003048:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800304a:	f7fe fff5 	bl	8002038 <HAL_GetTick>
 800304e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b02      	cmp	r3, #2
 800305c:	bf0c      	ite	eq
 800305e:	2301      	moveq	r3, #1
 8003060:	2300      	movne	r3, #0
 8003062:	b2db      	uxtb	r3, r3
 8003064:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003070:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003074:	bf0c      	ite	eq
 8003076:	2301      	moveq	r3, #1
 8003078:	2300      	movne	r3, #0
 800307a:	b2db      	uxtb	r3, r3
 800307c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800307e:	e025      	b.n	80030cc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003080:	f7fe ffda 	bl	8002038 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d302      	bcc.n	8003096 <HAL_I2C_IsDeviceReady+0x13a>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d103      	bne.n	800309e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	22a0      	movs	r2, #160	@ 0xa0
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	bf0c      	ite	eq
 80030ac:	2301      	moveq	r3, #1
 80030ae:	2300      	movne	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030c2:	bf0c      	ite	eq
 80030c4:	2301      	moveq	r3, #1
 80030c6:	2300      	movne	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2ba0      	cmp	r3, #160	@ 0xa0
 80030d6:	d005      	beq.n	80030e4 <HAL_I2C_IsDeviceReady+0x188>
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <HAL_I2C_IsDeviceReady+0x188>
 80030de:	7dbb      	ldrb	r3, [r7, #22]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0cd      	beq.n	8003080 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d129      	bne.n	800314e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003108:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	2319      	movs	r3, #25
 8003126:	2201      	movs	r2, #1
 8003128:	4921      	ldr	r1, [pc, #132]	@ (80031b0 <HAL_I2C_IsDeviceReady+0x254>)
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 f9c2 	bl	80034b4 <I2C_WaitOnFlagUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e036      	b.n	80031a8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	e02c      	b.n	80031a8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800315c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003166:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	2319      	movs	r3, #25
 800316e:	2201      	movs	r2, #1
 8003170:	490f      	ldr	r1, [pc, #60]	@ (80031b0 <HAL_I2C_IsDeviceReady+0x254>)
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f99e 	bl	80034b4 <I2C_WaitOnFlagUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e012      	b.n	80031a8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	3301      	adds	r3, #1
 8003186:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	429a      	cmp	r2, r3
 800318e:	f4ff af32 	bcc.w	8002ff6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80031a6:	2302      	movs	r3, #2
  }
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3720      	adds	r7, #32
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	00100002 	.word	0x00100002
 80031b4:	ffff0000 	.word	0xffff0000

080031b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b088      	sub	sp, #32
 80031bc:	af02      	add	r7, sp, #8
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	4608      	mov	r0, r1
 80031c2:	4611      	mov	r1, r2
 80031c4:	461a      	mov	r2, r3
 80031c6:	4603      	mov	r3, r0
 80031c8:	817b      	strh	r3, [r7, #10]
 80031ca:	460b      	mov	r3, r1
 80031cc:	813b      	strh	r3, [r7, #8]
 80031ce:	4613      	mov	r3, r2
 80031d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f960 	bl	80034b4 <I2C_WaitOnFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00d      	beq.n	8003216 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003204:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003208:	d103      	bne.n	8003212 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003210:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e05f      	b.n	80032d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003216:	897b      	ldrh	r3, [r7, #10]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	461a      	mov	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003224:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003228:	6a3a      	ldr	r2, [r7, #32]
 800322a:	492d      	ldr	r1, [pc, #180]	@ (80032e0 <I2C_RequestMemoryWrite+0x128>)
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 f9bb 	bl	80035a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e04c      	b.n	80032d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003254:	6a39      	ldr	r1, [r7, #32]
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 fa46 	bl	80036e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00d      	beq.n	800327e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003266:	2b04      	cmp	r3, #4
 8003268:	d107      	bne.n	800327a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003278:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e02b      	b.n	80032d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800327e:	88fb      	ldrh	r3, [r7, #6]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d105      	bne.n	8003290 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003284:	893b      	ldrh	r3, [r7, #8]
 8003286:	b2da      	uxtb	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	611a      	str	r2, [r3, #16]
 800328e:	e021      	b.n	80032d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003290:	893b      	ldrh	r3, [r7, #8]
 8003292:	0a1b      	lsrs	r3, r3, #8
 8003294:	b29b      	uxth	r3, r3
 8003296:	b2da      	uxtb	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800329e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032a0:	6a39      	ldr	r1, [r7, #32]
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 fa20 	bl	80036e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00d      	beq.n	80032ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d107      	bne.n	80032c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e005      	b.n	80032d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032ca:	893b      	ldrh	r3, [r7, #8]
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	00010002 	.word	0x00010002

080032e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b088      	sub	sp, #32
 80032e8:	af02      	add	r7, sp, #8
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	4608      	mov	r0, r1
 80032ee:	4611      	mov	r1, r2
 80032f0:	461a      	mov	r2, r3
 80032f2:	4603      	mov	r3, r0
 80032f4:	817b      	strh	r3, [r7, #10]
 80032f6:	460b      	mov	r3, r1
 80032f8:	813b      	strh	r3, [r7, #8]
 80032fa:	4613      	mov	r3, r2
 80032fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800330c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800331c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800331e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	2200      	movs	r2, #0
 8003326:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 f8c2 	bl	80034b4 <I2C_WaitOnFlagUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00d      	beq.n	8003352 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003340:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003344:	d103      	bne.n	800334e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800334c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e0aa      	b.n	80034a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003352:	897b      	ldrh	r3, [r7, #10]
 8003354:	b2db      	uxtb	r3, r3
 8003356:	461a      	mov	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003360:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003364:	6a3a      	ldr	r2, [r7, #32]
 8003366:	4952      	ldr	r1, [pc, #328]	@ (80034b0 <I2C_RequestMemoryRead+0x1cc>)
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 f91d 	bl	80035a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e097      	b.n	80034a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003378:	2300      	movs	r3, #0
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800338e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003390:	6a39      	ldr	r1, [r7, #32]
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f9a8 	bl	80036e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00d      	beq.n	80033ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d107      	bne.n	80033b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e076      	b.n	80034a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033ba:	88fb      	ldrh	r3, [r7, #6]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d105      	bne.n	80033cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033c0:	893b      	ldrh	r3, [r7, #8]
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	611a      	str	r2, [r3, #16]
 80033ca:	e021      	b.n	8003410 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033cc:	893b      	ldrh	r3, [r7, #8]
 80033ce:	0a1b      	lsrs	r3, r3, #8
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033dc:	6a39      	ldr	r1, [r7, #32]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 f982 	bl	80036e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00d      	beq.n	8003406 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d107      	bne.n	8003402 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003400:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e050      	b.n	80034a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003406:	893b      	ldrh	r3, [r7, #8]
 8003408:	b2da      	uxtb	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003412:	6a39      	ldr	r1, [r7, #32]
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 f967 	bl	80036e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00d      	beq.n	800343c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003424:	2b04      	cmp	r3, #4
 8003426:	d107      	bne.n	8003438 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003436:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e035      	b.n	80034a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800344a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800344c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	2200      	movs	r2, #0
 8003454:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 f82b 	bl	80034b4 <I2C_WaitOnFlagUntilTimeout>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00d      	beq.n	8003480 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800346e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003472:	d103      	bne.n	800347c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800347a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e013      	b.n	80034a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003480:	897b      	ldrh	r3, [r7, #10]
 8003482:	b2db      	uxtb	r3, r3
 8003484:	f043 0301 	orr.w	r3, r3, #1
 8003488:	b2da      	uxtb	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003492:	6a3a      	ldr	r2, [r7, #32]
 8003494:	4906      	ldr	r1, [pc, #24]	@ (80034b0 <I2C_RequestMemoryRead+0x1cc>)
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f886 	bl	80035a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	00010002 	.word	0x00010002

080034b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	4613      	mov	r3, r2
 80034c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034c4:	e048      	b.n	8003558 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034cc:	d044      	beq.n	8003558 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ce:	f7fe fdb3 	bl	8002038 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d302      	bcc.n	80034e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d139      	bne.n	8003558 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	0c1b      	lsrs	r3, r3, #16
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d10d      	bne.n	800350a <I2C_WaitOnFlagUntilTimeout+0x56>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	43da      	mvns	r2, r3
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	4013      	ands	r3, r2
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	bf0c      	ite	eq
 8003500:	2301      	moveq	r3, #1
 8003502:	2300      	movne	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	461a      	mov	r2, r3
 8003508:	e00c      	b.n	8003524 <I2C_WaitOnFlagUntilTimeout+0x70>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	43da      	mvns	r2, r3
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	4013      	ands	r3, r2
 8003516:	b29b      	uxth	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	bf0c      	ite	eq
 800351c:	2301      	moveq	r3, #1
 800351e:	2300      	movne	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	429a      	cmp	r2, r3
 8003528:	d116      	bne.n	8003558 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003544:	f043 0220 	orr.w	r2, r3, #32
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e023      	b.n	80035a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	0c1b      	lsrs	r3, r3, #16
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b01      	cmp	r3, #1
 8003560:	d10d      	bne.n	800357e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	43da      	mvns	r2, r3
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	4013      	ands	r3, r2
 800356e:	b29b      	uxth	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	bf0c      	ite	eq
 8003574:	2301      	moveq	r3, #1
 8003576:	2300      	movne	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	461a      	mov	r2, r3
 800357c:	e00c      	b.n	8003598 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	43da      	mvns	r2, r3
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	4013      	ands	r3, r2
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	bf0c      	ite	eq
 8003590:	2301      	moveq	r3, #1
 8003592:	2300      	movne	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	461a      	mov	r2, r3
 8003598:	79fb      	ldrb	r3, [r7, #7]
 800359a:	429a      	cmp	r2, r3
 800359c:	d093      	beq.n	80034c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035b6:	e071      	b.n	800369c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035c6:	d123      	bne.n	8003610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fc:	f043 0204 	orr.w	r2, r3, #4
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e067      	b.n	80036e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003616:	d041      	beq.n	800369c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003618:	f7fe fd0e 	bl	8002038 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	429a      	cmp	r2, r3
 8003626:	d302      	bcc.n	800362e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d136      	bne.n	800369c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	0c1b      	lsrs	r3, r3, #16
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b01      	cmp	r3, #1
 8003636:	d10c      	bne.n	8003652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	43da      	mvns	r2, r3
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	4013      	ands	r3, r2
 8003644:	b29b      	uxth	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	bf14      	ite	ne
 800364a:	2301      	movne	r3, #1
 800364c:	2300      	moveq	r3, #0
 800364e:	b2db      	uxtb	r3, r3
 8003650:	e00b      	b.n	800366a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	43da      	mvns	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4013      	ands	r3, r2
 800365e:	b29b      	uxth	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	bf14      	ite	ne
 8003664:	2301      	movne	r3, #1
 8003666:	2300      	moveq	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d016      	beq.n	800369c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003688:	f043 0220 	orr.w	r2, r3, #32
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e021      	b.n	80036e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	0c1b      	lsrs	r3, r3, #16
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d10c      	bne.n	80036c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	43da      	mvns	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4013      	ands	r3, r2
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bf14      	ite	ne
 80036b8:	2301      	movne	r3, #1
 80036ba:	2300      	moveq	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	e00b      	b.n	80036d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	43da      	mvns	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4013      	ands	r3, r2
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	bf14      	ite	ne
 80036d2:	2301      	movne	r3, #1
 80036d4:	2300      	moveq	r3, #0
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f47f af6d 	bne.w	80035b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036f4:	e034      	b.n	8003760 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f8e3 	bl	80038c2 <I2C_IsAcknowledgeFailed>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e034      	b.n	8003770 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370c:	d028      	beq.n	8003760 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800370e:	f7fe fc93 	bl	8002038 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	429a      	cmp	r2, r3
 800371c:	d302      	bcc.n	8003724 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d11d      	bne.n	8003760 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800372e:	2b80      	cmp	r3, #128	@ 0x80
 8003730:	d016      	beq.n	8003760 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374c:	f043 0220 	orr.w	r2, r3, #32
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e007      	b.n	8003770 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800376a:	2b80      	cmp	r3, #128	@ 0x80
 800376c:	d1c3      	bne.n	80036f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003784:	e034      	b.n	80037f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 f89b 	bl	80038c2 <I2C_IsAcknowledgeFailed>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e034      	b.n	8003800 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379c:	d028      	beq.n	80037f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379e:	f7fe fc4b 	bl	8002038 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d302      	bcc.n	80037b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d11d      	bne.n	80037f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d016      	beq.n	80037f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037dc:	f043 0220 	orr.w	r2, r3, #32
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e007      	b.n	8003800 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d1c3      	bne.n	8003786 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003814:	e049      	b.n	80038aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b10      	cmp	r3, #16
 8003822:	d119      	bne.n	8003858 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0210 	mvn.w	r2, #16
 800382c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e030      	b.n	80038ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003858:	f7fe fbee 	bl	8002038 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	429a      	cmp	r2, r3
 8003866:	d302      	bcc.n	800386e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d11d      	bne.n	80038aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003878:	2b40      	cmp	r3, #64	@ 0x40
 800387a:	d016      	beq.n	80038aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2220      	movs	r2, #32
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003896:	f043 0220 	orr.w	r2, r3, #32
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e007      	b.n	80038ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b4:	2b40      	cmp	r3, #64	@ 0x40
 80038b6:	d1ae      	bne.n	8003816 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038d8:	d11b      	bne.n	8003912 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fe:	f043 0204 	orr.w	r2, r3, #4
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af02      	add	r7, sp, #8
 8003926:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e101      	b.n	8003b36 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d106      	bne.n	8003952 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f005 fca1 	bl	8009294 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2203      	movs	r2, #3
 8003956:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003960:	d102      	bne.n	8003968 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f002 fbcc 	bl	800610a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	7c1a      	ldrb	r2, [r3, #16]
 800397a:	f88d 2000 	strb.w	r2, [sp]
 800397e:	3304      	adds	r3, #4
 8003980:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003982:	f002 faab 	bl	8005edc <USB_CoreInit>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e0ce      	b.n	8003b36 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2100      	movs	r1, #0
 800399e:	4618      	mov	r0, r3
 80039a0:	f002 fbc4 	bl	800612c <USB_SetCurrentMode>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d005      	beq.n	80039b6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2202      	movs	r2, #2
 80039ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e0bf      	b.n	8003b36 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039b6:	2300      	movs	r3, #0
 80039b8:	73fb      	strb	r3, [r7, #15]
 80039ba:	e04a      	b.n	8003a52 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039bc:	7bfa      	ldrb	r2, [r7, #15]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4413      	add	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	3315      	adds	r3, #21
 80039cc:	2201      	movs	r2, #1
 80039ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039d0:	7bfa      	ldrb	r2, [r7, #15]
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	4613      	mov	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	4413      	add	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	3314      	adds	r3, #20
 80039e0:	7bfa      	ldrb	r2, [r7, #15]
 80039e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039e4:	7bfa      	ldrb	r2, [r7, #15]
 80039e6:	7bfb      	ldrb	r3, [r7, #15]
 80039e8:	b298      	uxth	r0, r3
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	4613      	mov	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	4413      	add	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	332e      	adds	r3, #46	@ 0x2e
 80039f8:	4602      	mov	r2, r0
 80039fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039fc:	7bfa      	ldrb	r2, [r7, #15]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	4413      	add	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	3318      	adds	r3, #24
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a10:	7bfa      	ldrb	r2, [r7, #15]
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	331c      	adds	r3, #28
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a24:	7bfa      	ldrb	r2, [r7, #15]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	3320      	adds	r3, #32
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a38:	7bfa      	ldrb	r2, [r7, #15]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	3324      	adds	r3, #36	@ 0x24
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	73fb      	strb	r3, [r7, #15]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	791b      	ldrb	r3, [r3, #4]
 8003a56:	7bfa      	ldrb	r2, [r7, #15]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d3af      	bcc.n	80039bc <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	73fb      	strb	r3, [r7, #15]
 8003a60:	e044      	b.n	8003aec <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a62:	7bfa      	ldrb	r2, [r7, #15]
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a78:	7bfa      	ldrb	r2, [r7, #15]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003a8a:	7bfa      	ldrb	r2, [r7, #15]
 8003a8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a8e:	7bfa      	ldrb	r2, [r7, #15]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003aa4:	7bfa      	ldrb	r2, [r7, #15]
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4413      	add	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003aba:	7bfa      	ldrb	r2, [r7, #15]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	4413      	add	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ad0:	7bfa      	ldrb	r2, [r7, #15]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	73fb      	strb	r3, [r7, #15]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	791b      	ldrb	r3, [r3, #4]
 8003af0:	7bfa      	ldrb	r2, [r7, #15]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d3b5      	bcc.n	8003a62 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	7c1a      	ldrb	r2, [r3, #16]
 8003afe:	f88d 2000 	strb.w	r2, [sp]
 8003b02:	3304      	adds	r3, #4
 8003b04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b06:	f002 fb5d 	bl	80061c4 <USB_DevInit>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e00c      	b.n	8003b36 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f003 fba7 	bl	8007282 <USB_DevDisconnect>

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b084      	sub	sp, #16
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d101      	bne.n	8003b5a <HAL_PCD_Start+0x1c>
 8003b56:	2302      	movs	r3, #2
 8003b58:	e022      	b.n	8003ba0 <HAL_PCD_Start+0x62>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d105      	bne.n	8003b82 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b7a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f002 faae 	bl	80060e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f003 fb55 	bl	8007240 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003ba8:	b590      	push	{r4, r7, lr}
 8003baa:	b08d      	sub	sp, #52	@ 0x34
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f003 fc13 	bl	80073ea <USB_GetMode>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f040 848c 	bne.w	80044e4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f003 fb77 	bl	80072c4 <USB_ReadInterrupts>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 8482 	beq.w	80044e2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	0a1b      	lsrs	r3, r3, #8
 8003be8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f003 fb64 	bl	80072c4 <USB_ReadInterrupts>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d107      	bne.n	8003c16 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695a      	ldr	r2, [r3, #20]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f002 0202 	and.w	r2, r2, #2
 8003c14:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f003 fb52 	bl	80072c4 <USB_ReadInterrupts>
 8003c20:	4603      	mov	r3, r0
 8003c22:	f003 0310 	and.w	r3, r3, #16
 8003c26:	2b10      	cmp	r3, #16
 8003c28:	d161      	bne.n	8003cee <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699a      	ldr	r2, [r3, #24]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0210 	bic.w	r2, r2, #16
 8003c38:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	f003 020f 	and.w	r2, r3, #15
 8003c46:	4613      	mov	r3, r2
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	4413      	add	r3, r2
 8003c56:	3304      	adds	r3, #4
 8003c58:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003c60:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c64:	d124      	bne.n	8003cb0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d035      	beq.n	8003cde <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	091b      	lsrs	r3, r3, #4
 8003c7a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	461a      	mov	r2, r3
 8003c84:	6a38      	ldr	r0, [r7, #32]
 8003c86:	f003 f989 	bl	8006f9c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	091b      	lsrs	r3, r3, #4
 8003c92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c96:	441a      	add	r2, r3
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	695a      	ldr	r2, [r3, #20]
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	091b      	lsrs	r3, r3, #4
 8003ca4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ca8:	441a      	add	r2, r3
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	615a      	str	r2, [r3, #20]
 8003cae:	e016      	b.n	8003cde <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003cb6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003cba:	d110      	bne.n	8003cde <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003cc2:	2208      	movs	r2, #8
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	6a38      	ldr	r0, [r7, #32]
 8003cc8:	f003 f968 	bl	8006f9c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	695a      	ldr	r2, [r3, #20]
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cd8:	441a      	add	r2, r3
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699a      	ldr	r2, [r3, #24]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 0210 	orr.w	r2, r2, #16
 8003cec:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f003 fae6 	bl	80072c4 <USB_ReadInterrupts>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cfe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d02:	f040 80a7 	bne.w	8003e54 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f003 faeb 	bl	80072ea <USB_ReadDevAllOutEpInterrupt>
 8003d14:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003d16:	e099      	b.n	8003e4c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 808e 	beq.w	8003e40 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f003 fb0f 	bl	8007352 <USB_ReadDevOutEPInterrupt>
 8003d34:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00c      	beq.n	8003d5a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	2301      	movs	r3, #1
 8003d50:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003d52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 fe8b 	bl	8004a70 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00c      	beq.n	8003d7e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d70:	461a      	mov	r2, r3
 8003d72:	2308      	movs	r3, #8
 8003d74:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003d76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 ff61 	bl	8004c40 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f003 0310 	and.w	r3, r3, #16
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d008      	beq.n	8003d9a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d94:	461a      	mov	r2, r3
 8003d96:	2310      	movs	r3, #16
 8003d98:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d030      	beq.n	8003e06 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dac:	2b80      	cmp	r3, #128	@ 0x80
 8003dae:	d109      	bne.n	8003dc4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	69fa      	ldr	r2, [r7, #28]
 8003dba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003dbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003dc2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003dc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	78db      	ldrb	r3, [r3, #3]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d108      	bne.n	8003df4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2200      	movs	r2, #0
 8003de6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	4619      	mov	r1, r3
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f005 fb56 	bl	80094a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e00:	461a      	mov	r2, r3
 8003e02:	2302      	movs	r3, #2
 8003e04:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	2320      	movs	r3, #32
 8003e20:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d009      	beq.n	8003e40 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e38:	461a      	mov	r2, r3
 8003e3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e3e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e42:	3301      	adds	r3, #1
 8003e44:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e48:	085b      	lsrs	r3, r3, #1
 8003e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f47f af62 	bne.w	8003d18 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f003 fa33 	bl	80072c4 <USB_ReadInterrupts>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e68:	f040 80db 	bne.w	8004022 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f003 fa54 	bl	800731e <USB_ReadDevAllInEpInterrupt>
 8003e76:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003e7c:	e0cd      	b.n	800401a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 80c2 	beq.w	800400e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	4611      	mov	r1, r2
 8003e94:	4618      	mov	r0, r3
 8003e96:	f003 fa7a 	bl	800738e <USB_ReadDevInEPInterrupt>
 8003e9a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d057      	beq.n	8003f56 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea8:	f003 030f 	and.w	r3, r3, #15
 8003eac:	2201      	movs	r2, #1
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	69f9      	ldr	r1, [r7, #28]
 8003ec2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	2301      	movs	r3, #1
 8003eda:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	799b      	ldrb	r3, [r3, #6]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d132      	bne.n	8003f4a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ee8:	4613      	mov	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	3320      	adds	r3, #32
 8003ef4:	6819      	ldr	r1, [r3, #0]
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4403      	add	r3, r0
 8003f04:	331c      	adds	r3, #28
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4419      	add	r1, r3
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f0e:	4613      	mov	r3, r2
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	4413      	add	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4403      	add	r3, r0
 8003f18:	3320      	adds	r3, #32
 8003f1a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d113      	bne.n	8003f4a <HAL_PCD_IRQHandler+0x3a2>
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f26:	4613      	mov	r3, r2
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	3324      	adds	r3, #36	@ 0x24
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d108      	bne.n	8003f4a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6818      	ldr	r0, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f42:	461a      	mov	r2, r3
 8003f44:	2101      	movs	r1, #1
 8003f46:	f003 fa81 	bl	800744c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	4619      	mov	r1, r3
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f005 fa20 	bl	8009396 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f003 0308 	and.w	r3, r3, #8
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d008      	beq.n	8003f72 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	2308      	movs	r3, #8
 8003f70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	f003 0310 	and.w	r3, r3, #16
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d008      	beq.n	8003f8e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f88:	461a      	mov	r2, r3
 8003f8a:	2310      	movs	r3, #16
 8003f8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	2340      	movs	r3, #64	@ 0x40
 8003fa8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d023      	beq.n	8003ffc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003fb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fb6:	6a38      	ldr	r0, [r7, #32]
 8003fb8:	f002 fa68 	bl	800648c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003fbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	4413      	add	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	3310      	adds	r3, #16
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	4413      	add	r3, r2
 8003fcc:	3304      	adds	r3, #4
 8003fce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	78db      	ldrb	r3, [r3, #3]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d108      	bne.n	8003fea <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f005 fa6d 	bl	80094c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004006:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 fca5 	bl	8004958 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800400e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004010:	3301      	adds	r3, #1
 8004012:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004016:	085b      	lsrs	r3, r3, #1
 8004018:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800401a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800401c:	2b00      	cmp	r3, #0
 800401e:	f47f af2e 	bne.w	8003e7e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f003 f94c 	bl	80072c4 <USB_ReadInterrupts>
 800402c:	4603      	mov	r3, r0
 800402e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004032:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004036:	d122      	bne.n	800407e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	69fa      	ldr	r2, [r7, #28]
 8004042:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004046:	f023 0301 	bic.w	r3, r3, #1
 800404a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004052:	2b01      	cmp	r3, #1
 8004054:	d108      	bne.n	8004068 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800405e:	2100      	movs	r1, #0
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 fe8b 	bl	8004d7c <HAL_PCDEx_LPM_Callback>
 8004066:	e002      	b.n	800406e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f005 fa0b 	bl	8009484 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695a      	ldr	r2, [r3, #20]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800407c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f003 f91e 	bl	80072c4 <USB_ReadInterrupts>
 8004088:	4603      	mov	r3, r0
 800408a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800408e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004092:	d112      	bne.n	80040ba <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d102      	bne.n	80040aa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f005 f9c7 	bl	8009438 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695a      	ldr	r2, [r3, #20]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80040b8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f003 f900 	bl	80072c4 <USB_ReadInterrupts>
 80040c4:	4603      	mov	r3, r0
 80040c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040ce:	f040 80b7 	bne.w	8004240 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	69fa      	ldr	r2, [r7, #28]
 80040dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040e0:	f023 0301 	bic.w	r3, r3, #1
 80040e4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2110      	movs	r1, #16
 80040ec:	4618      	mov	r0, r3
 80040ee:	f002 f9cd 	bl	800648c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040f2:	2300      	movs	r3, #0
 80040f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040f6:	e046      	b.n	8004186 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80040f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004104:	461a      	mov	r2, r3
 8004106:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800410a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800410c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800411c:	0151      	lsls	r1, r2, #5
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	440a      	add	r2, r1
 8004122:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004126:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800412a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800412c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800412e:	015a      	lsls	r2, r3, #5
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	4413      	add	r3, r2
 8004134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004138:	461a      	mov	r2, r3
 800413a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800413e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004142:	015a      	lsls	r2, r3, #5
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	4413      	add	r3, r2
 8004148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004150:	0151      	lsls	r1, r2, #5
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	440a      	add	r2, r1
 8004156:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800415a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800415e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004170:	0151      	lsls	r1, r2, #5
 8004172:	69fa      	ldr	r2, [r7, #28]
 8004174:	440a      	add	r2, r1
 8004176:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800417a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800417e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004182:	3301      	adds	r3, #1
 8004184:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	791b      	ldrb	r3, [r3, #4]
 800418a:	461a      	mov	r2, r3
 800418c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800418e:	4293      	cmp	r3, r2
 8004190:	d3b2      	bcc.n	80040f8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	69fa      	ldr	r2, [r7, #28]
 800419c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041a0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80041a4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	7bdb      	ldrb	r3, [r3, #15]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d016      	beq.n	80041dc <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041b8:	69fa      	ldr	r2, [r7, #28]
 80041ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041be:	f043 030b 	orr.w	r3, r3, #11
 80041c2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ce:	69fa      	ldr	r2, [r7, #28]
 80041d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041d4:	f043 030b 	orr.w	r3, r3, #11
 80041d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80041da:	e015      	b.n	8004208 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	69fa      	ldr	r2, [r7, #28]
 80041e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80041ee:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80041f2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	69fa      	ldr	r2, [r7, #28]
 80041fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004202:	f043 030b 	orr.w	r3, r3, #11
 8004206:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004216:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800421a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6818      	ldr	r0, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800422a:	461a      	mov	r2, r3
 800422c:	f003 f90e 	bl	800744c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695a      	ldr	r2, [r3, #20]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800423e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f003 f83d 	bl	80072c4 <USB_ReadInterrupts>
 800424a:	4603      	mov	r3, r0
 800424c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004250:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004254:	d123      	bne.n	800429e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f003 f8d3 	bl	8007406 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f002 f98a 	bl	800657e <USB_GetDevSpeed>
 800426a:	4603      	mov	r3, r0
 800426c:	461a      	mov	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681c      	ldr	r4, [r3, #0]
 8004276:	f001 f9f1 	bl	800565c <HAL_RCC_GetHCLKFreq>
 800427a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004280:	461a      	mov	r2, r3
 8004282:	4620      	mov	r0, r4
 8004284:	f001 fe8e 	bl	8005fa4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f005 f8ac 	bl	80093e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695a      	ldr	r2, [r3, #20]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800429c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f003 f80e 	bl	80072c4 <USB_ReadInterrupts>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d10a      	bne.n	80042c8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f005 f889 	bl	80093ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695a      	ldr	r2, [r3, #20]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f002 0208 	and.w	r2, r2, #8
 80042c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f002 fff9 	bl	80072c4 <USB_ReadInterrupts>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d8:	2b80      	cmp	r3, #128	@ 0x80
 80042da:	d123      	bne.n	8004324 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042e8:	2301      	movs	r3, #1
 80042ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ec:	e014      	b.n	8004318 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042f2:	4613      	mov	r3, r2
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	4413      	add	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	440b      	add	r3, r1
 80042fc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d105      	bne.n	8004312 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004308:	b2db      	uxtb	r3, r3
 800430a:	4619      	mov	r1, r3
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 faf2 	bl	80048f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004314:	3301      	adds	r3, #1
 8004316:	627b      	str	r3, [r7, #36]	@ 0x24
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	791b      	ldrb	r3, [r3, #4]
 800431c:	461a      	mov	r2, r3
 800431e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004320:	4293      	cmp	r3, r2
 8004322:	d3e4      	bcc.n	80042ee <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f002 ffcb 	bl	80072c4 <USB_ReadInterrupts>
 800432e:	4603      	mov	r3, r0
 8004330:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004334:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004338:	d13c      	bne.n	80043b4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800433a:	2301      	movs	r3, #1
 800433c:	627b      	str	r3, [r7, #36]	@ 0x24
 800433e:	e02b      	b.n	8004398 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004354:	4613      	mov	r3, r2
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	4413      	add	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	3318      	adds	r3, #24
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d115      	bne.n	8004392 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004366:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004368:	2b00      	cmp	r3, #0
 800436a:	da12      	bge.n	8004392 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004370:	4613      	mov	r3, r2
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	4413      	add	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	3317      	adds	r3, #23
 800437c:	2201      	movs	r2, #1
 800437e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004382:	b2db      	uxtb	r3, r3
 8004384:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004388:	b2db      	uxtb	r3, r3
 800438a:	4619      	mov	r1, r3
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fab2 	bl	80048f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	3301      	adds	r3, #1
 8004396:	627b      	str	r3, [r7, #36]	@ 0x24
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	791b      	ldrb	r3, [r3, #4]
 800439c:	461a      	mov	r2, r3
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d3cd      	bcc.n	8004340 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695a      	ldr	r2, [r3, #20]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80043b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f002 ff83 	bl	80072c4 <USB_ReadInterrupts>
 80043be:	4603      	mov	r3, r0
 80043c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043c8:	d156      	bne.n	8004478 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043ca:	2301      	movs	r3, #1
 80043cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ce:	e045      	b.n	800445c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80043d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043e4:	4613      	mov	r3, r2
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4413      	add	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	440b      	add	r3, r1
 80043ee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d12e      	bne.n	8004456 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80043f8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	da2b      	bge.n	8004456 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	0c1a      	lsrs	r2, r3, #16
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004408:	4053      	eors	r3, r2
 800440a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800440e:	2b00      	cmp	r3, #0
 8004410:	d121      	bne.n	8004456 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004416:	4613      	mov	r3, r2
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	4413      	add	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	440b      	add	r3, r1
 8004420:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004424:	2201      	movs	r2, #1
 8004426:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10a      	bne.n	8004456 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800444e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004452:	6053      	str	r3, [r2, #4]
            break;
 8004454:	e008      	b.n	8004468 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004458:	3301      	adds	r3, #1
 800445a:	627b      	str	r3, [r7, #36]	@ 0x24
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	791b      	ldrb	r3, [r3, #4]
 8004460:	461a      	mov	r2, r3
 8004462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004464:	4293      	cmp	r3, r2
 8004466:	d3b3      	bcc.n	80043d0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695a      	ldr	r2, [r3, #20]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004476:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4618      	mov	r0, r3
 800447e:	f002 ff21 	bl	80072c4 <USB_ReadInterrupts>
 8004482:	4603      	mov	r3, r0
 8004484:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800448c:	d10a      	bne.n	80044a4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f005 f82a 	bl	80094e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695a      	ldr	r2, [r3, #20]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80044a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f002 ff0b 	bl	80072c4 <USB_ReadInterrupts>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d115      	bne.n	80044e4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f005 f81a 	bl	8009504 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6859      	ldr	r1, [r3, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	430a      	orrs	r2, r1
 80044de:	605a      	str	r2, [r3, #4]
 80044e0:	e000      	b.n	80044e4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80044e2:	bf00      	nop
    }
  }
}
 80044e4:	3734      	adds	r7, #52	@ 0x34
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd90      	pop	{r4, r7, pc}

080044ea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b082      	sub	sp, #8
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
 80044f2:	460b      	mov	r3, r1
 80044f4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_PCD_SetAddress+0x1a>
 8004500:	2302      	movs	r3, #2
 8004502:	e012      	b.n	800452a <HAL_PCD_SetAddress+0x40>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	78fa      	ldrb	r2, [r7, #3]
 8004510:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	78fa      	ldrb	r2, [r7, #3]
 8004518:	4611      	mov	r1, r2
 800451a:	4618      	mov	r0, r3
 800451c:	f002 fe6a 	bl	80071f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b084      	sub	sp, #16
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
 800453a:	4608      	mov	r0, r1
 800453c:	4611      	mov	r1, r2
 800453e:	461a      	mov	r2, r3
 8004540:	4603      	mov	r3, r0
 8004542:	70fb      	strb	r3, [r7, #3]
 8004544:	460b      	mov	r3, r1
 8004546:	803b      	strh	r3, [r7, #0]
 8004548:	4613      	mov	r3, r2
 800454a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800454c:	2300      	movs	r3, #0
 800454e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004554:	2b00      	cmp	r3, #0
 8004556:	da0f      	bge.n	8004578 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004558:	78fb      	ldrb	r3, [r7, #3]
 800455a:	f003 020f 	and.w	r2, r3, #15
 800455e:	4613      	mov	r3, r2
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	4413      	add	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	3310      	adds	r3, #16
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	4413      	add	r3, r2
 800456c:	3304      	adds	r3, #4
 800456e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2201      	movs	r2, #1
 8004574:	705a      	strb	r2, [r3, #1]
 8004576:	e00f      	b.n	8004598 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	f003 020f 	and.w	r2, r3, #15
 800457e:	4613      	mov	r3, r2
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	4413      	add	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	4413      	add	r3, r2
 800458e:	3304      	adds	r3, #4
 8004590:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80045a4:	883b      	ldrh	r3, [r7, #0]
 80045a6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	78ba      	ldrb	r2, [r7, #2]
 80045b2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	785b      	ldrb	r3, [r3, #1]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d004      	beq.n	80045c6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	461a      	mov	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80045c6:	78bb      	ldrb	r3, [r7, #2]
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d102      	bne.n	80045d2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_PCD_EP_Open+0xae>
 80045dc:	2302      	movs	r3, #2
 80045de:	e00e      	b.n	80045fe <HAL_PCD_EP_Open+0xcc>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68f9      	ldr	r1, [r7, #12]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f001 ffea 	bl	80065c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80045fc:	7afb      	ldrb	r3, [r7, #11]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b084      	sub	sp, #16
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	460b      	mov	r3, r1
 8004610:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004612:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004616:	2b00      	cmp	r3, #0
 8004618:	da0f      	bge.n	800463a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800461a:	78fb      	ldrb	r3, [r7, #3]
 800461c:	f003 020f 	and.w	r2, r3, #15
 8004620:	4613      	mov	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	3310      	adds	r3, #16
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	4413      	add	r3, r2
 800462e:	3304      	adds	r3, #4
 8004630:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2201      	movs	r2, #1
 8004636:	705a      	strb	r2, [r3, #1]
 8004638:	e00f      	b.n	800465a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800463a:	78fb      	ldrb	r3, [r7, #3]
 800463c:	f003 020f 	and.w	r2, r3, #15
 8004640:	4613      	mov	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	4413      	add	r3, r2
 8004650:	3304      	adds	r3, #4
 8004652:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800465a:	78fb      	ldrb	r3, [r7, #3]
 800465c:	f003 030f 	and.w	r3, r3, #15
 8004660:	b2da      	uxtb	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_PCD_EP_Close+0x6e>
 8004670:	2302      	movs	r3, #2
 8004672:	e00e      	b.n	8004692 <HAL_PCD_EP_Close+0x8c>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68f9      	ldr	r1, [r7, #12]
 8004682:	4618      	mov	r0, r3
 8004684:	f002 f828 	bl	80066d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b086      	sub	sp, #24
 800469e:	af00      	add	r7, sp, #0
 80046a0:	60f8      	str	r0, [r7, #12]
 80046a2:	607a      	str	r2, [r7, #4]
 80046a4:	603b      	str	r3, [r7, #0]
 80046a6:	460b      	mov	r3, r1
 80046a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046aa:	7afb      	ldrb	r3, [r7, #11]
 80046ac:	f003 020f 	and.w	r2, r3, #15
 80046b0:	4613      	mov	r3, r2
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	4413      	add	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	4413      	add	r3, r2
 80046c0:	3304      	adds	r3, #4
 80046c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2200      	movs	r2, #0
 80046d4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2200      	movs	r2, #0
 80046da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046dc:	7afb      	ldrb	r3, [r7, #11]
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	799b      	ldrb	r3, [r3, #6]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d102      	bne.n	80046f6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	799b      	ldrb	r3, [r3, #6]
 80046fe:	461a      	mov	r2, r3
 8004700:	6979      	ldr	r1, [r7, #20]
 8004702:	f002 f8c5 	bl	8006890 <USB_EPStartXfer>

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	607a      	str	r2, [r7, #4]
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	460b      	mov	r3, r1
 800471e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004720:	7afb      	ldrb	r3, [r7, #11]
 8004722:	f003 020f 	and.w	r2, r3, #15
 8004726:	4613      	mov	r3, r2
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	4413      	add	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	3310      	adds	r3, #16
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4413      	add	r3, r2
 8004734:	3304      	adds	r3, #4
 8004736:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	2200      	movs	r2, #0
 8004748:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	2201      	movs	r2, #1
 800474e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004750:	7afb      	ldrb	r3, [r7, #11]
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	b2da      	uxtb	r2, r3
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	799b      	ldrb	r3, [r3, #6]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d102      	bne.n	800476a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6818      	ldr	r0, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	799b      	ldrb	r3, [r3, #6]
 8004772:	461a      	mov	r2, r3
 8004774:	6979      	ldr	r1, [r7, #20]
 8004776:	f002 f88b 	bl	8006890 <USB_EPStartXfer>

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3718      	adds	r7, #24
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004790:	78fb      	ldrb	r3, [r7, #3]
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	7912      	ldrb	r2, [r2, #4]
 800479a:	4293      	cmp	r3, r2
 800479c:	d901      	bls.n	80047a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e04f      	b.n	8004842 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80047a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	da0f      	bge.n	80047ca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047aa:	78fb      	ldrb	r3, [r7, #3]
 80047ac:	f003 020f 	and.w	r2, r3, #15
 80047b0:	4613      	mov	r3, r2
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	4413      	add	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	3310      	adds	r3, #16
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	4413      	add	r3, r2
 80047be:	3304      	adds	r3, #4
 80047c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	705a      	strb	r2, [r3, #1]
 80047c8:	e00d      	b.n	80047e6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80047ca:	78fa      	ldrb	r2, [r7, #3]
 80047cc:	4613      	mov	r3, r2
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	4413      	add	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	4413      	add	r3, r2
 80047dc:	3304      	adds	r3, #4
 80047de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2201      	movs	r2, #1
 80047ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047ec:	78fb      	ldrb	r3, [r7, #3]
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d101      	bne.n	8004806 <HAL_PCD_EP_SetStall+0x82>
 8004802:	2302      	movs	r3, #2
 8004804:	e01d      	b.n	8004842 <HAL_PCD_EP_SetStall+0xbe>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68f9      	ldr	r1, [r7, #12]
 8004814:	4618      	mov	r0, r3
 8004816:	f002 fc19 	bl	800704c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800481a:	78fb      	ldrb	r3, [r7, #3]
 800481c:	f003 030f 	and.w	r3, r3, #15
 8004820:	2b00      	cmp	r3, #0
 8004822:	d109      	bne.n	8004838 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	7999      	ldrb	r1, [r3, #6]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004832:	461a      	mov	r2, r3
 8004834:	f002 fe0a 	bl	800744c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b084      	sub	sp, #16
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	460b      	mov	r3, r1
 8004854:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004856:	78fb      	ldrb	r3, [r7, #3]
 8004858:	f003 030f 	and.w	r3, r3, #15
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	7912      	ldrb	r2, [r2, #4]
 8004860:	4293      	cmp	r3, r2
 8004862:	d901      	bls.n	8004868 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e042      	b.n	80048ee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800486c:	2b00      	cmp	r3, #0
 800486e:	da0f      	bge.n	8004890 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004870:	78fb      	ldrb	r3, [r7, #3]
 8004872:	f003 020f 	and.w	r2, r3, #15
 8004876:	4613      	mov	r3, r2
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	4413      	add	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	3310      	adds	r3, #16
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	4413      	add	r3, r2
 8004884:	3304      	adds	r3, #4
 8004886:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2201      	movs	r2, #1
 800488c:	705a      	strb	r2, [r3, #1]
 800488e:	e00f      	b.n	80048b0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004890:	78fb      	ldrb	r3, [r7, #3]
 8004892:	f003 020f 	and.w	r2, r3, #15
 8004896:	4613      	mov	r3, r2
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	4413      	add	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	4413      	add	r3, r2
 80048a6:	3304      	adds	r3, #4
 80048a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048b6:	78fb      	ldrb	r3, [r7, #3]
 80048b8:	f003 030f 	and.w	r3, r3, #15
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_PCD_EP_ClrStall+0x86>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e00e      	b.n	80048ee <HAL_PCD_EP_ClrStall+0xa4>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68f9      	ldr	r1, [r7, #12]
 80048de:	4618      	mov	r0, r3
 80048e0:	f002 fc22 	bl	8007128 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b084      	sub	sp, #16
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	460b      	mov	r3, r1
 8004900:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004902:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004906:	2b00      	cmp	r3, #0
 8004908:	da0c      	bge.n	8004924 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800490a:	78fb      	ldrb	r3, [r7, #3]
 800490c:	f003 020f 	and.w	r2, r3, #15
 8004910:	4613      	mov	r3, r2
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	4413      	add	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	3310      	adds	r3, #16
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	4413      	add	r3, r2
 800491e:	3304      	adds	r3, #4
 8004920:	60fb      	str	r3, [r7, #12]
 8004922:	e00c      	b.n	800493e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004924:	78fb      	ldrb	r3, [r7, #3]
 8004926:	f003 020f 	and.w	r2, r3, #15
 800492a:	4613      	mov	r3, r2
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	4413      	add	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	4413      	add	r3, r2
 800493a:	3304      	adds	r3, #4
 800493c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68f9      	ldr	r1, [r7, #12]
 8004944:	4618      	mov	r0, r3
 8004946:	f002 fa41 	bl	8006dcc <USB_EPStopXfer>
 800494a:	4603      	mov	r3, r0
 800494c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800494e:	7afb      	ldrb	r3, [r7, #11]
}
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b08a      	sub	sp, #40	@ 0x28
 800495c:	af02      	add	r7, sp, #8
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	4613      	mov	r3, r2
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	4413      	add	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	3310      	adds	r3, #16
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	4413      	add	r3, r2
 800497c:	3304      	adds	r3, #4
 800497e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	695a      	ldr	r2, [r3, #20]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	429a      	cmp	r2, r3
 800498a:	d901      	bls.n	8004990 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e06b      	b.n	8004a68 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	69fa      	ldr	r2, [r7, #28]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d902      	bls.n	80049ac <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	3303      	adds	r3, #3
 80049b0:	089b      	lsrs	r3, r3, #2
 80049b2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049b4:	e02a      	b.n	8004a0c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	691a      	ldr	r2, [r3, #16]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	69fa      	ldr	r2, [r7, #28]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d902      	bls.n	80049d2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	3303      	adds	r3, #3
 80049d6:	089b      	lsrs	r3, r3, #2
 80049d8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	68d9      	ldr	r1, [r3, #12]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	4603      	mov	r3, r0
 80049ee:	6978      	ldr	r0, [r7, #20]
 80049f0:	f002 fa96 	bl	8006f20 <USB_WritePacket>

    ep->xfer_buff  += len;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	68da      	ldr	r2, [r3, #12]
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	441a      	add	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	695a      	ldr	r2, [r3, #20]
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	441a      	add	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d809      	bhi.n	8004a36 <PCD_WriteEmptyTxFifo+0xde>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	695a      	ldr	r2, [r3, #20]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d203      	bcs.n	8004a36 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1bf      	bne.n	80049b6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	691a      	ldr	r2, [r3, #16]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d811      	bhi.n	8004a66 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	f003 030f 	and.w	r3, r3, #15
 8004a48:	2201      	movs	r2, #1
 8004a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	6939      	ldr	r1, [r7, #16]
 8004a5e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a62:	4013      	ands	r3, r2
 8004a64:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3720      	adds	r7, #32
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	333c      	adds	r3, #60	@ 0x3c
 8004a88:	3304      	adds	r3, #4
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	799b      	ldrb	r3, [r3, #6]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d17b      	bne.n	8004b9e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d015      	beq.n	8004adc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	4a61      	ldr	r2, [pc, #388]	@ (8004c38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	f240 80b9 	bls.w	8004c2c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 80b3 	beq.w	8004c2c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ad8:	6093      	str	r3, [r2, #8]
 8004ada:	e0a7      	b.n	8004c2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d009      	beq.n	8004afa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004af2:	461a      	mov	r2, r3
 8004af4:	2320      	movs	r3, #32
 8004af6:	6093      	str	r3, [r2, #8]
 8004af8:	e098      	b.n	8004c2c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f040 8093 	bne.w	8004c2c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	4a4b      	ldr	r2, [pc, #300]	@ (8004c38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d90f      	bls.n	8004b2e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b24:	461a      	mov	r2, r3
 8004b26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b2a:	6093      	str	r3, [r2, #8]
 8004b2c:	e07e      	b.n	8004c2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	4613      	mov	r3, r2
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	4413      	add	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	4413      	add	r3, r2
 8004b40:	3304      	adds	r3, #4
 8004b42:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a1a      	ldr	r2, [r3, #32]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	0159      	lsls	r1, r3, #5
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	440b      	add	r3, r1
 8004b50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b5a:	1ad2      	subs	r2, r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d114      	bne.n	8004b90 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d109      	bne.n	8004b82 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6818      	ldr	r0, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b78:	461a      	mov	r2, r3
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	f002 fc66 	bl	800744c <USB_EP0_OutStart>
 8004b80:	e006      	b.n	8004b90 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	441a      	add	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	4619      	mov	r1, r3
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f004 fbe2 	bl	8009360 <HAL_PCD_DataOutStageCallback>
 8004b9c:	e046      	b.n	8004c2c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	4a26      	ldr	r2, [pc, #152]	@ (8004c3c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d124      	bne.n	8004bf0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00a      	beq.n	8004bc6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bc2:	6093      	str	r3, [r2, #8]
 8004bc4:	e032      	b.n	8004c2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f003 0320 	and.w	r3, r3, #32
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d008      	beq.n	8004be2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bdc:	461a      	mov	r2, r3
 8004bde:	2320      	movs	r3, #32
 8004be0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	4619      	mov	r1, r3
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f004 fbb9 	bl	8009360 <HAL_PCD_DataOutStageCallback>
 8004bee:	e01d      	b.n	8004c2c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d114      	bne.n	8004c20 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004bf6:	6879      	ldr	r1, [r7, #4]
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	4413      	add	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	440b      	add	r3, r1
 8004c04:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d108      	bne.n	8004c20 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6818      	ldr	r0, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c18:	461a      	mov	r2, r3
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	f002 fc16 	bl	800744c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	4619      	mov	r1, r3
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f004 fb9a 	bl	8009360 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3720      	adds	r7, #32
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	4f54300a 	.word	0x4f54300a
 8004c3c:	4f54310a 	.word	0x4f54310a

08004c40 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	333c      	adds	r3, #60	@ 0x3c
 8004c58:	3304      	adds	r3, #4
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4a15      	ldr	r2, [pc, #84]	@ (8004cc8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d90e      	bls.n	8004c94 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d009      	beq.n	8004c94 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c92:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f004 fb51 	bl	800933c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d90c      	bls.n	8004cbc <PCD_EP_OutSetupPacket_int+0x7c>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	799b      	ldrb	r3, [r3, #6]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d108      	bne.n	8004cbc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6818      	ldr	r0, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	f002 fbc8 	bl	800744c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	4f54300a 	.word	0x4f54300a

08004ccc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	70fb      	strb	r3, [r7, #3]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d107      	bne.n	8004cfa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004cea:	883b      	ldrh	r3, [r7, #0]
 8004cec:	0419      	lsls	r1, r3, #16
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cf8:	e028      	b.n	8004d4c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d00:	0c1b      	lsrs	r3, r3, #16
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	4413      	add	r3, r2
 8004d06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004d08:	2300      	movs	r3, #0
 8004d0a:	73fb      	strb	r3, [r7, #15]
 8004d0c:	e00d      	b.n	8004d2a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	7bfb      	ldrb	r3, [r7, #15]
 8004d14:	3340      	adds	r3, #64	@ 0x40
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	0c1b      	lsrs	r3, r3, #16
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	4413      	add	r3, r2
 8004d22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
 8004d26:	3301      	adds	r3, #1
 8004d28:	73fb      	strb	r3, [r7, #15]
 8004d2a:	7bfa      	ldrb	r2, [r7, #15]
 8004d2c:	78fb      	ldrb	r3, [r7, #3]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d3ec      	bcc.n	8004d0e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004d34:	883b      	ldrh	r3, [r7, #0]
 8004d36:	0418      	lsls	r0, r3, #16
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6819      	ldr	r1, [r3, #0]
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	4302      	orrs	r2, r0
 8004d44:	3340      	adds	r3, #64	@ 0x40
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	440b      	add	r3, r1
 8004d4a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
 8004d62:	460b      	mov	r3, r1
 8004d64:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	887a      	ldrh	r2, [r7, #2]
 8004d6c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	460b      	mov	r3, r1
 8004d86:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e267      	b.n	8005276 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d075      	beq.n	8004e9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004db2:	4b88      	ldr	r3, [pc, #544]	@ (8004fd4 <HAL_RCC_OscConfig+0x240>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 030c 	and.w	r3, r3, #12
 8004dba:	2b04      	cmp	r3, #4
 8004dbc:	d00c      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dbe:	4b85      	ldr	r3, [pc, #532]	@ (8004fd4 <HAL_RCC_OscConfig+0x240>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d112      	bne.n	8004df0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dca:	4b82      	ldr	r3, [pc, #520]	@ (8004fd4 <HAL_RCC_OscConfig+0x240>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dd6:	d10b      	bne.n	8004df0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dd8:	4b7e      	ldr	r3, [pc, #504]	@ (8004fd4 <HAL_RCC_OscConfig+0x240>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d05b      	beq.n	8004e9c <HAL_RCC_OscConfig+0x108>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d157      	bne.n	8004e9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e242      	b.n	8005276 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004df8:	d106      	bne.n	8004e08 <HAL_RCC_OscConfig+0x74>
 8004dfa:	4b76      	ldr	r3, [pc, #472]	@ (8004fd4 <HAL_RCC_OscConfig+0x240>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a75      	ldr	r2, [pc, #468]	@ (8004fd4 <HAL_RCC_OscConfig+0x240>)
 8004e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e04:	6013      	str	r3, [r2, #0]
 8004e06:	e01d      	b.n	8004e44 <HAL_RCC_OscConfig+0xb0>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e10:	d10c      	bne.n	8004e2c <HAL_RCC_OscConfig+0x98>
 8004e12:	4b70      	ldr	r3, [pc, #448]	@ (8004fd4 <HAL_RCC_OscConfig+0x240>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a6f      	ldr	r2, [pc, #444]	@ (8004fd4 <HAL_RCC_OscConfig+0x240>)
 8004e18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	4b6d      	ldr	r3, [pc, #436]	@ (8004fd4 <HAL_RCC_OscConfig+0x240>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a6c      	ldr	r2, [pc, #432]	@ (8004fd4 <HAL_RCC_OscConfig+0x240>)
 8004e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	e00b      	b.n	8004e44 <HAL_RCC_OscConfig+0xb0>
 8004e2c:	4b69      	ldr	r3, [pc, #420]	@ (8004fd4 <HAL_RCC_OscConfig+0x240>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a68      	ldr	r2, [pc, #416]	@ (8004fd4 <HAL_RCC_OscConfig+0x240>)
 8004e32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e36:	6013      	str	r3, [r2, #0]
 8004e38:	4b66      	ldr	r3, [pc, #408]	@ (8004fd4 <HAL_RCC_OscConfig+0x240>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a65      	ldr	r2, [pc, #404]	@ (8004fd4 <HAL_RCC_OscConfig+0x240>)
 8004e3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d013      	beq.n	8004e74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e4c:	f7fd f8f4 	bl	8002038 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e54:	f7fd f8f0 	bl	8002038 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b64      	cmp	r3, #100	@ 0x64
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e207      	b.n	8005276 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e66:	4b5b      	ldr	r3, [pc, #364]	@ (8004fd4 <HAL_RCC_OscConfig+0x240>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0f0      	beq.n	8004e54 <HAL_RCC_OscConfig+0xc0>
 8004e72:	e014      	b.n	8004e9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e74:	f7fd f8e0 	bl	8002038 <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e7c:	f7fd f8dc 	bl	8002038 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b64      	cmp	r3, #100	@ 0x64
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e1f3      	b.n	8005276 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e8e:	4b51      	ldr	r3, [pc, #324]	@ (8004fd4 <HAL_RCC_OscConfig+0x240>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1f0      	bne.n	8004e7c <HAL_RCC_OscConfig+0xe8>
 8004e9a:	e000      	b.n	8004e9e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d063      	beq.n	8004f72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004eaa:	4b4a      	ldr	r3, [pc, #296]	@ (8004fd4 <HAL_RCC_OscConfig+0x240>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 030c 	and.w	r3, r3, #12
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00b      	beq.n	8004ece <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eb6:	4b47      	ldr	r3, [pc, #284]	@ (8004fd4 <HAL_RCC_OscConfig+0x240>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d11c      	bne.n	8004efc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ec2:	4b44      	ldr	r3, [pc, #272]	@ (8004fd4 <HAL_RCC_OscConfig+0x240>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d116      	bne.n	8004efc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ece:	4b41      	ldr	r3, [pc, #260]	@ (8004fd4 <HAL_RCC_OscConfig+0x240>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d005      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x152>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d001      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e1c7      	b.n	8005276 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee6:	4b3b      	ldr	r3, [pc, #236]	@ (8004fd4 <HAL_RCC_OscConfig+0x240>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	4937      	ldr	r1, [pc, #220]	@ (8004fd4 <HAL_RCC_OscConfig+0x240>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004efa:	e03a      	b.n	8004f72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d020      	beq.n	8004f46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f04:	4b34      	ldr	r3, [pc, #208]	@ (8004fd8 <HAL_RCC_OscConfig+0x244>)
 8004f06:	2201      	movs	r2, #1
 8004f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0a:	f7fd f895 	bl	8002038 <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f12:	f7fd f891 	bl	8002038 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e1a8      	b.n	8005276 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f24:	4b2b      	ldr	r3, [pc, #172]	@ (8004fd4 <HAL_RCC_OscConfig+0x240>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0f0      	beq.n	8004f12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f30:	4b28      	ldr	r3, [pc, #160]	@ (8004fd4 <HAL_RCC_OscConfig+0x240>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	00db      	lsls	r3, r3, #3
 8004f3e:	4925      	ldr	r1, [pc, #148]	@ (8004fd4 <HAL_RCC_OscConfig+0x240>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	600b      	str	r3, [r1, #0]
 8004f44:	e015      	b.n	8004f72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f46:	4b24      	ldr	r3, [pc, #144]	@ (8004fd8 <HAL_RCC_OscConfig+0x244>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4c:	f7fd f874 	bl	8002038 <HAL_GetTick>
 8004f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f54:	f7fd f870 	bl	8002038 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e187      	b.n	8005276 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f66:	4b1b      	ldr	r3, [pc, #108]	@ (8004fd4 <HAL_RCC_OscConfig+0x240>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1f0      	bne.n	8004f54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0308 	and.w	r3, r3, #8
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d036      	beq.n	8004fec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d016      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f86:	4b15      	ldr	r3, [pc, #84]	@ (8004fdc <HAL_RCC_OscConfig+0x248>)
 8004f88:	2201      	movs	r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f8c:	f7fd f854 	bl	8002038 <HAL_GetTick>
 8004f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f94:	f7fd f850 	bl	8002038 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e167      	b.n	8005276 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd4 <HAL_RCC_OscConfig+0x240>)
 8004fa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0f0      	beq.n	8004f94 <HAL_RCC_OscConfig+0x200>
 8004fb2:	e01b      	b.n	8004fec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fb4:	4b09      	ldr	r3, [pc, #36]	@ (8004fdc <HAL_RCC_OscConfig+0x248>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fba:	f7fd f83d 	bl	8002038 <HAL_GetTick>
 8004fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fc0:	e00e      	b.n	8004fe0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fc2:	f7fd f839 	bl	8002038 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d907      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e150      	b.n	8005276 <HAL_RCC_OscConfig+0x4e2>
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	42470000 	.word	0x42470000
 8004fdc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fe0:	4b88      	ldr	r3, [pc, #544]	@ (8005204 <HAL_RCC_OscConfig+0x470>)
 8004fe2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1ea      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 8097 	beq.w	8005128 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ffe:	4b81      	ldr	r3, [pc, #516]	@ (8005204 <HAL_RCC_OscConfig+0x470>)
 8005000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10f      	bne.n	800502a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800500a:	2300      	movs	r3, #0
 800500c:	60bb      	str	r3, [r7, #8]
 800500e:	4b7d      	ldr	r3, [pc, #500]	@ (8005204 <HAL_RCC_OscConfig+0x470>)
 8005010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005012:	4a7c      	ldr	r2, [pc, #496]	@ (8005204 <HAL_RCC_OscConfig+0x470>)
 8005014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005018:	6413      	str	r3, [r2, #64]	@ 0x40
 800501a:	4b7a      	ldr	r3, [pc, #488]	@ (8005204 <HAL_RCC_OscConfig+0x470>)
 800501c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005022:	60bb      	str	r3, [r7, #8]
 8005024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005026:	2301      	movs	r3, #1
 8005028:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800502a:	4b77      	ldr	r3, [pc, #476]	@ (8005208 <HAL_RCC_OscConfig+0x474>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005032:	2b00      	cmp	r3, #0
 8005034:	d118      	bne.n	8005068 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005036:	4b74      	ldr	r3, [pc, #464]	@ (8005208 <HAL_RCC_OscConfig+0x474>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a73      	ldr	r2, [pc, #460]	@ (8005208 <HAL_RCC_OscConfig+0x474>)
 800503c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005042:	f7fc fff9 	bl	8002038 <HAL_GetTick>
 8005046:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005048:	e008      	b.n	800505c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800504a:	f7fc fff5 	bl	8002038 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e10c      	b.n	8005276 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800505c:	4b6a      	ldr	r3, [pc, #424]	@ (8005208 <HAL_RCC_OscConfig+0x474>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0f0      	beq.n	800504a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d106      	bne.n	800507e <HAL_RCC_OscConfig+0x2ea>
 8005070:	4b64      	ldr	r3, [pc, #400]	@ (8005204 <HAL_RCC_OscConfig+0x470>)
 8005072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005074:	4a63      	ldr	r2, [pc, #396]	@ (8005204 <HAL_RCC_OscConfig+0x470>)
 8005076:	f043 0301 	orr.w	r3, r3, #1
 800507a:	6713      	str	r3, [r2, #112]	@ 0x70
 800507c:	e01c      	b.n	80050b8 <HAL_RCC_OscConfig+0x324>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	2b05      	cmp	r3, #5
 8005084:	d10c      	bne.n	80050a0 <HAL_RCC_OscConfig+0x30c>
 8005086:	4b5f      	ldr	r3, [pc, #380]	@ (8005204 <HAL_RCC_OscConfig+0x470>)
 8005088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508a:	4a5e      	ldr	r2, [pc, #376]	@ (8005204 <HAL_RCC_OscConfig+0x470>)
 800508c:	f043 0304 	orr.w	r3, r3, #4
 8005090:	6713      	str	r3, [r2, #112]	@ 0x70
 8005092:	4b5c      	ldr	r3, [pc, #368]	@ (8005204 <HAL_RCC_OscConfig+0x470>)
 8005094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005096:	4a5b      	ldr	r2, [pc, #364]	@ (8005204 <HAL_RCC_OscConfig+0x470>)
 8005098:	f043 0301 	orr.w	r3, r3, #1
 800509c:	6713      	str	r3, [r2, #112]	@ 0x70
 800509e:	e00b      	b.n	80050b8 <HAL_RCC_OscConfig+0x324>
 80050a0:	4b58      	ldr	r3, [pc, #352]	@ (8005204 <HAL_RCC_OscConfig+0x470>)
 80050a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a4:	4a57      	ldr	r2, [pc, #348]	@ (8005204 <HAL_RCC_OscConfig+0x470>)
 80050a6:	f023 0301 	bic.w	r3, r3, #1
 80050aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80050ac:	4b55      	ldr	r3, [pc, #340]	@ (8005204 <HAL_RCC_OscConfig+0x470>)
 80050ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b0:	4a54      	ldr	r2, [pc, #336]	@ (8005204 <HAL_RCC_OscConfig+0x470>)
 80050b2:	f023 0304 	bic.w	r3, r3, #4
 80050b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d015      	beq.n	80050ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c0:	f7fc ffba 	bl	8002038 <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c6:	e00a      	b.n	80050de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050c8:	f7fc ffb6 	bl	8002038 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e0cb      	b.n	8005276 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050de:	4b49      	ldr	r3, [pc, #292]	@ (8005204 <HAL_RCC_OscConfig+0x470>)
 80050e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0ee      	beq.n	80050c8 <HAL_RCC_OscConfig+0x334>
 80050ea:	e014      	b.n	8005116 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ec:	f7fc ffa4 	bl	8002038 <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050f2:	e00a      	b.n	800510a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f4:	f7fc ffa0 	bl	8002038 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005102:	4293      	cmp	r3, r2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e0b5      	b.n	8005276 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800510a:	4b3e      	ldr	r3, [pc, #248]	@ (8005204 <HAL_RCC_OscConfig+0x470>)
 800510c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1ee      	bne.n	80050f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005116:	7dfb      	ldrb	r3, [r7, #23]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d105      	bne.n	8005128 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800511c:	4b39      	ldr	r3, [pc, #228]	@ (8005204 <HAL_RCC_OscConfig+0x470>)
 800511e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005120:	4a38      	ldr	r2, [pc, #224]	@ (8005204 <HAL_RCC_OscConfig+0x470>)
 8005122:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005126:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 80a1 	beq.w	8005274 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005132:	4b34      	ldr	r3, [pc, #208]	@ (8005204 <HAL_RCC_OscConfig+0x470>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 030c 	and.w	r3, r3, #12
 800513a:	2b08      	cmp	r3, #8
 800513c:	d05c      	beq.n	80051f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	2b02      	cmp	r3, #2
 8005144:	d141      	bne.n	80051ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005146:	4b31      	ldr	r3, [pc, #196]	@ (800520c <HAL_RCC_OscConfig+0x478>)
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514c:	f7fc ff74 	bl	8002038 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005154:	f7fc ff70 	bl	8002038 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e087      	b.n	8005276 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005166:	4b27      	ldr	r3, [pc, #156]	@ (8005204 <HAL_RCC_OscConfig+0x470>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1f0      	bne.n	8005154 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69da      	ldr	r2, [r3, #28]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005180:	019b      	lsls	r3, r3, #6
 8005182:	431a      	orrs	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005188:	085b      	lsrs	r3, r3, #1
 800518a:	3b01      	subs	r3, #1
 800518c:	041b      	lsls	r3, r3, #16
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005194:	061b      	lsls	r3, r3, #24
 8005196:	491b      	ldr	r1, [pc, #108]	@ (8005204 <HAL_RCC_OscConfig+0x470>)
 8005198:	4313      	orrs	r3, r2
 800519a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800519c:	4b1b      	ldr	r3, [pc, #108]	@ (800520c <HAL_RCC_OscConfig+0x478>)
 800519e:	2201      	movs	r2, #1
 80051a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a2:	f7fc ff49 	bl	8002038 <HAL_GetTick>
 80051a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051a8:	e008      	b.n	80051bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051aa:	f7fc ff45 	bl	8002038 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e05c      	b.n	8005276 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051bc:	4b11      	ldr	r3, [pc, #68]	@ (8005204 <HAL_RCC_OscConfig+0x470>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0f0      	beq.n	80051aa <HAL_RCC_OscConfig+0x416>
 80051c8:	e054      	b.n	8005274 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ca:	4b10      	ldr	r3, [pc, #64]	@ (800520c <HAL_RCC_OscConfig+0x478>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d0:	f7fc ff32 	bl	8002038 <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051d6:	e008      	b.n	80051ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051d8:	f7fc ff2e 	bl	8002038 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e045      	b.n	8005276 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ea:	4b06      	ldr	r3, [pc, #24]	@ (8005204 <HAL_RCC_OscConfig+0x470>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1f0      	bne.n	80051d8 <HAL_RCC_OscConfig+0x444>
 80051f6:	e03d      	b.n	8005274 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d107      	bne.n	8005210 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e038      	b.n	8005276 <HAL_RCC_OscConfig+0x4e2>
 8005204:	40023800 	.word	0x40023800
 8005208:	40007000 	.word	0x40007000
 800520c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005210:	4b1b      	ldr	r3, [pc, #108]	@ (8005280 <HAL_RCC_OscConfig+0x4ec>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d028      	beq.n	8005270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005228:	429a      	cmp	r2, r3
 800522a:	d121      	bne.n	8005270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005236:	429a      	cmp	r2, r3
 8005238:	d11a      	bne.n	8005270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005240:	4013      	ands	r3, r2
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005246:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005248:	4293      	cmp	r3, r2
 800524a:	d111      	bne.n	8005270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005256:	085b      	lsrs	r3, r3, #1
 8005258:	3b01      	subs	r3, #1
 800525a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800525c:	429a      	cmp	r2, r3
 800525e:	d107      	bne.n	8005270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800526c:	429a      	cmp	r2, r3
 800526e:	d001      	beq.n	8005274 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e000      	b.n	8005276 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3718      	adds	r7, #24
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	40023800 	.word	0x40023800

08005284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e0cc      	b.n	8005432 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005298:	4b68      	ldr	r3, [pc, #416]	@ (800543c <HAL_RCC_ClockConfig+0x1b8>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 030f 	and.w	r3, r3, #15
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d90c      	bls.n	80052c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052a6:	4b65      	ldr	r3, [pc, #404]	@ (800543c <HAL_RCC_ClockConfig+0x1b8>)
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ae:	4b63      	ldr	r3, [pc, #396]	@ (800543c <HAL_RCC_ClockConfig+0x1b8>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 030f 	and.w	r3, r3, #15
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d001      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e0b8      	b.n	8005432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d020      	beq.n	800530e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d005      	beq.n	80052e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052d8:	4b59      	ldr	r3, [pc, #356]	@ (8005440 <HAL_RCC_ClockConfig+0x1bc>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	4a58      	ldr	r2, [pc, #352]	@ (8005440 <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80052e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0308 	and.w	r3, r3, #8
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d005      	beq.n	80052fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052f0:	4b53      	ldr	r3, [pc, #332]	@ (8005440 <HAL_RCC_ClockConfig+0x1bc>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	4a52      	ldr	r2, [pc, #328]	@ (8005440 <HAL_RCC_ClockConfig+0x1bc>)
 80052f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80052fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052fc:	4b50      	ldr	r3, [pc, #320]	@ (8005440 <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	494d      	ldr	r1, [pc, #308]	@ (8005440 <HAL_RCC_ClockConfig+0x1bc>)
 800530a:	4313      	orrs	r3, r2
 800530c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d044      	beq.n	80053a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d107      	bne.n	8005332 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005322:	4b47      	ldr	r3, [pc, #284]	@ (8005440 <HAL_RCC_ClockConfig+0x1bc>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d119      	bne.n	8005362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e07f      	b.n	8005432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2b02      	cmp	r3, #2
 8005338:	d003      	beq.n	8005342 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800533e:	2b03      	cmp	r3, #3
 8005340:	d107      	bne.n	8005352 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005342:	4b3f      	ldr	r3, [pc, #252]	@ (8005440 <HAL_RCC_ClockConfig+0x1bc>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d109      	bne.n	8005362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e06f      	b.n	8005432 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005352:	4b3b      	ldr	r3, [pc, #236]	@ (8005440 <HAL_RCC_ClockConfig+0x1bc>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e067      	b.n	8005432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005362:	4b37      	ldr	r3, [pc, #220]	@ (8005440 <HAL_RCC_ClockConfig+0x1bc>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f023 0203 	bic.w	r2, r3, #3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	4934      	ldr	r1, [pc, #208]	@ (8005440 <HAL_RCC_ClockConfig+0x1bc>)
 8005370:	4313      	orrs	r3, r2
 8005372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005374:	f7fc fe60 	bl	8002038 <HAL_GetTick>
 8005378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800537a:	e00a      	b.n	8005392 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800537c:	f7fc fe5c 	bl	8002038 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800538a:	4293      	cmp	r3, r2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e04f      	b.n	8005432 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005392:	4b2b      	ldr	r3, [pc, #172]	@ (8005440 <HAL_RCC_ClockConfig+0x1bc>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 020c 	and.w	r2, r3, #12
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d1eb      	bne.n	800537c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053a4:	4b25      	ldr	r3, [pc, #148]	@ (800543c <HAL_RCC_ClockConfig+0x1b8>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 030f 	and.w	r3, r3, #15
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d20c      	bcs.n	80053cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053b2:	4b22      	ldr	r3, [pc, #136]	@ (800543c <HAL_RCC_ClockConfig+0x1b8>)
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ba:	4b20      	ldr	r3, [pc, #128]	@ (800543c <HAL_RCC_ClockConfig+0x1b8>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d001      	beq.n	80053cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e032      	b.n	8005432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d008      	beq.n	80053ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053d8:	4b19      	ldr	r3, [pc, #100]	@ (8005440 <HAL_RCC_ClockConfig+0x1bc>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	4916      	ldr	r1, [pc, #88]	@ (8005440 <HAL_RCC_ClockConfig+0x1bc>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0308 	and.w	r3, r3, #8
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d009      	beq.n	800540a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053f6:	4b12      	ldr	r3, [pc, #72]	@ (8005440 <HAL_RCC_ClockConfig+0x1bc>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	490e      	ldr	r1, [pc, #56]	@ (8005440 <HAL_RCC_ClockConfig+0x1bc>)
 8005406:	4313      	orrs	r3, r2
 8005408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800540a:	f000 f821 	bl	8005450 <HAL_RCC_GetSysClockFreq>
 800540e:	4602      	mov	r2, r0
 8005410:	4b0b      	ldr	r3, [pc, #44]	@ (8005440 <HAL_RCC_ClockConfig+0x1bc>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	091b      	lsrs	r3, r3, #4
 8005416:	f003 030f 	and.w	r3, r3, #15
 800541a:	490a      	ldr	r1, [pc, #40]	@ (8005444 <HAL_RCC_ClockConfig+0x1c0>)
 800541c:	5ccb      	ldrb	r3, [r1, r3]
 800541e:	fa22 f303 	lsr.w	r3, r2, r3
 8005422:	4a09      	ldr	r2, [pc, #36]	@ (8005448 <HAL_RCC_ClockConfig+0x1c4>)
 8005424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005426:	4b09      	ldr	r3, [pc, #36]	@ (800544c <HAL_RCC_ClockConfig+0x1c8>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4618      	mov	r0, r3
 800542c:	f7fc fdc0 	bl	8001fb0 <HAL_InitTick>

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	40023c00 	.word	0x40023c00
 8005440:	40023800 	.word	0x40023800
 8005444:	0800a9f0 	.word	0x0800a9f0
 8005448:	20000090 	.word	0x20000090
 800544c:	20000094 	.word	0x20000094

08005450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005454:	b094      	sub	sp, #80	@ 0x50
 8005456:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005458:	2300      	movs	r3, #0
 800545a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005468:	4b79      	ldr	r3, [pc, #484]	@ (8005650 <HAL_RCC_GetSysClockFreq+0x200>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f003 030c 	and.w	r3, r3, #12
 8005470:	2b08      	cmp	r3, #8
 8005472:	d00d      	beq.n	8005490 <HAL_RCC_GetSysClockFreq+0x40>
 8005474:	2b08      	cmp	r3, #8
 8005476:	f200 80e1 	bhi.w	800563c <HAL_RCC_GetSysClockFreq+0x1ec>
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <HAL_RCC_GetSysClockFreq+0x34>
 800547e:	2b04      	cmp	r3, #4
 8005480:	d003      	beq.n	800548a <HAL_RCC_GetSysClockFreq+0x3a>
 8005482:	e0db      	b.n	800563c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005484:	4b73      	ldr	r3, [pc, #460]	@ (8005654 <HAL_RCC_GetSysClockFreq+0x204>)
 8005486:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005488:	e0db      	b.n	8005642 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800548a:	4b73      	ldr	r3, [pc, #460]	@ (8005658 <HAL_RCC_GetSysClockFreq+0x208>)
 800548c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800548e:	e0d8      	b.n	8005642 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005490:	4b6f      	ldr	r3, [pc, #444]	@ (8005650 <HAL_RCC_GetSysClockFreq+0x200>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005498:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800549a:	4b6d      	ldr	r3, [pc, #436]	@ (8005650 <HAL_RCC_GetSysClockFreq+0x200>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d063      	beq.n	800556e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054a6:	4b6a      	ldr	r3, [pc, #424]	@ (8005650 <HAL_RCC_GetSysClockFreq+0x200>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	099b      	lsrs	r3, r3, #6
 80054ac:	2200      	movs	r2, #0
 80054ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80054b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80054ba:	2300      	movs	r3, #0
 80054bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80054be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80054c2:	4622      	mov	r2, r4
 80054c4:	462b      	mov	r3, r5
 80054c6:	f04f 0000 	mov.w	r0, #0
 80054ca:	f04f 0100 	mov.w	r1, #0
 80054ce:	0159      	lsls	r1, r3, #5
 80054d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054d4:	0150      	lsls	r0, r2, #5
 80054d6:	4602      	mov	r2, r0
 80054d8:	460b      	mov	r3, r1
 80054da:	4621      	mov	r1, r4
 80054dc:	1a51      	subs	r1, r2, r1
 80054de:	6139      	str	r1, [r7, #16]
 80054e0:	4629      	mov	r1, r5
 80054e2:	eb63 0301 	sbc.w	r3, r3, r1
 80054e6:	617b      	str	r3, [r7, #20]
 80054e8:	f04f 0200 	mov.w	r2, #0
 80054ec:	f04f 0300 	mov.w	r3, #0
 80054f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054f4:	4659      	mov	r1, fp
 80054f6:	018b      	lsls	r3, r1, #6
 80054f8:	4651      	mov	r1, sl
 80054fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054fe:	4651      	mov	r1, sl
 8005500:	018a      	lsls	r2, r1, #6
 8005502:	4651      	mov	r1, sl
 8005504:	ebb2 0801 	subs.w	r8, r2, r1
 8005508:	4659      	mov	r1, fp
 800550a:	eb63 0901 	sbc.w	r9, r3, r1
 800550e:	f04f 0200 	mov.w	r2, #0
 8005512:	f04f 0300 	mov.w	r3, #0
 8005516:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800551a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800551e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005522:	4690      	mov	r8, r2
 8005524:	4699      	mov	r9, r3
 8005526:	4623      	mov	r3, r4
 8005528:	eb18 0303 	adds.w	r3, r8, r3
 800552c:	60bb      	str	r3, [r7, #8]
 800552e:	462b      	mov	r3, r5
 8005530:	eb49 0303 	adc.w	r3, r9, r3
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	f04f 0200 	mov.w	r2, #0
 800553a:	f04f 0300 	mov.w	r3, #0
 800553e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005542:	4629      	mov	r1, r5
 8005544:	024b      	lsls	r3, r1, #9
 8005546:	4621      	mov	r1, r4
 8005548:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800554c:	4621      	mov	r1, r4
 800554e:	024a      	lsls	r2, r1, #9
 8005550:	4610      	mov	r0, r2
 8005552:	4619      	mov	r1, r3
 8005554:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005556:	2200      	movs	r2, #0
 8005558:	62bb      	str	r3, [r7, #40]	@ 0x28
 800555a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800555c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005560:	f7fb fb32 	bl	8000bc8 <__aeabi_uldivmod>
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	4613      	mov	r3, r2
 800556a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800556c:	e058      	b.n	8005620 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800556e:	4b38      	ldr	r3, [pc, #224]	@ (8005650 <HAL_RCC_GetSysClockFreq+0x200>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	099b      	lsrs	r3, r3, #6
 8005574:	2200      	movs	r2, #0
 8005576:	4618      	mov	r0, r3
 8005578:	4611      	mov	r1, r2
 800557a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800557e:	623b      	str	r3, [r7, #32]
 8005580:	2300      	movs	r3, #0
 8005582:	627b      	str	r3, [r7, #36]	@ 0x24
 8005584:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005588:	4642      	mov	r2, r8
 800558a:	464b      	mov	r3, r9
 800558c:	f04f 0000 	mov.w	r0, #0
 8005590:	f04f 0100 	mov.w	r1, #0
 8005594:	0159      	lsls	r1, r3, #5
 8005596:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800559a:	0150      	lsls	r0, r2, #5
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4641      	mov	r1, r8
 80055a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80055a6:	4649      	mov	r1, r9
 80055a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80055ac:	f04f 0200 	mov.w	r2, #0
 80055b0:	f04f 0300 	mov.w	r3, #0
 80055b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055c0:	ebb2 040a 	subs.w	r4, r2, sl
 80055c4:	eb63 050b 	sbc.w	r5, r3, fp
 80055c8:	f04f 0200 	mov.w	r2, #0
 80055cc:	f04f 0300 	mov.w	r3, #0
 80055d0:	00eb      	lsls	r3, r5, #3
 80055d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055d6:	00e2      	lsls	r2, r4, #3
 80055d8:	4614      	mov	r4, r2
 80055da:	461d      	mov	r5, r3
 80055dc:	4643      	mov	r3, r8
 80055de:	18e3      	adds	r3, r4, r3
 80055e0:	603b      	str	r3, [r7, #0]
 80055e2:	464b      	mov	r3, r9
 80055e4:	eb45 0303 	adc.w	r3, r5, r3
 80055e8:	607b      	str	r3, [r7, #4]
 80055ea:	f04f 0200 	mov.w	r2, #0
 80055ee:	f04f 0300 	mov.w	r3, #0
 80055f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055f6:	4629      	mov	r1, r5
 80055f8:	028b      	lsls	r3, r1, #10
 80055fa:	4621      	mov	r1, r4
 80055fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005600:	4621      	mov	r1, r4
 8005602:	028a      	lsls	r2, r1, #10
 8005604:	4610      	mov	r0, r2
 8005606:	4619      	mov	r1, r3
 8005608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800560a:	2200      	movs	r2, #0
 800560c:	61bb      	str	r3, [r7, #24]
 800560e:	61fa      	str	r2, [r7, #28]
 8005610:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005614:	f7fb fad8 	bl	8000bc8 <__aeabi_uldivmod>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	4613      	mov	r3, r2
 800561e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005620:	4b0b      	ldr	r3, [pc, #44]	@ (8005650 <HAL_RCC_GetSysClockFreq+0x200>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	0c1b      	lsrs	r3, r3, #16
 8005626:	f003 0303 	and.w	r3, r3, #3
 800562a:	3301      	adds	r3, #1
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005630:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005634:	fbb2 f3f3 	udiv	r3, r2, r3
 8005638:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800563a:	e002      	b.n	8005642 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800563c:	4b05      	ldr	r3, [pc, #20]	@ (8005654 <HAL_RCC_GetSysClockFreq+0x204>)
 800563e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005640:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005642:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005644:	4618      	mov	r0, r3
 8005646:	3750      	adds	r7, #80	@ 0x50
 8005648:	46bd      	mov	sp, r7
 800564a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800564e:	bf00      	nop
 8005650:	40023800 	.word	0x40023800
 8005654:	00f42400 	.word	0x00f42400
 8005658:	007a1200 	.word	0x007a1200

0800565c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005660:	4b03      	ldr	r3, [pc, #12]	@ (8005670 <HAL_RCC_GetHCLKFreq+0x14>)
 8005662:	681b      	ldr	r3, [r3, #0]
}
 8005664:	4618      	mov	r0, r3
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	20000090 	.word	0x20000090

08005674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005678:	f7ff fff0 	bl	800565c <HAL_RCC_GetHCLKFreq>
 800567c:	4602      	mov	r2, r0
 800567e:	4b05      	ldr	r3, [pc, #20]	@ (8005694 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	0a9b      	lsrs	r3, r3, #10
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	4903      	ldr	r1, [pc, #12]	@ (8005698 <HAL_RCC_GetPCLK1Freq+0x24>)
 800568a:	5ccb      	ldrb	r3, [r1, r3]
 800568c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005690:	4618      	mov	r0, r3
 8005692:	bd80      	pop	{r7, pc}
 8005694:	40023800 	.word	0x40023800
 8005698:	0800aa00 	.word	0x0800aa00

0800569c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80056a0:	f7ff ffdc 	bl	800565c <HAL_RCC_GetHCLKFreq>
 80056a4:	4602      	mov	r2, r0
 80056a6:	4b05      	ldr	r3, [pc, #20]	@ (80056bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	0b5b      	lsrs	r3, r3, #13
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	4903      	ldr	r1, [pc, #12]	@ (80056c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056b2:	5ccb      	ldrb	r3, [r1, r3]
 80056b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	40023800 	.word	0x40023800
 80056c0:	0800aa00 	.word	0x0800aa00

080056c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e042      	b.n	800575c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d106      	bne.n	80056f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7fc fb4a 	bl	8001d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2224      	movs	r2, #36	@ 0x24
 80056f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005706:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f973 	bl	80059f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	691a      	ldr	r2, [r3, #16]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800571c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	695a      	ldr	r2, [r3, #20]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800572c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800573c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2220      	movs	r2, #32
 8005748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b08a      	sub	sp, #40	@ 0x28
 8005768:	af02      	add	r7, sp, #8
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	603b      	str	r3, [r7, #0]
 8005770:	4613      	mov	r3, r2
 8005772:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b20      	cmp	r3, #32
 8005782:	d175      	bne.n	8005870 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <HAL_UART_Transmit+0x2c>
 800578a:	88fb      	ldrh	r3, [r7, #6]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e06e      	b.n	8005872 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2221      	movs	r2, #33	@ 0x21
 800579e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057a2:	f7fc fc49 	bl	8002038 <HAL_GetTick>
 80057a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	88fa      	ldrh	r2, [r7, #6]
 80057ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	88fa      	ldrh	r2, [r7, #6]
 80057b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057bc:	d108      	bne.n	80057d0 <HAL_UART_Transmit+0x6c>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d104      	bne.n	80057d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80057c6:	2300      	movs	r3, #0
 80057c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	61bb      	str	r3, [r7, #24]
 80057ce:	e003      	b.n	80057d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057d4:	2300      	movs	r3, #0
 80057d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057d8:	e02e      	b.n	8005838 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2200      	movs	r2, #0
 80057e2:	2180      	movs	r1, #128	@ 0x80
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 f848 	bl	800587a <UART_WaitOnFlagUntilTimeout>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d005      	beq.n	80057fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2220      	movs	r2, #32
 80057f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e03a      	b.n	8005872 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10b      	bne.n	800581a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005810:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	3302      	adds	r3, #2
 8005816:	61bb      	str	r3, [r7, #24]
 8005818:	e007      	b.n	800582a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	781a      	ldrb	r2, [r3, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	3301      	adds	r3, #1
 8005828:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b01      	subs	r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800583c:	b29b      	uxth	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1cb      	bne.n	80057da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2200      	movs	r2, #0
 800584a:	2140      	movs	r1, #64	@ 0x40
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 f814 	bl	800587a <UART_WaitOnFlagUntilTimeout>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d005      	beq.n	8005864 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e006      	b.n	8005872 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2220      	movs	r2, #32
 8005868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800586c:	2300      	movs	r3, #0
 800586e:	e000      	b.n	8005872 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005870:	2302      	movs	r3, #2
  }
}
 8005872:	4618      	mov	r0, r3
 8005874:	3720      	adds	r7, #32
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b086      	sub	sp, #24
 800587e:	af00      	add	r7, sp, #0
 8005880:	60f8      	str	r0, [r7, #12]
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	603b      	str	r3, [r7, #0]
 8005886:	4613      	mov	r3, r2
 8005888:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800588a:	e03b      	b.n	8005904 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005892:	d037      	beq.n	8005904 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005894:	f7fc fbd0 	bl	8002038 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	6a3a      	ldr	r2, [r7, #32]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d302      	bcc.n	80058aa <UART_WaitOnFlagUntilTimeout+0x30>
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e03a      	b.n	8005924 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d023      	beq.n	8005904 <UART_WaitOnFlagUntilTimeout+0x8a>
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b80      	cmp	r3, #128	@ 0x80
 80058c0:	d020      	beq.n	8005904 <UART_WaitOnFlagUntilTimeout+0x8a>
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2b40      	cmp	r3, #64	@ 0x40
 80058c6:	d01d      	beq.n	8005904 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0308 	and.w	r3, r3, #8
 80058d2:	2b08      	cmp	r3, #8
 80058d4:	d116      	bne.n	8005904 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80058d6:	2300      	movs	r3, #0
 80058d8:	617b      	str	r3, [r7, #20]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	617b      	str	r3, [r7, #20]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	617b      	str	r3, [r7, #20]
 80058ea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f81d 	bl	800592c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2208      	movs	r2, #8
 80058f6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e00f      	b.n	8005924 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	4013      	ands	r3, r2
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	429a      	cmp	r2, r3
 8005912:	bf0c      	ite	eq
 8005914:	2301      	moveq	r3, #1
 8005916:	2300      	movne	r3, #0
 8005918:	b2db      	uxtb	r3, r3
 800591a:	461a      	mov	r2, r3
 800591c:	79fb      	ldrb	r3, [r7, #7]
 800591e:	429a      	cmp	r2, r3
 8005920:	d0b4      	beq.n	800588c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800592c:	b480      	push	{r7}
 800592e:	b095      	sub	sp, #84	@ 0x54
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	330c      	adds	r3, #12
 800593a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800593e:	e853 3f00 	ldrex	r3, [r3]
 8005942:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005946:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800594a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	330c      	adds	r3, #12
 8005952:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005954:	643a      	str	r2, [r7, #64]	@ 0x40
 8005956:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005958:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800595a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800595c:	e841 2300 	strex	r3, r2, [r1]
 8005960:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1e5      	bne.n	8005934 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3314      	adds	r3, #20
 800596e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	e853 3f00 	ldrex	r3, [r3]
 8005976:	61fb      	str	r3, [r7, #28]
   return(result);
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	f023 0301 	bic.w	r3, r3, #1
 800597e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3314      	adds	r3, #20
 8005986:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005988:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800598a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800598e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005990:	e841 2300 	strex	r3, r2, [r1]
 8005994:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1e5      	bne.n	8005968 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d119      	bne.n	80059d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	330c      	adds	r3, #12
 80059aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	e853 3f00 	ldrex	r3, [r3]
 80059b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f023 0310 	bic.w	r3, r3, #16
 80059ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	330c      	adds	r3, #12
 80059c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059c4:	61ba      	str	r2, [r7, #24]
 80059c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c8:	6979      	ldr	r1, [r7, #20]
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	e841 2300 	strex	r3, r2, [r1]
 80059d0:	613b      	str	r3, [r7, #16]
   return(result);
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1e5      	bne.n	80059a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2220      	movs	r2, #32
 80059dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80059e6:	bf00      	nop
 80059e8:	3754      	adds	r7, #84	@ 0x54
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
	...

080059f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059f8:	b0c0      	sub	sp, #256	@ 0x100
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a10:	68d9      	ldr	r1, [r3, #12]
 8005a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	ea40 0301 	orr.w	r3, r0, r1
 8005a1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	431a      	orrs	r2, r3
 8005a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005a4c:	f021 010c 	bic.w	r1, r1, #12
 8005a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a5a:	430b      	orrs	r3, r1
 8005a5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a6e:	6999      	ldr	r1, [r3, #24]
 8005a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	ea40 0301 	orr.w	r3, r0, r1
 8005a7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	4b8f      	ldr	r3, [pc, #572]	@ (8005cc0 <UART_SetConfig+0x2cc>)
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d005      	beq.n	8005a94 <UART_SetConfig+0xa0>
 8005a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	4b8d      	ldr	r3, [pc, #564]	@ (8005cc4 <UART_SetConfig+0x2d0>)
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d104      	bne.n	8005a9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a94:	f7ff fe02 	bl	800569c <HAL_RCC_GetPCLK2Freq>
 8005a98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a9c:	e003      	b.n	8005aa6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a9e:	f7ff fde9 	bl	8005674 <HAL_RCC_GetPCLK1Freq>
 8005aa2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ab0:	f040 810c 	bne.w	8005ccc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ab4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005abe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005ac2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005ac6:	4622      	mov	r2, r4
 8005ac8:	462b      	mov	r3, r5
 8005aca:	1891      	adds	r1, r2, r2
 8005acc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005ace:	415b      	adcs	r3, r3
 8005ad0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ad2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ad6:	4621      	mov	r1, r4
 8005ad8:	eb12 0801 	adds.w	r8, r2, r1
 8005adc:	4629      	mov	r1, r5
 8005ade:	eb43 0901 	adc.w	r9, r3, r1
 8005ae2:	f04f 0200 	mov.w	r2, #0
 8005ae6:	f04f 0300 	mov.w	r3, #0
 8005aea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005aee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005af2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005af6:	4690      	mov	r8, r2
 8005af8:	4699      	mov	r9, r3
 8005afa:	4623      	mov	r3, r4
 8005afc:	eb18 0303 	adds.w	r3, r8, r3
 8005b00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b04:	462b      	mov	r3, r5
 8005b06:	eb49 0303 	adc.w	r3, r9, r3
 8005b0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005b1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b22:	460b      	mov	r3, r1
 8005b24:	18db      	adds	r3, r3, r3
 8005b26:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b28:	4613      	mov	r3, r2
 8005b2a:	eb42 0303 	adc.w	r3, r2, r3
 8005b2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005b34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005b38:	f7fb f846 	bl	8000bc8 <__aeabi_uldivmod>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	460b      	mov	r3, r1
 8005b40:	4b61      	ldr	r3, [pc, #388]	@ (8005cc8 <UART_SetConfig+0x2d4>)
 8005b42:	fba3 2302 	umull	r2, r3, r3, r2
 8005b46:	095b      	lsrs	r3, r3, #5
 8005b48:	011c      	lsls	r4, r3, #4
 8005b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005b58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005b5c:	4642      	mov	r2, r8
 8005b5e:	464b      	mov	r3, r9
 8005b60:	1891      	adds	r1, r2, r2
 8005b62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b64:	415b      	adcs	r3, r3
 8005b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b6c:	4641      	mov	r1, r8
 8005b6e:	eb12 0a01 	adds.w	sl, r2, r1
 8005b72:	4649      	mov	r1, r9
 8005b74:	eb43 0b01 	adc.w	fp, r3, r1
 8005b78:	f04f 0200 	mov.w	r2, #0
 8005b7c:	f04f 0300 	mov.w	r3, #0
 8005b80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b8c:	4692      	mov	sl, r2
 8005b8e:	469b      	mov	fp, r3
 8005b90:	4643      	mov	r3, r8
 8005b92:	eb1a 0303 	adds.w	r3, sl, r3
 8005b96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b9a:	464b      	mov	r3, r9
 8005b9c:	eb4b 0303 	adc.w	r3, fp, r3
 8005ba0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005bb0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005bb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	18db      	adds	r3, r3, r3
 8005bbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	eb42 0303 	adc.w	r3, r2, r3
 8005bc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005bca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005bce:	f7fa fffb 	bl	8000bc8 <__aeabi_uldivmod>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	4611      	mov	r1, r2
 8005bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8005cc8 <UART_SetConfig+0x2d4>)
 8005bda:	fba3 2301 	umull	r2, r3, r3, r1
 8005bde:	095b      	lsrs	r3, r3, #5
 8005be0:	2264      	movs	r2, #100	@ 0x64
 8005be2:	fb02 f303 	mul.w	r3, r2, r3
 8005be6:	1acb      	subs	r3, r1, r3
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005bee:	4b36      	ldr	r3, [pc, #216]	@ (8005cc8 <UART_SetConfig+0x2d4>)
 8005bf0:	fba3 2302 	umull	r2, r3, r3, r2
 8005bf4:	095b      	lsrs	r3, r3, #5
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005bfc:	441c      	add	r4, r3
 8005bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c02:	2200      	movs	r2, #0
 8005c04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005c0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005c10:	4642      	mov	r2, r8
 8005c12:	464b      	mov	r3, r9
 8005c14:	1891      	adds	r1, r2, r2
 8005c16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005c18:	415b      	adcs	r3, r3
 8005c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005c20:	4641      	mov	r1, r8
 8005c22:	1851      	adds	r1, r2, r1
 8005c24:	6339      	str	r1, [r7, #48]	@ 0x30
 8005c26:	4649      	mov	r1, r9
 8005c28:	414b      	adcs	r3, r1
 8005c2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	f04f 0300 	mov.w	r3, #0
 8005c34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005c38:	4659      	mov	r1, fp
 8005c3a:	00cb      	lsls	r3, r1, #3
 8005c3c:	4651      	mov	r1, sl
 8005c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c42:	4651      	mov	r1, sl
 8005c44:	00ca      	lsls	r2, r1, #3
 8005c46:	4610      	mov	r0, r2
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	4642      	mov	r2, r8
 8005c4e:	189b      	adds	r3, r3, r2
 8005c50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c54:	464b      	mov	r3, r9
 8005c56:	460a      	mov	r2, r1
 8005c58:	eb42 0303 	adc.w	r3, r2, r3
 8005c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c74:	460b      	mov	r3, r1
 8005c76:	18db      	adds	r3, r3, r3
 8005c78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	eb42 0303 	adc.w	r3, r2, r3
 8005c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c8a:	f7fa ff9d 	bl	8000bc8 <__aeabi_uldivmod>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc8 <UART_SetConfig+0x2d4>)
 8005c94:	fba3 1302 	umull	r1, r3, r3, r2
 8005c98:	095b      	lsrs	r3, r3, #5
 8005c9a:	2164      	movs	r1, #100	@ 0x64
 8005c9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	3332      	adds	r3, #50	@ 0x32
 8005ca6:	4a08      	ldr	r2, [pc, #32]	@ (8005cc8 <UART_SetConfig+0x2d4>)
 8005ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cac:	095b      	lsrs	r3, r3, #5
 8005cae:	f003 0207 	and.w	r2, r3, #7
 8005cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4422      	add	r2, r4
 8005cba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005cbc:	e106      	b.n	8005ecc <UART_SetConfig+0x4d8>
 8005cbe:	bf00      	nop
 8005cc0:	40011000 	.word	0x40011000
 8005cc4:	40011400 	.word	0x40011400
 8005cc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ccc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005cd6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005cda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005cde:	4642      	mov	r2, r8
 8005ce0:	464b      	mov	r3, r9
 8005ce2:	1891      	adds	r1, r2, r2
 8005ce4:	6239      	str	r1, [r7, #32]
 8005ce6:	415b      	adcs	r3, r3
 8005ce8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cee:	4641      	mov	r1, r8
 8005cf0:	1854      	adds	r4, r2, r1
 8005cf2:	4649      	mov	r1, r9
 8005cf4:	eb43 0501 	adc.w	r5, r3, r1
 8005cf8:	f04f 0200 	mov.w	r2, #0
 8005cfc:	f04f 0300 	mov.w	r3, #0
 8005d00:	00eb      	lsls	r3, r5, #3
 8005d02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d06:	00e2      	lsls	r2, r4, #3
 8005d08:	4614      	mov	r4, r2
 8005d0a:	461d      	mov	r5, r3
 8005d0c:	4643      	mov	r3, r8
 8005d0e:	18e3      	adds	r3, r4, r3
 8005d10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d14:	464b      	mov	r3, r9
 8005d16:	eb45 0303 	adc.w	r3, r5, r3
 8005d1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d2e:	f04f 0200 	mov.w	r2, #0
 8005d32:	f04f 0300 	mov.w	r3, #0
 8005d36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005d3a:	4629      	mov	r1, r5
 8005d3c:	008b      	lsls	r3, r1, #2
 8005d3e:	4621      	mov	r1, r4
 8005d40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d44:	4621      	mov	r1, r4
 8005d46:	008a      	lsls	r2, r1, #2
 8005d48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005d4c:	f7fa ff3c 	bl	8000bc8 <__aeabi_uldivmod>
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	4b60      	ldr	r3, [pc, #384]	@ (8005ed8 <UART_SetConfig+0x4e4>)
 8005d56:	fba3 2302 	umull	r2, r3, r3, r2
 8005d5a:	095b      	lsrs	r3, r3, #5
 8005d5c:	011c      	lsls	r4, r3, #4
 8005d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d62:	2200      	movs	r2, #0
 8005d64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005d70:	4642      	mov	r2, r8
 8005d72:	464b      	mov	r3, r9
 8005d74:	1891      	adds	r1, r2, r2
 8005d76:	61b9      	str	r1, [r7, #24]
 8005d78:	415b      	adcs	r3, r3
 8005d7a:	61fb      	str	r3, [r7, #28]
 8005d7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d80:	4641      	mov	r1, r8
 8005d82:	1851      	adds	r1, r2, r1
 8005d84:	6139      	str	r1, [r7, #16]
 8005d86:	4649      	mov	r1, r9
 8005d88:	414b      	adcs	r3, r1
 8005d8a:	617b      	str	r3, [r7, #20]
 8005d8c:	f04f 0200 	mov.w	r2, #0
 8005d90:	f04f 0300 	mov.w	r3, #0
 8005d94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d98:	4659      	mov	r1, fp
 8005d9a:	00cb      	lsls	r3, r1, #3
 8005d9c:	4651      	mov	r1, sl
 8005d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005da2:	4651      	mov	r1, sl
 8005da4:	00ca      	lsls	r2, r1, #3
 8005da6:	4610      	mov	r0, r2
 8005da8:	4619      	mov	r1, r3
 8005daa:	4603      	mov	r3, r0
 8005dac:	4642      	mov	r2, r8
 8005dae:	189b      	adds	r3, r3, r2
 8005db0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005db4:	464b      	mov	r3, r9
 8005db6:	460a      	mov	r2, r1
 8005db8:	eb42 0303 	adc.w	r3, r2, r3
 8005dbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005dca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005dcc:	f04f 0200 	mov.w	r2, #0
 8005dd0:	f04f 0300 	mov.w	r3, #0
 8005dd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005dd8:	4649      	mov	r1, r9
 8005dda:	008b      	lsls	r3, r1, #2
 8005ddc:	4641      	mov	r1, r8
 8005dde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005de2:	4641      	mov	r1, r8
 8005de4:	008a      	lsls	r2, r1, #2
 8005de6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005dea:	f7fa feed 	bl	8000bc8 <__aeabi_uldivmod>
 8005dee:	4602      	mov	r2, r0
 8005df0:	460b      	mov	r3, r1
 8005df2:	4611      	mov	r1, r2
 8005df4:	4b38      	ldr	r3, [pc, #224]	@ (8005ed8 <UART_SetConfig+0x4e4>)
 8005df6:	fba3 2301 	umull	r2, r3, r3, r1
 8005dfa:	095b      	lsrs	r3, r3, #5
 8005dfc:	2264      	movs	r2, #100	@ 0x64
 8005dfe:	fb02 f303 	mul.w	r3, r2, r3
 8005e02:	1acb      	subs	r3, r1, r3
 8005e04:	011b      	lsls	r3, r3, #4
 8005e06:	3332      	adds	r3, #50	@ 0x32
 8005e08:	4a33      	ldr	r2, [pc, #204]	@ (8005ed8 <UART_SetConfig+0x4e4>)
 8005e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0e:	095b      	lsrs	r3, r3, #5
 8005e10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e14:	441c      	add	r4, r3
 8005e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005e20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005e24:	4642      	mov	r2, r8
 8005e26:	464b      	mov	r3, r9
 8005e28:	1891      	adds	r1, r2, r2
 8005e2a:	60b9      	str	r1, [r7, #8]
 8005e2c:	415b      	adcs	r3, r3
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e34:	4641      	mov	r1, r8
 8005e36:	1851      	adds	r1, r2, r1
 8005e38:	6039      	str	r1, [r7, #0]
 8005e3a:	4649      	mov	r1, r9
 8005e3c:	414b      	adcs	r3, r1
 8005e3e:	607b      	str	r3, [r7, #4]
 8005e40:	f04f 0200 	mov.w	r2, #0
 8005e44:	f04f 0300 	mov.w	r3, #0
 8005e48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e4c:	4659      	mov	r1, fp
 8005e4e:	00cb      	lsls	r3, r1, #3
 8005e50:	4651      	mov	r1, sl
 8005e52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e56:	4651      	mov	r1, sl
 8005e58:	00ca      	lsls	r2, r1, #3
 8005e5a:	4610      	mov	r0, r2
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4603      	mov	r3, r0
 8005e60:	4642      	mov	r2, r8
 8005e62:	189b      	adds	r3, r3, r2
 8005e64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e66:	464b      	mov	r3, r9
 8005e68:	460a      	mov	r2, r1
 8005e6a:	eb42 0303 	adc.w	r3, r2, r3
 8005e6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e7a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e7c:	f04f 0200 	mov.w	r2, #0
 8005e80:	f04f 0300 	mov.w	r3, #0
 8005e84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e88:	4649      	mov	r1, r9
 8005e8a:	008b      	lsls	r3, r1, #2
 8005e8c:	4641      	mov	r1, r8
 8005e8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e92:	4641      	mov	r1, r8
 8005e94:	008a      	lsls	r2, r1, #2
 8005e96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e9a:	f7fa fe95 	bl	8000bc8 <__aeabi_uldivmod>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed8 <UART_SetConfig+0x4e4>)
 8005ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ea8:	095b      	lsrs	r3, r3, #5
 8005eaa:	2164      	movs	r1, #100	@ 0x64
 8005eac:	fb01 f303 	mul.w	r3, r1, r3
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	011b      	lsls	r3, r3, #4
 8005eb4:	3332      	adds	r3, #50	@ 0x32
 8005eb6:	4a08      	ldr	r2, [pc, #32]	@ (8005ed8 <UART_SetConfig+0x4e4>)
 8005eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ebc:	095b      	lsrs	r3, r3, #5
 8005ebe:	f003 020f 	and.w	r2, r3, #15
 8005ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4422      	add	r2, r4
 8005eca:	609a      	str	r2, [r3, #8]
}
 8005ecc:	bf00      	nop
 8005ece:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ed8:	51eb851f 	.word	0x51eb851f

08005edc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005edc:	b084      	sub	sp, #16
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b084      	sub	sp, #16
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	f107 001c 	add.w	r0, r7, #28
 8005eea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005eee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d123      	bne.n	8005f3e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005efa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005f0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d105      	bne.n	8005f32 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f001 fae8 	bl	8007508 <USB_CoreReset>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	73fb      	strb	r3, [r7, #15]
 8005f3c:	e01b      	b.n	8005f76 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f001 fadc 	bl	8007508 <USB_CoreReset>
 8005f50:	4603      	mov	r3, r0
 8005f52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f54:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d106      	bne.n	8005f6a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f60:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f68:	e005      	b.n	8005f76 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f76:	7fbb      	ldrb	r3, [r7, #30]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d10b      	bne.n	8005f94 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f043 0206 	orr.w	r2, r3, #6
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f043 0220 	orr.w	r2, r3, #32
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fa0:	b004      	add	sp, #16
 8005fa2:	4770      	bx	lr

08005fa4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b087      	sub	sp, #28
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005fb2:	79fb      	ldrb	r3, [r7, #7]
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d165      	bne.n	8006084 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	4a41      	ldr	r2, [pc, #260]	@ (80060c0 <USB_SetTurnaroundTime+0x11c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d906      	bls.n	8005fce <USB_SetTurnaroundTime+0x2a>
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	4a40      	ldr	r2, [pc, #256]	@ (80060c4 <USB_SetTurnaroundTime+0x120>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d202      	bcs.n	8005fce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005fc8:	230f      	movs	r3, #15
 8005fca:	617b      	str	r3, [r7, #20]
 8005fcc:	e062      	b.n	8006094 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	4a3c      	ldr	r2, [pc, #240]	@ (80060c4 <USB_SetTurnaroundTime+0x120>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d306      	bcc.n	8005fe4 <USB_SetTurnaroundTime+0x40>
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	4a3b      	ldr	r2, [pc, #236]	@ (80060c8 <USB_SetTurnaroundTime+0x124>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d202      	bcs.n	8005fe4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005fde:	230e      	movs	r3, #14
 8005fe0:	617b      	str	r3, [r7, #20]
 8005fe2:	e057      	b.n	8006094 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	4a38      	ldr	r2, [pc, #224]	@ (80060c8 <USB_SetTurnaroundTime+0x124>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d306      	bcc.n	8005ffa <USB_SetTurnaroundTime+0x56>
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	4a37      	ldr	r2, [pc, #220]	@ (80060cc <USB_SetTurnaroundTime+0x128>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d202      	bcs.n	8005ffa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005ff4:	230d      	movs	r3, #13
 8005ff6:	617b      	str	r3, [r7, #20]
 8005ff8:	e04c      	b.n	8006094 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	4a33      	ldr	r2, [pc, #204]	@ (80060cc <USB_SetTurnaroundTime+0x128>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d306      	bcc.n	8006010 <USB_SetTurnaroundTime+0x6c>
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	4a32      	ldr	r2, [pc, #200]	@ (80060d0 <USB_SetTurnaroundTime+0x12c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d802      	bhi.n	8006010 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800600a:	230c      	movs	r3, #12
 800600c:	617b      	str	r3, [r7, #20]
 800600e:	e041      	b.n	8006094 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4a2f      	ldr	r2, [pc, #188]	@ (80060d0 <USB_SetTurnaroundTime+0x12c>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d906      	bls.n	8006026 <USB_SetTurnaroundTime+0x82>
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	4a2e      	ldr	r2, [pc, #184]	@ (80060d4 <USB_SetTurnaroundTime+0x130>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d802      	bhi.n	8006026 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006020:	230b      	movs	r3, #11
 8006022:	617b      	str	r3, [r7, #20]
 8006024:	e036      	b.n	8006094 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	4a2a      	ldr	r2, [pc, #168]	@ (80060d4 <USB_SetTurnaroundTime+0x130>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d906      	bls.n	800603c <USB_SetTurnaroundTime+0x98>
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	4a29      	ldr	r2, [pc, #164]	@ (80060d8 <USB_SetTurnaroundTime+0x134>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d802      	bhi.n	800603c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006036:	230a      	movs	r3, #10
 8006038:	617b      	str	r3, [r7, #20]
 800603a:	e02b      	b.n	8006094 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	4a26      	ldr	r2, [pc, #152]	@ (80060d8 <USB_SetTurnaroundTime+0x134>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d906      	bls.n	8006052 <USB_SetTurnaroundTime+0xae>
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	4a25      	ldr	r2, [pc, #148]	@ (80060dc <USB_SetTurnaroundTime+0x138>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d202      	bcs.n	8006052 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800604c:	2309      	movs	r3, #9
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	e020      	b.n	8006094 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	4a21      	ldr	r2, [pc, #132]	@ (80060dc <USB_SetTurnaroundTime+0x138>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d306      	bcc.n	8006068 <USB_SetTurnaroundTime+0xc4>
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	4a20      	ldr	r2, [pc, #128]	@ (80060e0 <USB_SetTurnaroundTime+0x13c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d802      	bhi.n	8006068 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006062:	2308      	movs	r3, #8
 8006064:	617b      	str	r3, [r7, #20]
 8006066:	e015      	b.n	8006094 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	4a1d      	ldr	r2, [pc, #116]	@ (80060e0 <USB_SetTurnaroundTime+0x13c>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d906      	bls.n	800607e <USB_SetTurnaroundTime+0xda>
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	4a1c      	ldr	r2, [pc, #112]	@ (80060e4 <USB_SetTurnaroundTime+0x140>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d202      	bcs.n	800607e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006078:	2307      	movs	r3, #7
 800607a:	617b      	str	r3, [r7, #20]
 800607c:	e00a      	b.n	8006094 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800607e:	2306      	movs	r3, #6
 8006080:	617b      	str	r3, [r7, #20]
 8006082:	e007      	b.n	8006094 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006084:	79fb      	ldrb	r3, [r7, #7]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d102      	bne.n	8006090 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800608a:	2309      	movs	r3, #9
 800608c:	617b      	str	r3, [r7, #20]
 800608e:	e001      	b.n	8006094 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006090:	2309      	movs	r3, #9
 8006092:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	029b      	lsls	r3, r3, #10
 80060a8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80060ac:	431a      	orrs	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	371c      	adds	r7, #28
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	00d8acbf 	.word	0x00d8acbf
 80060c4:	00e4e1c0 	.word	0x00e4e1c0
 80060c8:	00f42400 	.word	0x00f42400
 80060cc:	01067380 	.word	0x01067380
 80060d0:	011a499f 	.word	0x011a499f
 80060d4:	01312cff 	.word	0x01312cff
 80060d8:	014ca43f 	.word	0x014ca43f
 80060dc:	016e3600 	.word	0x016e3600
 80060e0:	01a6ab1f 	.word	0x01a6ab1f
 80060e4:	01e84800 	.word	0x01e84800

080060e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f043 0201 	orr.w	r2, r3, #1
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f023 0201 	bic.w	r2, r3, #1
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	460b      	mov	r3, r1
 8006136:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006138:	2300      	movs	r3, #0
 800613a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006148:	78fb      	ldrb	r3, [r7, #3]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d115      	bne.n	800617a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800615a:	200a      	movs	r0, #10
 800615c:	f7fb ff78 	bl	8002050 <HAL_Delay>
      ms += 10U;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	330a      	adds	r3, #10
 8006164:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f001 f93f 	bl	80073ea <USB_GetMode>
 800616c:	4603      	mov	r3, r0
 800616e:	2b01      	cmp	r3, #1
 8006170:	d01e      	beq.n	80061b0 <USB_SetCurrentMode+0x84>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2bc7      	cmp	r3, #199	@ 0xc7
 8006176:	d9f0      	bls.n	800615a <USB_SetCurrentMode+0x2e>
 8006178:	e01a      	b.n	80061b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800617a:	78fb      	ldrb	r3, [r7, #3]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d115      	bne.n	80061ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800618c:	200a      	movs	r0, #10
 800618e:	f7fb ff5f 	bl	8002050 <HAL_Delay>
      ms += 10U;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	330a      	adds	r3, #10
 8006196:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f001 f926 	bl	80073ea <USB_GetMode>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d005      	beq.n	80061b0 <USB_SetCurrentMode+0x84>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2bc7      	cmp	r3, #199	@ 0xc7
 80061a8:	d9f0      	bls.n	800618c <USB_SetCurrentMode+0x60>
 80061aa:	e001      	b.n	80061b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e005      	b.n	80061bc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2bc8      	cmp	r3, #200	@ 0xc8
 80061b4:	d101      	bne.n	80061ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061c4:	b084      	sub	sp, #16
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b086      	sub	sp, #24
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80061d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061d6:	2300      	movs	r3, #0
 80061d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80061de:	2300      	movs	r3, #0
 80061e0:	613b      	str	r3, [r7, #16]
 80061e2:	e009      	b.n	80061f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	3340      	adds	r3, #64	@ 0x40
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	2200      	movs	r2, #0
 80061f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	3301      	adds	r3, #1
 80061f6:	613b      	str	r3, [r7, #16]
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	2b0e      	cmp	r3, #14
 80061fc:	d9f2      	bls.n	80061e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80061fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006202:	2b00      	cmp	r3, #0
 8006204:	d11c      	bne.n	8006240 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006214:	f043 0302 	orr.w	r3, r3, #2
 8006218:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800621e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006236:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	639a      	str	r2, [r3, #56]	@ 0x38
 800623e:	e00b      	b.n	8006258 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006244:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006250:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800625e:	461a      	mov	r2, r3
 8006260:	2300      	movs	r3, #0
 8006262:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006264:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006268:	2b01      	cmp	r3, #1
 800626a:	d10d      	bne.n	8006288 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800626c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006270:	2b00      	cmp	r3, #0
 8006272:	d104      	bne.n	800627e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006274:	2100      	movs	r1, #0
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f968 	bl	800654c <USB_SetDevSpeed>
 800627c:	e008      	b.n	8006290 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800627e:	2101      	movs	r1, #1
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f963 	bl	800654c <USB_SetDevSpeed>
 8006286:	e003      	b.n	8006290 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006288:	2103      	movs	r1, #3
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f95e 	bl	800654c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006290:	2110      	movs	r1, #16
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f8fa 	bl	800648c <USB_FlushTxFifo>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f924 	bl	80064f0 <USB_FlushRxFifo>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d001      	beq.n	80062b2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062b8:	461a      	mov	r2, r3
 80062ba:	2300      	movs	r3, #0
 80062bc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062c4:	461a      	mov	r2, r3
 80062c6:	2300      	movs	r3, #0
 80062c8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062d0:	461a      	mov	r2, r3
 80062d2:	2300      	movs	r3, #0
 80062d4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062d6:	2300      	movs	r3, #0
 80062d8:	613b      	str	r3, [r7, #16]
 80062da:	e043      	b.n	8006364 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062f2:	d118      	bne.n	8006326 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10a      	bne.n	8006310 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	4413      	add	r3, r2
 8006302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006306:	461a      	mov	r2, r3
 8006308:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800630c:	6013      	str	r3, [r2, #0]
 800630e:	e013      	b.n	8006338 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4413      	add	r3, r2
 8006318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800631c:	461a      	mov	r2, r3
 800631e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	e008      	b.n	8006338 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4413      	add	r3, r2
 800632e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006332:	461a      	mov	r2, r3
 8006334:	2300      	movs	r3, #0
 8006336:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006344:	461a      	mov	r2, r3
 8006346:	2300      	movs	r3, #0
 8006348:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	4413      	add	r3, r2
 8006352:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006356:	461a      	mov	r2, r3
 8006358:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800635c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	3301      	adds	r3, #1
 8006362:	613b      	str	r3, [r7, #16]
 8006364:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006368:	461a      	mov	r2, r3
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	4293      	cmp	r3, r2
 800636e:	d3b5      	bcc.n	80062dc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006370:	2300      	movs	r3, #0
 8006372:	613b      	str	r3, [r7, #16]
 8006374:	e043      	b.n	80063fe <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	015a      	lsls	r2, r3, #5
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	4413      	add	r3, r2
 800637e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006388:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800638c:	d118      	bne.n	80063c0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10a      	bne.n	80063aa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063a0:	461a      	mov	r2, r3
 80063a2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80063a6:	6013      	str	r3, [r2, #0]
 80063a8:	e013      	b.n	80063d2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b6:	461a      	mov	r2, r3
 80063b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80063bc:	6013      	str	r3, [r2, #0]
 80063be:	e008      	b.n	80063d2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	015a      	lsls	r2, r3, #5
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4413      	add	r3, r2
 80063c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063cc:	461a      	mov	r2, r3
 80063ce:	2300      	movs	r3, #0
 80063d0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063de:	461a      	mov	r2, r3
 80063e0:	2300      	movs	r3, #0
 80063e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063f0:	461a      	mov	r2, r3
 80063f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	3301      	adds	r3, #1
 80063fc:	613b      	str	r3, [r7, #16]
 80063fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006402:	461a      	mov	r2, r3
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	4293      	cmp	r3, r2
 8006408:	d3b5      	bcc.n	8006376 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006418:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800641c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800642a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800642c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006430:	2b00      	cmp	r3, #0
 8006432:	d105      	bne.n	8006440 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	f043 0210 	orr.w	r2, r3, #16
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	699a      	ldr	r2, [r3, #24]
 8006444:	4b10      	ldr	r3, [pc, #64]	@ (8006488 <USB_DevInit+0x2c4>)
 8006446:	4313      	orrs	r3, r2
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800644c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006450:	2b00      	cmp	r3, #0
 8006452:	d005      	beq.n	8006460 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	f043 0208 	orr.w	r2, r3, #8
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006460:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006464:	2b01      	cmp	r3, #1
 8006466:	d107      	bne.n	8006478 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006470:	f043 0304 	orr.w	r3, r3, #4
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006478:	7dfb      	ldrb	r3, [r7, #23]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006484:	b004      	add	sp, #16
 8006486:	4770      	bx	lr
 8006488:	803c3800 	.word	0x803c3800

0800648c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3301      	adds	r3, #1
 800649e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064a6:	d901      	bls.n	80064ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e01b      	b.n	80064e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	daf2      	bge.n	800649a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80064b4:	2300      	movs	r3, #0
 80064b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	019b      	lsls	r3, r3, #6
 80064bc:	f043 0220 	orr.w	r2, r3, #32
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	3301      	adds	r3, #1
 80064c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064d0:	d901      	bls.n	80064d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e006      	b.n	80064e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	f003 0320 	and.w	r3, r3, #32
 80064de:	2b20      	cmp	r3, #32
 80064e0:	d0f0      	beq.n	80064c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064f8:	2300      	movs	r3, #0
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	3301      	adds	r3, #1
 8006500:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006508:	d901      	bls.n	800650e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e018      	b.n	8006540 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	2b00      	cmp	r3, #0
 8006514:	daf2      	bge.n	80064fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006516:	2300      	movs	r3, #0
 8006518:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2210      	movs	r2, #16
 800651e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	3301      	adds	r3, #1
 8006524:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800652c:	d901      	bls.n	8006532 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e006      	b.n	8006540 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f003 0310 	and.w	r3, r3, #16
 800653a:	2b10      	cmp	r3, #16
 800653c:	d0f0      	beq.n	8006520 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	78fb      	ldrb	r3, [r7, #3]
 8006566:	68f9      	ldr	r1, [r7, #12]
 8006568:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800656c:	4313      	orrs	r3, r2
 800656e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800657e:	b480      	push	{r7}
 8006580:	b087      	sub	sp, #28
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f003 0306 	and.w	r3, r3, #6
 8006596:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d102      	bne.n	80065a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800659e:	2300      	movs	r3, #0
 80065a0:	75fb      	strb	r3, [r7, #23]
 80065a2:	e00a      	b.n	80065ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d002      	beq.n	80065b0 <USB_GetDevSpeed+0x32>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2b06      	cmp	r3, #6
 80065ae:	d102      	bne.n	80065b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80065b0:	2302      	movs	r3, #2
 80065b2:	75fb      	strb	r3, [r7, #23]
 80065b4:	e001      	b.n	80065ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80065b6:	230f      	movs	r3, #15
 80065b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80065ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	371c      	adds	r7, #28
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	785b      	ldrb	r3, [r3, #1]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d13a      	bne.n	800665a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ea:	69da      	ldr	r2, [r3, #28]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	f003 030f 	and.w	r3, r3, #15
 80065f4:	2101      	movs	r1, #1
 80065f6:	fa01 f303 	lsl.w	r3, r1, r3
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	68f9      	ldr	r1, [r7, #12]
 80065fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006602:	4313      	orrs	r3, r2
 8006604:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4413      	add	r3, r2
 800660e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d155      	bne.n	80066c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	791b      	ldrb	r3, [r3, #4]
 8006636:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006638:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	059b      	lsls	r3, r3, #22
 800663e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006640:	4313      	orrs	r3, r2
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	0151      	lsls	r1, r2, #5
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	440a      	add	r2, r1
 800664a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800664e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006652:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006656:	6013      	str	r3, [r2, #0]
 8006658:	e036      	b.n	80066c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006660:	69da      	ldr	r2, [r3, #28]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	f003 030f 	and.w	r3, r3, #15
 800666a:	2101      	movs	r1, #1
 800666c:	fa01 f303 	lsl.w	r3, r1, r3
 8006670:	041b      	lsls	r3, r3, #16
 8006672:	68f9      	ldr	r1, [r7, #12]
 8006674:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006678:	4313      	orrs	r3, r2
 800667a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d11a      	bne.n	80066c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4413      	add	r3, r2
 800669a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	791b      	ldrb	r3, [r3, #4]
 80066ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80066ae:	430b      	orrs	r3, r1
 80066b0:	4313      	orrs	r3, r2
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	0151      	lsls	r1, r2, #5
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	440a      	add	r2, r1
 80066ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
	...

080066d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	785b      	ldrb	r3, [r3, #1]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d161      	bne.n	80067b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006706:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800670a:	d11f      	bne.n	800674c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4413      	add	r3, r2
 8006714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	0151      	lsls	r1, r2, #5
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	440a      	add	r2, r1
 8006722:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006726:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800672a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4413      	add	r3, r2
 8006734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	0151      	lsls	r1, r2, #5
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	440a      	add	r2, r1
 8006742:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006746:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800674a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006752:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	f003 030f 	and.w	r3, r3, #15
 800675c:	2101      	movs	r1, #1
 800675e:	fa01 f303 	lsl.w	r3, r1, r3
 8006762:	b29b      	uxth	r3, r3
 8006764:	43db      	mvns	r3, r3
 8006766:	68f9      	ldr	r1, [r7, #12]
 8006768:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800676c:	4013      	ands	r3, r2
 800676e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006776:	69da      	ldr	r2, [r3, #28]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	f003 030f 	and.w	r3, r3, #15
 8006780:	2101      	movs	r1, #1
 8006782:	fa01 f303 	lsl.w	r3, r1, r3
 8006786:	b29b      	uxth	r3, r3
 8006788:	43db      	mvns	r3, r3
 800678a:	68f9      	ldr	r1, [r7, #12]
 800678c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006790:	4013      	ands	r3, r2
 8006792:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4413      	add	r3, r2
 800679c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	0159      	lsls	r1, r3, #5
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	440b      	add	r3, r1
 80067aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067ae:	4619      	mov	r1, r3
 80067b0:	4b35      	ldr	r3, [pc, #212]	@ (8006888 <USB_DeactivateEndpoint+0x1b0>)
 80067b2:	4013      	ands	r3, r2
 80067b4:	600b      	str	r3, [r1, #0]
 80067b6:	e060      	b.n	800687a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067ce:	d11f      	bne.n	8006810 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	0151      	lsls	r1, r2, #5
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	440a      	add	r2, r1
 80067e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80067ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	015a      	lsls	r2, r3, #5
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	0151      	lsls	r1, r2, #5
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	440a      	add	r2, r1
 8006806:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800680a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800680e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006816:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	f003 030f 	and.w	r3, r3, #15
 8006820:	2101      	movs	r1, #1
 8006822:	fa01 f303 	lsl.w	r3, r1, r3
 8006826:	041b      	lsls	r3, r3, #16
 8006828:	43db      	mvns	r3, r3
 800682a:	68f9      	ldr	r1, [r7, #12]
 800682c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006830:	4013      	ands	r3, r2
 8006832:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800683a:	69da      	ldr	r2, [r3, #28]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	f003 030f 	and.w	r3, r3, #15
 8006844:	2101      	movs	r1, #1
 8006846:	fa01 f303 	lsl.w	r3, r1, r3
 800684a:	041b      	lsls	r3, r3, #16
 800684c:	43db      	mvns	r3, r3
 800684e:	68f9      	ldr	r1, [r7, #12]
 8006850:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006854:	4013      	ands	r3, r2
 8006856:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	4413      	add	r3, r2
 8006860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	0159      	lsls	r1, r3, #5
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	440b      	add	r3, r1
 800686e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006872:	4619      	mov	r1, r3
 8006874:	4b05      	ldr	r3, [pc, #20]	@ (800688c <USB_DeactivateEndpoint+0x1b4>)
 8006876:	4013      	ands	r3, r2
 8006878:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	ec337800 	.word	0xec337800
 800688c:	eff37800 	.word	0xeff37800

08006890 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b08a      	sub	sp, #40	@ 0x28
 8006894:	af02      	add	r7, sp, #8
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	4613      	mov	r3, r2
 800689c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	785b      	ldrb	r3, [r3, #1]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	f040 817f 	bne.w	8006bb0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d132      	bne.n	8006920 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	69ba      	ldr	r2, [r7, #24]
 80068ca:	0151      	lsls	r1, r2, #5
 80068cc:	69fa      	ldr	r2, [r7, #28]
 80068ce:	440a      	add	r2, r1
 80068d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068d4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80068d8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80068dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	015a      	lsls	r2, r3, #5
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	4413      	add	r3, r2
 80068e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	69ba      	ldr	r2, [r7, #24]
 80068ee:	0151      	lsls	r1, r2, #5
 80068f0:	69fa      	ldr	r2, [r7, #28]
 80068f2:	440a      	add	r2, r1
 80068f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	4413      	add	r3, r2
 8006906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	0151      	lsls	r1, r2, #5
 8006910:	69fa      	ldr	r2, [r7, #28]
 8006912:	440a      	add	r2, r1
 8006914:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006918:	0cdb      	lsrs	r3, r3, #19
 800691a:	04db      	lsls	r3, r3, #19
 800691c:	6113      	str	r3, [r2, #16]
 800691e:	e097      	b.n	8006a50 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	69ba      	ldr	r2, [r7, #24]
 8006930:	0151      	lsls	r1, r2, #5
 8006932:	69fa      	ldr	r2, [r7, #28]
 8006934:	440a      	add	r2, r1
 8006936:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800693a:	0cdb      	lsrs	r3, r3, #19
 800693c:	04db      	lsls	r3, r3, #19
 800693e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	4413      	add	r3, r2
 8006948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	0151      	lsls	r1, r2, #5
 8006952:	69fa      	ldr	r2, [r7, #28]
 8006954:	440a      	add	r2, r1
 8006956:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800695a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800695e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006962:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d11a      	bne.n	80069a0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	691a      	ldr	r2, [r3, #16]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	429a      	cmp	r2, r3
 8006974:	d903      	bls.n	800697e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	689a      	ldr	r2, [r3, #8]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	015a      	lsls	r2, r3, #5
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	4413      	add	r3, r2
 8006986:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	0151      	lsls	r1, r2, #5
 8006990:	69fa      	ldr	r2, [r7, #28]
 8006992:	440a      	add	r2, r1
 8006994:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006998:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800699c:	6113      	str	r3, [r2, #16]
 800699e:	e044      	b.n	8006a2a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	691a      	ldr	r2, [r3, #16]
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	4413      	add	r3, r2
 80069aa:	1e5a      	subs	r2, r3, #1
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069c2:	691a      	ldr	r2, [r3, #16]
 80069c4:	8afb      	ldrh	r3, [r7, #22]
 80069c6:	04d9      	lsls	r1, r3, #19
 80069c8:	4ba4      	ldr	r3, [pc, #656]	@ (8006c5c <USB_EPStartXfer+0x3cc>)
 80069ca:	400b      	ands	r3, r1
 80069cc:	69b9      	ldr	r1, [r7, #24]
 80069ce:	0148      	lsls	r0, r1, #5
 80069d0:	69f9      	ldr	r1, [r7, #28]
 80069d2:	4401      	add	r1, r0
 80069d4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80069d8:	4313      	orrs	r3, r2
 80069da:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	791b      	ldrb	r3, [r3, #4]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d122      	bne.n	8006a2a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	69ba      	ldr	r2, [r7, #24]
 80069f4:	0151      	lsls	r1, r2, #5
 80069f6:	69fa      	ldr	r2, [r7, #28]
 80069f8:	440a      	add	r2, r1
 80069fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069fe:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006a02:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a10:	691a      	ldr	r2, [r3, #16]
 8006a12:	8afb      	ldrh	r3, [r7, #22]
 8006a14:	075b      	lsls	r3, r3, #29
 8006a16:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006a1a:	69b9      	ldr	r1, [r7, #24]
 8006a1c:	0148      	lsls	r0, r1, #5
 8006a1e:	69f9      	ldr	r1, [r7, #28]
 8006a20:	4401      	add	r1, r0
 8006a22:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006a26:	4313      	orrs	r3, r2
 8006a28:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a36:	691a      	ldr	r2, [r3, #16]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a40:	69b9      	ldr	r1, [r7, #24]
 8006a42:	0148      	lsls	r0, r1, #5
 8006a44:	69f9      	ldr	r1, [r7, #28]
 8006a46:	4401      	add	r1, r0
 8006a48:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a50:	79fb      	ldrb	r3, [r7, #7]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d14b      	bne.n	8006aee <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d009      	beq.n	8006a72 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	015a      	lsls	r2, r3, #5
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	69db      	ldr	r3, [r3, #28]
 8006a70:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	791b      	ldrb	r3, [r3, #4]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d128      	bne.n	8006acc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d110      	bne.n	8006aac <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	0151      	lsls	r1, r2, #5
 8006a9c:	69fa      	ldr	r2, [r7, #28]
 8006a9e:	440a      	add	r2, r1
 8006aa0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006aa4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006aa8:	6013      	str	r3, [r2, #0]
 8006aaa:	e00f      	b.n	8006acc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	015a      	lsls	r2, r3, #5
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	69ba      	ldr	r2, [r7, #24]
 8006abc:	0151      	lsls	r1, r2, #5
 8006abe:	69fa      	ldr	r2, [r7, #28]
 8006ac0:	440a      	add	r2, r1
 8006ac2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006aca:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	015a      	lsls	r2, r3, #5
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	0151      	lsls	r1, r2, #5
 8006ade:	69fa      	ldr	r2, [r7, #28]
 8006ae0:	440a      	add	r2, r1
 8006ae2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ae6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006aea:	6013      	str	r3, [r2, #0]
 8006aec:	e166      	b.n	8006dbc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	015a      	lsls	r2, r3, #5
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	4413      	add	r3, r2
 8006af6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	0151      	lsls	r1, r2, #5
 8006b00:	69fa      	ldr	r2, [r7, #28]
 8006b02:	440a      	add	r2, r1
 8006b04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b08:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006b0c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	791b      	ldrb	r3, [r3, #4]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d015      	beq.n	8006b42 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 814e 	beq.w	8006dbc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	f003 030f 	and.w	r3, r3, #15
 8006b30:	2101      	movs	r1, #1
 8006b32:	fa01 f303 	lsl.w	r3, r1, r3
 8006b36:	69f9      	ldr	r1, [r7, #28]
 8006b38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	634b      	str	r3, [r1, #52]	@ 0x34
 8006b40:	e13c      	b.n	8006dbc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d110      	bne.n	8006b74 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	015a      	lsls	r2, r3, #5
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	0151      	lsls	r1, r2, #5
 8006b64:	69fa      	ldr	r2, [r7, #28]
 8006b66:	440a      	add	r2, r1
 8006b68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b6c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b70:	6013      	str	r3, [r2, #0]
 8006b72:	e00f      	b.n	8006b94 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	69ba      	ldr	r2, [r7, #24]
 8006b84:	0151      	lsls	r1, r2, #5
 8006b86:	69fa      	ldr	r2, [r7, #28]
 8006b88:	440a      	add	r2, r1
 8006b8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b92:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	68d9      	ldr	r1, [r3, #12]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	781a      	ldrb	r2, [r3, #0]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	b298      	uxth	r0, r3
 8006ba2:	79fb      	ldrb	r3, [r7, #7]
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f000 f9b9 	bl	8006f20 <USB_WritePacket>
 8006bae:	e105      	b.n	8006dbc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	015a      	lsls	r2, r3, #5
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	0151      	lsls	r1, r2, #5
 8006bc2:	69fa      	ldr	r2, [r7, #28]
 8006bc4:	440a      	add	r2, r1
 8006bc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bca:	0cdb      	lsrs	r3, r3, #19
 8006bcc:	04db      	lsls	r3, r3, #19
 8006bce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	015a      	lsls	r2, r3, #5
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	0151      	lsls	r1, r2, #5
 8006be2:	69fa      	ldr	r2, [r7, #28]
 8006be4:	440a      	add	r2, r1
 8006be6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006bee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006bf2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d132      	bne.n	8006c60 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	689a      	ldr	r2, [r3, #8]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	689a      	ldr	r2, [r3, #8]
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	015a      	lsls	r2, r3, #5
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c1e:	691a      	ldr	r2, [r3, #16]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c28:	69b9      	ldr	r1, [r7, #24]
 8006c2a:	0148      	lsls	r0, r1, #5
 8006c2c:	69f9      	ldr	r1, [r7, #28]
 8006c2e:	4401      	add	r1, r0
 8006c30:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006c34:	4313      	orrs	r3, r2
 8006c36:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	0151      	lsls	r1, r2, #5
 8006c4a:	69fa      	ldr	r2, [r7, #28]
 8006c4c:	440a      	add	r2, r1
 8006c4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c56:	6113      	str	r3, [r2, #16]
 8006c58:	e062      	b.n	8006d20 <USB_EPStartXfer+0x490>
 8006c5a:	bf00      	nop
 8006c5c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d123      	bne.n	8006cb0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c74:	691a      	ldr	r2, [r3, #16]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c7e:	69b9      	ldr	r1, [r7, #24]
 8006c80:	0148      	lsls	r0, r1, #5
 8006c82:	69f9      	ldr	r1, [r7, #28]
 8006c84:	4401      	add	r1, r0
 8006c86:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	69ba      	ldr	r2, [r7, #24]
 8006c9e:	0151      	lsls	r1, r2, #5
 8006ca0:	69fa      	ldr	r2, [r7, #28]
 8006ca2:	440a      	add	r2, r1
 8006ca4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ca8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006cac:	6113      	str	r3, [r2, #16]
 8006cae:	e037      	b.n	8006d20 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	691a      	ldr	r2, [r3, #16]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	4413      	add	r3, r2
 8006cba:	1e5a      	subs	r2, r3, #1
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cc4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	8afa      	ldrh	r2, [r7, #22]
 8006ccc:	fb03 f202 	mul.w	r2, r3, r2
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ce0:	691a      	ldr	r2, [r3, #16]
 8006ce2:	8afb      	ldrh	r3, [r7, #22]
 8006ce4:	04d9      	lsls	r1, r3, #19
 8006ce6:	4b38      	ldr	r3, [pc, #224]	@ (8006dc8 <USB_EPStartXfer+0x538>)
 8006ce8:	400b      	ands	r3, r1
 8006cea:	69b9      	ldr	r1, [r7, #24]
 8006cec:	0148      	lsls	r0, r1, #5
 8006cee:	69f9      	ldr	r1, [r7, #28]
 8006cf0:	4401      	add	r1, r0
 8006cf2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d06:	691a      	ldr	r2, [r3, #16]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d10:	69b9      	ldr	r1, [r7, #24]
 8006d12:	0148      	lsls	r0, r1, #5
 8006d14:	69f9      	ldr	r1, [r7, #28]
 8006d16:	4401      	add	r1, r0
 8006d18:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006d20:	79fb      	ldrb	r3, [r7, #7]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d10d      	bne.n	8006d42 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d009      	beq.n	8006d42 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	68d9      	ldr	r1, [r3, #12]
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	015a      	lsls	r2, r3, #5
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	4413      	add	r3, r2
 8006d3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d3e:	460a      	mov	r2, r1
 8006d40:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	791b      	ldrb	r3, [r3, #4]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d128      	bne.n	8006d9c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d110      	bne.n	8006d7c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	015a      	lsls	r2, r3, #5
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	0151      	lsls	r1, r2, #5
 8006d6c:	69fa      	ldr	r2, [r7, #28]
 8006d6e:	440a      	add	r2, r1
 8006d70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d74:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d78:	6013      	str	r3, [r2, #0]
 8006d7a:	e00f      	b.n	8006d9c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	69ba      	ldr	r2, [r7, #24]
 8006d8c:	0151      	lsls	r1, r2, #5
 8006d8e:	69fa      	ldr	r2, [r7, #28]
 8006d90:	440a      	add	r2, r1
 8006d92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d9a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	0151      	lsls	r1, r2, #5
 8006dae:	69fa      	ldr	r2, [r7, #28]
 8006db0:	440a      	add	r2, r1
 8006db2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006db6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006dba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3720      	adds	r7, #32
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	1ff80000 	.word	0x1ff80000

08006dcc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	785b      	ldrb	r3, [r3, #1]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d14a      	bne.n	8006e80 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e02:	f040 8086 	bne.w	8006f12 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	683a      	ldr	r2, [r7, #0]
 8006e18:	7812      	ldrb	r2, [r2, #0]
 8006e1a:	0151      	lsls	r1, r2, #5
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	440a      	add	r2, r1
 8006e20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e24:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006e28:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	7812      	ldrb	r2, [r2, #0]
 8006e3e:	0151      	lsls	r1, r2, #5
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	440a      	add	r2, r1
 8006e44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	3301      	adds	r3, #1
 8006e52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d902      	bls.n	8006e64 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	75fb      	strb	r3, [r7, #23]
          break;
 8006e62:	e056      	b.n	8006f12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e7c:	d0e7      	beq.n	8006e4e <USB_EPStopXfer+0x82>
 8006e7e:	e048      	b.n	8006f12 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	015a      	lsls	r2, r3, #5
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	4413      	add	r3, r2
 8006e8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e98:	d13b      	bne.n	8006f12 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	7812      	ldrb	r2, [r2, #0]
 8006eae:	0151      	lsls	r1, r2, #5
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	440a      	add	r2, r1
 8006eb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006eb8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006ebc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	683a      	ldr	r2, [r7, #0]
 8006ed0:	7812      	ldrb	r2, [r2, #0]
 8006ed2:	0151      	lsls	r1, r2, #5
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	440a      	add	r2, r1
 8006ed8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006edc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ee0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d902      	bls.n	8006ef8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ef6:	e00c      	b.n	8006f12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f10:	d0e7      	beq.n	8006ee2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	371c      	adds	r7, #28
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b089      	sub	sp, #36	@ 0x24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	460b      	mov	r3, r1
 8006f30:	71fb      	strb	r3, [r7, #7]
 8006f32:	4613      	mov	r3, r2
 8006f34:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006f3e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d123      	bne.n	8006f8e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f46:	88bb      	ldrh	r3, [r7, #4]
 8006f48:	3303      	adds	r3, #3
 8006f4a:	089b      	lsrs	r3, r3, #2
 8006f4c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006f4e:	2300      	movs	r3, #0
 8006f50:	61bb      	str	r3, [r7, #24]
 8006f52:	e018      	b.n	8006f86 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f54:	79fb      	ldrb	r3, [r7, #7]
 8006f56:	031a      	lsls	r2, r3, #12
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f60:	461a      	mov	r2, r3
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	3301      	adds	r3, #1
 8006f72:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	3301      	adds	r3, #1
 8006f78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	3301      	adds	r3, #1
 8006f84:	61bb      	str	r3, [r7, #24]
 8006f86:	69ba      	ldr	r2, [r7, #24]
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d3e2      	bcc.n	8006f54 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3724      	adds	r7, #36	@ 0x24
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b08b      	sub	sp, #44	@ 0x2c
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006fb2:	88fb      	ldrh	r3, [r7, #6]
 8006fb4:	089b      	lsrs	r3, r3, #2
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006fba:	88fb      	ldrh	r3, [r7, #6]
 8006fbc:	f003 0303 	and.w	r3, r3, #3
 8006fc0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	623b      	str	r3, [r7, #32]
 8006fc6:	e014      	b.n	8006ff2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd2:	601a      	str	r2, [r3, #0]
    pDest++;
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fdc:	3301      	adds	r3, #1
 8006fde:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe8:	3301      	adds	r3, #1
 8006fea:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006fec:	6a3b      	ldr	r3, [r7, #32]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	623b      	str	r3, [r7, #32]
 8006ff2:	6a3a      	ldr	r2, [r7, #32]
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d3e6      	bcc.n	8006fc8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006ffa:	8bfb      	ldrh	r3, [r7, #30]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01e      	beq.n	800703e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007000:	2300      	movs	r3, #0
 8007002:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800700a:	461a      	mov	r2, r3
 800700c:	f107 0310 	add.w	r3, r7, #16
 8007010:	6812      	ldr	r2, [r2, #0]
 8007012:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	b2db      	uxtb	r3, r3
 800701a:	00db      	lsls	r3, r3, #3
 800701c:	fa22 f303 	lsr.w	r3, r2, r3
 8007020:	b2da      	uxtb	r2, r3
 8007022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007024:	701a      	strb	r2, [r3, #0]
      i++;
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	3301      	adds	r3, #1
 800702a:	623b      	str	r3, [r7, #32]
      pDest++;
 800702c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702e:	3301      	adds	r3, #1
 8007030:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007032:	8bfb      	ldrh	r3, [r7, #30]
 8007034:	3b01      	subs	r3, #1
 8007036:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007038:	8bfb      	ldrh	r3, [r7, #30]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1ea      	bne.n	8007014 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800703e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007040:	4618      	mov	r0, r3
 8007042:	372c      	adds	r7, #44	@ 0x2c
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	785b      	ldrb	r3, [r3, #1]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d12c      	bne.n	80070c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	4413      	add	r3, r2
 8007070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	db12      	blt.n	80070a0 <USB_EPSetStall+0x54>
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00f      	beq.n	80070a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4413      	add	r3, r2
 8007088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	0151      	lsls	r1, r2, #5
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	440a      	add	r2, r1
 8007096:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800709a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800709e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	015a      	lsls	r2, r3, #5
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	0151      	lsls	r1, r2, #5
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	440a      	add	r2, r1
 80070b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	e02b      	b.n	800711a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	db12      	blt.n	80070fa <USB_EPSetStall+0xae>
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00f      	beq.n	80070fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	0151      	lsls	r1, r2, #5
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	440a      	add	r2, r1
 80070f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80070f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	4413      	add	r3, r2
 8007102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	0151      	lsls	r1, r2, #5
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	440a      	add	r2, r1
 8007110:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007114:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007118:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3714      	adds	r7, #20
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	785b      	ldrb	r3, [r3, #1]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d128      	bne.n	8007196 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	015a      	lsls	r2, r3, #5
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	4413      	add	r3, r2
 800714c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	0151      	lsls	r1, r2, #5
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	440a      	add	r2, r1
 800715a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800715e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007162:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	791b      	ldrb	r3, [r3, #4]
 8007168:	2b03      	cmp	r3, #3
 800716a:	d003      	beq.n	8007174 <USB_EPClearStall+0x4c>
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	791b      	ldrb	r3, [r3, #4]
 8007170:	2b02      	cmp	r3, #2
 8007172:	d138      	bne.n	80071e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	0151      	lsls	r1, r2, #5
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	440a      	add	r2, r1
 800718a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800718e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	e027      	b.n	80071e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	015a      	lsls	r2, r3, #5
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	4413      	add	r3, r2
 800719e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	0151      	lsls	r1, r2, #5
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	440a      	add	r2, r1
 80071ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80071b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	791b      	ldrb	r3, [r3, #4]
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d003      	beq.n	80071c6 <USB_EPClearStall+0x9e>
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	791b      	ldrb	r3, [r3, #4]
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d10f      	bne.n	80071e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	0151      	lsls	r1, r2, #5
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	440a      	add	r2, r1
 80071dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3714      	adds	r7, #20
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007212:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007216:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	78fb      	ldrb	r3, [r7, #3]
 8007222:	011b      	lsls	r3, r3, #4
 8007224:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007228:	68f9      	ldr	r1, [r7, #12]
 800722a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800722e:	4313      	orrs	r3, r2
 8007230:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800725a:	f023 0303 	bic.w	r3, r3, #3
 800725e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800726e:	f023 0302 	bic.w	r3, r3, #2
 8007272:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3714      	adds	r7, #20
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr

08007282 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007282:	b480      	push	{r7}
 8007284:	b085      	sub	sp, #20
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800729c:	f023 0303 	bic.w	r3, r3, #3
 80072a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072b0:	f043 0302 	orr.w	r3, r3, #2
 80072b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	4013      	ands	r3, r2
 80072da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80072dc:	68fb      	ldr	r3, [r7, #12]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b085      	sub	sp, #20
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	4013      	ands	r3, r2
 800730c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	0c1b      	lsrs	r3, r3, #16
}
 8007312:	4618      	mov	r0, r3
 8007314:	3714      	adds	r7, #20
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800731e:	b480      	push	{r7}
 8007320:	b085      	sub	sp, #20
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800733a:	69db      	ldr	r3, [r3, #28]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	4013      	ands	r3, r2
 8007340:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	b29b      	uxth	r3, r3
}
 8007346:	4618      	mov	r0, r3
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007352:	b480      	push	{r7}
 8007354:	b085      	sub	sp, #20
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	460b      	mov	r3, r1
 800735c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007362:	78fb      	ldrb	r3, [r7, #3]
 8007364:	015a      	lsls	r2, r3, #5
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	4413      	add	r3, r2
 800736a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	4013      	ands	r3, r2
 800737e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007380:	68bb      	ldr	r3, [r7, #8]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800738e:	b480      	push	{r7}
 8007390:	b087      	sub	sp, #28
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
 8007396:	460b      	mov	r3, r1
 8007398:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80073b2:	78fb      	ldrb	r3, [r7, #3]
 80073b4:	f003 030f 	and.w	r3, r3, #15
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	fa22 f303 	lsr.w	r3, r2, r3
 80073be:	01db      	lsls	r3, r3, #7
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80073c8:	78fb      	ldrb	r3, [r7, #3]
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	4013      	ands	r3, r2
 80073da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073dc:	68bb      	ldr	r3, [r7, #8]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	371c      	adds	r7, #28
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr

080073ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b083      	sub	sp, #12
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	f003 0301 	and.w	r3, r3, #1
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007406:	b480      	push	{r7}
 8007408:	b085      	sub	sp, #20
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007420:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007424:	f023 0307 	bic.w	r3, r3, #7
 8007428:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800743c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800744c:	b480      	push	{r7}
 800744e:	b087      	sub	sp, #28
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	460b      	mov	r3, r1
 8007456:	607a      	str	r2, [r7, #4]
 8007458:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	333c      	adds	r3, #60	@ 0x3c
 8007462:	3304      	adds	r3, #4
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	4a26      	ldr	r2, [pc, #152]	@ (8007504 <USB_EP0_OutStart+0xb8>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d90a      	bls.n	8007486 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800747c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007480:	d101      	bne.n	8007486 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	e037      	b.n	80074f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800748c:	461a      	mov	r2, r3
 800748e:	2300      	movs	r3, #0
 8007490:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80074a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074b4:	f043 0318 	orr.w	r3, r3, #24
 80074b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074c8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80074cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80074ce:	7afb      	ldrb	r3, [r7, #11]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d10f      	bne.n	80074f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074da:	461a      	mov	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074ee:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80074f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	371c      	adds	r7, #28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	4f54300a 	.word	0x4f54300a

08007508 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007510:	2300      	movs	r3, #0
 8007512:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	3301      	adds	r3, #1
 8007518:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007520:	d901      	bls.n	8007526 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e022      	b.n	800756c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	daf2      	bge.n	8007514 <USB_CoreReset+0xc>

  count = 10U;
 800752e:	230a      	movs	r3, #10
 8007530:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007532:	e002      	b.n	800753a <USB_CoreReset+0x32>
  {
    count--;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	3b01      	subs	r3, #1
 8007538:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1f9      	bne.n	8007534 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	f043 0201 	orr.w	r2, r3, #1
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	3301      	adds	r3, #1
 8007550:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007558:	d901      	bls.n	800755e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e006      	b.n	800756c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b01      	cmp	r3, #1
 8007568:	d0f0      	beq.n	800754c <USB_CoreReset+0x44>

  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3714      	adds	r7, #20
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	460b      	mov	r3, r1
 8007582:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007584:	2010      	movs	r0, #16
 8007586:	f002 f943 	bl	8009810 <USBD_static_malloc>
 800758a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d109      	bne.n	80075a6 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	32b0      	adds	r2, #176	@ 0xb0
 800759c:	2100      	movs	r1, #0
 800759e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80075a2:	2302      	movs	r3, #2
 80075a4:	e048      	b.n	8007638 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	32b0      	adds	r2, #176	@ 0xb0
 80075b0:	68f9      	ldr	r1, [r7, #12]
 80075b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	32b0      	adds	r2, #176	@ 0xb0
 80075c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	7c1b      	ldrb	r3, [r3, #16]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10d      	bne.n	80075ee <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80075d2:	4b1b      	ldr	r3, [pc, #108]	@ (8007640 <USBD_HID_Init+0xc8>)
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	f003 020f 	and.w	r2, r3, #15
 80075da:	6879      	ldr	r1, [r7, #4]
 80075dc:	4613      	mov	r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	4413      	add	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	440b      	add	r3, r1
 80075e6:	331c      	adds	r3, #28
 80075e8:	2207      	movs	r2, #7
 80075ea:	601a      	str	r2, [r3, #0]
 80075ec:	e00c      	b.n	8007608 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80075ee:	4b14      	ldr	r3, [pc, #80]	@ (8007640 <USBD_HID_Init+0xc8>)
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	f003 020f 	and.w	r2, r3, #15
 80075f6:	6879      	ldr	r1, [r7, #4]
 80075f8:	4613      	mov	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4413      	add	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	440b      	add	r3, r1
 8007602:	331c      	adds	r3, #28
 8007604:	220a      	movs	r2, #10
 8007606:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007608:	4b0d      	ldr	r3, [pc, #52]	@ (8007640 <USBD_HID_Init+0xc8>)
 800760a:	7819      	ldrb	r1, [r3, #0]
 800760c:	2304      	movs	r3, #4
 800760e:	2203      	movs	r2, #3
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f001 ffec 	bl	80095ee <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8007616:	4b0a      	ldr	r3, [pc, #40]	@ (8007640 <USBD_HID_Init+0xc8>)
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	f003 020f 	and.w	r2, r3, #15
 800761e:	6879      	ldr	r1, [r7, #4]
 8007620:	4613      	mov	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4413      	add	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	440b      	add	r3, r1
 800762a:	3323      	adds	r3, #35	@ 0x23
 800762c:	2201      	movs	r2, #1
 800762e:	701a      	strb	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	2000015a 	.word	0x2000015a

08007644 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	460b      	mov	r3, r1
 800764e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8007650:	4b1f      	ldr	r3, [pc, #124]	@ (80076d0 <USBD_HID_DeInit+0x8c>)
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	4619      	mov	r1, r3
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f001 ffef 	bl	800963a <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800765c:	4b1c      	ldr	r3, [pc, #112]	@ (80076d0 <USBD_HID_DeInit+0x8c>)
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	f003 020f 	and.w	r2, r3, #15
 8007664:	6879      	ldr	r1, [r7, #4]
 8007666:	4613      	mov	r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	4413      	add	r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	440b      	add	r3, r1
 8007670:	3323      	adds	r3, #35	@ 0x23
 8007672:	2200      	movs	r2, #0
 8007674:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8007676:	4b16      	ldr	r3, [pc, #88]	@ (80076d0 <USBD_HID_DeInit+0x8c>)
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	f003 020f 	and.w	r2, r3, #15
 800767e:	6879      	ldr	r1, [r7, #4]
 8007680:	4613      	mov	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	440b      	add	r3, r1
 800768a:	331c      	adds	r3, #28
 800768c:	2200      	movs	r2, #0
 800768e:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	32b0      	adds	r2, #176	@ 0xb0
 800769a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d011      	beq.n	80076c6 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	32b0      	adds	r2, #176	@ 0xb0
 80076ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b0:	4618      	mov	r0, r3
 80076b2:	f002 f8bb 	bl	800982c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	32b0      	adds	r2, #176	@ 0xb0
 80076c0:	2100      	movs	r1, #0
 80076c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3708      	adds	r7, #8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	2000015a 	.word	0x2000015a

080076d4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	32b0      	adds	r2, #176	@ 0xb0
 80076e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ec:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ee:	2300      	movs	r3, #0
 80076f0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e0e8      	b.n	80078d2 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007708:	2b00      	cmp	r3, #0
 800770a:	d046      	beq.n	800779a <USBD_HID_Setup+0xc6>
 800770c:	2b20      	cmp	r3, #32
 800770e:	f040 80d8 	bne.w	80078c2 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	785b      	ldrb	r3, [r3, #1]
 8007716:	3b02      	subs	r3, #2
 8007718:	2b09      	cmp	r3, #9
 800771a:	d836      	bhi.n	800778a <USBD_HID_Setup+0xb6>
 800771c:	a201      	add	r2, pc, #4	@ (adr r2, 8007724 <USBD_HID_Setup+0x50>)
 800771e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007722:	bf00      	nop
 8007724:	0800777b 	.word	0x0800777b
 8007728:	0800775b 	.word	0x0800775b
 800772c:	0800778b 	.word	0x0800778b
 8007730:	0800778b 	.word	0x0800778b
 8007734:	0800778b 	.word	0x0800778b
 8007738:	0800778b 	.word	0x0800778b
 800773c:	0800778b 	.word	0x0800778b
 8007740:	0800778b 	.word	0x0800778b
 8007744:	08007769 	.word	0x08007769
 8007748:	0800774d 	.word	0x0800774d
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	885b      	ldrh	r3, [r3, #2]
 8007750:	b2db      	uxtb	r3, r3
 8007752:	461a      	mov	r2, r3
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	601a      	str	r2, [r3, #0]
          break;
 8007758:	e01e      	b.n	8007798 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2201      	movs	r2, #1
 800775e:	4619      	mov	r1, r3
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f001 fbfb 	bl	8008f5c <USBD_CtlSendData>
          break;
 8007766:	e017      	b.n	8007798 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	885b      	ldrh	r3, [r3, #2]
 800776c:	0a1b      	lsrs	r3, r3, #8
 800776e:	b29b      	uxth	r3, r3
 8007770:	b2db      	uxtb	r3, r3
 8007772:	461a      	mov	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	605a      	str	r2, [r3, #4]
          break;
 8007778:	e00e      	b.n	8007798 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3304      	adds	r3, #4
 800777e:	2201      	movs	r2, #1
 8007780:	4619      	mov	r1, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f001 fbea 	bl	8008f5c <USBD_CtlSendData>
          break;
 8007788:	e006      	b.n	8007798 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800778a:	6839      	ldr	r1, [r7, #0]
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f001 fb68 	bl	8008e62 <USBD_CtlError>
          ret = USBD_FAIL;
 8007792:	2303      	movs	r3, #3
 8007794:	75fb      	strb	r3, [r7, #23]
          break;
 8007796:	bf00      	nop
      }
      break;
 8007798:	e09a      	b.n	80078d0 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	785b      	ldrb	r3, [r3, #1]
 800779e:	2b0b      	cmp	r3, #11
 80077a0:	f200 8086 	bhi.w	80078b0 <USBD_HID_Setup+0x1dc>
 80077a4:	a201      	add	r2, pc, #4	@ (adr r2, 80077ac <USBD_HID_Setup+0xd8>)
 80077a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077aa:	bf00      	nop
 80077ac:	080077dd 	.word	0x080077dd
 80077b0:	080078bf 	.word	0x080078bf
 80077b4:	080078b1 	.word	0x080078b1
 80077b8:	080078b1 	.word	0x080078b1
 80077bc:	080078b1 	.word	0x080078b1
 80077c0:	080078b1 	.word	0x080078b1
 80077c4:	08007807 	.word	0x08007807
 80077c8:	080078b1 	.word	0x080078b1
 80077cc:	080078b1 	.word	0x080078b1
 80077d0:	080078b1 	.word	0x080078b1
 80077d4:	0800785f 	.word	0x0800785f
 80077d8:	08007889 	.word	0x08007889
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	2b03      	cmp	r3, #3
 80077e6:	d107      	bne.n	80077f8 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80077e8:	f107 030a 	add.w	r3, r7, #10
 80077ec:	2202      	movs	r2, #2
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f001 fbb3 	bl	8008f5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077f6:	e063      	b.n	80078c0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80077f8:	6839      	ldr	r1, [r7, #0]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f001 fb31 	bl	8008e62 <USBD_CtlError>
            ret = USBD_FAIL;
 8007800:	2303      	movs	r3, #3
 8007802:	75fb      	strb	r3, [r7, #23]
          break;
 8007804:	e05c      	b.n	80078c0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	885b      	ldrh	r3, [r3, #2]
 800780a:	0a1b      	lsrs	r3, r3, #8
 800780c:	b29b      	uxth	r3, r3
 800780e:	2b22      	cmp	r3, #34	@ 0x22
 8007810:	d108      	bne.n	8007824 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	88db      	ldrh	r3, [r3, #6]
 8007816:	2b4a      	cmp	r3, #74	@ 0x4a
 8007818:	bf28      	it	cs
 800781a:	234a      	movcs	r3, #74	@ 0x4a
 800781c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800781e:	4b2f      	ldr	r3, [pc, #188]	@ (80078dc <USBD_HID_Setup+0x208>)
 8007820:	613b      	str	r3, [r7, #16]
 8007822:	e015      	b.n	8007850 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	885b      	ldrh	r3, [r3, #2]
 8007828:	0a1b      	lsrs	r3, r3, #8
 800782a:	b29b      	uxth	r3, r3
 800782c:	2b21      	cmp	r3, #33	@ 0x21
 800782e:	d108      	bne.n	8007842 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8007830:	4b2b      	ldr	r3, [pc, #172]	@ (80078e0 <USBD_HID_Setup+0x20c>)
 8007832:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	88db      	ldrh	r3, [r3, #6]
 8007838:	2b09      	cmp	r3, #9
 800783a:	bf28      	it	cs
 800783c:	2309      	movcs	r3, #9
 800783e:	82bb      	strh	r3, [r7, #20]
 8007840:	e006      	b.n	8007850 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007842:	6839      	ldr	r1, [r7, #0]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f001 fb0c 	bl	8008e62 <USBD_CtlError>
            ret = USBD_FAIL;
 800784a:	2303      	movs	r3, #3
 800784c:	75fb      	strb	r3, [r7, #23]
            break;
 800784e:	e037      	b.n	80078c0 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007850:	8abb      	ldrh	r3, [r7, #20]
 8007852:	461a      	mov	r2, r3
 8007854:	6939      	ldr	r1, [r7, #16]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f001 fb80 	bl	8008f5c <USBD_CtlSendData>
          break;
 800785c:	e030      	b.n	80078c0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b03      	cmp	r3, #3
 8007868:	d107      	bne.n	800787a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	3308      	adds	r3, #8
 800786e:	2201      	movs	r2, #1
 8007870:	4619      	mov	r1, r3
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f001 fb72 	bl	8008f5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007878:	e022      	b.n	80078c0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f001 faf0 	bl	8008e62 <USBD_CtlError>
            ret = USBD_FAIL;
 8007882:	2303      	movs	r3, #3
 8007884:	75fb      	strb	r3, [r7, #23]
          break;
 8007886:	e01b      	b.n	80078c0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b03      	cmp	r3, #3
 8007892:	d106      	bne.n	80078a2 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	885b      	ldrh	r3, [r3, #2]
 8007898:	b2db      	uxtb	r3, r3
 800789a:	461a      	mov	r2, r3
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078a0:	e00e      	b.n	80078c0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80078a2:	6839      	ldr	r1, [r7, #0]
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f001 fadc 	bl	8008e62 <USBD_CtlError>
            ret = USBD_FAIL;
 80078aa:	2303      	movs	r3, #3
 80078ac:	75fb      	strb	r3, [r7, #23]
          break;
 80078ae:	e007      	b.n	80078c0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80078b0:	6839      	ldr	r1, [r7, #0]
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f001 fad5 	bl	8008e62 <USBD_CtlError>
          ret = USBD_FAIL;
 80078b8:	2303      	movs	r3, #3
 80078ba:	75fb      	strb	r3, [r7, #23]
          break;
 80078bc:	e000      	b.n	80078c0 <USBD_HID_Setup+0x1ec>
          break;
 80078be:	bf00      	nop
      }
      break;
 80078c0:	e006      	b.n	80078d0 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80078c2:	6839      	ldr	r1, [r7, #0]
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f001 facc 	bl	8008e62 <USBD_CtlError>
      ret = USBD_FAIL;
 80078ca:	2303      	movs	r3, #3
 80078cc:	75fb      	strb	r3, [r7, #23]
      break;
 80078ce:	bf00      	nop
  }

  return (uint8_t)ret;
 80078d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3718      	adds	r7, #24
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	20000110 	.word	0x20000110
 80078e0:	200000f8 	.word	0x200000f8

080078e4 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b086      	sub	sp, #24
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	4613      	mov	r3, r2
 80078f0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	32b0      	adds	r2, #176	@ 0xb0
 80078fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007900:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d101      	bne.n	800790c <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007908:	2303      	movs	r3, #3
 800790a:	e014      	b.n	8007936 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b03      	cmp	r3, #3
 8007916:	d10d      	bne.n	8007934 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	7b1b      	ldrb	r3, [r3, #12]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d109      	bne.n	8007934 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	2201      	movs	r2, #1
 8007924:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8007926:	4b06      	ldr	r3, [pc, #24]	@ (8007940 <USBD_HID_SendReport+0x5c>)
 8007928:	7819      	ldrb	r1, [r3, #0]
 800792a:	88fb      	ldrh	r3, [r7, #6]
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	f001 ff2b 	bl	800978a <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3718      	adds	r7, #24
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	2000015a 	.word	0x2000015a

08007944 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800794c:	2181      	movs	r1, #129	@ 0x81
 800794e:	4809      	ldr	r0, [pc, #36]	@ (8007974 <USBD_HID_GetFSCfgDesc+0x30>)
 8007950:	f000 fc4e 	bl	80081f0 <USBD_GetEpDesc>
 8007954:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d002      	beq.n	8007962 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	220a      	movs	r2, #10
 8007960:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2222      	movs	r2, #34	@ 0x22
 8007966:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007968:	4b02      	ldr	r3, [pc, #8]	@ (8007974 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800796a:	4618      	mov	r0, r3
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	200000d4 	.word	0x200000d4

08007978 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007980:	2181      	movs	r1, #129	@ 0x81
 8007982:	4809      	ldr	r0, [pc, #36]	@ (80079a8 <USBD_HID_GetHSCfgDesc+0x30>)
 8007984:	f000 fc34 	bl	80081f0 <USBD_GetEpDesc>
 8007988:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2207      	movs	r2, #7
 8007994:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2222      	movs	r2, #34	@ 0x22
 800799a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800799c:	4b02      	ldr	r3, [pc, #8]	@ (80079a8 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	200000d4 	.word	0x200000d4

080079ac <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80079b4:	2181      	movs	r1, #129	@ 0x81
 80079b6:	4809      	ldr	r0, [pc, #36]	@ (80079dc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80079b8:	f000 fc1a 	bl	80081f0 <USBD_GetEpDesc>
 80079bc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d002      	beq.n	80079ca <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	220a      	movs	r2, #10
 80079c8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2222      	movs	r2, #34	@ 0x22
 80079ce:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80079d0:	4b02      	ldr	r3, [pc, #8]	@ (80079dc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	200000d4 	.word	0x200000d4

080079e0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	460b      	mov	r3, r1
 80079ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	32b0      	adds	r2, #176	@ 0xb0
 80079f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079fa:	2200      	movs	r2, #0
 80079fc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	220a      	movs	r2, #10
 8007a18:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8007a1a:	4b03      	ldr	r3, [pc, #12]	@ (8007a28 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	20000104 	.word	0x20000104

08007a2c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	4613      	mov	r3, r2
 8007a38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007a40:	2303      	movs	r3, #3
 8007a42:	e01f      	b.n	8007a84 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d003      	beq.n	8007a6a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	79fa      	ldrb	r2, [r7, #7]
 8007a76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f001 fd51 	bl	8009520 <USBD_LL_Init>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3718      	adds	r7, #24
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a96:	2300      	movs	r3, #0
 8007a98:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d101      	bne.n	8007aa4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e025      	b.n	8007af0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	683a      	ldr	r2, [r7, #0]
 8007aa8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	32ae      	adds	r2, #174	@ 0xae
 8007ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00f      	beq.n	8007ae0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	32ae      	adds	r2, #174	@ 0xae
 8007aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad0:	f107 020e 	add.w	r2, r7, #14
 8007ad4:	4610      	mov	r0, r2
 8007ad6:	4798      	blx	r3
 8007ad8:	4602      	mov	r2, r0
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007ae6:	1c5a      	adds	r2, r3, #1
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f001 fd59 	bl	80095b8 <USBD_LL_Start>
 8007b06:	4603      	mov	r3, r0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b18:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr

08007b26 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b084      	sub	sp, #16
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
 8007b2e:	460b      	mov	r3, r1
 8007b30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b32:	2300      	movs	r3, #0
 8007b34:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d009      	beq.n	8007b54 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	78fa      	ldrb	r2, [r7, #3]
 8007b4a:	4611      	mov	r1, r2
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	4798      	blx	r3
 8007b50:	4603      	mov	r3, r0
 8007b52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b084      	sub	sp, #16
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	460b      	mov	r3, r1
 8007b68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	78fa      	ldrb	r2, [r7, #3]
 8007b78:	4611      	mov	r1, r2
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	4798      	blx	r3
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007b84:	2303      	movs	r3, #3
 8007b86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b084      	sub	sp, #16
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
 8007b9a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007ba2:	6839      	ldr	r1, [r7, #0]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f001 f922 	bl	8008dee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007bb8:	461a      	mov	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007bc6:	f003 031f 	and.w	r3, r3, #31
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d01a      	beq.n	8007c04 <USBD_LL_SetupStage+0x72>
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d822      	bhi.n	8007c18 <USBD_LL_SetupStage+0x86>
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d002      	beq.n	8007bdc <USBD_LL_SetupStage+0x4a>
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d00a      	beq.n	8007bf0 <USBD_LL_SetupStage+0x5e>
 8007bda:	e01d      	b.n	8007c18 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007be2:	4619      	mov	r1, r3
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 fb77 	bl	80082d8 <USBD_StdDevReq>
 8007bea:	4603      	mov	r3, r0
 8007bec:	73fb      	strb	r3, [r7, #15]
      break;
 8007bee:	e020      	b.n	8007c32 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fbdf 	bl	80083bc <USBD_StdItfReq>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	73fb      	strb	r3, [r7, #15]
      break;
 8007c02:	e016      	b.n	8007c32 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 fc41 	bl	8008494 <USBD_StdEPReq>
 8007c12:	4603      	mov	r3, r0
 8007c14:	73fb      	strb	r3, [r7, #15]
      break;
 8007c16:	e00c      	b.n	8007c32 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007c1e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	4619      	mov	r1, r3
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f001 fd26 	bl	8009678 <USBD_LL_StallEP>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c30:	bf00      	nop
  }

  return ret;
 8007c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	460b      	mov	r3, r1
 8007c46:	607a      	str	r2, [r7, #4]
 8007c48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007c4e:	7afb      	ldrb	r3, [r7, #11]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d177      	bne.n	8007d44 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007c5a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007c62:	2b03      	cmp	r3, #3
 8007c64:	f040 80a1 	bne.w	8007daa <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	8992      	ldrh	r2, [r2, #12]
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d91c      	bls.n	8007cae <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	8992      	ldrh	r2, [r2, #12]
 8007c7c:	1a9a      	subs	r2, r3, r2
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	693a      	ldr	r2, [r7, #16]
 8007c88:	8992      	ldrh	r2, [r2, #12]
 8007c8a:	441a      	add	r2, r3
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	6919      	ldr	r1, [r3, #16]
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	899b      	ldrh	r3, [r3, #12]
 8007c98:	461a      	mov	r2, r3
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	bf38      	it	cc
 8007ca2:	4613      	movcc	r3, r2
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f001 f987 	bl	8008fba <USBD_CtlContinueRx>
 8007cac:	e07d      	b.n	8007daa <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007cb4:	f003 031f 	and.w	r3, r3, #31
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d014      	beq.n	8007ce6 <USBD_LL_DataOutStage+0xaa>
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d81d      	bhi.n	8007cfc <USBD_LL_DataOutStage+0xc0>
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <USBD_LL_DataOutStage+0x8e>
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d003      	beq.n	8007cd0 <USBD_LL_DataOutStage+0x94>
 8007cc8:	e018      	b.n	8007cfc <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	75bb      	strb	r3, [r7, #22]
            break;
 8007cce:	e018      	b.n	8007d02 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	4619      	mov	r1, r3
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f000 fa6e 	bl	80081bc <USBD_CoreFindIF>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	75bb      	strb	r3, [r7, #22]
            break;
 8007ce4:	e00d      	b.n	8007d02 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	4619      	mov	r1, r3
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f000 fa70 	bl	80081d6 <USBD_CoreFindEP>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	75bb      	strb	r3, [r7, #22]
            break;
 8007cfa:	e002      	b.n	8007d02 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	75bb      	strb	r3, [r7, #22]
            break;
 8007d00:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007d02:	7dbb      	ldrb	r3, [r7, #22]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d119      	bne.n	8007d3c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b03      	cmp	r3, #3
 8007d12:	d113      	bne.n	8007d3c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007d14:	7dba      	ldrb	r2, [r7, #22]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	32ae      	adds	r2, #174	@ 0xae
 8007d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00b      	beq.n	8007d3c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8007d24:	7dba      	ldrb	r2, [r7, #22]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007d2c:	7dba      	ldrb	r2, [r7, #22]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	32ae      	adds	r2, #174	@ 0xae
 8007d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f001 f94d 	bl	8008fdc <USBD_CtlSendStatus>
 8007d42:	e032      	b.n	8007daa <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007d44:	7afb      	ldrb	r3, [r7, #11]
 8007d46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f000 fa41 	bl	80081d6 <USBD_CoreFindEP>
 8007d54:	4603      	mov	r3, r0
 8007d56:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d58:	7dbb      	ldrb	r3, [r7, #22]
 8007d5a:	2bff      	cmp	r3, #255	@ 0xff
 8007d5c:	d025      	beq.n	8007daa <USBD_LL_DataOutStage+0x16e>
 8007d5e:	7dbb      	ldrb	r3, [r7, #22]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d122      	bne.n	8007daa <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b03      	cmp	r3, #3
 8007d6e:	d117      	bne.n	8007da0 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007d70:	7dba      	ldrb	r2, [r7, #22]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	32ae      	adds	r2, #174	@ 0xae
 8007d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00f      	beq.n	8007da0 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007d80:	7dba      	ldrb	r2, [r7, #22]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007d88:	7dba      	ldrb	r2, [r7, #22]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	32ae      	adds	r2, #174	@ 0xae
 8007d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	7afa      	ldrb	r2, [r7, #11]
 8007d96:	4611      	mov	r1, r2
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	4798      	blx	r3
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007da0:	7dfb      	ldrb	r3, [r7, #23]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d001      	beq.n	8007daa <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8007da6:	7dfb      	ldrb	r3, [r7, #23]
 8007da8:	e000      	b.n	8007dac <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	607a      	str	r2, [r7, #4]
 8007dc0:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007dc2:	7afb      	ldrb	r3, [r7, #11]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d178      	bne.n	8007eba <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	3314      	adds	r3, #20
 8007dcc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d163      	bne.n	8007ea0 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	8992      	ldrh	r2, [r2, #12]
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d91c      	bls.n	8007e1e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	8992      	ldrh	r2, [r2, #12]
 8007dec:	1a9a      	subs	r2, r3, r2
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	693a      	ldr	r2, [r7, #16]
 8007df8:	8992      	ldrh	r2, [r2, #12]
 8007dfa:	441a      	add	r2, r3
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	6919      	ldr	r1, [r3, #16]
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	f001 f8c4 	bl	8008f98 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e10:	2300      	movs	r3, #0
 8007e12:	2200      	movs	r2, #0
 8007e14:	2100      	movs	r1, #0
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f001 fcd8 	bl	80097cc <USBD_LL_PrepareReceive>
 8007e1c:	e040      	b.n	8007ea0 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	899b      	ldrh	r3, [r3, #12]
 8007e22:	461a      	mov	r2, r3
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d11c      	bne.n	8007e66 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	693a      	ldr	r2, [r7, #16]
 8007e32:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d316      	bcc.n	8007e66 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d20f      	bcs.n	8007e66 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e46:	2200      	movs	r2, #0
 8007e48:	2100      	movs	r1, #0
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f001 f8a4 	bl	8008f98 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e58:	2300      	movs	r3, #0
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f001 fcb4 	bl	80097cc <USBD_LL_PrepareReceive>
 8007e64:	e01c      	b.n	8007ea0 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b03      	cmp	r3, #3
 8007e70:	d10f      	bne.n	8007e92 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d009      	beq.n	8007e92 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e92:	2180      	movs	r1, #128	@ 0x80
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f001 fbef 	bl	8009678 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f001 f8b1 	bl	8009002 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d03a      	beq.n	8007f20 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f7ff fe30 	bl	8007b10 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007eb8:	e032      	b.n	8007f20 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007eba:	7afb      	ldrb	r3, [r7, #11]
 8007ebc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f000 f986 	bl	80081d6 <USBD_CoreFindEP>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ece:	7dfb      	ldrb	r3, [r7, #23]
 8007ed0:	2bff      	cmp	r3, #255	@ 0xff
 8007ed2:	d025      	beq.n	8007f20 <USBD_LL_DataInStage+0x16c>
 8007ed4:	7dfb      	ldrb	r3, [r7, #23]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d122      	bne.n	8007f20 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	2b03      	cmp	r3, #3
 8007ee4:	d11c      	bne.n	8007f20 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007ee6:	7dfa      	ldrb	r2, [r7, #23]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	32ae      	adds	r2, #174	@ 0xae
 8007eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d014      	beq.n	8007f20 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007ef6:	7dfa      	ldrb	r2, [r7, #23]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007efe:	7dfa      	ldrb	r2, [r7, #23]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	32ae      	adds	r2, #174	@ 0xae
 8007f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f08:	695b      	ldr	r3, [r3, #20]
 8007f0a:	7afa      	ldrb	r2, [r7, #11]
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	4798      	blx	r3
 8007f12:	4603      	mov	r3, r0
 8007f14:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007f16:	7dbb      	ldrb	r3, [r7, #22]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d001      	beq.n	8007f20 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007f1c:	7dbb      	ldrb	r3, [r7, #22]
 8007f1e:	e000      	b.n	8007f22 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3718      	adds	r7, #24
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b084      	sub	sp, #16
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d014      	beq.n	8007f90 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00e      	beq.n	8007f90 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	6852      	ldr	r2, [r2, #4]
 8007f7e:	b2d2      	uxtb	r2, r2
 8007f80:	4611      	mov	r1, r2
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	4798      	blx	r3
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f90:	2340      	movs	r3, #64	@ 0x40
 8007f92:	2200      	movs	r2, #0
 8007f94:	2100      	movs	r1, #0
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f001 fb29 	bl	80095ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2240      	movs	r2, #64	@ 0x40
 8007fa8:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fac:	2340      	movs	r3, #64	@ 0x40
 8007fae:	2200      	movs	r2, #0
 8007fb0:	2180      	movs	r1, #128	@ 0x80
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f001 fb1b 	bl	80095ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2240      	movs	r2, #64	@ 0x40
 8007fc4:	841a      	strh	r2, [r3, #32]

  return ret;
 8007fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	460b      	mov	r3, r1
 8007fda:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	78fa      	ldrb	r2, [r7, #3]
 8007fe0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	2b04      	cmp	r3, #4
 8008002:	d006      	beq.n	8008012 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800800a:	b2da      	uxtb	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2204      	movs	r2, #4
 8008016:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b04      	cmp	r3, #4
 800803a:	d106      	bne.n	800804a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008042:	b2da      	uxtb	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b03      	cmp	r3, #3
 800806a:	d110      	bne.n	800808e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00b      	beq.n	800808e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800807c:	69db      	ldr	r3, [r3, #28]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d005      	beq.n	800808e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	460b      	mov	r3, r1
 80080a2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	32ae      	adds	r2, #174	@ 0xae
 80080ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d101      	bne.n	80080ba <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80080b6:	2303      	movs	r3, #3
 80080b8:	e01c      	b.n	80080f4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b03      	cmp	r3, #3
 80080c4:	d115      	bne.n	80080f2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	32ae      	adds	r2, #174	@ 0xae
 80080d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00b      	beq.n	80080f2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	32ae      	adds	r2, #174	@ 0xae
 80080e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	78fa      	ldrb	r2, [r7, #3]
 80080ec:	4611      	mov	r1, r2
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	460b      	mov	r3, r1
 8008106:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	32ae      	adds	r2, #174	@ 0xae
 8008112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d101      	bne.n	800811e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800811a:	2303      	movs	r3, #3
 800811c:	e01c      	b.n	8008158 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2b03      	cmp	r3, #3
 8008128:	d115      	bne.n	8008156 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	32ae      	adds	r2, #174	@ 0xae
 8008134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00b      	beq.n	8008156 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	32ae      	adds	r2, #174	@ 0xae
 8008148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800814c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800814e:	78fa      	ldrb	r2, [r7, #3]
 8008150:	4611      	mov	r1, r2
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b084      	sub	sp, #16
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00e      	beq.n	80081b2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	6852      	ldr	r2, [r2, #4]
 80081a0:	b2d2      	uxtb	r2, r2
 80081a2:	4611      	mov	r1, r2
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	4798      	blx	r3
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d001      	beq.n	80081b2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80081ae:	2303      	movs	r3, #3
 80081b0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80081b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	460b      	mov	r3, r1
 80081c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80081c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80081d6:	b480      	push	{r7}
 80081d8:	b083      	sub	sp, #12
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	460b      	mov	r3, r1
 80081e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80081e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b086      	sub	sp, #24
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	460b      	mov	r3, r1
 80081fa:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008204:	2300      	movs	r3, #0
 8008206:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	885b      	ldrh	r3, [r3, #2]
 800820c:	b29b      	uxth	r3, r3
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	7812      	ldrb	r2, [r2, #0]
 8008212:	4293      	cmp	r3, r2
 8008214:	d91f      	bls.n	8008256 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800821c:	e013      	b.n	8008246 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800821e:	f107 030a 	add.w	r3, r7, #10
 8008222:	4619      	mov	r1, r3
 8008224:	6978      	ldr	r0, [r7, #20]
 8008226:	f000 f81b 	bl	8008260 <USBD_GetNextDesc>
 800822a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	785b      	ldrb	r3, [r3, #1]
 8008230:	2b05      	cmp	r3, #5
 8008232:	d108      	bne.n	8008246 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	789b      	ldrb	r3, [r3, #2]
 800823c:	78fa      	ldrb	r2, [r7, #3]
 800823e:	429a      	cmp	r2, r3
 8008240:	d008      	beq.n	8008254 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008242:	2300      	movs	r3, #0
 8008244:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	885b      	ldrh	r3, [r3, #2]
 800824a:	b29a      	uxth	r2, r3
 800824c:	897b      	ldrh	r3, [r7, #10]
 800824e:	429a      	cmp	r2, r3
 8008250:	d8e5      	bhi.n	800821e <USBD_GetEpDesc+0x2e>
 8008252:	e000      	b.n	8008256 <USBD_GetEpDesc+0x66>
          break;
 8008254:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008256:	693b      	ldr	r3, [r7, #16]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3718      	adds	r7, #24
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	7812      	ldrb	r2, [r2, #0]
 8008276:	4413      	add	r3, r2
 8008278:	b29a      	uxth	r2, r3
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4413      	add	r3, r2
 8008288:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800828a:	68fb      	ldr	r3, [r7, #12]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3714      	adds	r7, #20
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008298:	b480      	push	{r7}
 800829a:	b087      	sub	sp, #28
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	3301      	adds	r3, #1
 80082ae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80082b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80082ba:	021b      	lsls	r3, r3, #8
 80082bc:	b21a      	sxth	r2, r3
 80082be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	b21b      	sxth	r3, r3
 80082c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80082c8:	89fb      	ldrh	r3, [r7, #14]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	371c      	adds	r7, #28
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
	...

080082d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80082ee:	2b40      	cmp	r3, #64	@ 0x40
 80082f0:	d005      	beq.n	80082fe <USBD_StdDevReq+0x26>
 80082f2:	2b40      	cmp	r3, #64	@ 0x40
 80082f4:	d857      	bhi.n	80083a6 <USBD_StdDevReq+0xce>
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00f      	beq.n	800831a <USBD_StdDevReq+0x42>
 80082fa:	2b20      	cmp	r3, #32
 80082fc:	d153      	bne.n	80083a6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	32ae      	adds	r2, #174	@ 0xae
 8008308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	6839      	ldr	r1, [r7, #0]
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	4798      	blx	r3
 8008314:	4603      	mov	r3, r0
 8008316:	73fb      	strb	r3, [r7, #15]
      break;
 8008318:	e04a      	b.n	80083b0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	785b      	ldrb	r3, [r3, #1]
 800831e:	2b09      	cmp	r3, #9
 8008320:	d83b      	bhi.n	800839a <USBD_StdDevReq+0xc2>
 8008322:	a201      	add	r2, pc, #4	@ (adr r2, 8008328 <USBD_StdDevReq+0x50>)
 8008324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008328:	0800837d 	.word	0x0800837d
 800832c:	08008391 	.word	0x08008391
 8008330:	0800839b 	.word	0x0800839b
 8008334:	08008387 	.word	0x08008387
 8008338:	0800839b 	.word	0x0800839b
 800833c:	0800835b 	.word	0x0800835b
 8008340:	08008351 	.word	0x08008351
 8008344:	0800839b 	.word	0x0800839b
 8008348:	08008373 	.word	0x08008373
 800834c:	08008365 	.word	0x08008365
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fa3e 	bl	80087d4 <USBD_GetDescriptor>
          break;
 8008358:	e024      	b.n	80083a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800835a:	6839      	ldr	r1, [r7, #0]
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 fba3 	bl	8008aa8 <USBD_SetAddress>
          break;
 8008362:	e01f      	b.n	80083a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fbe2 	bl	8008b30 <USBD_SetConfig>
 800836c:	4603      	mov	r3, r0
 800836e:	73fb      	strb	r3, [r7, #15]
          break;
 8008370:	e018      	b.n	80083a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008372:	6839      	ldr	r1, [r7, #0]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fc85 	bl	8008c84 <USBD_GetConfig>
          break;
 800837a:	e013      	b.n	80083a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800837c:	6839      	ldr	r1, [r7, #0]
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fcb6 	bl	8008cf0 <USBD_GetStatus>
          break;
 8008384:	e00e      	b.n	80083a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fce5 	bl	8008d58 <USBD_SetFeature>
          break;
 800838e:	e009      	b.n	80083a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008390:	6839      	ldr	r1, [r7, #0]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fd09 	bl	8008daa <USBD_ClrFeature>
          break;
 8008398:	e004      	b.n	80083a4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800839a:	6839      	ldr	r1, [r7, #0]
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fd60 	bl	8008e62 <USBD_CtlError>
          break;
 80083a2:	bf00      	nop
      }
      break;
 80083a4:	e004      	b.n	80083b0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80083a6:	6839      	ldr	r1, [r7, #0]
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fd5a 	bl	8008e62 <USBD_CtlError>
      break;
 80083ae:	bf00      	nop
  }

  return ret;
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop

080083bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80083d2:	2b40      	cmp	r3, #64	@ 0x40
 80083d4:	d005      	beq.n	80083e2 <USBD_StdItfReq+0x26>
 80083d6:	2b40      	cmp	r3, #64	@ 0x40
 80083d8:	d852      	bhi.n	8008480 <USBD_StdItfReq+0xc4>
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d001      	beq.n	80083e2 <USBD_StdItfReq+0x26>
 80083de:	2b20      	cmp	r3, #32
 80083e0:	d14e      	bne.n	8008480 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	3b01      	subs	r3, #1
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d840      	bhi.n	8008472 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	889b      	ldrh	r3, [r3, #4]
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d836      	bhi.n	8008468 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	889b      	ldrh	r3, [r3, #4]
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7ff feda 	bl	80081bc <USBD_CoreFindIF>
 8008408:	4603      	mov	r3, r0
 800840a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800840c:	7bbb      	ldrb	r3, [r7, #14]
 800840e:	2bff      	cmp	r3, #255	@ 0xff
 8008410:	d01d      	beq.n	800844e <USBD_StdItfReq+0x92>
 8008412:	7bbb      	ldrb	r3, [r7, #14]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d11a      	bne.n	800844e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008418:	7bba      	ldrb	r2, [r7, #14]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	32ae      	adds	r2, #174	@ 0xae
 800841e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00f      	beq.n	8008448 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008428:	7bba      	ldrb	r2, [r7, #14]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008430:	7bba      	ldrb	r2, [r7, #14]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	32ae      	adds	r2, #174	@ 0xae
 8008436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	6839      	ldr	r1, [r7, #0]
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	4798      	blx	r3
 8008442:	4603      	mov	r3, r0
 8008444:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008446:	e004      	b.n	8008452 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008448:	2303      	movs	r3, #3
 800844a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800844c:	e001      	b.n	8008452 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800844e:	2303      	movs	r3, #3
 8008450:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	88db      	ldrh	r3, [r3, #6]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d110      	bne.n	800847c <USBD_StdItfReq+0xc0>
 800845a:	7bfb      	ldrb	r3, [r7, #15]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10d      	bne.n	800847c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 fdbb 	bl	8008fdc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008466:	e009      	b.n	800847c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008468:	6839      	ldr	r1, [r7, #0]
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fcf9 	bl	8008e62 <USBD_CtlError>
          break;
 8008470:	e004      	b.n	800847c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fcf4 	bl	8008e62 <USBD_CtlError>
          break;
 800847a:	e000      	b.n	800847e <USBD_StdItfReq+0xc2>
          break;
 800847c:	bf00      	nop
      }
      break;
 800847e:	e004      	b.n	800848a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fced 	bl	8008e62 <USBD_CtlError>
      break;
 8008488:	bf00      	nop
  }

  return ret;
 800848a:	7bfb      	ldrb	r3, [r7, #15]
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	889b      	ldrh	r3, [r3, #4]
 80084a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80084b0:	2b40      	cmp	r3, #64	@ 0x40
 80084b2:	d007      	beq.n	80084c4 <USBD_StdEPReq+0x30>
 80084b4:	2b40      	cmp	r3, #64	@ 0x40
 80084b6:	f200 8181 	bhi.w	80087bc <USBD_StdEPReq+0x328>
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d02a      	beq.n	8008514 <USBD_StdEPReq+0x80>
 80084be:	2b20      	cmp	r3, #32
 80084c0:	f040 817c 	bne.w	80087bc <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80084c4:	7bbb      	ldrb	r3, [r7, #14]
 80084c6:	4619      	mov	r1, r3
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f7ff fe84 	bl	80081d6 <USBD_CoreFindEP>
 80084ce:	4603      	mov	r3, r0
 80084d0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084d2:	7b7b      	ldrb	r3, [r7, #13]
 80084d4:	2bff      	cmp	r3, #255	@ 0xff
 80084d6:	f000 8176 	beq.w	80087c6 <USBD_StdEPReq+0x332>
 80084da:	7b7b      	ldrb	r3, [r7, #13]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f040 8172 	bne.w	80087c6 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80084e2:	7b7a      	ldrb	r2, [r7, #13]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80084ea:	7b7a      	ldrb	r2, [r7, #13]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	32ae      	adds	r2, #174	@ 0xae
 80084f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f000 8165 	beq.w	80087c6 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80084fc:	7b7a      	ldrb	r2, [r7, #13]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	32ae      	adds	r2, #174	@ 0xae
 8008502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	6839      	ldr	r1, [r7, #0]
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	4798      	blx	r3
 800850e:	4603      	mov	r3, r0
 8008510:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008512:	e158      	b.n	80087c6 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	785b      	ldrb	r3, [r3, #1]
 8008518:	2b03      	cmp	r3, #3
 800851a:	d008      	beq.n	800852e <USBD_StdEPReq+0x9a>
 800851c:	2b03      	cmp	r3, #3
 800851e:	f300 8147 	bgt.w	80087b0 <USBD_StdEPReq+0x31c>
 8008522:	2b00      	cmp	r3, #0
 8008524:	f000 809b 	beq.w	800865e <USBD_StdEPReq+0x1ca>
 8008528:	2b01      	cmp	r3, #1
 800852a:	d03c      	beq.n	80085a6 <USBD_StdEPReq+0x112>
 800852c:	e140      	b.n	80087b0 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b02      	cmp	r3, #2
 8008538:	d002      	beq.n	8008540 <USBD_StdEPReq+0xac>
 800853a:	2b03      	cmp	r3, #3
 800853c:	d016      	beq.n	800856c <USBD_StdEPReq+0xd8>
 800853e:	e02c      	b.n	800859a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008540:	7bbb      	ldrb	r3, [r7, #14]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00d      	beq.n	8008562 <USBD_StdEPReq+0xce>
 8008546:	7bbb      	ldrb	r3, [r7, #14]
 8008548:	2b80      	cmp	r3, #128	@ 0x80
 800854a:	d00a      	beq.n	8008562 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800854c:	7bbb      	ldrb	r3, [r7, #14]
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f001 f891 	bl	8009678 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008556:	2180      	movs	r1, #128	@ 0x80
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f001 f88d 	bl	8009678 <USBD_LL_StallEP>
 800855e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008560:	e020      	b.n	80085a4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008562:	6839      	ldr	r1, [r7, #0]
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fc7c 	bl	8008e62 <USBD_CtlError>
              break;
 800856a:	e01b      	b.n	80085a4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	885b      	ldrh	r3, [r3, #2]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d10e      	bne.n	8008592 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008574:	7bbb      	ldrb	r3, [r7, #14]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00b      	beq.n	8008592 <USBD_StdEPReq+0xfe>
 800857a:	7bbb      	ldrb	r3, [r7, #14]
 800857c:	2b80      	cmp	r3, #128	@ 0x80
 800857e:	d008      	beq.n	8008592 <USBD_StdEPReq+0xfe>
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	88db      	ldrh	r3, [r3, #6]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d104      	bne.n	8008592 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008588:	7bbb      	ldrb	r3, [r7, #14]
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f001 f873 	bl	8009678 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 fd22 	bl	8008fdc <USBD_CtlSendStatus>

              break;
 8008598:	e004      	b.n	80085a4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800859a:	6839      	ldr	r1, [r7, #0]
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 fc60 	bl	8008e62 <USBD_CtlError>
              break;
 80085a2:	bf00      	nop
          }
          break;
 80085a4:	e109      	b.n	80087ba <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d002      	beq.n	80085b8 <USBD_StdEPReq+0x124>
 80085b2:	2b03      	cmp	r3, #3
 80085b4:	d016      	beq.n	80085e4 <USBD_StdEPReq+0x150>
 80085b6:	e04b      	b.n	8008650 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085b8:	7bbb      	ldrb	r3, [r7, #14]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00d      	beq.n	80085da <USBD_StdEPReq+0x146>
 80085be:	7bbb      	ldrb	r3, [r7, #14]
 80085c0:	2b80      	cmp	r3, #128	@ 0x80
 80085c2:	d00a      	beq.n	80085da <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085c4:	7bbb      	ldrb	r3, [r7, #14]
 80085c6:	4619      	mov	r1, r3
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f001 f855 	bl	8009678 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085ce:	2180      	movs	r1, #128	@ 0x80
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f001 f851 	bl	8009678 <USBD_LL_StallEP>
 80085d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085d8:	e040      	b.n	800865c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80085da:	6839      	ldr	r1, [r7, #0]
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 fc40 	bl	8008e62 <USBD_CtlError>
              break;
 80085e2:	e03b      	b.n	800865c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	885b      	ldrh	r3, [r3, #2]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d136      	bne.n	800865a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80085ec:	7bbb      	ldrb	r3, [r7, #14]
 80085ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d004      	beq.n	8008600 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
 80085f8:	4619      	mov	r1, r3
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f001 f85b 	bl	80096b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fceb 	bl	8008fdc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008606:	7bbb      	ldrb	r3, [r7, #14]
 8008608:	4619      	mov	r1, r3
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7ff fde3 	bl	80081d6 <USBD_CoreFindEP>
 8008610:	4603      	mov	r3, r0
 8008612:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008614:	7b7b      	ldrb	r3, [r7, #13]
 8008616:	2bff      	cmp	r3, #255	@ 0xff
 8008618:	d01f      	beq.n	800865a <USBD_StdEPReq+0x1c6>
 800861a:	7b7b      	ldrb	r3, [r7, #13]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d11c      	bne.n	800865a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008620:	7b7a      	ldrb	r2, [r7, #13]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008628:	7b7a      	ldrb	r2, [r7, #13]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	32ae      	adds	r2, #174	@ 0xae
 800862e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d010      	beq.n	800865a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008638:	7b7a      	ldrb	r2, [r7, #13]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	32ae      	adds	r2, #174	@ 0xae
 800863e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	4798      	blx	r3
 800864a:	4603      	mov	r3, r0
 800864c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800864e:	e004      	b.n	800865a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008650:	6839      	ldr	r1, [r7, #0]
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fc05 	bl	8008e62 <USBD_CtlError>
              break;
 8008658:	e000      	b.n	800865c <USBD_StdEPReq+0x1c8>
              break;
 800865a:	bf00      	nop
          }
          break;
 800865c:	e0ad      	b.n	80087ba <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b02      	cmp	r3, #2
 8008668:	d002      	beq.n	8008670 <USBD_StdEPReq+0x1dc>
 800866a:	2b03      	cmp	r3, #3
 800866c:	d033      	beq.n	80086d6 <USBD_StdEPReq+0x242>
 800866e:	e099      	b.n	80087a4 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008670:	7bbb      	ldrb	r3, [r7, #14]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d007      	beq.n	8008686 <USBD_StdEPReq+0x1f2>
 8008676:	7bbb      	ldrb	r3, [r7, #14]
 8008678:	2b80      	cmp	r3, #128	@ 0x80
 800867a:	d004      	beq.n	8008686 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fbef 	bl	8008e62 <USBD_CtlError>
                break;
 8008684:	e093      	b.n	80087ae <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008686:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800868a:	2b00      	cmp	r3, #0
 800868c:	da0b      	bge.n	80086a6 <USBD_StdEPReq+0x212>
 800868e:	7bbb      	ldrb	r3, [r7, #14]
 8008690:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008694:	4613      	mov	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	4413      	add	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	3310      	adds	r3, #16
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	4413      	add	r3, r2
 80086a2:	3304      	adds	r3, #4
 80086a4:	e00b      	b.n	80086be <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086a6:	7bbb      	ldrb	r3, [r7, #14]
 80086a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086ac:	4613      	mov	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4413      	add	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	4413      	add	r3, r2
 80086bc:	3304      	adds	r3, #4
 80086be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	2200      	movs	r2, #0
 80086c4:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	330e      	adds	r3, #14
 80086ca:	2202      	movs	r2, #2
 80086cc:	4619      	mov	r1, r3
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 fc44 	bl	8008f5c <USBD_CtlSendData>
              break;
 80086d4:	e06b      	b.n	80087ae <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80086d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	da11      	bge.n	8008702 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086de:	7bbb      	ldrb	r3, [r7, #14]
 80086e0:	f003 020f 	and.w	r2, r3, #15
 80086e4:	6879      	ldr	r1, [r7, #4]
 80086e6:	4613      	mov	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4413      	add	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	440b      	add	r3, r1
 80086f0:	3323      	adds	r3, #35	@ 0x23
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d117      	bne.n	8008728 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80086f8:	6839      	ldr	r1, [r7, #0]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fbb1 	bl	8008e62 <USBD_CtlError>
                  break;
 8008700:	e055      	b.n	80087ae <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008702:	7bbb      	ldrb	r3, [r7, #14]
 8008704:	f003 020f 	and.w	r2, r3, #15
 8008708:	6879      	ldr	r1, [r7, #4]
 800870a:	4613      	mov	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	440b      	add	r3, r1
 8008714:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d104      	bne.n	8008728 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800871e:	6839      	ldr	r1, [r7, #0]
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fb9e 	bl	8008e62 <USBD_CtlError>
                  break;
 8008726:	e042      	b.n	80087ae <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008728:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800872c:	2b00      	cmp	r3, #0
 800872e:	da0b      	bge.n	8008748 <USBD_StdEPReq+0x2b4>
 8008730:	7bbb      	ldrb	r3, [r7, #14]
 8008732:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008736:	4613      	mov	r3, r2
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4413      	add	r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	3310      	adds	r3, #16
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	4413      	add	r3, r2
 8008744:	3304      	adds	r3, #4
 8008746:	e00b      	b.n	8008760 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008748:	7bbb      	ldrb	r3, [r7, #14]
 800874a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800874e:	4613      	mov	r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	4413      	add	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	4413      	add	r3, r2
 800875e:	3304      	adds	r3, #4
 8008760:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008762:	7bbb      	ldrb	r3, [r7, #14]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d002      	beq.n	800876e <USBD_StdEPReq+0x2da>
 8008768:	7bbb      	ldrb	r3, [r7, #14]
 800876a:	2b80      	cmp	r3, #128	@ 0x80
 800876c:	d103      	bne.n	8008776 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	2200      	movs	r2, #0
 8008772:	739a      	strb	r2, [r3, #14]
 8008774:	e00e      	b.n	8008794 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008776:	7bbb      	ldrb	r3, [r7, #14]
 8008778:	4619      	mov	r1, r3
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 ffba 	bl	80096f4 <USBD_LL_IsStallEP>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d003      	beq.n	800878e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	2201      	movs	r2, #1
 800878a:	739a      	strb	r2, [r3, #14]
 800878c:	e002      	b.n	8008794 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	2200      	movs	r2, #0
 8008792:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	330e      	adds	r3, #14
 8008798:	2202      	movs	r2, #2
 800879a:	4619      	mov	r1, r3
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fbdd 	bl	8008f5c <USBD_CtlSendData>
              break;
 80087a2:	e004      	b.n	80087ae <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fb5b 	bl	8008e62 <USBD_CtlError>
              break;
 80087ac:	bf00      	nop
          }
          break;
 80087ae:	e004      	b.n	80087ba <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80087b0:	6839      	ldr	r1, [r7, #0]
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 fb55 	bl	8008e62 <USBD_CtlError>
          break;
 80087b8:	bf00      	nop
      }
      break;
 80087ba:	e005      	b.n	80087c8 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80087bc:	6839      	ldr	r1, [r7, #0]
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fb4f 	bl	8008e62 <USBD_CtlError>
      break;
 80087c4:	e000      	b.n	80087c8 <USBD_StdEPReq+0x334>
      break;
 80087c6:	bf00      	nop
  }

  return ret;
 80087c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
	...

080087d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087de:	2300      	movs	r3, #0
 80087e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80087e2:	2300      	movs	r3, #0
 80087e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80087e6:	2300      	movs	r3, #0
 80087e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	885b      	ldrh	r3, [r3, #2]
 80087ee:	0a1b      	lsrs	r3, r3, #8
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	3b01      	subs	r3, #1
 80087f4:	2b06      	cmp	r3, #6
 80087f6:	f200 8128 	bhi.w	8008a4a <USBD_GetDescriptor+0x276>
 80087fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008800 <USBD_GetDescriptor+0x2c>)
 80087fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008800:	0800881d 	.word	0x0800881d
 8008804:	08008835 	.word	0x08008835
 8008808:	08008875 	.word	0x08008875
 800880c:	08008a4b 	.word	0x08008a4b
 8008810:	08008a4b 	.word	0x08008a4b
 8008814:	080089eb 	.word	0x080089eb
 8008818:	08008a17 	.word	0x08008a17
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	7c12      	ldrb	r2, [r2, #16]
 8008828:	f107 0108 	add.w	r1, r7, #8
 800882c:	4610      	mov	r0, r2
 800882e:	4798      	blx	r3
 8008830:	60f8      	str	r0, [r7, #12]
      break;
 8008832:	e112      	b.n	8008a5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	7c1b      	ldrb	r3, [r3, #16]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10d      	bne.n	8008858 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008844:	f107 0208 	add.w	r2, r7, #8
 8008848:	4610      	mov	r0, r2
 800884a:	4798      	blx	r3
 800884c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	3301      	adds	r3, #1
 8008852:	2202      	movs	r2, #2
 8008854:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008856:	e100      	b.n	8008a5a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800885e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008860:	f107 0208 	add.w	r2, r7, #8
 8008864:	4610      	mov	r0, r2
 8008866:	4798      	blx	r3
 8008868:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	3301      	adds	r3, #1
 800886e:	2202      	movs	r2, #2
 8008870:	701a      	strb	r2, [r3, #0]
      break;
 8008872:	e0f2      	b.n	8008a5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	885b      	ldrh	r3, [r3, #2]
 8008878:	b2db      	uxtb	r3, r3
 800887a:	2b05      	cmp	r3, #5
 800887c:	f200 80ac 	bhi.w	80089d8 <USBD_GetDescriptor+0x204>
 8008880:	a201      	add	r2, pc, #4	@ (adr r2, 8008888 <USBD_GetDescriptor+0xb4>)
 8008882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008886:	bf00      	nop
 8008888:	080088a1 	.word	0x080088a1
 800888c:	080088d5 	.word	0x080088d5
 8008890:	08008909 	.word	0x08008909
 8008894:	0800893d 	.word	0x0800893d
 8008898:	08008971 	.word	0x08008971
 800889c:	080089a5 	.word	0x080089a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00b      	beq.n	80088c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	7c12      	ldrb	r2, [r2, #16]
 80088b8:	f107 0108 	add.w	r1, r7, #8
 80088bc:	4610      	mov	r0, r2
 80088be:	4798      	blx	r3
 80088c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088c2:	e091      	b.n	80089e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088c4:	6839      	ldr	r1, [r7, #0]
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 facb 	bl	8008e62 <USBD_CtlError>
            err++;
 80088cc:	7afb      	ldrb	r3, [r7, #11]
 80088ce:	3301      	adds	r3, #1
 80088d0:	72fb      	strb	r3, [r7, #11]
          break;
 80088d2:	e089      	b.n	80089e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00b      	beq.n	80088f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	7c12      	ldrb	r2, [r2, #16]
 80088ec:	f107 0108 	add.w	r1, r7, #8
 80088f0:	4610      	mov	r0, r2
 80088f2:	4798      	blx	r3
 80088f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088f6:	e077      	b.n	80089e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088f8:	6839      	ldr	r1, [r7, #0]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 fab1 	bl	8008e62 <USBD_CtlError>
            err++;
 8008900:	7afb      	ldrb	r3, [r7, #11]
 8008902:	3301      	adds	r3, #1
 8008904:	72fb      	strb	r3, [r7, #11]
          break;
 8008906:	e06f      	b.n	80089e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00b      	beq.n	800892c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	7c12      	ldrb	r2, [r2, #16]
 8008920:	f107 0108 	add.w	r1, r7, #8
 8008924:	4610      	mov	r0, r2
 8008926:	4798      	blx	r3
 8008928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800892a:	e05d      	b.n	80089e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800892c:	6839      	ldr	r1, [r7, #0]
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 fa97 	bl	8008e62 <USBD_CtlError>
            err++;
 8008934:	7afb      	ldrb	r3, [r7, #11]
 8008936:	3301      	adds	r3, #1
 8008938:	72fb      	strb	r3, [r7, #11]
          break;
 800893a:	e055      	b.n	80089e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00b      	beq.n	8008960 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800894e:	691b      	ldr	r3, [r3, #16]
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	7c12      	ldrb	r2, [r2, #16]
 8008954:	f107 0108 	add.w	r1, r7, #8
 8008958:	4610      	mov	r0, r2
 800895a:	4798      	blx	r3
 800895c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800895e:	e043      	b.n	80089e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008960:	6839      	ldr	r1, [r7, #0]
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 fa7d 	bl	8008e62 <USBD_CtlError>
            err++;
 8008968:	7afb      	ldrb	r3, [r7, #11]
 800896a:	3301      	adds	r3, #1
 800896c:	72fb      	strb	r3, [r7, #11]
          break;
 800896e:	e03b      	b.n	80089e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008976:	695b      	ldr	r3, [r3, #20]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00b      	beq.n	8008994 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008982:	695b      	ldr	r3, [r3, #20]
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	7c12      	ldrb	r2, [r2, #16]
 8008988:	f107 0108 	add.w	r1, r7, #8
 800898c:	4610      	mov	r0, r2
 800898e:	4798      	blx	r3
 8008990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008992:	e029      	b.n	80089e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008994:	6839      	ldr	r1, [r7, #0]
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 fa63 	bl	8008e62 <USBD_CtlError>
            err++;
 800899c:	7afb      	ldrb	r3, [r7, #11]
 800899e:	3301      	adds	r3, #1
 80089a0:	72fb      	strb	r3, [r7, #11]
          break;
 80089a2:	e021      	b.n	80089e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089aa:	699b      	ldr	r3, [r3, #24]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00b      	beq.n	80089c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	7c12      	ldrb	r2, [r2, #16]
 80089bc:	f107 0108 	add.w	r1, r7, #8
 80089c0:	4610      	mov	r0, r2
 80089c2:	4798      	blx	r3
 80089c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089c6:	e00f      	b.n	80089e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fa49 	bl	8008e62 <USBD_CtlError>
            err++;
 80089d0:	7afb      	ldrb	r3, [r7, #11]
 80089d2:	3301      	adds	r3, #1
 80089d4:	72fb      	strb	r3, [r7, #11]
          break;
 80089d6:	e007      	b.n	80089e8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fa41 	bl	8008e62 <USBD_CtlError>
          err++;
 80089e0:	7afb      	ldrb	r3, [r7, #11]
 80089e2:	3301      	adds	r3, #1
 80089e4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80089e6:	bf00      	nop
      }
      break;
 80089e8:	e037      	b.n	8008a5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	7c1b      	ldrb	r3, [r3, #16]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d109      	bne.n	8008a06 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089fa:	f107 0208 	add.w	r2, r7, #8
 80089fe:	4610      	mov	r0, r2
 8008a00:	4798      	blx	r3
 8008a02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a04:	e029      	b.n	8008a5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a06:	6839      	ldr	r1, [r7, #0]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fa2a 	bl	8008e62 <USBD_CtlError>
        err++;
 8008a0e:	7afb      	ldrb	r3, [r7, #11]
 8008a10:	3301      	adds	r3, #1
 8008a12:	72fb      	strb	r3, [r7, #11]
      break;
 8008a14:	e021      	b.n	8008a5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	7c1b      	ldrb	r3, [r3, #16]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10d      	bne.n	8008a3a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a26:	f107 0208 	add.w	r2, r7, #8
 8008a2a:	4610      	mov	r0, r2
 8008a2c:	4798      	blx	r3
 8008a2e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	3301      	adds	r3, #1
 8008a34:	2207      	movs	r2, #7
 8008a36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a38:	e00f      	b.n	8008a5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a3a:	6839      	ldr	r1, [r7, #0]
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fa10 	bl	8008e62 <USBD_CtlError>
        err++;
 8008a42:	7afb      	ldrb	r3, [r7, #11]
 8008a44:	3301      	adds	r3, #1
 8008a46:	72fb      	strb	r3, [r7, #11]
      break;
 8008a48:	e007      	b.n	8008a5a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fa08 	bl	8008e62 <USBD_CtlError>
      err++;
 8008a52:	7afb      	ldrb	r3, [r7, #11]
 8008a54:	3301      	adds	r3, #1
 8008a56:	72fb      	strb	r3, [r7, #11]
      break;
 8008a58:	bf00      	nop
  }

  if (err != 0U)
 8008a5a:	7afb      	ldrb	r3, [r7, #11]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d11e      	bne.n	8008a9e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	88db      	ldrh	r3, [r3, #6]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d016      	beq.n	8008a96 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008a68:	893b      	ldrh	r3, [r7, #8]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00e      	beq.n	8008a8c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	88da      	ldrh	r2, [r3, #6]
 8008a72:	893b      	ldrh	r3, [r7, #8]
 8008a74:	4293      	cmp	r3, r2
 8008a76:	bf28      	it	cs
 8008a78:	4613      	movcs	r3, r2
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a7e:	893b      	ldrh	r3, [r7, #8]
 8008a80:	461a      	mov	r2, r3
 8008a82:	68f9      	ldr	r1, [r7, #12]
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fa69 	bl	8008f5c <USBD_CtlSendData>
 8008a8a:	e009      	b.n	8008aa0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008a8c:	6839      	ldr	r1, [r7, #0]
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 f9e7 	bl	8008e62 <USBD_CtlError>
 8008a94:	e004      	b.n	8008aa0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 faa0 	bl	8008fdc <USBD_CtlSendStatus>
 8008a9c:	e000      	b.n	8008aa0 <USBD_GetDescriptor+0x2cc>
    return;
 8008a9e:	bf00      	nop
  }
}
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop

08008aa8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	889b      	ldrh	r3, [r3, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d131      	bne.n	8008b1e <USBD_SetAddress+0x76>
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	88db      	ldrh	r3, [r3, #6]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d12d      	bne.n	8008b1e <USBD_SetAddress+0x76>
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	885b      	ldrh	r3, [r3, #2]
 8008ac6:	2b7f      	cmp	r3, #127	@ 0x7f
 8008ac8:	d829      	bhi.n	8008b1e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	885b      	ldrh	r3, [r3, #2]
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ad4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	2b03      	cmp	r3, #3
 8008ae0:	d104      	bne.n	8008aec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 f9bc 	bl	8008e62 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aea:	e01d      	b.n	8008b28 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	7bfa      	ldrb	r2, [r7, #15]
 8008af0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
 8008af6:	4619      	mov	r1, r3
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fe27 	bl	800974c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fa6c 	bl	8008fdc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b04:	7bfb      	ldrb	r3, [r7, #15]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d004      	beq.n	8008b14 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2202      	movs	r2, #2
 8008b0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b12:	e009      	b.n	8008b28 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b1c:	e004      	b.n	8008b28 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b1e:	6839      	ldr	r1, [r7, #0]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 f99e 	bl	8008e62 <USBD_CtlError>
  }
}
 8008b26:	bf00      	nop
 8008b28:	bf00      	nop
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	885b      	ldrh	r3, [r3, #2]
 8008b42:	b2da      	uxtb	r2, r3
 8008b44:	4b4e      	ldr	r3, [pc, #312]	@ (8008c80 <USBD_SetConfig+0x150>)
 8008b46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b48:	4b4d      	ldr	r3, [pc, #308]	@ (8008c80 <USBD_SetConfig+0x150>)
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d905      	bls.n	8008b5c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008b50:	6839      	ldr	r1, [r7, #0]
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 f985 	bl	8008e62 <USBD_CtlError>
    return USBD_FAIL;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	e08c      	b.n	8008c76 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d002      	beq.n	8008b6e <USBD_SetConfig+0x3e>
 8008b68:	2b03      	cmp	r3, #3
 8008b6a:	d029      	beq.n	8008bc0 <USBD_SetConfig+0x90>
 8008b6c:	e075      	b.n	8008c5a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008b6e:	4b44      	ldr	r3, [pc, #272]	@ (8008c80 <USBD_SetConfig+0x150>)
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d020      	beq.n	8008bb8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008b76:	4b42      	ldr	r3, [pc, #264]	@ (8008c80 <USBD_SetConfig+0x150>)
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b80:	4b3f      	ldr	r3, [pc, #252]	@ (8008c80 <USBD_SetConfig+0x150>)
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	4619      	mov	r1, r3
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f7fe ffcd 	bl	8007b26 <USBD_SetClassConfig>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d008      	beq.n	8008ba8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008b96:	6839      	ldr	r1, [r7, #0]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 f962 	bl	8008e62 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2202      	movs	r2, #2
 8008ba2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ba6:	e065      	b.n	8008c74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fa17 	bl	8008fdc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2203      	movs	r2, #3
 8008bb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008bb6:	e05d      	b.n	8008c74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fa0f 	bl	8008fdc <USBD_CtlSendStatus>
      break;
 8008bbe:	e059      	b.n	8008c74 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008bc0:	4b2f      	ldr	r3, [pc, #188]	@ (8008c80 <USBD_SetConfig+0x150>)
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d112      	bne.n	8008bee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2202      	movs	r2, #2
 8008bcc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008bd0:	4b2b      	ldr	r3, [pc, #172]	@ (8008c80 <USBD_SetConfig+0x150>)
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008bda:	4b29      	ldr	r3, [pc, #164]	@ (8008c80 <USBD_SetConfig+0x150>)
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	4619      	mov	r1, r3
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f7fe ffbc 	bl	8007b5e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f9f8 	bl	8008fdc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008bec:	e042      	b.n	8008c74 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008bee:	4b24      	ldr	r3, [pc, #144]	@ (8008c80 <USBD_SetConfig+0x150>)
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d02a      	beq.n	8008c52 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	4619      	mov	r1, r3
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f7fe ffaa 	bl	8007b5e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c0a:	4b1d      	ldr	r3, [pc, #116]	@ (8008c80 <USBD_SetConfig+0x150>)
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c14:	4b1a      	ldr	r3, [pc, #104]	@ (8008c80 <USBD_SetConfig+0x150>)
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	4619      	mov	r1, r3
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f7fe ff83 	bl	8007b26 <USBD_SetClassConfig>
 8008c20:	4603      	mov	r3, r0
 8008c22:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008c24:	7bfb      	ldrb	r3, [r7, #15]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00f      	beq.n	8008c4a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f918 	bl	8008e62 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	4619      	mov	r1, r3
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f7fe ff8f 	bl	8007b5e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2202      	movs	r2, #2
 8008c44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008c48:	e014      	b.n	8008c74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f9c6 	bl	8008fdc <USBD_CtlSendStatus>
      break;
 8008c50:	e010      	b.n	8008c74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f9c2 	bl	8008fdc <USBD_CtlSendStatus>
      break;
 8008c58:	e00c      	b.n	8008c74 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f900 	bl	8008e62 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c62:	4b07      	ldr	r3, [pc, #28]	@ (8008c80 <USBD_SetConfig+0x150>)
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	4619      	mov	r1, r3
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7fe ff78 	bl	8007b5e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	73fb      	strb	r3, [r7, #15]
      break;
 8008c72:	bf00      	nop
  }

  return ret;
 8008c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	2000031c 	.word	0x2000031c

08008c84 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	88db      	ldrh	r3, [r3, #6]
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d004      	beq.n	8008ca0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 f8e2 	bl	8008e62 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c9e:	e023      	b.n	8008ce8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	dc02      	bgt.n	8008cb2 <USBD_GetConfig+0x2e>
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	dc03      	bgt.n	8008cb8 <USBD_GetConfig+0x34>
 8008cb0:	e015      	b.n	8008cde <USBD_GetConfig+0x5a>
 8008cb2:	2b03      	cmp	r3, #3
 8008cb4:	d00b      	beq.n	8008cce <USBD_GetConfig+0x4a>
 8008cb6:	e012      	b.n	8008cde <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	3308      	adds	r3, #8
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f948 	bl	8008f5c <USBD_CtlSendData>
        break;
 8008ccc:	e00c      	b.n	8008ce8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	3304      	adds	r3, #4
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f940 	bl	8008f5c <USBD_CtlSendData>
        break;
 8008cdc:	e004      	b.n	8008ce8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008cde:	6839      	ldr	r1, [r7, #0]
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 f8be 	bl	8008e62 <USBD_CtlError>
        break;
 8008ce6:	bf00      	nop
}
 8008ce8:	bf00      	nop
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	3b01      	subs	r3, #1
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	d81e      	bhi.n	8008d46 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	88db      	ldrh	r3, [r3, #6]
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	d004      	beq.n	8008d1a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008d10:	6839      	ldr	r1, [r7, #0]
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 f8a5 	bl	8008e62 <USBD_CtlError>
        break;
 8008d18:	e01a      	b.n	8008d50 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d005      	beq.n	8008d36 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	f043 0202 	orr.w	r2, r3, #2
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	330c      	adds	r3, #12
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 f90c 	bl	8008f5c <USBD_CtlSendData>
      break;
 8008d44:	e004      	b.n	8008d50 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008d46:	6839      	ldr	r1, [r7, #0]
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 f88a 	bl	8008e62 <USBD_CtlError>
      break;
 8008d4e:	bf00      	nop
  }
}
 8008d50:	bf00      	nop
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	885b      	ldrh	r3, [r3, #2]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d107      	bne.n	8008d7a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f932 	bl	8008fdc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008d78:	e013      	b.n	8008da2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	885b      	ldrh	r3, [r3, #2]
 8008d7e:	2b02      	cmp	r3, #2
 8008d80:	d10b      	bne.n	8008d9a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	889b      	ldrh	r3, [r3, #4]
 8008d86:	0a1b      	lsrs	r3, r3, #8
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	b2da      	uxtb	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 f922 	bl	8008fdc <USBD_CtlSendStatus>
}
 8008d98:	e003      	b.n	8008da2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 f860 	bl	8008e62 <USBD_CtlError>
}
 8008da2:	bf00      	nop
 8008da4:	3708      	adds	r7, #8
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b082      	sub	sp, #8
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	d80b      	bhi.n	8008dda <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	885b      	ldrh	r3, [r3, #2]
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d10c      	bne.n	8008de4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f902 	bl	8008fdc <USBD_CtlSendStatus>
      }
      break;
 8008dd8:	e004      	b.n	8008de4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 f840 	bl	8008e62 <USBD_CtlError>
      break;
 8008de2:	e000      	b.n	8008de6 <USBD_ClrFeature+0x3c>
      break;
 8008de4:	bf00      	nop
  }
}
 8008de6:	bf00      	nop
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b084      	sub	sp, #16
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
 8008df6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	781a      	ldrb	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	3301      	adds	r3, #1
 8008e08:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	781a      	ldrb	r2, [r3, #0]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	3301      	adds	r3, #1
 8008e16:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f7ff fa3d 	bl	8008298 <SWAPBYTE>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	461a      	mov	r2, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f7ff fa30 	bl	8008298 <SWAPBYTE>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	3301      	adds	r3, #1
 8008e44:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f7ff fa23 	bl	8008298 <SWAPBYTE>
 8008e52:	4603      	mov	r3, r0
 8008e54:	461a      	mov	r2, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	80da      	strh	r2, [r3, #6]
}
 8008e5a:	bf00      	nop
 8008e5c:	3710      	adds	r7, #16
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b082      	sub	sp, #8
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
 8008e6a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e6c:	2180      	movs	r1, #128	@ 0x80
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fc02 	bl	8009678 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e74:	2100      	movs	r1, #0
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 fbfe 	bl	8009678 <USBD_LL_StallEP>
}
 8008e7c:	bf00      	nop
 8008e7e:	3708      	adds	r7, #8
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e90:	2300      	movs	r3, #0
 8008e92:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d042      	beq.n	8008f20 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008e9e:	6938      	ldr	r0, [r7, #16]
 8008ea0:	f000 f842 	bl	8008f28 <USBD_GetLen>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	005b      	lsls	r3, r3, #1
 8008eaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008eae:	d808      	bhi.n	8008ec2 <USBD_GetString+0x3e>
 8008eb0:	6938      	ldr	r0, [r7, #16]
 8008eb2:	f000 f839 	bl	8008f28 <USBD_GetLen>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	3301      	adds	r3, #1
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	005b      	lsls	r3, r3, #1
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	e001      	b.n	8008ec6 <USBD_GetString+0x42>
 8008ec2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
 8008ecc:	68ba      	ldr	r2, [r7, #8]
 8008ece:	4413      	add	r3, r2
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	7812      	ldrb	r2, [r2, #0]
 8008ed4:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ed6:	7dfb      	ldrb	r3, [r7, #23]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008edc:	7dfb      	ldrb	r3, [r7, #23]
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	2203      	movs	r2, #3
 8008ee4:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ee6:	7dfb      	ldrb	r3, [r7, #23]
 8008ee8:	3301      	adds	r3, #1
 8008eea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008eec:	e013      	b.n	8008f16 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008eee:	7dfb      	ldrb	r3, [r7, #23]
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	693a      	ldr	r2, [r7, #16]
 8008ef6:	7812      	ldrb	r2, [r2, #0]
 8008ef8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	3301      	adds	r3, #1
 8008efe:	613b      	str	r3, [r7, #16]
    idx++;
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
 8008f02:	3301      	adds	r3, #1
 8008f04:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f06:	7dfb      	ldrb	r3, [r7, #23]
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f10:	7dfb      	ldrb	r3, [r7, #23]
 8008f12:	3301      	adds	r3, #1
 8008f14:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1e7      	bne.n	8008eee <USBD_GetString+0x6a>
 8008f1e:	e000      	b.n	8008f22 <USBD_GetString+0x9e>
    return;
 8008f20:	bf00      	nop
  }
}
 8008f22:	3718      	adds	r7, #24
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f30:	2300      	movs	r3, #0
 8008f32:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f38:	e005      	b.n	8008f46 <USBD_GetLen+0x1e>
  {
    len++;
 8008f3a:	7bfb      	ldrb	r3, [r7, #15]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	3301      	adds	r3, #1
 8008f44:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1f5      	bne.n	8008f3a <USBD_GetLen+0x12>
  }

  return len;
 8008f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3714      	adds	r7, #20
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	68ba      	ldr	r2, [r7, #8]
 8008f86:	2100      	movs	r1, #0
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f000 fbfe 	bl	800978a <USBD_LL_Transmit>

  return USBD_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	68ba      	ldr	r2, [r7, #8]
 8008fa8:	2100      	movs	r1, #0
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f000 fbed 	bl	800978a <USBD_LL_Transmit>

  return USBD_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b084      	sub	sp, #16
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	60f8      	str	r0, [r7, #12]
 8008fc2:	60b9      	str	r1, [r7, #8]
 8008fc4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	2100      	movs	r1, #0
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f000 fbfd 	bl	80097cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2204      	movs	r2, #4
 8008fe8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008fec:	2300      	movs	r3, #0
 8008fee:	2200      	movs	r2, #0
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fbc9 	bl	800978a <USBD_LL_Transmit>

  return USBD_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b082      	sub	sp, #8
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2205      	movs	r2, #5
 800900e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009012:	2300      	movs	r3, #0
 8009014:	2200      	movs	r2, #0
 8009016:	2100      	movs	r1, #0
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 fbd7 	bl	80097cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800902c:	2200      	movs	r2, #0
 800902e:	490e      	ldr	r1, [pc, #56]	@ (8009068 <MX_USB_DEVICE_Init+0x40>)
 8009030:	480e      	ldr	r0, [pc, #56]	@ (800906c <MX_USB_DEVICE_Init+0x44>)
 8009032:	f7fe fcfb 	bl	8007a2c <USBD_Init>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d001      	beq.n	8009040 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800903c:	f7f8 fa74 	bl	8001528 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009040:	490b      	ldr	r1, [pc, #44]	@ (8009070 <MX_USB_DEVICE_Init+0x48>)
 8009042:	480a      	ldr	r0, [pc, #40]	@ (800906c <MX_USB_DEVICE_Init+0x44>)
 8009044:	f7fe fd22 	bl	8007a8c <USBD_RegisterClass>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d001      	beq.n	8009052 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800904e:	f7f8 fa6b 	bl	8001528 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009052:	4806      	ldr	r0, [pc, #24]	@ (800906c <MX_USB_DEVICE_Init+0x44>)
 8009054:	f7fe fd50 	bl	8007af8 <USBD_Start>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d001      	beq.n	8009062 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800905e:	f7f8 fa63 	bl	8001528 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009062:	bf00      	nop
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	2000015c 	.word	0x2000015c
 800906c:	20000320 	.word	0x20000320
 8009070:	2000009c 	.word	0x2000009c

08009074 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	4603      	mov	r3, r0
 800907c:	6039      	str	r1, [r7, #0]
 800907e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	2212      	movs	r2, #18
 8009084:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009086:	4b03      	ldr	r3, [pc, #12]	@ (8009094 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009088:	4618      	mov	r0, r3
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr
 8009094:	20000178 	.word	0x20000178

08009098 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	4603      	mov	r3, r0
 80090a0:	6039      	str	r1, [r7, #0]
 80090a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	2204      	movs	r2, #4
 80090a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80090aa:	4b03      	ldr	r3, [pc, #12]	@ (80090b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr
 80090b8:	2000018c 	.word	0x2000018c

080090bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	4603      	mov	r3, r0
 80090c4:	6039      	str	r1, [r7, #0]
 80090c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090c8:	79fb      	ldrb	r3, [r7, #7]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d105      	bne.n	80090da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090ce:	683a      	ldr	r2, [r7, #0]
 80090d0:	4907      	ldr	r1, [pc, #28]	@ (80090f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80090d2:	4808      	ldr	r0, [pc, #32]	@ (80090f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80090d4:	f7ff fed6 	bl	8008e84 <USBD_GetString>
 80090d8:	e004      	b.n	80090e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090da:	683a      	ldr	r2, [r7, #0]
 80090dc:	4904      	ldr	r1, [pc, #16]	@ (80090f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80090de:	4805      	ldr	r0, [pc, #20]	@ (80090f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80090e0:	f7ff fed0 	bl	8008e84 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090e4:	4b02      	ldr	r3, [pc, #8]	@ (80090f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	200005fc 	.word	0x200005fc
 80090f4:	0800a9bc 	.word	0x0800a9bc

080090f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	4603      	mov	r3, r0
 8009100:	6039      	str	r1, [r7, #0]
 8009102:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009104:	683a      	ldr	r2, [r7, #0]
 8009106:	4904      	ldr	r1, [pc, #16]	@ (8009118 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009108:	4804      	ldr	r0, [pc, #16]	@ (800911c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800910a:	f7ff febb 	bl	8008e84 <USBD_GetString>
  return USBD_StrDesc;
 800910e:	4b02      	ldr	r3, [pc, #8]	@ (8009118 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009110:	4618      	mov	r0, r3
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	200005fc 	.word	0x200005fc
 800911c:	0800a9c0 	.word	0x0800a9c0

08009120 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	4603      	mov	r3, r0
 8009128:	6039      	str	r1, [r7, #0]
 800912a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	221a      	movs	r2, #26
 8009130:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009132:	f000 f843 	bl	80091bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009136:	4b02      	ldr	r3, [pc, #8]	@ (8009140 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009138:	4618      	mov	r0, r3
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	20000190 	.word	0x20000190

08009144 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	4603      	mov	r3, r0
 800914c:	6039      	str	r1, [r7, #0]
 800914e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009150:	79fb      	ldrb	r3, [r7, #7]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d105      	bne.n	8009162 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009156:	683a      	ldr	r2, [r7, #0]
 8009158:	4907      	ldr	r1, [pc, #28]	@ (8009178 <USBD_FS_ConfigStrDescriptor+0x34>)
 800915a:	4808      	ldr	r0, [pc, #32]	@ (800917c <USBD_FS_ConfigStrDescriptor+0x38>)
 800915c:	f7ff fe92 	bl	8008e84 <USBD_GetString>
 8009160:	e004      	b.n	800916c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009162:	683a      	ldr	r2, [r7, #0]
 8009164:	4904      	ldr	r1, [pc, #16]	@ (8009178 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009166:	4805      	ldr	r0, [pc, #20]	@ (800917c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009168:	f7ff fe8c 	bl	8008e84 <USBD_GetString>
  }
  return USBD_StrDesc;
 800916c:	4b02      	ldr	r3, [pc, #8]	@ (8009178 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800916e:	4618      	mov	r0, r3
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	200005fc 	.word	0x200005fc
 800917c:	0800a9d4 	.word	0x0800a9d4

08009180 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	4603      	mov	r3, r0
 8009188:	6039      	str	r1, [r7, #0]
 800918a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800918c:	79fb      	ldrb	r3, [r7, #7]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d105      	bne.n	800919e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009192:	683a      	ldr	r2, [r7, #0]
 8009194:	4907      	ldr	r1, [pc, #28]	@ (80091b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009196:	4808      	ldr	r0, [pc, #32]	@ (80091b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009198:	f7ff fe74 	bl	8008e84 <USBD_GetString>
 800919c:	e004      	b.n	80091a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800919e:	683a      	ldr	r2, [r7, #0]
 80091a0:	4904      	ldr	r1, [pc, #16]	@ (80091b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80091a2:	4805      	ldr	r0, [pc, #20]	@ (80091b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80091a4:	f7ff fe6e 	bl	8008e84 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091a8:	4b02      	ldr	r3, [pc, #8]	@ (80091b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	200005fc 	.word	0x200005fc
 80091b8:	0800a9e0 	.word	0x0800a9e0

080091bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80091c2:	4b0f      	ldr	r3, [pc, #60]	@ (8009200 <Get_SerialNum+0x44>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80091c8:	4b0e      	ldr	r3, [pc, #56]	@ (8009204 <Get_SerialNum+0x48>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80091ce:	4b0e      	ldr	r3, [pc, #56]	@ (8009208 <Get_SerialNum+0x4c>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4413      	add	r3, r2
 80091da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d009      	beq.n	80091f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80091e2:	2208      	movs	r2, #8
 80091e4:	4909      	ldr	r1, [pc, #36]	@ (800920c <Get_SerialNum+0x50>)
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f000 f814 	bl	8009214 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80091ec:	2204      	movs	r2, #4
 80091ee:	4908      	ldr	r1, [pc, #32]	@ (8009210 <Get_SerialNum+0x54>)
 80091f0:	68b8      	ldr	r0, [r7, #8]
 80091f2:	f000 f80f 	bl	8009214 <IntToUnicode>
  }
}
 80091f6:	bf00      	nop
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	1fff7a10 	.word	0x1fff7a10
 8009204:	1fff7a14 	.word	0x1fff7a14
 8009208:	1fff7a18 	.word	0x1fff7a18
 800920c:	20000192 	.word	0x20000192
 8009210:	200001a2 	.word	0x200001a2

08009214 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009214:	b480      	push	{r7}
 8009216:	b087      	sub	sp, #28
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	4613      	mov	r3, r2
 8009220:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009222:	2300      	movs	r3, #0
 8009224:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009226:	2300      	movs	r3, #0
 8009228:	75fb      	strb	r3, [r7, #23]
 800922a:	e027      	b.n	800927c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	0f1b      	lsrs	r3, r3, #28
 8009230:	2b09      	cmp	r3, #9
 8009232:	d80b      	bhi.n	800924c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	0f1b      	lsrs	r3, r3, #28
 8009238:	b2da      	uxtb	r2, r3
 800923a:	7dfb      	ldrb	r3, [r7, #23]
 800923c:	005b      	lsls	r3, r3, #1
 800923e:	4619      	mov	r1, r3
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	440b      	add	r3, r1
 8009244:	3230      	adds	r2, #48	@ 0x30
 8009246:	b2d2      	uxtb	r2, r2
 8009248:	701a      	strb	r2, [r3, #0]
 800924a:	e00a      	b.n	8009262 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	0f1b      	lsrs	r3, r3, #28
 8009250:	b2da      	uxtb	r2, r3
 8009252:	7dfb      	ldrb	r3, [r7, #23]
 8009254:	005b      	lsls	r3, r3, #1
 8009256:	4619      	mov	r1, r3
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	440b      	add	r3, r1
 800925c:	3237      	adds	r2, #55	@ 0x37
 800925e:	b2d2      	uxtb	r2, r2
 8009260:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	011b      	lsls	r3, r3, #4
 8009266:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009268:	7dfb      	ldrb	r3, [r7, #23]
 800926a:	005b      	lsls	r3, r3, #1
 800926c:	3301      	adds	r3, #1
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	4413      	add	r3, r2
 8009272:	2200      	movs	r2, #0
 8009274:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009276:	7dfb      	ldrb	r3, [r7, #23]
 8009278:	3301      	adds	r3, #1
 800927a:	75fb      	strb	r3, [r7, #23]
 800927c:	7dfa      	ldrb	r2, [r7, #23]
 800927e:	79fb      	ldrb	r3, [r7, #7]
 8009280:	429a      	cmp	r2, r3
 8009282:	d3d3      	bcc.n	800922c <IntToUnicode+0x18>
  }
}
 8009284:	bf00      	nop
 8009286:	bf00      	nop
 8009288:	371c      	adds	r7, #28
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
	...

08009294 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b08a      	sub	sp, #40	@ 0x28
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800929c:	f107 0314 	add.w	r3, r7, #20
 80092a0:	2200      	movs	r2, #0
 80092a2:	601a      	str	r2, [r3, #0]
 80092a4:	605a      	str	r2, [r3, #4]
 80092a6:	609a      	str	r2, [r3, #8]
 80092a8:	60da      	str	r2, [r3, #12]
 80092aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80092b4:	d13a      	bne.n	800932c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80092b6:	2300      	movs	r3, #0
 80092b8:	613b      	str	r3, [r7, #16]
 80092ba:	4b1e      	ldr	r3, [pc, #120]	@ (8009334 <HAL_PCD_MspInit+0xa0>)
 80092bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092be:	4a1d      	ldr	r2, [pc, #116]	@ (8009334 <HAL_PCD_MspInit+0xa0>)
 80092c0:	f043 0301 	orr.w	r3, r3, #1
 80092c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80092c6:	4b1b      	ldr	r3, [pc, #108]	@ (8009334 <HAL_PCD_MspInit+0xa0>)
 80092c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092ca:	f003 0301 	and.w	r3, r3, #1
 80092ce:	613b      	str	r3, [r7, #16]
 80092d0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80092d2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80092d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092d8:	2302      	movs	r3, #2
 80092da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092dc:	2300      	movs	r3, #0
 80092de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092e0:	2303      	movs	r3, #3
 80092e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80092e4:	230a      	movs	r3, #10
 80092e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092e8:	f107 0314 	add.w	r3, r7, #20
 80092ec:	4619      	mov	r1, r3
 80092ee:	4812      	ldr	r0, [pc, #72]	@ (8009338 <HAL_PCD_MspInit+0xa4>)
 80092f0:	f7f8 ffe4 	bl	80022bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80092f4:	4b0f      	ldr	r3, [pc, #60]	@ (8009334 <HAL_PCD_MspInit+0xa0>)
 80092f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092f8:	4a0e      	ldr	r2, [pc, #56]	@ (8009334 <HAL_PCD_MspInit+0xa0>)
 80092fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092fe:	6353      	str	r3, [r2, #52]	@ 0x34
 8009300:	2300      	movs	r3, #0
 8009302:	60fb      	str	r3, [r7, #12]
 8009304:	4b0b      	ldr	r3, [pc, #44]	@ (8009334 <HAL_PCD_MspInit+0xa0>)
 8009306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009308:	4a0a      	ldr	r2, [pc, #40]	@ (8009334 <HAL_PCD_MspInit+0xa0>)
 800930a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800930e:	6453      	str	r3, [r2, #68]	@ 0x44
 8009310:	4b08      	ldr	r3, [pc, #32]	@ (8009334 <HAL_PCD_MspInit+0xa0>)
 8009312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009314:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009318:	60fb      	str	r3, [r7, #12]
 800931a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800931c:	2200      	movs	r2, #0
 800931e:	2100      	movs	r1, #0
 8009320:	2043      	movs	r0, #67	@ 0x43
 8009322:	f7f8 ff94 	bl	800224e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009326:	2043      	movs	r0, #67	@ 0x43
 8009328:	f7f8 ffad 	bl	8002286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800932c:	bf00      	nop
 800932e:	3728      	adds	r7, #40	@ 0x28
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	40023800 	.word	0x40023800
 8009338:	40020000 	.word	0x40020000

0800933c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009350:	4619      	mov	r1, r3
 8009352:	4610      	mov	r0, r2
 8009354:	f7fe fc1d 	bl	8007b92 <USBD_LL_SetupStage>
}
 8009358:	bf00      	nop
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	460b      	mov	r3, r1
 800936a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009372:	78fa      	ldrb	r2, [r7, #3]
 8009374:	6879      	ldr	r1, [r7, #4]
 8009376:	4613      	mov	r3, r2
 8009378:	00db      	lsls	r3, r3, #3
 800937a:	4413      	add	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	440b      	add	r3, r1
 8009380:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	78fb      	ldrb	r3, [r7, #3]
 8009388:	4619      	mov	r1, r3
 800938a:	f7fe fc57 	bl	8007c3c <USBD_LL_DataOutStage>
}
 800938e:	bf00      	nop
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b082      	sub	sp, #8
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	460b      	mov	r3, r1
 80093a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80093a8:	78fa      	ldrb	r2, [r7, #3]
 80093aa:	6879      	ldr	r1, [r7, #4]
 80093ac:	4613      	mov	r3, r2
 80093ae:	00db      	lsls	r3, r3, #3
 80093b0:	4413      	add	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	440b      	add	r3, r1
 80093b6:	3320      	adds	r3, #32
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	78fb      	ldrb	r3, [r7, #3]
 80093bc:	4619      	mov	r1, r3
 80093be:	f7fe fcf9 	bl	8007db4 <USBD_LL_DataInStage>
}
 80093c2:	bf00      	nop
 80093c4:	3708      	adds	r7, #8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b082      	sub	sp, #8
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093d8:	4618      	mov	r0, r3
 80093da:	f7fe fe3d 	bl	8008058 <USBD_LL_SOF>
}
 80093de:	bf00      	nop
 80093e0:	3708      	adds	r7, #8
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b084      	sub	sp, #16
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80093ee:	2301      	movs	r3, #1
 80093f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	79db      	ldrb	r3, [r3, #7]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d102      	bne.n	8009400 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80093fa:	2300      	movs	r3, #0
 80093fc:	73fb      	strb	r3, [r7, #15]
 80093fe:	e008      	b.n	8009412 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	79db      	ldrb	r3, [r3, #7]
 8009404:	2b02      	cmp	r3, #2
 8009406:	d102      	bne.n	800940e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009408:	2301      	movs	r3, #1
 800940a:	73fb      	strb	r3, [r7, #15]
 800940c:	e001      	b.n	8009412 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800940e:	f7f8 f88b 	bl	8001528 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009418:	7bfa      	ldrb	r2, [r7, #15]
 800941a:	4611      	mov	r1, r2
 800941c:	4618      	mov	r0, r3
 800941e:	f7fe fdd7 	bl	8007fd0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009428:	4618      	mov	r0, r3
 800942a:	f7fe fd7e 	bl	8007f2a <USBD_LL_Reset>
}
 800942e:	bf00      	nop
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
	...

08009438 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009446:	4618      	mov	r0, r3
 8009448:	f7fe fdd2 	bl	8007ff0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	6812      	ldr	r2, [r2, #0]
 800945a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800945e:	f043 0301 	orr.w	r3, r3, #1
 8009462:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	7adb      	ldrb	r3, [r3, #11]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d005      	beq.n	8009478 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800946c:	4b04      	ldr	r3, [pc, #16]	@ (8009480 <HAL_PCD_SuspendCallback+0x48>)
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	4a03      	ldr	r2, [pc, #12]	@ (8009480 <HAL_PCD_SuspendCallback+0x48>)
 8009472:	f043 0306 	orr.w	r3, r3, #6
 8009476:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009478:	bf00      	nop
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	e000ed00 	.word	0xe000ed00

08009484 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009492:	4618      	mov	r0, r3
 8009494:	f7fe fdc8 	bl	8008028 <USBD_LL_Resume>
}
 8009498:	bf00      	nop
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	460b      	mov	r3, r1
 80094aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094b2:	78fa      	ldrb	r2, [r7, #3]
 80094b4:	4611      	mov	r1, r2
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7fe fe20 	bl	80080fc <USBD_LL_IsoOUTIncomplete>
}
 80094bc:	bf00      	nop
 80094be:	3708      	adds	r7, #8
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	460b      	mov	r3, r1
 80094ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094d6:	78fa      	ldrb	r2, [r7, #3]
 80094d8:	4611      	mov	r1, r2
 80094da:	4618      	mov	r0, r3
 80094dc:	f7fe fddc 	bl	8008098 <USBD_LL_IsoINIncomplete>
}
 80094e0:	bf00      	nop
 80094e2:	3708      	adds	r7, #8
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fe fe32 	bl	8008160 <USBD_LL_DevConnected>
}
 80094fc:	bf00      	nop
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009512:	4618      	mov	r0, r3
 8009514:	f7fe fe2f 	bl	8008176 <USBD_LL_DevDisconnected>
}
 8009518:	bf00      	nop
 800951a:	3708      	adds	r7, #8
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d13c      	bne.n	80095aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009530:	4a20      	ldr	r2, [pc, #128]	@ (80095b4 <USBD_LL_Init+0x94>)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a1e      	ldr	r2, [pc, #120]	@ (80095b4 <USBD_LL_Init+0x94>)
 800953c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009540:	4b1c      	ldr	r3, [pc, #112]	@ (80095b4 <USBD_LL_Init+0x94>)
 8009542:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009546:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009548:	4b1a      	ldr	r3, [pc, #104]	@ (80095b4 <USBD_LL_Init+0x94>)
 800954a:	2204      	movs	r2, #4
 800954c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800954e:	4b19      	ldr	r3, [pc, #100]	@ (80095b4 <USBD_LL_Init+0x94>)
 8009550:	2202      	movs	r2, #2
 8009552:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009554:	4b17      	ldr	r3, [pc, #92]	@ (80095b4 <USBD_LL_Init+0x94>)
 8009556:	2200      	movs	r2, #0
 8009558:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800955a:	4b16      	ldr	r3, [pc, #88]	@ (80095b4 <USBD_LL_Init+0x94>)
 800955c:	2202      	movs	r2, #2
 800955e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009560:	4b14      	ldr	r3, [pc, #80]	@ (80095b4 <USBD_LL_Init+0x94>)
 8009562:	2200      	movs	r2, #0
 8009564:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009566:	4b13      	ldr	r3, [pc, #76]	@ (80095b4 <USBD_LL_Init+0x94>)
 8009568:	2200      	movs	r2, #0
 800956a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800956c:	4b11      	ldr	r3, [pc, #68]	@ (80095b4 <USBD_LL_Init+0x94>)
 800956e:	2200      	movs	r2, #0
 8009570:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009572:	4b10      	ldr	r3, [pc, #64]	@ (80095b4 <USBD_LL_Init+0x94>)
 8009574:	2200      	movs	r2, #0
 8009576:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009578:	4b0e      	ldr	r3, [pc, #56]	@ (80095b4 <USBD_LL_Init+0x94>)
 800957a:	2200      	movs	r2, #0
 800957c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800957e:	480d      	ldr	r0, [pc, #52]	@ (80095b4 <USBD_LL_Init+0x94>)
 8009580:	f7fa f9ce 	bl	8003920 <HAL_PCD_Init>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800958a:	f7f7 ffcd 	bl	8001528 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800958e:	2180      	movs	r1, #128	@ 0x80
 8009590:	4808      	ldr	r0, [pc, #32]	@ (80095b4 <USBD_LL_Init+0x94>)
 8009592:	f7fb fbe2 	bl	8004d5a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009596:	2240      	movs	r2, #64	@ 0x40
 8009598:	2100      	movs	r1, #0
 800959a:	4806      	ldr	r0, [pc, #24]	@ (80095b4 <USBD_LL_Init+0x94>)
 800959c:	f7fb fb96 	bl	8004ccc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80095a0:	2280      	movs	r2, #128	@ 0x80
 80095a2:	2101      	movs	r1, #1
 80095a4:	4803      	ldr	r0, [pc, #12]	@ (80095b4 <USBD_LL_Init+0x94>)
 80095a6:	f7fb fb91 	bl	8004ccc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3708      	adds	r7, #8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	200007fc 	.word	0x200007fc

080095b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095c0:	2300      	movs	r3, #0
 80095c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095c4:	2300      	movs	r3, #0
 80095c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fa fab5 	bl	8003b3e <HAL_PCD_Start>
 80095d4:	4603      	mov	r3, r0
 80095d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095d8:	7bfb      	ldrb	r3, [r7, #15]
 80095da:	4618      	mov	r0, r3
 80095dc:	f000 f930 	bl	8009840 <USBD_Get_USB_Status>
 80095e0:	4603      	mov	r3, r0
 80095e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b084      	sub	sp, #16
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
 80095f6:	4608      	mov	r0, r1
 80095f8:	4611      	mov	r1, r2
 80095fa:	461a      	mov	r2, r3
 80095fc:	4603      	mov	r3, r0
 80095fe:	70fb      	strb	r3, [r7, #3]
 8009600:	460b      	mov	r3, r1
 8009602:	70bb      	strb	r3, [r7, #2]
 8009604:	4613      	mov	r3, r2
 8009606:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009608:	2300      	movs	r3, #0
 800960a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800960c:	2300      	movs	r3, #0
 800960e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009616:	78bb      	ldrb	r3, [r7, #2]
 8009618:	883a      	ldrh	r2, [r7, #0]
 800961a:	78f9      	ldrb	r1, [r7, #3]
 800961c:	f7fa ff89 	bl	8004532 <HAL_PCD_EP_Open>
 8009620:	4603      	mov	r3, r0
 8009622:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009624:	7bfb      	ldrb	r3, [r7, #15]
 8009626:	4618      	mov	r0, r3
 8009628:	f000 f90a 	bl	8009840 <USBD_Get_USB_Status>
 800962c:	4603      	mov	r3, r0
 800962e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009630:	7bbb      	ldrb	r3, [r7, #14]
}
 8009632:	4618      	mov	r0, r3
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b084      	sub	sp, #16
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	460b      	mov	r3, r1
 8009644:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009646:	2300      	movs	r3, #0
 8009648:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009654:	78fa      	ldrb	r2, [r7, #3]
 8009656:	4611      	mov	r1, r2
 8009658:	4618      	mov	r0, r3
 800965a:	f7fa ffd4 	bl	8004606 <HAL_PCD_EP_Close>
 800965e:	4603      	mov	r3, r0
 8009660:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009662:	7bfb      	ldrb	r3, [r7, #15]
 8009664:	4618      	mov	r0, r3
 8009666:	f000 f8eb 	bl	8009840 <USBD_Get_USB_Status>
 800966a:	4603      	mov	r3, r0
 800966c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800966e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009684:	2300      	movs	r3, #0
 8009686:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009688:	2300      	movs	r3, #0
 800968a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009692:	78fa      	ldrb	r2, [r7, #3]
 8009694:	4611      	mov	r1, r2
 8009696:	4618      	mov	r0, r3
 8009698:	f7fb f874 	bl	8004784 <HAL_PCD_EP_SetStall>
 800969c:	4603      	mov	r3, r0
 800969e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
 80096a2:	4618      	mov	r0, r3
 80096a4:	f000 f8cc 	bl	8009840 <USBD_Get_USB_Status>
 80096a8:	4603      	mov	r3, r0
 80096aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b084      	sub	sp, #16
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	460b      	mov	r3, r1
 80096c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096c2:	2300      	movs	r3, #0
 80096c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096d0:	78fa      	ldrb	r2, [r7, #3]
 80096d2:	4611      	mov	r1, r2
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7fb f8b8 	bl	800484a <HAL_PCD_EP_ClrStall>
 80096da:	4603      	mov	r3, r0
 80096dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096de:	7bfb      	ldrb	r3, [r7, #15]
 80096e0:	4618      	mov	r0, r3
 80096e2:	f000 f8ad 	bl	8009840 <USBD_Get_USB_Status>
 80096e6:	4603      	mov	r3, r0
 80096e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3710      	adds	r7, #16
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	460b      	mov	r3, r1
 80096fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009706:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009708:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800970c:	2b00      	cmp	r3, #0
 800970e:	da0b      	bge.n	8009728 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009710:	78fb      	ldrb	r3, [r7, #3]
 8009712:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009716:	68f9      	ldr	r1, [r7, #12]
 8009718:	4613      	mov	r3, r2
 800971a:	00db      	lsls	r3, r3, #3
 800971c:	4413      	add	r3, r2
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	440b      	add	r3, r1
 8009722:	3316      	adds	r3, #22
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	e00b      	b.n	8009740 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009728:	78fb      	ldrb	r3, [r7, #3]
 800972a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800972e:	68f9      	ldr	r1, [r7, #12]
 8009730:	4613      	mov	r3, r2
 8009732:	00db      	lsls	r3, r3, #3
 8009734:	4413      	add	r3, r2
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	440b      	add	r3, r1
 800973a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800973e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009740:	4618      	mov	r0, r3
 8009742:	3714      	adds	r7, #20
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	460b      	mov	r3, r1
 8009756:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009758:	2300      	movs	r3, #0
 800975a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009766:	78fa      	ldrb	r2, [r7, #3]
 8009768:	4611      	mov	r1, r2
 800976a:	4618      	mov	r0, r3
 800976c:	f7fa febd 	bl	80044ea <HAL_PCD_SetAddress>
 8009770:	4603      	mov	r3, r0
 8009772:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009774:	7bfb      	ldrb	r3, [r7, #15]
 8009776:	4618      	mov	r0, r3
 8009778:	f000 f862 	bl	8009840 <USBD_Get_USB_Status>
 800977c:	4603      	mov	r3, r0
 800977e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009780:	7bbb      	ldrb	r3, [r7, #14]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b086      	sub	sp, #24
 800978e:	af00      	add	r7, sp, #0
 8009790:	60f8      	str	r0, [r7, #12]
 8009792:	607a      	str	r2, [r7, #4]
 8009794:	603b      	str	r3, [r7, #0]
 8009796:	460b      	mov	r3, r1
 8009798:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800979a:	2300      	movs	r3, #0
 800979c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800979e:	2300      	movs	r3, #0
 80097a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80097a8:	7af9      	ldrb	r1, [r7, #11]
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	f7fa ffaf 	bl	8004710 <HAL_PCD_EP_Transmit>
 80097b2:	4603      	mov	r3, r0
 80097b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097b6:	7dfb      	ldrb	r3, [r7, #23]
 80097b8:	4618      	mov	r0, r3
 80097ba:	f000 f841 	bl	8009840 <USBD_Get_USB_Status>
 80097be:	4603      	mov	r3, r0
 80097c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80097c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3718      	adds	r7, #24
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b086      	sub	sp, #24
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	607a      	str	r2, [r7, #4]
 80097d6:	603b      	str	r3, [r7, #0]
 80097d8:	460b      	mov	r3, r1
 80097da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097dc:	2300      	movs	r3, #0
 80097de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097e0:	2300      	movs	r3, #0
 80097e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80097ea:	7af9      	ldrb	r1, [r7, #11]
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	f7fa ff53 	bl	800469a <HAL_PCD_EP_Receive>
 80097f4:	4603      	mov	r3, r0
 80097f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097f8:	7dfb      	ldrb	r3, [r7, #23]
 80097fa:	4618      	mov	r0, r3
 80097fc:	f000 f820 	bl	8009840 <USBD_Get_USB_Status>
 8009800:	4603      	mov	r3, r0
 8009802:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009804:	7dbb      	ldrb	r3, [r7, #22]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3718      	adds	r7, #24
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
	...

08009810 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009818:	4b03      	ldr	r3, [pc, #12]	@ (8009828 <USBD_static_malloc+0x18>)
}
 800981a:	4618      	mov	r0, r3
 800981c:	370c      	adds	r7, #12
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr
 8009826:	bf00      	nop
 8009828:	20000ce0 	.word	0x20000ce0

0800982c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]

}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	4603      	mov	r3, r0
 8009848:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800984a:	2300      	movs	r3, #0
 800984c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800984e:	79fb      	ldrb	r3, [r7, #7]
 8009850:	2b03      	cmp	r3, #3
 8009852:	d817      	bhi.n	8009884 <USBD_Get_USB_Status+0x44>
 8009854:	a201      	add	r2, pc, #4	@ (adr r2, 800985c <USBD_Get_USB_Status+0x1c>)
 8009856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985a:	bf00      	nop
 800985c:	0800986d 	.word	0x0800986d
 8009860:	08009873 	.word	0x08009873
 8009864:	08009879 	.word	0x08009879
 8009868:	0800987f 	.word	0x0800987f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800986c:	2300      	movs	r3, #0
 800986e:	73fb      	strb	r3, [r7, #15]
    break;
 8009870:	e00b      	b.n	800988a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009872:	2303      	movs	r3, #3
 8009874:	73fb      	strb	r3, [r7, #15]
    break;
 8009876:	e008      	b.n	800988a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009878:	2301      	movs	r3, #1
 800987a:	73fb      	strb	r3, [r7, #15]
    break;
 800987c:	e005      	b.n	800988a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800987e:	2303      	movs	r3, #3
 8009880:	73fb      	strb	r3, [r7, #15]
    break;
 8009882:	e002      	b.n	800988a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009884:	2303      	movs	r3, #3
 8009886:	73fb      	strb	r3, [r7, #15]
    break;
 8009888:	bf00      	nop
  }
  return usb_status;
 800988a:	7bfb      	ldrb	r3, [r7, #15]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3714      	adds	r7, #20
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <siprintf>:
 8009898:	b40e      	push	{r1, r2, r3}
 800989a:	b510      	push	{r4, lr}
 800989c:	b09d      	sub	sp, #116	@ 0x74
 800989e:	ab1f      	add	r3, sp, #124	@ 0x7c
 80098a0:	9002      	str	r0, [sp, #8]
 80098a2:	9006      	str	r0, [sp, #24]
 80098a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80098a8:	480a      	ldr	r0, [pc, #40]	@ (80098d4 <siprintf+0x3c>)
 80098aa:	9107      	str	r1, [sp, #28]
 80098ac:	9104      	str	r1, [sp, #16]
 80098ae:	490a      	ldr	r1, [pc, #40]	@ (80098d8 <siprintf+0x40>)
 80098b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80098b4:	9105      	str	r1, [sp, #20]
 80098b6:	2400      	movs	r4, #0
 80098b8:	a902      	add	r1, sp, #8
 80098ba:	6800      	ldr	r0, [r0, #0]
 80098bc:	9301      	str	r3, [sp, #4]
 80098be:	941b      	str	r4, [sp, #108]	@ 0x6c
 80098c0:	f000 f994 	bl	8009bec <_svfiprintf_r>
 80098c4:	9b02      	ldr	r3, [sp, #8]
 80098c6:	701c      	strb	r4, [r3, #0]
 80098c8:	b01d      	add	sp, #116	@ 0x74
 80098ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098ce:	b003      	add	sp, #12
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	200001ac 	.word	0x200001ac
 80098d8:	ffff0208 	.word	0xffff0208

080098dc <memset>:
 80098dc:	4402      	add	r2, r0
 80098de:	4603      	mov	r3, r0
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d100      	bne.n	80098e6 <memset+0xa>
 80098e4:	4770      	bx	lr
 80098e6:	f803 1b01 	strb.w	r1, [r3], #1
 80098ea:	e7f9      	b.n	80098e0 <memset+0x4>

080098ec <__errno>:
 80098ec:	4b01      	ldr	r3, [pc, #4]	@ (80098f4 <__errno+0x8>)
 80098ee:	6818      	ldr	r0, [r3, #0]
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	200001ac 	.word	0x200001ac

080098f8 <__libc_init_array>:
 80098f8:	b570      	push	{r4, r5, r6, lr}
 80098fa:	4d0d      	ldr	r5, [pc, #52]	@ (8009930 <__libc_init_array+0x38>)
 80098fc:	4c0d      	ldr	r4, [pc, #52]	@ (8009934 <__libc_init_array+0x3c>)
 80098fe:	1b64      	subs	r4, r4, r5
 8009900:	10a4      	asrs	r4, r4, #2
 8009902:	2600      	movs	r6, #0
 8009904:	42a6      	cmp	r6, r4
 8009906:	d109      	bne.n	800991c <__libc_init_array+0x24>
 8009908:	4d0b      	ldr	r5, [pc, #44]	@ (8009938 <__libc_init_array+0x40>)
 800990a:	4c0c      	ldr	r4, [pc, #48]	@ (800993c <__libc_init_array+0x44>)
 800990c:	f000 ffd2 	bl	800a8b4 <_init>
 8009910:	1b64      	subs	r4, r4, r5
 8009912:	10a4      	asrs	r4, r4, #2
 8009914:	2600      	movs	r6, #0
 8009916:	42a6      	cmp	r6, r4
 8009918:	d105      	bne.n	8009926 <__libc_init_array+0x2e>
 800991a:	bd70      	pop	{r4, r5, r6, pc}
 800991c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009920:	4798      	blx	r3
 8009922:	3601      	adds	r6, #1
 8009924:	e7ee      	b.n	8009904 <__libc_init_array+0xc>
 8009926:	f855 3b04 	ldr.w	r3, [r5], #4
 800992a:	4798      	blx	r3
 800992c:	3601      	adds	r6, #1
 800992e:	e7f2      	b.n	8009916 <__libc_init_array+0x1e>
 8009930:	0800aac8 	.word	0x0800aac8
 8009934:	0800aac8 	.word	0x0800aac8
 8009938:	0800aac8 	.word	0x0800aac8
 800993c:	0800aacc 	.word	0x0800aacc

08009940 <__retarget_lock_acquire_recursive>:
 8009940:	4770      	bx	lr

08009942 <__retarget_lock_release_recursive>:
 8009942:	4770      	bx	lr

08009944 <_free_r>:
 8009944:	b538      	push	{r3, r4, r5, lr}
 8009946:	4605      	mov	r5, r0
 8009948:	2900      	cmp	r1, #0
 800994a:	d041      	beq.n	80099d0 <_free_r+0x8c>
 800994c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009950:	1f0c      	subs	r4, r1, #4
 8009952:	2b00      	cmp	r3, #0
 8009954:	bfb8      	it	lt
 8009956:	18e4      	addlt	r4, r4, r3
 8009958:	f000 f8e0 	bl	8009b1c <__malloc_lock>
 800995c:	4a1d      	ldr	r2, [pc, #116]	@ (80099d4 <_free_r+0x90>)
 800995e:	6813      	ldr	r3, [r2, #0]
 8009960:	b933      	cbnz	r3, 8009970 <_free_r+0x2c>
 8009962:	6063      	str	r3, [r4, #4]
 8009964:	6014      	str	r4, [r2, #0]
 8009966:	4628      	mov	r0, r5
 8009968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800996c:	f000 b8dc 	b.w	8009b28 <__malloc_unlock>
 8009970:	42a3      	cmp	r3, r4
 8009972:	d908      	bls.n	8009986 <_free_r+0x42>
 8009974:	6820      	ldr	r0, [r4, #0]
 8009976:	1821      	adds	r1, r4, r0
 8009978:	428b      	cmp	r3, r1
 800997a:	bf01      	itttt	eq
 800997c:	6819      	ldreq	r1, [r3, #0]
 800997e:	685b      	ldreq	r3, [r3, #4]
 8009980:	1809      	addeq	r1, r1, r0
 8009982:	6021      	streq	r1, [r4, #0]
 8009984:	e7ed      	b.n	8009962 <_free_r+0x1e>
 8009986:	461a      	mov	r2, r3
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	b10b      	cbz	r3, 8009990 <_free_r+0x4c>
 800998c:	42a3      	cmp	r3, r4
 800998e:	d9fa      	bls.n	8009986 <_free_r+0x42>
 8009990:	6811      	ldr	r1, [r2, #0]
 8009992:	1850      	adds	r0, r2, r1
 8009994:	42a0      	cmp	r0, r4
 8009996:	d10b      	bne.n	80099b0 <_free_r+0x6c>
 8009998:	6820      	ldr	r0, [r4, #0]
 800999a:	4401      	add	r1, r0
 800999c:	1850      	adds	r0, r2, r1
 800999e:	4283      	cmp	r3, r0
 80099a0:	6011      	str	r1, [r2, #0]
 80099a2:	d1e0      	bne.n	8009966 <_free_r+0x22>
 80099a4:	6818      	ldr	r0, [r3, #0]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	6053      	str	r3, [r2, #4]
 80099aa:	4408      	add	r0, r1
 80099ac:	6010      	str	r0, [r2, #0]
 80099ae:	e7da      	b.n	8009966 <_free_r+0x22>
 80099b0:	d902      	bls.n	80099b8 <_free_r+0x74>
 80099b2:	230c      	movs	r3, #12
 80099b4:	602b      	str	r3, [r5, #0]
 80099b6:	e7d6      	b.n	8009966 <_free_r+0x22>
 80099b8:	6820      	ldr	r0, [r4, #0]
 80099ba:	1821      	adds	r1, r4, r0
 80099bc:	428b      	cmp	r3, r1
 80099be:	bf04      	itt	eq
 80099c0:	6819      	ldreq	r1, [r3, #0]
 80099c2:	685b      	ldreq	r3, [r3, #4]
 80099c4:	6063      	str	r3, [r4, #4]
 80099c6:	bf04      	itt	eq
 80099c8:	1809      	addeq	r1, r1, r0
 80099ca:	6021      	streq	r1, [r4, #0]
 80099cc:	6054      	str	r4, [r2, #4]
 80099ce:	e7ca      	b.n	8009966 <_free_r+0x22>
 80099d0:	bd38      	pop	{r3, r4, r5, pc}
 80099d2:	bf00      	nop
 80099d4:	20000e38 	.word	0x20000e38

080099d8 <sbrk_aligned>:
 80099d8:	b570      	push	{r4, r5, r6, lr}
 80099da:	4e0f      	ldr	r6, [pc, #60]	@ (8009a18 <sbrk_aligned+0x40>)
 80099dc:	460c      	mov	r4, r1
 80099de:	6831      	ldr	r1, [r6, #0]
 80099e0:	4605      	mov	r5, r0
 80099e2:	b911      	cbnz	r1, 80099ea <sbrk_aligned+0x12>
 80099e4:	f000 fba4 	bl	800a130 <_sbrk_r>
 80099e8:	6030      	str	r0, [r6, #0]
 80099ea:	4621      	mov	r1, r4
 80099ec:	4628      	mov	r0, r5
 80099ee:	f000 fb9f 	bl	800a130 <_sbrk_r>
 80099f2:	1c43      	adds	r3, r0, #1
 80099f4:	d103      	bne.n	80099fe <sbrk_aligned+0x26>
 80099f6:	f04f 34ff 	mov.w	r4, #4294967295
 80099fa:	4620      	mov	r0, r4
 80099fc:	bd70      	pop	{r4, r5, r6, pc}
 80099fe:	1cc4      	adds	r4, r0, #3
 8009a00:	f024 0403 	bic.w	r4, r4, #3
 8009a04:	42a0      	cmp	r0, r4
 8009a06:	d0f8      	beq.n	80099fa <sbrk_aligned+0x22>
 8009a08:	1a21      	subs	r1, r4, r0
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	f000 fb90 	bl	800a130 <_sbrk_r>
 8009a10:	3001      	adds	r0, #1
 8009a12:	d1f2      	bne.n	80099fa <sbrk_aligned+0x22>
 8009a14:	e7ef      	b.n	80099f6 <sbrk_aligned+0x1e>
 8009a16:	bf00      	nop
 8009a18:	20000e34 	.word	0x20000e34

08009a1c <_malloc_r>:
 8009a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a20:	1ccd      	adds	r5, r1, #3
 8009a22:	f025 0503 	bic.w	r5, r5, #3
 8009a26:	3508      	adds	r5, #8
 8009a28:	2d0c      	cmp	r5, #12
 8009a2a:	bf38      	it	cc
 8009a2c:	250c      	movcc	r5, #12
 8009a2e:	2d00      	cmp	r5, #0
 8009a30:	4606      	mov	r6, r0
 8009a32:	db01      	blt.n	8009a38 <_malloc_r+0x1c>
 8009a34:	42a9      	cmp	r1, r5
 8009a36:	d904      	bls.n	8009a42 <_malloc_r+0x26>
 8009a38:	230c      	movs	r3, #12
 8009a3a:	6033      	str	r3, [r6, #0]
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009b18 <_malloc_r+0xfc>
 8009a46:	f000 f869 	bl	8009b1c <__malloc_lock>
 8009a4a:	f8d8 3000 	ldr.w	r3, [r8]
 8009a4e:	461c      	mov	r4, r3
 8009a50:	bb44      	cbnz	r4, 8009aa4 <_malloc_r+0x88>
 8009a52:	4629      	mov	r1, r5
 8009a54:	4630      	mov	r0, r6
 8009a56:	f7ff ffbf 	bl	80099d8 <sbrk_aligned>
 8009a5a:	1c43      	adds	r3, r0, #1
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	d158      	bne.n	8009b12 <_malloc_r+0xf6>
 8009a60:	f8d8 4000 	ldr.w	r4, [r8]
 8009a64:	4627      	mov	r7, r4
 8009a66:	2f00      	cmp	r7, #0
 8009a68:	d143      	bne.n	8009af2 <_malloc_r+0xd6>
 8009a6a:	2c00      	cmp	r4, #0
 8009a6c:	d04b      	beq.n	8009b06 <_malloc_r+0xea>
 8009a6e:	6823      	ldr	r3, [r4, #0]
 8009a70:	4639      	mov	r1, r7
 8009a72:	4630      	mov	r0, r6
 8009a74:	eb04 0903 	add.w	r9, r4, r3
 8009a78:	f000 fb5a 	bl	800a130 <_sbrk_r>
 8009a7c:	4581      	cmp	r9, r0
 8009a7e:	d142      	bne.n	8009b06 <_malloc_r+0xea>
 8009a80:	6821      	ldr	r1, [r4, #0]
 8009a82:	1a6d      	subs	r5, r5, r1
 8009a84:	4629      	mov	r1, r5
 8009a86:	4630      	mov	r0, r6
 8009a88:	f7ff ffa6 	bl	80099d8 <sbrk_aligned>
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	d03a      	beq.n	8009b06 <_malloc_r+0xea>
 8009a90:	6823      	ldr	r3, [r4, #0]
 8009a92:	442b      	add	r3, r5
 8009a94:	6023      	str	r3, [r4, #0]
 8009a96:	f8d8 3000 	ldr.w	r3, [r8]
 8009a9a:	685a      	ldr	r2, [r3, #4]
 8009a9c:	bb62      	cbnz	r2, 8009af8 <_malloc_r+0xdc>
 8009a9e:	f8c8 7000 	str.w	r7, [r8]
 8009aa2:	e00f      	b.n	8009ac4 <_malloc_r+0xa8>
 8009aa4:	6822      	ldr	r2, [r4, #0]
 8009aa6:	1b52      	subs	r2, r2, r5
 8009aa8:	d420      	bmi.n	8009aec <_malloc_r+0xd0>
 8009aaa:	2a0b      	cmp	r2, #11
 8009aac:	d917      	bls.n	8009ade <_malloc_r+0xc2>
 8009aae:	1961      	adds	r1, r4, r5
 8009ab0:	42a3      	cmp	r3, r4
 8009ab2:	6025      	str	r5, [r4, #0]
 8009ab4:	bf18      	it	ne
 8009ab6:	6059      	strne	r1, [r3, #4]
 8009ab8:	6863      	ldr	r3, [r4, #4]
 8009aba:	bf08      	it	eq
 8009abc:	f8c8 1000 	streq.w	r1, [r8]
 8009ac0:	5162      	str	r2, [r4, r5]
 8009ac2:	604b      	str	r3, [r1, #4]
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	f000 f82f 	bl	8009b28 <__malloc_unlock>
 8009aca:	f104 000b 	add.w	r0, r4, #11
 8009ace:	1d23      	adds	r3, r4, #4
 8009ad0:	f020 0007 	bic.w	r0, r0, #7
 8009ad4:	1ac2      	subs	r2, r0, r3
 8009ad6:	bf1c      	itt	ne
 8009ad8:	1a1b      	subne	r3, r3, r0
 8009ada:	50a3      	strne	r3, [r4, r2]
 8009adc:	e7af      	b.n	8009a3e <_malloc_r+0x22>
 8009ade:	6862      	ldr	r2, [r4, #4]
 8009ae0:	42a3      	cmp	r3, r4
 8009ae2:	bf0c      	ite	eq
 8009ae4:	f8c8 2000 	streq.w	r2, [r8]
 8009ae8:	605a      	strne	r2, [r3, #4]
 8009aea:	e7eb      	b.n	8009ac4 <_malloc_r+0xa8>
 8009aec:	4623      	mov	r3, r4
 8009aee:	6864      	ldr	r4, [r4, #4]
 8009af0:	e7ae      	b.n	8009a50 <_malloc_r+0x34>
 8009af2:	463c      	mov	r4, r7
 8009af4:	687f      	ldr	r7, [r7, #4]
 8009af6:	e7b6      	b.n	8009a66 <_malloc_r+0x4a>
 8009af8:	461a      	mov	r2, r3
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	42a3      	cmp	r3, r4
 8009afe:	d1fb      	bne.n	8009af8 <_malloc_r+0xdc>
 8009b00:	2300      	movs	r3, #0
 8009b02:	6053      	str	r3, [r2, #4]
 8009b04:	e7de      	b.n	8009ac4 <_malloc_r+0xa8>
 8009b06:	230c      	movs	r3, #12
 8009b08:	6033      	str	r3, [r6, #0]
 8009b0a:	4630      	mov	r0, r6
 8009b0c:	f000 f80c 	bl	8009b28 <__malloc_unlock>
 8009b10:	e794      	b.n	8009a3c <_malloc_r+0x20>
 8009b12:	6005      	str	r5, [r0, #0]
 8009b14:	e7d6      	b.n	8009ac4 <_malloc_r+0xa8>
 8009b16:	bf00      	nop
 8009b18:	20000e38 	.word	0x20000e38

08009b1c <__malloc_lock>:
 8009b1c:	4801      	ldr	r0, [pc, #4]	@ (8009b24 <__malloc_lock+0x8>)
 8009b1e:	f7ff bf0f 	b.w	8009940 <__retarget_lock_acquire_recursive>
 8009b22:	bf00      	nop
 8009b24:	20000e30 	.word	0x20000e30

08009b28 <__malloc_unlock>:
 8009b28:	4801      	ldr	r0, [pc, #4]	@ (8009b30 <__malloc_unlock+0x8>)
 8009b2a:	f7ff bf0a 	b.w	8009942 <__retarget_lock_release_recursive>
 8009b2e:	bf00      	nop
 8009b30:	20000e30 	.word	0x20000e30

08009b34 <__ssputs_r>:
 8009b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b38:	688e      	ldr	r6, [r1, #8]
 8009b3a:	461f      	mov	r7, r3
 8009b3c:	42be      	cmp	r6, r7
 8009b3e:	680b      	ldr	r3, [r1, #0]
 8009b40:	4682      	mov	sl, r0
 8009b42:	460c      	mov	r4, r1
 8009b44:	4690      	mov	r8, r2
 8009b46:	d82d      	bhi.n	8009ba4 <__ssputs_r+0x70>
 8009b48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009b50:	d026      	beq.n	8009ba0 <__ssputs_r+0x6c>
 8009b52:	6965      	ldr	r5, [r4, #20]
 8009b54:	6909      	ldr	r1, [r1, #16]
 8009b56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b5a:	eba3 0901 	sub.w	r9, r3, r1
 8009b5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b62:	1c7b      	adds	r3, r7, #1
 8009b64:	444b      	add	r3, r9
 8009b66:	106d      	asrs	r5, r5, #1
 8009b68:	429d      	cmp	r5, r3
 8009b6a:	bf38      	it	cc
 8009b6c:	461d      	movcc	r5, r3
 8009b6e:	0553      	lsls	r3, r2, #21
 8009b70:	d527      	bpl.n	8009bc2 <__ssputs_r+0x8e>
 8009b72:	4629      	mov	r1, r5
 8009b74:	f7ff ff52 	bl	8009a1c <_malloc_r>
 8009b78:	4606      	mov	r6, r0
 8009b7a:	b360      	cbz	r0, 8009bd6 <__ssputs_r+0xa2>
 8009b7c:	6921      	ldr	r1, [r4, #16]
 8009b7e:	464a      	mov	r2, r9
 8009b80:	f000 fae6 	bl	800a150 <memcpy>
 8009b84:	89a3      	ldrh	r3, [r4, #12]
 8009b86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b8e:	81a3      	strh	r3, [r4, #12]
 8009b90:	6126      	str	r6, [r4, #16]
 8009b92:	6165      	str	r5, [r4, #20]
 8009b94:	444e      	add	r6, r9
 8009b96:	eba5 0509 	sub.w	r5, r5, r9
 8009b9a:	6026      	str	r6, [r4, #0]
 8009b9c:	60a5      	str	r5, [r4, #8]
 8009b9e:	463e      	mov	r6, r7
 8009ba0:	42be      	cmp	r6, r7
 8009ba2:	d900      	bls.n	8009ba6 <__ssputs_r+0x72>
 8009ba4:	463e      	mov	r6, r7
 8009ba6:	6820      	ldr	r0, [r4, #0]
 8009ba8:	4632      	mov	r2, r6
 8009baa:	4641      	mov	r1, r8
 8009bac:	f000 faa6 	bl	800a0fc <memmove>
 8009bb0:	68a3      	ldr	r3, [r4, #8]
 8009bb2:	1b9b      	subs	r3, r3, r6
 8009bb4:	60a3      	str	r3, [r4, #8]
 8009bb6:	6823      	ldr	r3, [r4, #0]
 8009bb8:	4433      	add	r3, r6
 8009bba:	6023      	str	r3, [r4, #0]
 8009bbc:	2000      	movs	r0, #0
 8009bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bc2:	462a      	mov	r2, r5
 8009bc4:	f000 fad2 	bl	800a16c <_realloc_r>
 8009bc8:	4606      	mov	r6, r0
 8009bca:	2800      	cmp	r0, #0
 8009bcc:	d1e0      	bne.n	8009b90 <__ssputs_r+0x5c>
 8009bce:	6921      	ldr	r1, [r4, #16]
 8009bd0:	4650      	mov	r0, sl
 8009bd2:	f7ff feb7 	bl	8009944 <_free_r>
 8009bd6:	230c      	movs	r3, #12
 8009bd8:	f8ca 3000 	str.w	r3, [sl]
 8009bdc:	89a3      	ldrh	r3, [r4, #12]
 8009bde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009be2:	81a3      	strh	r3, [r4, #12]
 8009be4:	f04f 30ff 	mov.w	r0, #4294967295
 8009be8:	e7e9      	b.n	8009bbe <__ssputs_r+0x8a>
	...

08009bec <_svfiprintf_r>:
 8009bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf0:	4698      	mov	r8, r3
 8009bf2:	898b      	ldrh	r3, [r1, #12]
 8009bf4:	061b      	lsls	r3, r3, #24
 8009bf6:	b09d      	sub	sp, #116	@ 0x74
 8009bf8:	4607      	mov	r7, r0
 8009bfa:	460d      	mov	r5, r1
 8009bfc:	4614      	mov	r4, r2
 8009bfe:	d510      	bpl.n	8009c22 <_svfiprintf_r+0x36>
 8009c00:	690b      	ldr	r3, [r1, #16]
 8009c02:	b973      	cbnz	r3, 8009c22 <_svfiprintf_r+0x36>
 8009c04:	2140      	movs	r1, #64	@ 0x40
 8009c06:	f7ff ff09 	bl	8009a1c <_malloc_r>
 8009c0a:	6028      	str	r0, [r5, #0]
 8009c0c:	6128      	str	r0, [r5, #16]
 8009c0e:	b930      	cbnz	r0, 8009c1e <_svfiprintf_r+0x32>
 8009c10:	230c      	movs	r3, #12
 8009c12:	603b      	str	r3, [r7, #0]
 8009c14:	f04f 30ff 	mov.w	r0, #4294967295
 8009c18:	b01d      	add	sp, #116	@ 0x74
 8009c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c1e:	2340      	movs	r3, #64	@ 0x40
 8009c20:	616b      	str	r3, [r5, #20]
 8009c22:	2300      	movs	r3, #0
 8009c24:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c26:	2320      	movs	r3, #32
 8009c28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c30:	2330      	movs	r3, #48	@ 0x30
 8009c32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009dd0 <_svfiprintf_r+0x1e4>
 8009c36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c3a:	f04f 0901 	mov.w	r9, #1
 8009c3e:	4623      	mov	r3, r4
 8009c40:	469a      	mov	sl, r3
 8009c42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c46:	b10a      	cbz	r2, 8009c4c <_svfiprintf_r+0x60>
 8009c48:	2a25      	cmp	r2, #37	@ 0x25
 8009c4a:	d1f9      	bne.n	8009c40 <_svfiprintf_r+0x54>
 8009c4c:	ebba 0b04 	subs.w	fp, sl, r4
 8009c50:	d00b      	beq.n	8009c6a <_svfiprintf_r+0x7e>
 8009c52:	465b      	mov	r3, fp
 8009c54:	4622      	mov	r2, r4
 8009c56:	4629      	mov	r1, r5
 8009c58:	4638      	mov	r0, r7
 8009c5a:	f7ff ff6b 	bl	8009b34 <__ssputs_r>
 8009c5e:	3001      	adds	r0, #1
 8009c60:	f000 80a7 	beq.w	8009db2 <_svfiprintf_r+0x1c6>
 8009c64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c66:	445a      	add	r2, fp
 8009c68:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c6a:	f89a 3000 	ldrb.w	r3, [sl]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	f000 809f 	beq.w	8009db2 <_svfiprintf_r+0x1c6>
 8009c74:	2300      	movs	r3, #0
 8009c76:	f04f 32ff 	mov.w	r2, #4294967295
 8009c7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c7e:	f10a 0a01 	add.w	sl, sl, #1
 8009c82:	9304      	str	r3, [sp, #16]
 8009c84:	9307      	str	r3, [sp, #28]
 8009c86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c8c:	4654      	mov	r4, sl
 8009c8e:	2205      	movs	r2, #5
 8009c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c94:	484e      	ldr	r0, [pc, #312]	@ (8009dd0 <_svfiprintf_r+0x1e4>)
 8009c96:	f7f6 fab3 	bl	8000200 <memchr>
 8009c9a:	9a04      	ldr	r2, [sp, #16]
 8009c9c:	b9d8      	cbnz	r0, 8009cd6 <_svfiprintf_r+0xea>
 8009c9e:	06d0      	lsls	r0, r2, #27
 8009ca0:	bf44      	itt	mi
 8009ca2:	2320      	movmi	r3, #32
 8009ca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ca8:	0711      	lsls	r1, r2, #28
 8009caa:	bf44      	itt	mi
 8009cac:	232b      	movmi	r3, #43	@ 0x2b
 8009cae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cb2:	f89a 3000 	ldrb.w	r3, [sl]
 8009cb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cb8:	d015      	beq.n	8009ce6 <_svfiprintf_r+0xfa>
 8009cba:	9a07      	ldr	r2, [sp, #28]
 8009cbc:	4654      	mov	r4, sl
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	f04f 0c0a 	mov.w	ip, #10
 8009cc4:	4621      	mov	r1, r4
 8009cc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cca:	3b30      	subs	r3, #48	@ 0x30
 8009ccc:	2b09      	cmp	r3, #9
 8009cce:	d94b      	bls.n	8009d68 <_svfiprintf_r+0x17c>
 8009cd0:	b1b0      	cbz	r0, 8009d00 <_svfiprintf_r+0x114>
 8009cd2:	9207      	str	r2, [sp, #28]
 8009cd4:	e014      	b.n	8009d00 <_svfiprintf_r+0x114>
 8009cd6:	eba0 0308 	sub.w	r3, r0, r8
 8009cda:	fa09 f303 	lsl.w	r3, r9, r3
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	9304      	str	r3, [sp, #16]
 8009ce2:	46a2      	mov	sl, r4
 8009ce4:	e7d2      	b.n	8009c8c <_svfiprintf_r+0xa0>
 8009ce6:	9b03      	ldr	r3, [sp, #12]
 8009ce8:	1d19      	adds	r1, r3, #4
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	9103      	str	r1, [sp, #12]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	bfbb      	ittet	lt
 8009cf2:	425b      	neglt	r3, r3
 8009cf4:	f042 0202 	orrlt.w	r2, r2, #2
 8009cf8:	9307      	strge	r3, [sp, #28]
 8009cfa:	9307      	strlt	r3, [sp, #28]
 8009cfc:	bfb8      	it	lt
 8009cfe:	9204      	strlt	r2, [sp, #16]
 8009d00:	7823      	ldrb	r3, [r4, #0]
 8009d02:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d04:	d10a      	bne.n	8009d1c <_svfiprintf_r+0x130>
 8009d06:	7863      	ldrb	r3, [r4, #1]
 8009d08:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d0a:	d132      	bne.n	8009d72 <_svfiprintf_r+0x186>
 8009d0c:	9b03      	ldr	r3, [sp, #12]
 8009d0e:	1d1a      	adds	r2, r3, #4
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	9203      	str	r2, [sp, #12]
 8009d14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d18:	3402      	adds	r4, #2
 8009d1a:	9305      	str	r3, [sp, #20]
 8009d1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009de0 <_svfiprintf_r+0x1f4>
 8009d20:	7821      	ldrb	r1, [r4, #0]
 8009d22:	2203      	movs	r2, #3
 8009d24:	4650      	mov	r0, sl
 8009d26:	f7f6 fa6b 	bl	8000200 <memchr>
 8009d2a:	b138      	cbz	r0, 8009d3c <_svfiprintf_r+0x150>
 8009d2c:	9b04      	ldr	r3, [sp, #16]
 8009d2e:	eba0 000a 	sub.w	r0, r0, sl
 8009d32:	2240      	movs	r2, #64	@ 0x40
 8009d34:	4082      	lsls	r2, r0
 8009d36:	4313      	orrs	r3, r2
 8009d38:	3401      	adds	r4, #1
 8009d3a:	9304      	str	r3, [sp, #16]
 8009d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d40:	4824      	ldr	r0, [pc, #144]	@ (8009dd4 <_svfiprintf_r+0x1e8>)
 8009d42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d46:	2206      	movs	r2, #6
 8009d48:	f7f6 fa5a 	bl	8000200 <memchr>
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	d036      	beq.n	8009dbe <_svfiprintf_r+0x1d2>
 8009d50:	4b21      	ldr	r3, [pc, #132]	@ (8009dd8 <_svfiprintf_r+0x1ec>)
 8009d52:	bb1b      	cbnz	r3, 8009d9c <_svfiprintf_r+0x1b0>
 8009d54:	9b03      	ldr	r3, [sp, #12]
 8009d56:	3307      	adds	r3, #7
 8009d58:	f023 0307 	bic.w	r3, r3, #7
 8009d5c:	3308      	adds	r3, #8
 8009d5e:	9303      	str	r3, [sp, #12]
 8009d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d62:	4433      	add	r3, r6
 8009d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d66:	e76a      	b.n	8009c3e <_svfiprintf_r+0x52>
 8009d68:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d6c:	460c      	mov	r4, r1
 8009d6e:	2001      	movs	r0, #1
 8009d70:	e7a8      	b.n	8009cc4 <_svfiprintf_r+0xd8>
 8009d72:	2300      	movs	r3, #0
 8009d74:	3401      	adds	r4, #1
 8009d76:	9305      	str	r3, [sp, #20]
 8009d78:	4619      	mov	r1, r3
 8009d7a:	f04f 0c0a 	mov.w	ip, #10
 8009d7e:	4620      	mov	r0, r4
 8009d80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d84:	3a30      	subs	r2, #48	@ 0x30
 8009d86:	2a09      	cmp	r2, #9
 8009d88:	d903      	bls.n	8009d92 <_svfiprintf_r+0x1a6>
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d0c6      	beq.n	8009d1c <_svfiprintf_r+0x130>
 8009d8e:	9105      	str	r1, [sp, #20]
 8009d90:	e7c4      	b.n	8009d1c <_svfiprintf_r+0x130>
 8009d92:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d96:	4604      	mov	r4, r0
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e7f0      	b.n	8009d7e <_svfiprintf_r+0x192>
 8009d9c:	ab03      	add	r3, sp, #12
 8009d9e:	9300      	str	r3, [sp, #0]
 8009da0:	462a      	mov	r2, r5
 8009da2:	4b0e      	ldr	r3, [pc, #56]	@ (8009ddc <_svfiprintf_r+0x1f0>)
 8009da4:	a904      	add	r1, sp, #16
 8009da6:	4638      	mov	r0, r7
 8009da8:	f3af 8000 	nop.w
 8009dac:	1c42      	adds	r2, r0, #1
 8009dae:	4606      	mov	r6, r0
 8009db0:	d1d6      	bne.n	8009d60 <_svfiprintf_r+0x174>
 8009db2:	89ab      	ldrh	r3, [r5, #12]
 8009db4:	065b      	lsls	r3, r3, #25
 8009db6:	f53f af2d 	bmi.w	8009c14 <_svfiprintf_r+0x28>
 8009dba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009dbc:	e72c      	b.n	8009c18 <_svfiprintf_r+0x2c>
 8009dbe:	ab03      	add	r3, sp, #12
 8009dc0:	9300      	str	r3, [sp, #0]
 8009dc2:	462a      	mov	r2, r5
 8009dc4:	4b05      	ldr	r3, [pc, #20]	@ (8009ddc <_svfiprintf_r+0x1f0>)
 8009dc6:	a904      	add	r1, sp, #16
 8009dc8:	4638      	mov	r0, r7
 8009dca:	f000 f879 	bl	8009ec0 <_printf_i>
 8009dce:	e7ed      	b.n	8009dac <_svfiprintf_r+0x1c0>
 8009dd0:	0800aa08 	.word	0x0800aa08
 8009dd4:	0800aa12 	.word	0x0800aa12
 8009dd8:	00000000 	.word	0x00000000
 8009ddc:	08009b35 	.word	0x08009b35
 8009de0:	0800aa0e 	.word	0x0800aa0e

08009de4 <_printf_common>:
 8009de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009de8:	4616      	mov	r6, r2
 8009dea:	4698      	mov	r8, r3
 8009dec:	688a      	ldr	r2, [r1, #8]
 8009dee:	690b      	ldr	r3, [r1, #16]
 8009df0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009df4:	4293      	cmp	r3, r2
 8009df6:	bfb8      	it	lt
 8009df8:	4613      	movlt	r3, r2
 8009dfa:	6033      	str	r3, [r6, #0]
 8009dfc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009e00:	4607      	mov	r7, r0
 8009e02:	460c      	mov	r4, r1
 8009e04:	b10a      	cbz	r2, 8009e0a <_printf_common+0x26>
 8009e06:	3301      	adds	r3, #1
 8009e08:	6033      	str	r3, [r6, #0]
 8009e0a:	6823      	ldr	r3, [r4, #0]
 8009e0c:	0699      	lsls	r1, r3, #26
 8009e0e:	bf42      	ittt	mi
 8009e10:	6833      	ldrmi	r3, [r6, #0]
 8009e12:	3302      	addmi	r3, #2
 8009e14:	6033      	strmi	r3, [r6, #0]
 8009e16:	6825      	ldr	r5, [r4, #0]
 8009e18:	f015 0506 	ands.w	r5, r5, #6
 8009e1c:	d106      	bne.n	8009e2c <_printf_common+0x48>
 8009e1e:	f104 0a19 	add.w	sl, r4, #25
 8009e22:	68e3      	ldr	r3, [r4, #12]
 8009e24:	6832      	ldr	r2, [r6, #0]
 8009e26:	1a9b      	subs	r3, r3, r2
 8009e28:	42ab      	cmp	r3, r5
 8009e2a:	dc26      	bgt.n	8009e7a <_printf_common+0x96>
 8009e2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009e30:	6822      	ldr	r2, [r4, #0]
 8009e32:	3b00      	subs	r3, #0
 8009e34:	bf18      	it	ne
 8009e36:	2301      	movne	r3, #1
 8009e38:	0692      	lsls	r2, r2, #26
 8009e3a:	d42b      	bmi.n	8009e94 <_printf_common+0xb0>
 8009e3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009e40:	4641      	mov	r1, r8
 8009e42:	4638      	mov	r0, r7
 8009e44:	47c8      	blx	r9
 8009e46:	3001      	adds	r0, #1
 8009e48:	d01e      	beq.n	8009e88 <_printf_common+0xa4>
 8009e4a:	6823      	ldr	r3, [r4, #0]
 8009e4c:	6922      	ldr	r2, [r4, #16]
 8009e4e:	f003 0306 	and.w	r3, r3, #6
 8009e52:	2b04      	cmp	r3, #4
 8009e54:	bf02      	ittt	eq
 8009e56:	68e5      	ldreq	r5, [r4, #12]
 8009e58:	6833      	ldreq	r3, [r6, #0]
 8009e5a:	1aed      	subeq	r5, r5, r3
 8009e5c:	68a3      	ldr	r3, [r4, #8]
 8009e5e:	bf0c      	ite	eq
 8009e60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e64:	2500      	movne	r5, #0
 8009e66:	4293      	cmp	r3, r2
 8009e68:	bfc4      	itt	gt
 8009e6a:	1a9b      	subgt	r3, r3, r2
 8009e6c:	18ed      	addgt	r5, r5, r3
 8009e6e:	2600      	movs	r6, #0
 8009e70:	341a      	adds	r4, #26
 8009e72:	42b5      	cmp	r5, r6
 8009e74:	d11a      	bne.n	8009eac <_printf_common+0xc8>
 8009e76:	2000      	movs	r0, #0
 8009e78:	e008      	b.n	8009e8c <_printf_common+0xa8>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	4652      	mov	r2, sl
 8009e7e:	4641      	mov	r1, r8
 8009e80:	4638      	mov	r0, r7
 8009e82:	47c8      	blx	r9
 8009e84:	3001      	adds	r0, #1
 8009e86:	d103      	bne.n	8009e90 <_printf_common+0xac>
 8009e88:	f04f 30ff 	mov.w	r0, #4294967295
 8009e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e90:	3501      	adds	r5, #1
 8009e92:	e7c6      	b.n	8009e22 <_printf_common+0x3e>
 8009e94:	18e1      	adds	r1, r4, r3
 8009e96:	1c5a      	adds	r2, r3, #1
 8009e98:	2030      	movs	r0, #48	@ 0x30
 8009e9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009e9e:	4422      	add	r2, r4
 8009ea0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ea4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ea8:	3302      	adds	r3, #2
 8009eaa:	e7c7      	b.n	8009e3c <_printf_common+0x58>
 8009eac:	2301      	movs	r3, #1
 8009eae:	4622      	mov	r2, r4
 8009eb0:	4641      	mov	r1, r8
 8009eb2:	4638      	mov	r0, r7
 8009eb4:	47c8      	blx	r9
 8009eb6:	3001      	adds	r0, #1
 8009eb8:	d0e6      	beq.n	8009e88 <_printf_common+0xa4>
 8009eba:	3601      	adds	r6, #1
 8009ebc:	e7d9      	b.n	8009e72 <_printf_common+0x8e>
	...

08009ec0 <_printf_i>:
 8009ec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ec4:	7e0f      	ldrb	r7, [r1, #24]
 8009ec6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009ec8:	2f78      	cmp	r7, #120	@ 0x78
 8009eca:	4691      	mov	r9, r2
 8009ecc:	4680      	mov	r8, r0
 8009ece:	460c      	mov	r4, r1
 8009ed0:	469a      	mov	sl, r3
 8009ed2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009ed6:	d807      	bhi.n	8009ee8 <_printf_i+0x28>
 8009ed8:	2f62      	cmp	r7, #98	@ 0x62
 8009eda:	d80a      	bhi.n	8009ef2 <_printf_i+0x32>
 8009edc:	2f00      	cmp	r7, #0
 8009ede:	f000 80d1 	beq.w	800a084 <_printf_i+0x1c4>
 8009ee2:	2f58      	cmp	r7, #88	@ 0x58
 8009ee4:	f000 80b8 	beq.w	800a058 <_printf_i+0x198>
 8009ee8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009eec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009ef0:	e03a      	b.n	8009f68 <_printf_i+0xa8>
 8009ef2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009ef6:	2b15      	cmp	r3, #21
 8009ef8:	d8f6      	bhi.n	8009ee8 <_printf_i+0x28>
 8009efa:	a101      	add	r1, pc, #4	@ (adr r1, 8009f00 <_printf_i+0x40>)
 8009efc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f00:	08009f59 	.word	0x08009f59
 8009f04:	08009f6d 	.word	0x08009f6d
 8009f08:	08009ee9 	.word	0x08009ee9
 8009f0c:	08009ee9 	.word	0x08009ee9
 8009f10:	08009ee9 	.word	0x08009ee9
 8009f14:	08009ee9 	.word	0x08009ee9
 8009f18:	08009f6d 	.word	0x08009f6d
 8009f1c:	08009ee9 	.word	0x08009ee9
 8009f20:	08009ee9 	.word	0x08009ee9
 8009f24:	08009ee9 	.word	0x08009ee9
 8009f28:	08009ee9 	.word	0x08009ee9
 8009f2c:	0800a06b 	.word	0x0800a06b
 8009f30:	08009f97 	.word	0x08009f97
 8009f34:	0800a025 	.word	0x0800a025
 8009f38:	08009ee9 	.word	0x08009ee9
 8009f3c:	08009ee9 	.word	0x08009ee9
 8009f40:	0800a08d 	.word	0x0800a08d
 8009f44:	08009ee9 	.word	0x08009ee9
 8009f48:	08009f97 	.word	0x08009f97
 8009f4c:	08009ee9 	.word	0x08009ee9
 8009f50:	08009ee9 	.word	0x08009ee9
 8009f54:	0800a02d 	.word	0x0800a02d
 8009f58:	6833      	ldr	r3, [r6, #0]
 8009f5a:	1d1a      	adds	r2, r3, #4
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	6032      	str	r2, [r6, #0]
 8009f60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e09c      	b.n	800a0a6 <_printf_i+0x1e6>
 8009f6c:	6833      	ldr	r3, [r6, #0]
 8009f6e:	6820      	ldr	r0, [r4, #0]
 8009f70:	1d19      	adds	r1, r3, #4
 8009f72:	6031      	str	r1, [r6, #0]
 8009f74:	0606      	lsls	r6, r0, #24
 8009f76:	d501      	bpl.n	8009f7c <_printf_i+0xbc>
 8009f78:	681d      	ldr	r5, [r3, #0]
 8009f7a:	e003      	b.n	8009f84 <_printf_i+0xc4>
 8009f7c:	0645      	lsls	r5, r0, #25
 8009f7e:	d5fb      	bpl.n	8009f78 <_printf_i+0xb8>
 8009f80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009f84:	2d00      	cmp	r5, #0
 8009f86:	da03      	bge.n	8009f90 <_printf_i+0xd0>
 8009f88:	232d      	movs	r3, #45	@ 0x2d
 8009f8a:	426d      	negs	r5, r5
 8009f8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f90:	4858      	ldr	r0, [pc, #352]	@ (800a0f4 <_printf_i+0x234>)
 8009f92:	230a      	movs	r3, #10
 8009f94:	e011      	b.n	8009fba <_printf_i+0xfa>
 8009f96:	6821      	ldr	r1, [r4, #0]
 8009f98:	6833      	ldr	r3, [r6, #0]
 8009f9a:	0608      	lsls	r0, r1, #24
 8009f9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009fa0:	d402      	bmi.n	8009fa8 <_printf_i+0xe8>
 8009fa2:	0649      	lsls	r1, r1, #25
 8009fa4:	bf48      	it	mi
 8009fa6:	b2ad      	uxthmi	r5, r5
 8009fa8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009faa:	4852      	ldr	r0, [pc, #328]	@ (800a0f4 <_printf_i+0x234>)
 8009fac:	6033      	str	r3, [r6, #0]
 8009fae:	bf14      	ite	ne
 8009fb0:	230a      	movne	r3, #10
 8009fb2:	2308      	moveq	r3, #8
 8009fb4:	2100      	movs	r1, #0
 8009fb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009fba:	6866      	ldr	r6, [r4, #4]
 8009fbc:	60a6      	str	r6, [r4, #8]
 8009fbe:	2e00      	cmp	r6, #0
 8009fc0:	db05      	blt.n	8009fce <_printf_i+0x10e>
 8009fc2:	6821      	ldr	r1, [r4, #0]
 8009fc4:	432e      	orrs	r6, r5
 8009fc6:	f021 0104 	bic.w	r1, r1, #4
 8009fca:	6021      	str	r1, [r4, #0]
 8009fcc:	d04b      	beq.n	800a066 <_printf_i+0x1a6>
 8009fce:	4616      	mov	r6, r2
 8009fd0:	fbb5 f1f3 	udiv	r1, r5, r3
 8009fd4:	fb03 5711 	mls	r7, r3, r1, r5
 8009fd8:	5dc7      	ldrb	r7, [r0, r7]
 8009fda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009fde:	462f      	mov	r7, r5
 8009fe0:	42bb      	cmp	r3, r7
 8009fe2:	460d      	mov	r5, r1
 8009fe4:	d9f4      	bls.n	8009fd0 <_printf_i+0x110>
 8009fe6:	2b08      	cmp	r3, #8
 8009fe8:	d10b      	bne.n	800a002 <_printf_i+0x142>
 8009fea:	6823      	ldr	r3, [r4, #0]
 8009fec:	07df      	lsls	r7, r3, #31
 8009fee:	d508      	bpl.n	800a002 <_printf_i+0x142>
 8009ff0:	6923      	ldr	r3, [r4, #16]
 8009ff2:	6861      	ldr	r1, [r4, #4]
 8009ff4:	4299      	cmp	r1, r3
 8009ff6:	bfde      	ittt	le
 8009ff8:	2330      	movle	r3, #48	@ 0x30
 8009ffa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009ffe:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a002:	1b92      	subs	r2, r2, r6
 800a004:	6122      	str	r2, [r4, #16]
 800a006:	f8cd a000 	str.w	sl, [sp]
 800a00a:	464b      	mov	r3, r9
 800a00c:	aa03      	add	r2, sp, #12
 800a00e:	4621      	mov	r1, r4
 800a010:	4640      	mov	r0, r8
 800a012:	f7ff fee7 	bl	8009de4 <_printf_common>
 800a016:	3001      	adds	r0, #1
 800a018:	d14a      	bne.n	800a0b0 <_printf_i+0x1f0>
 800a01a:	f04f 30ff 	mov.w	r0, #4294967295
 800a01e:	b004      	add	sp, #16
 800a020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a024:	6823      	ldr	r3, [r4, #0]
 800a026:	f043 0320 	orr.w	r3, r3, #32
 800a02a:	6023      	str	r3, [r4, #0]
 800a02c:	4832      	ldr	r0, [pc, #200]	@ (800a0f8 <_printf_i+0x238>)
 800a02e:	2778      	movs	r7, #120	@ 0x78
 800a030:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a034:	6823      	ldr	r3, [r4, #0]
 800a036:	6831      	ldr	r1, [r6, #0]
 800a038:	061f      	lsls	r7, r3, #24
 800a03a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a03e:	d402      	bmi.n	800a046 <_printf_i+0x186>
 800a040:	065f      	lsls	r7, r3, #25
 800a042:	bf48      	it	mi
 800a044:	b2ad      	uxthmi	r5, r5
 800a046:	6031      	str	r1, [r6, #0]
 800a048:	07d9      	lsls	r1, r3, #31
 800a04a:	bf44      	itt	mi
 800a04c:	f043 0320 	orrmi.w	r3, r3, #32
 800a050:	6023      	strmi	r3, [r4, #0]
 800a052:	b11d      	cbz	r5, 800a05c <_printf_i+0x19c>
 800a054:	2310      	movs	r3, #16
 800a056:	e7ad      	b.n	8009fb4 <_printf_i+0xf4>
 800a058:	4826      	ldr	r0, [pc, #152]	@ (800a0f4 <_printf_i+0x234>)
 800a05a:	e7e9      	b.n	800a030 <_printf_i+0x170>
 800a05c:	6823      	ldr	r3, [r4, #0]
 800a05e:	f023 0320 	bic.w	r3, r3, #32
 800a062:	6023      	str	r3, [r4, #0]
 800a064:	e7f6      	b.n	800a054 <_printf_i+0x194>
 800a066:	4616      	mov	r6, r2
 800a068:	e7bd      	b.n	8009fe6 <_printf_i+0x126>
 800a06a:	6833      	ldr	r3, [r6, #0]
 800a06c:	6825      	ldr	r5, [r4, #0]
 800a06e:	6961      	ldr	r1, [r4, #20]
 800a070:	1d18      	adds	r0, r3, #4
 800a072:	6030      	str	r0, [r6, #0]
 800a074:	062e      	lsls	r6, r5, #24
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	d501      	bpl.n	800a07e <_printf_i+0x1be>
 800a07a:	6019      	str	r1, [r3, #0]
 800a07c:	e002      	b.n	800a084 <_printf_i+0x1c4>
 800a07e:	0668      	lsls	r0, r5, #25
 800a080:	d5fb      	bpl.n	800a07a <_printf_i+0x1ba>
 800a082:	8019      	strh	r1, [r3, #0]
 800a084:	2300      	movs	r3, #0
 800a086:	6123      	str	r3, [r4, #16]
 800a088:	4616      	mov	r6, r2
 800a08a:	e7bc      	b.n	800a006 <_printf_i+0x146>
 800a08c:	6833      	ldr	r3, [r6, #0]
 800a08e:	1d1a      	adds	r2, r3, #4
 800a090:	6032      	str	r2, [r6, #0]
 800a092:	681e      	ldr	r6, [r3, #0]
 800a094:	6862      	ldr	r2, [r4, #4]
 800a096:	2100      	movs	r1, #0
 800a098:	4630      	mov	r0, r6
 800a09a:	f7f6 f8b1 	bl	8000200 <memchr>
 800a09e:	b108      	cbz	r0, 800a0a4 <_printf_i+0x1e4>
 800a0a0:	1b80      	subs	r0, r0, r6
 800a0a2:	6060      	str	r0, [r4, #4]
 800a0a4:	6863      	ldr	r3, [r4, #4]
 800a0a6:	6123      	str	r3, [r4, #16]
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0ae:	e7aa      	b.n	800a006 <_printf_i+0x146>
 800a0b0:	6923      	ldr	r3, [r4, #16]
 800a0b2:	4632      	mov	r2, r6
 800a0b4:	4649      	mov	r1, r9
 800a0b6:	4640      	mov	r0, r8
 800a0b8:	47d0      	blx	sl
 800a0ba:	3001      	adds	r0, #1
 800a0bc:	d0ad      	beq.n	800a01a <_printf_i+0x15a>
 800a0be:	6823      	ldr	r3, [r4, #0]
 800a0c0:	079b      	lsls	r3, r3, #30
 800a0c2:	d413      	bmi.n	800a0ec <_printf_i+0x22c>
 800a0c4:	68e0      	ldr	r0, [r4, #12]
 800a0c6:	9b03      	ldr	r3, [sp, #12]
 800a0c8:	4298      	cmp	r0, r3
 800a0ca:	bfb8      	it	lt
 800a0cc:	4618      	movlt	r0, r3
 800a0ce:	e7a6      	b.n	800a01e <_printf_i+0x15e>
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	4632      	mov	r2, r6
 800a0d4:	4649      	mov	r1, r9
 800a0d6:	4640      	mov	r0, r8
 800a0d8:	47d0      	blx	sl
 800a0da:	3001      	adds	r0, #1
 800a0dc:	d09d      	beq.n	800a01a <_printf_i+0x15a>
 800a0de:	3501      	adds	r5, #1
 800a0e0:	68e3      	ldr	r3, [r4, #12]
 800a0e2:	9903      	ldr	r1, [sp, #12]
 800a0e4:	1a5b      	subs	r3, r3, r1
 800a0e6:	42ab      	cmp	r3, r5
 800a0e8:	dcf2      	bgt.n	800a0d0 <_printf_i+0x210>
 800a0ea:	e7eb      	b.n	800a0c4 <_printf_i+0x204>
 800a0ec:	2500      	movs	r5, #0
 800a0ee:	f104 0619 	add.w	r6, r4, #25
 800a0f2:	e7f5      	b.n	800a0e0 <_printf_i+0x220>
 800a0f4:	0800aa19 	.word	0x0800aa19
 800a0f8:	0800aa2a 	.word	0x0800aa2a

0800a0fc <memmove>:
 800a0fc:	4288      	cmp	r0, r1
 800a0fe:	b510      	push	{r4, lr}
 800a100:	eb01 0402 	add.w	r4, r1, r2
 800a104:	d902      	bls.n	800a10c <memmove+0x10>
 800a106:	4284      	cmp	r4, r0
 800a108:	4623      	mov	r3, r4
 800a10a:	d807      	bhi.n	800a11c <memmove+0x20>
 800a10c:	1e43      	subs	r3, r0, #1
 800a10e:	42a1      	cmp	r1, r4
 800a110:	d008      	beq.n	800a124 <memmove+0x28>
 800a112:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a116:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a11a:	e7f8      	b.n	800a10e <memmove+0x12>
 800a11c:	4402      	add	r2, r0
 800a11e:	4601      	mov	r1, r0
 800a120:	428a      	cmp	r2, r1
 800a122:	d100      	bne.n	800a126 <memmove+0x2a>
 800a124:	bd10      	pop	{r4, pc}
 800a126:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a12a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a12e:	e7f7      	b.n	800a120 <memmove+0x24>

0800a130 <_sbrk_r>:
 800a130:	b538      	push	{r3, r4, r5, lr}
 800a132:	4d06      	ldr	r5, [pc, #24]	@ (800a14c <_sbrk_r+0x1c>)
 800a134:	2300      	movs	r3, #0
 800a136:	4604      	mov	r4, r0
 800a138:	4608      	mov	r0, r1
 800a13a:	602b      	str	r3, [r5, #0]
 800a13c:	f7f7 fea4 	bl	8001e88 <_sbrk>
 800a140:	1c43      	adds	r3, r0, #1
 800a142:	d102      	bne.n	800a14a <_sbrk_r+0x1a>
 800a144:	682b      	ldr	r3, [r5, #0]
 800a146:	b103      	cbz	r3, 800a14a <_sbrk_r+0x1a>
 800a148:	6023      	str	r3, [r4, #0]
 800a14a:	bd38      	pop	{r3, r4, r5, pc}
 800a14c:	20000e2c 	.word	0x20000e2c

0800a150 <memcpy>:
 800a150:	440a      	add	r2, r1
 800a152:	4291      	cmp	r1, r2
 800a154:	f100 33ff 	add.w	r3, r0, #4294967295
 800a158:	d100      	bne.n	800a15c <memcpy+0xc>
 800a15a:	4770      	bx	lr
 800a15c:	b510      	push	{r4, lr}
 800a15e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a162:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a166:	4291      	cmp	r1, r2
 800a168:	d1f9      	bne.n	800a15e <memcpy+0xe>
 800a16a:	bd10      	pop	{r4, pc}

0800a16c <_realloc_r>:
 800a16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a170:	4607      	mov	r7, r0
 800a172:	4614      	mov	r4, r2
 800a174:	460d      	mov	r5, r1
 800a176:	b921      	cbnz	r1, 800a182 <_realloc_r+0x16>
 800a178:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a17c:	4611      	mov	r1, r2
 800a17e:	f7ff bc4d 	b.w	8009a1c <_malloc_r>
 800a182:	b92a      	cbnz	r2, 800a190 <_realloc_r+0x24>
 800a184:	f7ff fbde 	bl	8009944 <_free_r>
 800a188:	4625      	mov	r5, r4
 800a18a:	4628      	mov	r0, r5
 800a18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a190:	f000 f81a 	bl	800a1c8 <_malloc_usable_size_r>
 800a194:	4284      	cmp	r4, r0
 800a196:	4606      	mov	r6, r0
 800a198:	d802      	bhi.n	800a1a0 <_realloc_r+0x34>
 800a19a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a19e:	d8f4      	bhi.n	800a18a <_realloc_r+0x1e>
 800a1a0:	4621      	mov	r1, r4
 800a1a2:	4638      	mov	r0, r7
 800a1a4:	f7ff fc3a 	bl	8009a1c <_malloc_r>
 800a1a8:	4680      	mov	r8, r0
 800a1aa:	b908      	cbnz	r0, 800a1b0 <_realloc_r+0x44>
 800a1ac:	4645      	mov	r5, r8
 800a1ae:	e7ec      	b.n	800a18a <_realloc_r+0x1e>
 800a1b0:	42b4      	cmp	r4, r6
 800a1b2:	4622      	mov	r2, r4
 800a1b4:	4629      	mov	r1, r5
 800a1b6:	bf28      	it	cs
 800a1b8:	4632      	movcs	r2, r6
 800a1ba:	f7ff ffc9 	bl	800a150 <memcpy>
 800a1be:	4629      	mov	r1, r5
 800a1c0:	4638      	mov	r0, r7
 800a1c2:	f7ff fbbf 	bl	8009944 <_free_r>
 800a1c6:	e7f1      	b.n	800a1ac <_realloc_r+0x40>

0800a1c8 <_malloc_usable_size_r>:
 800a1c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1cc:	1f18      	subs	r0, r3, #4
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	bfbc      	itt	lt
 800a1d2:	580b      	ldrlt	r3, [r1, r0]
 800a1d4:	18c0      	addlt	r0, r0, r3
 800a1d6:	4770      	bx	lr

0800a1d8 <atan2>:
 800a1d8:	f000 baa6 	b.w	800a728 <__ieee754_atan2>

0800a1dc <sqrt>:
 800a1dc:	b538      	push	{r3, r4, r5, lr}
 800a1de:	ed2d 8b02 	vpush	{d8}
 800a1e2:	ec55 4b10 	vmov	r4, r5, d0
 800a1e6:	f000 f9c7 	bl	800a578 <__ieee754_sqrt>
 800a1ea:	4622      	mov	r2, r4
 800a1ec:	462b      	mov	r3, r5
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	4629      	mov	r1, r5
 800a1f2:	eeb0 8a40 	vmov.f32	s16, s0
 800a1f6:	eef0 8a60 	vmov.f32	s17, s1
 800a1fa:	f7f6 fca7 	bl	8000b4c <__aeabi_dcmpun>
 800a1fe:	b990      	cbnz	r0, 800a226 <sqrt+0x4a>
 800a200:	2200      	movs	r2, #0
 800a202:	2300      	movs	r3, #0
 800a204:	4620      	mov	r0, r4
 800a206:	4629      	mov	r1, r5
 800a208:	f7f6 fc78 	bl	8000afc <__aeabi_dcmplt>
 800a20c:	b158      	cbz	r0, 800a226 <sqrt+0x4a>
 800a20e:	f7ff fb6d 	bl	80098ec <__errno>
 800a212:	2321      	movs	r3, #33	@ 0x21
 800a214:	6003      	str	r3, [r0, #0]
 800a216:	2200      	movs	r2, #0
 800a218:	2300      	movs	r3, #0
 800a21a:	4610      	mov	r0, r2
 800a21c:	4619      	mov	r1, r3
 800a21e:	f7f6 fb25 	bl	800086c <__aeabi_ddiv>
 800a222:	ec41 0b18 	vmov	d8, r0, r1
 800a226:	eeb0 0a48 	vmov.f32	s0, s16
 800a22a:	eef0 0a68 	vmov.f32	s1, s17
 800a22e:	ecbd 8b02 	vpop	{d8}
 800a232:	bd38      	pop	{r3, r4, r5, pc}
 800a234:	0000      	movs	r0, r0
	...

0800a238 <atan>:
 800a238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a23c:	ec55 4b10 	vmov	r4, r5, d0
 800a240:	4bbf      	ldr	r3, [pc, #764]	@ (800a540 <atan+0x308>)
 800a242:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800a246:	429e      	cmp	r6, r3
 800a248:	46ab      	mov	fp, r5
 800a24a:	d918      	bls.n	800a27e <atan+0x46>
 800a24c:	4bbd      	ldr	r3, [pc, #756]	@ (800a544 <atan+0x30c>)
 800a24e:	429e      	cmp	r6, r3
 800a250:	d801      	bhi.n	800a256 <atan+0x1e>
 800a252:	d109      	bne.n	800a268 <atan+0x30>
 800a254:	b144      	cbz	r4, 800a268 <atan+0x30>
 800a256:	4622      	mov	r2, r4
 800a258:	462b      	mov	r3, r5
 800a25a:	4620      	mov	r0, r4
 800a25c:	4629      	mov	r1, r5
 800a25e:	f7f6 f825 	bl	80002ac <__adddf3>
 800a262:	4604      	mov	r4, r0
 800a264:	460d      	mov	r5, r1
 800a266:	e006      	b.n	800a276 <atan+0x3e>
 800a268:	f1bb 0f00 	cmp.w	fp, #0
 800a26c:	f340 812b 	ble.w	800a4c6 <atan+0x28e>
 800a270:	a597      	add	r5, pc, #604	@ (adr r5, 800a4d0 <atan+0x298>)
 800a272:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a276:	ec45 4b10 	vmov	d0, r4, r5
 800a27a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a27e:	4bb2      	ldr	r3, [pc, #712]	@ (800a548 <atan+0x310>)
 800a280:	429e      	cmp	r6, r3
 800a282:	d813      	bhi.n	800a2ac <atan+0x74>
 800a284:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a288:	429e      	cmp	r6, r3
 800a28a:	d80c      	bhi.n	800a2a6 <atan+0x6e>
 800a28c:	a392      	add	r3, pc, #584	@ (adr r3, 800a4d8 <atan+0x2a0>)
 800a28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a292:	4620      	mov	r0, r4
 800a294:	4629      	mov	r1, r5
 800a296:	f7f6 f809 	bl	80002ac <__adddf3>
 800a29a:	4bac      	ldr	r3, [pc, #688]	@ (800a54c <atan+0x314>)
 800a29c:	2200      	movs	r2, #0
 800a29e:	f7f6 fc4b 	bl	8000b38 <__aeabi_dcmpgt>
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	d1e7      	bne.n	800a276 <atan+0x3e>
 800a2a6:	f04f 3aff 	mov.w	sl, #4294967295
 800a2aa:	e029      	b.n	800a300 <atan+0xc8>
 800a2ac:	f000 f95c 	bl	800a568 <fabs>
 800a2b0:	4ba7      	ldr	r3, [pc, #668]	@ (800a550 <atan+0x318>)
 800a2b2:	429e      	cmp	r6, r3
 800a2b4:	ec55 4b10 	vmov	r4, r5, d0
 800a2b8:	f200 80bc 	bhi.w	800a434 <atan+0x1fc>
 800a2bc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a2c0:	429e      	cmp	r6, r3
 800a2c2:	f200 809e 	bhi.w	800a402 <atan+0x1ca>
 800a2c6:	4622      	mov	r2, r4
 800a2c8:	462b      	mov	r3, r5
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	4629      	mov	r1, r5
 800a2ce:	f7f5 ffed 	bl	80002ac <__adddf3>
 800a2d2:	4b9e      	ldr	r3, [pc, #632]	@ (800a54c <atan+0x314>)
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f7f5 ffe7 	bl	80002a8 <__aeabi_dsub>
 800a2da:	2200      	movs	r2, #0
 800a2dc:	4606      	mov	r6, r0
 800a2de:	460f      	mov	r7, r1
 800a2e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	4629      	mov	r1, r5
 800a2e8:	f7f5 ffe0 	bl	80002ac <__adddf3>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	4639      	mov	r1, r7
 800a2f4:	f7f6 faba 	bl	800086c <__aeabi_ddiv>
 800a2f8:	f04f 0a00 	mov.w	sl, #0
 800a2fc:	4604      	mov	r4, r0
 800a2fe:	460d      	mov	r5, r1
 800a300:	4622      	mov	r2, r4
 800a302:	462b      	mov	r3, r5
 800a304:	4620      	mov	r0, r4
 800a306:	4629      	mov	r1, r5
 800a308:	f7f6 f986 	bl	8000618 <__aeabi_dmul>
 800a30c:	4602      	mov	r2, r0
 800a30e:	460b      	mov	r3, r1
 800a310:	4680      	mov	r8, r0
 800a312:	4689      	mov	r9, r1
 800a314:	f7f6 f980 	bl	8000618 <__aeabi_dmul>
 800a318:	a371      	add	r3, pc, #452	@ (adr r3, 800a4e0 <atan+0x2a8>)
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	4606      	mov	r6, r0
 800a320:	460f      	mov	r7, r1
 800a322:	f7f6 f979 	bl	8000618 <__aeabi_dmul>
 800a326:	a370      	add	r3, pc, #448	@ (adr r3, 800a4e8 <atan+0x2b0>)
 800a328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32c:	f7f5 ffbe 	bl	80002ac <__adddf3>
 800a330:	4632      	mov	r2, r6
 800a332:	463b      	mov	r3, r7
 800a334:	f7f6 f970 	bl	8000618 <__aeabi_dmul>
 800a338:	a36d      	add	r3, pc, #436	@ (adr r3, 800a4f0 <atan+0x2b8>)
 800a33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33e:	f7f5 ffb5 	bl	80002ac <__adddf3>
 800a342:	4632      	mov	r2, r6
 800a344:	463b      	mov	r3, r7
 800a346:	f7f6 f967 	bl	8000618 <__aeabi_dmul>
 800a34a:	a36b      	add	r3, pc, #428	@ (adr r3, 800a4f8 <atan+0x2c0>)
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	f7f5 ffac 	bl	80002ac <__adddf3>
 800a354:	4632      	mov	r2, r6
 800a356:	463b      	mov	r3, r7
 800a358:	f7f6 f95e 	bl	8000618 <__aeabi_dmul>
 800a35c:	a368      	add	r3, pc, #416	@ (adr r3, 800a500 <atan+0x2c8>)
 800a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a362:	f7f5 ffa3 	bl	80002ac <__adddf3>
 800a366:	4632      	mov	r2, r6
 800a368:	463b      	mov	r3, r7
 800a36a:	f7f6 f955 	bl	8000618 <__aeabi_dmul>
 800a36e:	a366      	add	r3, pc, #408	@ (adr r3, 800a508 <atan+0x2d0>)
 800a370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a374:	f7f5 ff9a 	bl	80002ac <__adddf3>
 800a378:	4642      	mov	r2, r8
 800a37a:	464b      	mov	r3, r9
 800a37c:	f7f6 f94c 	bl	8000618 <__aeabi_dmul>
 800a380:	a363      	add	r3, pc, #396	@ (adr r3, 800a510 <atan+0x2d8>)
 800a382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a386:	4680      	mov	r8, r0
 800a388:	4689      	mov	r9, r1
 800a38a:	4630      	mov	r0, r6
 800a38c:	4639      	mov	r1, r7
 800a38e:	f7f6 f943 	bl	8000618 <__aeabi_dmul>
 800a392:	a361      	add	r3, pc, #388	@ (adr r3, 800a518 <atan+0x2e0>)
 800a394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a398:	f7f5 ff86 	bl	80002a8 <__aeabi_dsub>
 800a39c:	4632      	mov	r2, r6
 800a39e:	463b      	mov	r3, r7
 800a3a0:	f7f6 f93a 	bl	8000618 <__aeabi_dmul>
 800a3a4:	a35e      	add	r3, pc, #376	@ (adr r3, 800a520 <atan+0x2e8>)
 800a3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3aa:	f7f5 ff7d 	bl	80002a8 <__aeabi_dsub>
 800a3ae:	4632      	mov	r2, r6
 800a3b0:	463b      	mov	r3, r7
 800a3b2:	f7f6 f931 	bl	8000618 <__aeabi_dmul>
 800a3b6:	a35c      	add	r3, pc, #368	@ (adr r3, 800a528 <atan+0x2f0>)
 800a3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3bc:	f7f5 ff74 	bl	80002a8 <__aeabi_dsub>
 800a3c0:	4632      	mov	r2, r6
 800a3c2:	463b      	mov	r3, r7
 800a3c4:	f7f6 f928 	bl	8000618 <__aeabi_dmul>
 800a3c8:	a359      	add	r3, pc, #356	@ (adr r3, 800a530 <atan+0x2f8>)
 800a3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ce:	f7f5 ff6b 	bl	80002a8 <__aeabi_dsub>
 800a3d2:	4632      	mov	r2, r6
 800a3d4:	463b      	mov	r3, r7
 800a3d6:	f7f6 f91f 	bl	8000618 <__aeabi_dmul>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	460b      	mov	r3, r1
 800a3de:	4640      	mov	r0, r8
 800a3e0:	4649      	mov	r1, r9
 800a3e2:	f7f5 ff63 	bl	80002ac <__adddf3>
 800a3e6:	4622      	mov	r2, r4
 800a3e8:	462b      	mov	r3, r5
 800a3ea:	f7f6 f915 	bl	8000618 <__aeabi_dmul>
 800a3ee:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	d148      	bne.n	800a48a <atan+0x252>
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	4629      	mov	r1, r5
 800a3fc:	f7f5 ff54 	bl	80002a8 <__aeabi_dsub>
 800a400:	e72f      	b.n	800a262 <atan+0x2a>
 800a402:	4b52      	ldr	r3, [pc, #328]	@ (800a54c <atan+0x314>)
 800a404:	2200      	movs	r2, #0
 800a406:	4620      	mov	r0, r4
 800a408:	4629      	mov	r1, r5
 800a40a:	f7f5 ff4d 	bl	80002a8 <__aeabi_dsub>
 800a40e:	4b4f      	ldr	r3, [pc, #316]	@ (800a54c <atan+0x314>)
 800a410:	4606      	mov	r6, r0
 800a412:	460f      	mov	r7, r1
 800a414:	2200      	movs	r2, #0
 800a416:	4620      	mov	r0, r4
 800a418:	4629      	mov	r1, r5
 800a41a:	f7f5 ff47 	bl	80002ac <__adddf3>
 800a41e:	4602      	mov	r2, r0
 800a420:	460b      	mov	r3, r1
 800a422:	4630      	mov	r0, r6
 800a424:	4639      	mov	r1, r7
 800a426:	f7f6 fa21 	bl	800086c <__aeabi_ddiv>
 800a42a:	f04f 0a01 	mov.w	sl, #1
 800a42e:	4604      	mov	r4, r0
 800a430:	460d      	mov	r5, r1
 800a432:	e765      	b.n	800a300 <atan+0xc8>
 800a434:	4b47      	ldr	r3, [pc, #284]	@ (800a554 <atan+0x31c>)
 800a436:	429e      	cmp	r6, r3
 800a438:	d21c      	bcs.n	800a474 <atan+0x23c>
 800a43a:	4b47      	ldr	r3, [pc, #284]	@ (800a558 <atan+0x320>)
 800a43c:	2200      	movs	r2, #0
 800a43e:	4620      	mov	r0, r4
 800a440:	4629      	mov	r1, r5
 800a442:	f7f5 ff31 	bl	80002a8 <__aeabi_dsub>
 800a446:	4b44      	ldr	r3, [pc, #272]	@ (800a558 <atan+0x320>)
 800a448:	4606      	mov	r6, r0
 800a44a:	460f      	mov	r7, r1
 800a44c:	2200      	movs	r2, #0
 800a44e:	4620      	mov	r0, r4
 800a450:	4629      	mov	r1, r5
 800a452:	f7f6 f8e1 	bl	8000618 <__aeabi_dmul>
 800a456:	4b3d      	ldr	r3, [pc, #244]	@ (800a54c <atan+0x314>)
 800a458:	2200      	movs	r2, #0
 800a45a:	f7f5 ff27 	bl	80002ac <__adddf3>
 800a45e:	4602      	mov	r2, r0
 800a460:	460b      	mov	r3, r1
 800a462:	4630      	mov	r0, r6
 800a464:	4639      	mov	r1, r7
 800a466:	f7f6 fa01 	bl	800086c <__aeabi_ddiv>
 800a46a:	f04f 0a02 	mov.w	sl, #2
 800a46e:	4604      	mov	r4, r0
 800a470:	460d      	mov	r5, r1
 800a472:	e745      	b.n	800a300 <atan+0xc8>
 800a474:	4622      	mov	r2, r4
 800a476:	462b      	mov	r3, r5
 800a478:	4938      	ldr	r1, [pc, #224]	@ (800a55c <atan+0x324>)
 800a47a:	2000      	movs	r0, #0
 800a47c:	f7f6 f9f6 	bl	800086c <__aeabi_ddiv>
 800a480:	f04f 0a03 	mov.w	sl, #3
 800a484:	4604      	mov	r4, r0
 800a486:	460d      	mov	r5, r1
 800a488:	e73a      	b.n	800a300 <atan+0xc8>
 800a48a:	4b35      	ldr	r3, [pc, #212]	@ (800a560 <atan+0x328>)
 800a48c:	4e35      	ldr	r6, [pc, #212]	@ (800a564 <atan+0x32c>)
 800a48e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a496:	f7f5 ff07 	bl	80002a8 <__aeabi_dsub>
 800a49a:	4622      	mov	r2, r4
 800a49c:	462b      	mov	r3, r5
 800a49e:	f7f5 ff03 	bl	80002a8 <__aeabi_dsub>
 800a4a2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a4ae:	f7f5 fefb 	bl	80002a8 <__aeabi_dsub>
 800a4b2:	f1bb 0f00 	cmp.w	fp, #0
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	460d      	mov	r5, r1
 800a4ba:	f6bf aedc 	bge.w	800a276 <atan+0x3e>
 800a4be:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a4c2:	461d      	mov	r5, r3
 800a4c4:	e6d7      	b.n	800a276 <atan+0x3e>
 800a4c6:	a51c      	add	r5, pc, #112	@ (adr r5, 800a538 <atan+0x300>)
 800a4c8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a4cc:	e6d3      	b.n	800a276 <atan+0x3e>
 800a4ce:	bf00      	nop
 800a4d0:	54442d18 	.word	0x54442d18
 800a4d4:	3ff921fb 	.word	0x3ff921fb
 800a4d8:	8800759c 	.word	0x8800759c
 800a4dc:	7e37e43c 	.word	0x7e37e43c
 800a4e0:	e322da11 	.word	0xe322da11
 800a4e4:	3f90ad3a 	.word	0x3f90ad3a
 800a4e8:	24760deb 	.word	0x24760deb
 800a4ec:	3fa97b4b 	.word	0x3fa97b4b
 800a4f0:	a0d03d51 	.word	0xa0d03d51
 800a4f4:	3fb10d66 	.word	0x3fb10d66
 800a4f8:	c54c206e 	.word	0xc54c206e
 800a4fc:	3fb745cd 	.word	0x3fb745cd
 800a500:	920083ff 	.word	0x920083ff
 800a504:	3fc24924 	.word	0x3fc24924
 800a508:	5555550d 	.word	0x5555550d
 800a50c:	3fd55555 	.word	0x3fd55555
 800a510:	2c6a6c2f 	.word	0x2c6a6c2f
 800a514:	bfa2b444 	.word	0xbfa2b444
 800a518:	52defd9a 	.word	0x52defd9a
 800a51c:	3fadde2d 	.word	0x3fadde2d
 800a520:	af749a6d 	.word	0xaf749a6d
 800a524:	3fb3b0f2 	.word	0x3fb3b0f2
 800a528:	fe231671 	.word	0xfe231671
 800a52c:	3fbc71c6 	.word	0x3fbc71c6
 800a530:	9998ebc4 	.word	0x9998ebc4
 800a534:	3fc99999 	.word	0x3fc99999
 800a538:	54442d18 	.word	0x54442d18
 800a53c:	bff921fb 	.word	0xbff921fb
 800a540:	440fffff 	.word	0x440fffff
 800a544:	7ff00000 	.word	0x7ff00000
 800a548:	3fdbffff 	.word	0x3fdbffff
 800a54c:	3ff00000 	.word	0x3ff00000
 800a550:	3ff2ffff 	.word	0x3ff2ffff
 800a554:	40038000 	.word	0x40038000
 800a558:	3ff80000 	.word	0x3ff80000
 800a55c:	bff00000 	.word	0xbff00000
 800a560:	0800aa40 	.word	0x0800aa40
 800a564:	0800aa60 	.word	0x0800aa60

0800a568 <fabs>:
 800a568:	ec51 0b10 	vmov	r0, r1, d0
 800a56c:	4602      	mov	r2, r0
 800a56e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a572:	ec43 2b10 	vmov	d0, r2, r3
 800a576:	4770      	bx	lr

0800a578 <__ieee754_sqrt>:
 800a578:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a57c:	4a66      	ldr	r2, [pc, #408]	@ (800a718 <__ieee754_sqrt+0x1a0>)
 800a57e:	ec55 4b10 	vmov	r4, r5, d0
 800a582:	43aa      	bics	r2, r5
 800a584:	462b      	mov	r3, r5
 800a586:	4621      	mov	r1, r4
 800a588:	d110      	bne.n	800a5ac <__ieee754_sqrt+0x34>
 800a58a:	4622      	mov	r2, r4
 800a58c:	4620      	mov	r0, r4
 800a58e:	4629      	mov	r1, r5
 800a590:	f7f6 f842 	bl	8000618 <__aeabi_dmul>
 800a594:	4602      	mov	r2, r0
 800a596:	460b      	mov	r3, r1
 800a598:	4620      	mov	r0, r4
 800a59a:	4629      	mov	r1, r5
 800a59c:	f7f5 fe86 	bl	80002ac <__adddf3>
 800a5a0:	4604      	mov	r4, r0
 800a5a2:	460d      	mov	r5, r1
 800a5a4:	ec45 4b10 	vmov	d0, r4, r5
 800a5a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ac:	2d00      	cmp	r5, #0
 800a5ae:	dc0e      	bgt.n	800a5ce <__ieee754_sqrt+0x56>
 800a5b0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a5b4:	4322      	orrs	r2, r4
 800a5b6:	d0f5      	beq.n	800a5a4 <__ieee754_sqrt+0x2c>
 800a5b8:	b19d      	cbz	r5, 800a5e2 <__ieee754_sqrt+0x6a>
 800a5ba:	4622      	mov	r2, r4
 800a5bc:	4620      	mov	r0, r4
 800a5be:	4629      	mov	r1, r5
 800a5c0:	f7f5 fe72 	bl	80002a8 <__aeabi_dsub>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	f7f6 f950 	bl	800086c <__aeabi_ddiv>
 800a5cc:	e7e8      	b.n	800a5a0 <__ieee754_sqrt+0x28>
 800a5ce:	152a      	asrs	r2, r5, #20
 800a5d0:	d115      	bne.n	800a5fe <__ieee754_sqrt+0x86>
 800a5d2:	2000      	movs	r0, #0
 800a5d4:	e009      	b.n	800a5ea <__ieee754_sqrt+0x72>
 800a5d6:	0acb      	lsrs	r3, r1, #11
 800a5d8:	3a15      	subs	r2, #21
 800a5da:	0549      	lsls	r1, r1, #21
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d0fa      	beq.n	800a5d6 <__ieee754_sqrt+0x5e>
 800a5e0:	e7f7      	b.n	800a5d2 <__ieee754_sqrt+0x5a>
 800a5e2:	462a      	mov	r2, r5
 800a5e4:	e7fa      	b.n	800a5dc <__ieee754_sqrt+0x64>
 800a5e6:	005b      	lsls	r3, r3, #1
 800a5e8:	3001      	adds	r0, #1
 800a5ea:	02dc      	lsls	r4, r3, #11
 800a5ec:	d5fb      	bpl.n	800a5e6 <__ieee754_sqrt+0x6e>
 800a5ee:	1e44      	subs	r4, r0, #1
 800a5f0:	1b12      	subs	r2, r2, r4
 800a5f2:	f1c0 0420 	rsb	r4, r0, #32
 800a5f6:	fa21 f404 	lsr.w	r4, r1, r4
 800a5fa:	4323      	orrs	r3, r4
 800a5fc:	4081      	lsls	r1, r0
 800a5fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a602:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800a606:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a60a:	07d2      	lsls	r2, r2, #31
 800a60c:	bf5c      	itt	pl
 800a60e:	005b      	lslpl	r3, r3, #1
 800a610:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a614:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a618:	bf58      	it	pl
 800a61a:	0049      	lslpl	r1, r1, #1
 800a61c:	2600      	movs	r6, #0
 800a61e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a622:	107f      	asrs	r7, r7, #1
 800a624:	0049      	lsls	r1, r1, #1
 800a626:	2016      	movs	r0, #22
 800a628:	4632      	mov	r2, r6
 800a62a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a62e:	1915      	adds	r5, r2, r4
 800a630:	429d      	cmp	r5, r3
 800a632:	bfde      	ittt	le
 800a634:	192a      	addle	r2, r5, r4
 800a636:	1b5b      	suble	r3, r3, r5
 800a638:	1936      	addle	r6, r6, r4
 800a63a:	0fcd      	lsrs	r5, r1, #31
 800a63c:	3801      	subs	r0, #1
 800a63e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800a642:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a646:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a64a:	d1f0      	bne.n	800a62e <__ieee754_sqrt+0xb6>
 800a64c:	4605      	mov	r5, r0
 800a64e:	2420      	movs	r4, #32
 800a650:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a654:	4293      	cmp	r3, r2
 800a656:	eb0c 0e00 	add.w	lr, ip, r0
 800a65a:	dc02      	bgt.n	800a662 <__ieee754_sqrt+0xea>
 800a65c:	d113      	bne.n	800a686 <__ieee754_sqrt+0x10e>
 800a65e:	458e      	cmp	lr, r1
 800a660:	d811      	bhi.n	800a686 <__ieee754_sqrt+0x10e>
 800a662:	f1be 0f00 	cmp.w	lr, #0
 800a666:	eb0e 000c 	add.w	r0, lr, ip
 800a66a:	da3f      	bge.n	800a6ec <__ieee754_sqrt+0x174>
 800a66c:	2800      	cmp	r0, #0
 800a66e:	db3d      	blt.n	800a6ec <__ieee754_sqrt+0x174>
 800a670:	f102 0801 	add.w	r8, r2, #1
 800a674:	1a9b      	subs	r3, r3, r2
 800a676:	458e      	cmp	lr, r1
 800a678:	bf88      	it	hi
 800a67a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a67e:	eba1 010e 	sub.w	r1, r1, lr
 800a682:	4465      	add	r5, ip
 800a684:	4642      	mov	r2, r8
 800a686:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a68a:	3c01      	subs	r4, #1
 800a68c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a690:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a694:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a698:	d1dc      	bne.n	800a654 <__ieee754_sqrt+0xdc>
 800a69a:	4319      	orrs	r1, r3
 800a69c:	d01b      	beq.n	800a6d6 <__ieee754_sqrt+0x15e>
 800a69e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800a71c <__ieee754_sqrt+0x1a4>
 800a6a2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800a720 <__ieee754_sqrt+0x1a8>
 800a6a6:	e9da 0100 	ldrd	r0, r1, [sl]
 800a6aa:	e9db 2300 	ldrd	r2, r3, [fp]
 800a6ae:	f7f5 fdfb 	bl	80002a8 <__aeabi_dsub>
 800a6b2:	e9da 8900 	ldrd	r8, r9, [sl]
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	4640      	mov	r0, r8
 800a6bc:	4649      	mov	r1, r9
 800a6be:	f7f6 fa27 	bl	8000b10 <__aeabi_dcmple>
 800a6c2:	b140      	cbz	r0, 800a6d6 <__ieee754_sqrt+0x15e>
 800a6c4:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a6c8:	e9da 0100 	ldrd	r0, r1, [sl]
 800a6cc:	e9db 2300 	ldrd	r2, r3, [fp]
 800a6d0:	d10e      	bne.n	800a6f0 <__ieee754_sqrt+0x178>
 800a6d2:	3601      	adds	r6, #1
 800a6d4:	4625      	mov	r5, r4
 800a6d6:	1073      	asrs	r3, r6, #1
 800a6d8:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800a6dc:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800a6e0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800a6e4:	086b      	lsrs	r3, r5, #1
 800a6e6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800a6ea:	e759      	b.n	800a5a0 <__ieee754_sqrt+0x28>
 800a6ec:	4690      	mov	r8, r2
 800a6ee:	e7c1      	b.n	800a674 <__ieee754_sqrt+0xfc>
 800a6f0:	f7f5 fddc 	bl	80002ac <__adddf3>
 800a6f4:	e9da 8900 	ldrd	r8, r9, [sl]
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	4640      	mov	r0, r8
 800a6fe:	4649      	mov	r1, r9
 800a700:	f7f6 f9fc 	bl	8000afc <__aeabi_dcmplt>
 800a704:	b120      	cbz	r0, 800a710 <__ieee754_sqrt+0x198>
 800a706:	1cab      	adds	r3, r5, #2
 800a708:	bf08      	it	eq
 800a70a:	3601      	addeq	r6, #1
 800a70c:	3502      	adds	r5, #2
 800a70e:	e7e2      	b.n	800a6d6 <__ieee754_sqrt+0x15e>
 800a710:	1c6b      	adds	r3, r5, #1
 800a712:	f023 0501 	bic.w	r5, r3, #1
 800a716:	e7de      	b.n	800a6d6 <__ieee754_sqrt+0x15e>
 800a718:	7ff00000 	.word	0x7ff00000
 800a71c:	0800aa88 	.word	0x0800aa88
 800a720:	0800aa80 	.word	0x0800aa80
 800a724:	00000000 	.word	0x00000000

0800a728 <__ieee754_atan2>:
 800a728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a72c:	ec57 6b11 	vmov	r6, r7, d1
 800a730:	4273      	negs	r3, r6
 800a732:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800a8b0 <__ieee754_atan2+0x188>
 800a736:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800a73a:	4333      	orrs	r3, r6
 800a73c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a740:	4543      	cmp	r3, r8
 800a742:	ec51 0b10 	vmov	r0, r1, d0
 800a746:	4635      	mov	r5, r6
 800a748:	d809      	bhi.n	800a75e <__ieee754_atan2+0x36>
 800a74a:	4244      	negs	r4, r0
 800a74c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a750:	4304      	orrs	r4, r0
 800a752:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a756:	4544      	cmp	r4, r8
 800a758:	468e      	mov	lr, r1
 800a75a:	4681      	mov	r9, r0
 800a75c:	d907      	bls.n	800a76e <__ieee754_atan2+0x46>
 800a75e:	4632      	mov	r2, r6
 800a760:	463b      	mov	r3, r7
 800a762:	f7f5 fda3 	bl	80002ac <__adddf3>
 800a766:	ec41 0b10 	vmov	d0, r0, r1
 800a76a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a76e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800a772:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800a776:	4334      	orrs	r4, r6
 800a778:	d103      	bne.n	800a782 <__ieee754_atan2+0x5a>
 800a77a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a77e:	f7ff bd5b 	b.w	800a238 <atan>
 800a782:	17bc      	asrs	r4, r7, #30
 800a784:	f004 0402 	and.w	r4, r4, #2
 800a788:	ea53 0909 	orrs.w	r9, r3, r9
 800a78c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a790:	d107      	bne.n	800a7a2 <__ieee754_atan2+0x7a>
 800a792:	2c02      	cmp	r4, #2
 800a794:	d05f      	beq.n	800a856 <__ieee754_atan2+0x12e>
 800a796:	2c03      	cmp	r4, #3
 800a798:	d1e5      	bne.n	800a766 <__ieee754_atan2+0x3e>
 800a79a:	a143      	add	r1, pc, #268	@ (adr r1, 800a8a8 <__ieee754_atan2+0x180>)
 800a79c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7a0:	e7e1      	b.n	800a766 <__ieee754_atan2+0x3e>
 800a7a2:	4315      	orrs	r5, r2
 800a7a4:	d106      	bne.n	800a7b4 <__ieee754_atan2+0x8c>
 800a7a6:	f1be 0f00 	cmp.w	lr, #0
 800a7aa:	db5f      	blt.n	800a86c <__ieee754_atan2+0x144>
 800a7ac:	a136      	add	r1, pc, #216	@ (adr r1, 800a888 <__ieee754_atan2+0x160>)
 800a7ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7b2:	e7d8      	b.n	800a766 <__ieee754_atan2+0x3e>
 800a7b4:	4542      	cmp	r2, r8
 800a7b6:	d10f      	bne.n	800a7d8 <__ieee754_atan2+0xb0>
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	f104 34ff 	add.w	r4, r4, #4294967295
 800a7be:	d107      	bne.n	800a7d0 <__ieee754_atan2+0xa8>
 800a7c0:	2c02      	cmp	r4, #2
 800a7c2:	d84c      	bhi.n	800a85e <__ieee754_atan2+0x136>
 800a7c4:	4b36      	ldr	r3, [pc, #216]	@ (800a8a0 <__ieee754_atan2+0x178>)
 800a7c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a7ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a7ce:	e7ca      	b.n	800a766 <__ieee754_atan2+0x3e>
 800a7d0:	2c02      	cmp	r4, #2
 800a7d2:	d848      	bhi.n	800a866 <__ieee754_atan2+0x13e>
 800a7d4:	4b33      	ldr	r3, [pc, #204]	@ (800a8a4 <__ieee754_atan2+0x17c>)
 800a7d6:	e7f6      	b.n	800a7c6 <__ieee754_atan2+0x9e>
 800a7d8:	4543      	cmp	r3, r8
 800a7da:	d0e4      	beq.n	800a7a6 <__ieee754_atan2+0x7e>
 800a7dc:	1a9b      	subs	r3, r3, r2
 800a7de:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800a7e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a7e6:	da1e      	bge.n	800a826 <__ieee754_atan2+0xfe>
 800a7e8:	2f00      	cmp	r7, #0
 800a7ea:	da01      	bge.n	800a7f0 <__ieee754_atan2+0xc8>
 800a7ec:	323c      	adds	r2, #60	@ 0x3c
 800a7ee:	db1e      	blt.n	800a82e <__ieee754_atan2+0x106>
 800a7f0:	4632      	mov	r2, r6
 800a7f2:	463b      	mov	r3, r7
 800a7f4:	f7f6 f83a 	bl	800086c <__aeabi_ddiv>
 800a7f8:	ec41 0b10 	vmov	d0, r0, r1
 800a7fc:	f7ff feb4 	bl	800a568 <fabs>
 800a800:	f7ff fd1a 	bl	800a238 <atan>
 800a804:	ec51 0b10 	vmov	r0, r1, d0
 800a808:	2c01      	cmp	r4, #1
 800a80a:	d013      	beq.n	800a834 <__ieee754_atan2+0x10c>
 800a80c:	2c02      	cmp	r4, #2
 800a80e:	d015      	beq.n	800a83c <__ieee754_atan2+0x114>
 800a810:	2c00      	cmp	r4, #0
 800a812:	d0a8      	beq.n	800a766 <__ieee754_atan2+0x3e>
 800a814:	a318      	add	r3, pc, #96	@ (adr r3, 800a878 <__ieee754_atan2+0x150>)
 800a816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81a:	f7f5 fd45 	bl	80002a8 <__aeabi_dsub>
 800a81e:	a318      	add	r3, pc, #96	@ (adr r3, 800a880 <__ieee754_atan2+0x158>)
 800a820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a824:	e014      	b.n	800a850 <__ieee754_atan2+0x128>
 800a826:	a118      	add	r1, pc, #96	@ (adr r1, 800a888 <__ieee754_atan2+0x160>)
 800a828:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a82c:	e7ec      	b.n	800a808 <__ieee754_atan2+0xe0>
 800a82e:	2000      	movs	r0, #0
 800a830:	2100      	movs	r1, #0
 800a832:	e7e9      	b.n	800a808 <__ieee754_atan2+0xe0>
 800a834:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a838:	4619      	mov	r1, r3
 800a83a:	e794      	b.n	800a766 <__ieee754_atan2+0x3e>
 800a83c:	a30e      	add	r3, pc, #56	@ (adr r3, 800a878 <__ieee754_atan2+0x150>)
 800a83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a842:	f7f5 fd31 	bl	80002a8 <__aeabi_dsub>
 800a846:	4602      	mov	r2, r0
 800a848:	460b      	mov	r3, r1
 800a84a:	a10d      	add	r1, pc, #52	@ (adr r1, 800a880 <__ieee754_atan2+0x158>)
 800a84c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a850:	f7f5 fd2a 	bl	80002a8 <__aeabi_dsub>
 800a854:	e787      	b.n	800a766 <__ieee754_atan2+0x3e>
 800a856:	a10a      	add	r1, pc, #40	@ (adr r1, 800a880 <__ieee754_atan2+0x158>)
 800a858:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a85c:	e783      	b.n	800a766 <__ieee754_atan2+0x3e>
 800a85e:	a10c      	add	r1, pc, #48	@ (adr r1, 800a890 <__ieee754_atan2+0x168>)
 800a860:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a864:	e77f      	b.n	800a766 <__ieee754_atan2+0x3e>
 800a866:	2000      	movs	r0, #0
 800a868:	2100      	movs	r1, #0
 800a86a:	e77c      	b.n	800a766 <__ieee754_atan2+0x3e>
 800a86c:	a10a      	add	r1, pc, #40	@ (adr r1, 800a898 <__ieee754_atan2+0x170>)
 800a86e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a872:	e778      	b.n	800a766 <__ieee754_atan2+0x3e>
 800a874:	f3af 8000 	nop.w
 800a878:	33145c07 	.word	0x33145c07
 800a87c:	3ca1a626 	.word	0x3ca1a626
 800a880:	54442d18 	.word	0x54442d18
 800a884:	400921fb 	.word	0x400921fb
 800a888:	54442d18 	.word	0x54442d18
 800a88c:	3ff921fb 	.word	0x3ff921fb
 800a890:	54442d18 	.word	0x54442d18
 800a894:	3fe921fb 	.word	0x3fe921fb
 800a898:	54442d18 	.word	0x54442d18
 800a89c:	bff921fb 	.word	0xbff921fb
 800a8a0:	0800aaa8 	.word	0x0800aaa8
 800a8a4:	0800aa90 	.word	0x0800aa90
 800a8a8:	54442d18 	.word	0x54442d18
 800a8ac:	c00921fb 	.word	0xc00921fb
 800a8b0:	7ff00000 	.word	0x7ff00000

0800a8b4 <_init>:
 800a8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8b6:	bf00      	nop
 800a8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ba:	bc08      	pop	{r3}
 800a8bc:	469e      	mov	lr, r3
 800a8be:	4770      	bx	lr

0800a8c0 <_fini>:
 800a8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8c2:	bf00      	nop
 800a8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8c6:	bc08      	pop	{r3}
 800a8c8:	469e      	mov	lr, r3
 800a8ca:	4770      	bx	lr
