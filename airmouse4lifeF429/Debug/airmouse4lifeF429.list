
airmouse4lifeF429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a814  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  0800a9c8  0800a9c8  0000b9c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abf0  0800abf0  0000c1fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800abf0  0800abf0  0000bbf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abf8  0800abf8  0000c1fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abf8  0800abf8  0000bbf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800abfc  0800abfc  0000bbfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  0800ac00  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1fc  2**0
                  CONTENTS
 10 .bss          00000c3c  20000200  20000200  0000c200  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000e3c  20000e3c  0000c200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000142d9  00000000  00000000  0000c22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000325e  00000000  00000000  00020505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001048  00000000  00000000  00023768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c7d  00000000  00000000  000247b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002610e  00000000  00000000  0002542d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001661d  00000000  00000000  0004b53b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8d77  00000000  00000000  00061b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013a8cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bc0  00000000  00000000  0013a914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0013f4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000200 	.word	0x20000200
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a9ac 	.word	0x0800a9ac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000204 	.word	0x20000204
 80001ec:	0800a9ac 	.word	0x0800a9ac

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b988 	b.w	8000ef0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	468e      	mov	lr, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	4688      	mov	r8, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d962      	bls.n	8000cd4 <__udivmoddi4+0xdc>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	b14e      	cbz	r6, 8000c28 <__udivmoddi4+0x30>
 8000c14:	f1c6 0320 	rsb	r3, r6, #32
 8000c18:	fa01 f806 	lsl.w	r8, r1, r6
 8000c1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c20:	40b7      	lsls	r7, r6
 8000c22:	ea43 0808 	orr.w	r8, r3, r8
 8000c26:	40b4      	lsls	r4, r6
 8000c28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c2c:	fa1f fc87 	uxth.w	ip, r7
 8000c30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c34:	0c23      	lsrs	r3, r4, #16
 8000c36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c4c:	f080 80ea 	bcs.w	8000e24 <__udivmoddi4+0x22c>
 8000c50:	429a      	cmp	r2, r3
 8000c52:	f240 80e7 	bls.w	8000e24 <__udivmoddi4+0x22c>
 8000c56:	3902      	subs	r1, #2
 8000c58:	443b      	add	r3, r7
 8000c5a:	1a9a      	subs	r2, r3, r2
 8000c5c:	b2a3      	uxth	r3, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6e:	459c      	cmp	ip, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x8e>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c78:	f080 80d6 	bcs.w	8000e28 <__udivmoddi4+0x230>
 8000c7c:	459c      	cmp	ip, r3
 8000c7e:	f240 80d3 	bls.w	8000e28 <__udivmoddi4+0x230>
 8000c82:	443b      	add	r3, r7
 8000c84:	3802      	subs	r0, #2
 8000c86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8a:	eba3 030c 	sub.w	r3, r3, ip
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11d      	cbz	r5, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40f3      	lsrs	r3, r6
 8000c94:	2200      	movs	r2, #0
 8000c96:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d905      	bls.n	8000cae <__udivmoddi4+0xb6>
 8000ca2:	b10d      	cbz	r5, 8000ca8 <__udivmoddi4+0xb0>
 8000ca4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4608      	mov	r0, r1
 8000cac:	e7f5      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cae:	fab3 f183 	clz	r1, r3
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d146      	bne.n	8000d44 <__udivmoddi4+0x14c>
 8000cb6:	4573      	cmp	r3, lr
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xc8>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 8105 	bhi.w	8000eca <__udivmoddi4+0x2d2>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	4690      	mov	r8, r2
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0e5      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cce:	e9c5 4800 	strd	r4, r8, [r5]
 8000cd2:	e7e2      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f000 8090 	beq.w	8000dfa <__udivmoddi4+0x202>
 8000cda:	fab2 f682 	clz	r6, r2
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	f040 80a4 	bne.w	8000e2c <__udivmoddi4+0x234>
 8000ce4:	1a8a      	subs	r2, r1, r2
 8000ce6:	0c03      	lsrs	r3, r0, #16
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	b280      	uxth	r0, r0
 8000cee:	b2bc      	uxth	r4, r7
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cf6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x11e>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x11c>
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	f200 80e0 	bhi.w	8000ed4 <__udivmoddi4+0x2dc>
 8000d14:	46c4      	mov	ip, r8
 8000d16:	1a9b      	subs	r3, r3, r2
 8000d18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d24:	fb02 f404 	mul.w	r4, r2, r4
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x144>
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x142>
 8000d34:	429c      	cmp	r4, r3
 8000d36:	f200 80ca 	bhi.w	8000ece <__udivmoddi4+0x2d6>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	1b1b      	subs	r3, r3, r4
 8000d3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d42:	e7a5      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d44:	f1c1 0620 	rsb	r6, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4e:	431f      	orrs	r7, r3
 8000d50:	fa0e f401 	lsl.w	r4, lr, r1
 8000d54:	fa20 f306 	lsr.w	r3, r0, r6
 8000d58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d60:	4323      	orrs	r3, r4
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	fa1f fc87 	uxth.w	ip, r7
 8000d6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d6e:	0c1c      	lsrs	r4, r3, #16
 8000d70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x1a0>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d8a:	f080 809c 	bcs.w	8000ec6 <__udivmoddi4+0x2ce>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f240 8099 	bls.w	8000ec6 <__udivmoddi4+0x2ce>
 8000d94:	3802      	subs	r0, #2
 8000d96:	443c      	add	r4, r7
 8000d98:	eba4 040e 	sub.w	r4, r4, lr
 8000d9c:	fa1f fe83 	uxth.w	lr, r3
 8000da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da4:	fb09 4413 	mls	r4, r9, r3, r4
 8000da8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db0:	45a4      	cmp	ip, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1ce>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dba:	f080 8082 	bcs.w	8000ec2 <__udivmoddi4+0x2ca>
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d97f      	bls.n	8000ec2 <__udivmoddi4+0x2ca>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	443c      	add	r4, r7
 8000dc6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dca:	eba4 040c 	sub.w	r4, r4, ip
 8000dce:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dd2:	4564      	cmp	r4, ip
 8000dd4:	4673      	mov	r3, lr
 8000dd6:	46e1      	mov	r9, ip
 8000dd8:	d362      	bcc.n	8000ea0 <__udivmoddi4+0x2a8>
 8000dda:	d05f      	beq.n	8000e9c <__udivmoddi4+0x2a4>
 8000ddc:	b15d      	cbz	r5, 8000df6 <__udivmoddi4+0x1fe>
 8000dde:	ebb8 0203 	subs.w	r2, r8, r3
 8000de2:	eb64 0409 	sbc.w	r4, r4, r9
 8000de6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dea:	fa22 f301 	lsr.w	r3, r2, r1
 8000dee:	431e      	orrs	r6, r3
 8000df0:	40cc      	lsrs	r4, r1
 8000df2:	e9c5 6400 	strd	r6, r4, [r5]
 8000df6:	2100      	movs	r1, #0
 8000df8:	e74f      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000dfa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dfe:	0c01      	lsrs	r1, r0, #16
 8000e00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e04:	b280      	uxth	r0, r0
 8000e06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	4638      	mov	r0, r7
 8000e0e:	463c      	mov	r4, r7
 8000e10:	46b8      	mov	r8, r7
 8000e12:	46be      	mov	lr, r7
 8000e14:	2620      	movs	r6, #32
 8000e16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e1a:	eba2 0208 	sub.w	r2, r2, r8
 8000e1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e22:	e766      	b.n	8000cf2 <__udivmoddi4+0xfa>
 8000e24:	4601      	mov	r1, r0
 8000e26:	e718      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e28:	4610      	mov	r0, r2
 8000e2a:	e72c      	b.n	8000c86 <__udivmoddi4+0x8e>
 8000e2c:	f1c6 0220 	rsb	r2, r6, #32
 8000e30:	fa2e f302 	lsr.w	r3, lr, r2
 8000e34:	40b7      	lsls	r7, r6
 8000e36:	40b1      	lsls	r1, r6
 8000e38:	fa20 f202 	lsr.w	r2, r0, r2
 8000e3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e40:	430a      	orrs	r2, r1
 8000e42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e46:	b2bc      	uxth	r4, r7
 8000e48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb08 f904 	mul.w	r9, r8, r4
 8000e56:	40b0      	lsls	r0, r6
 8000e58:	4589      	cmp	r9, r1
 8000e5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e5e:	b280      	uxth	r0, r0
 8000e60:	d93e      	bls.n	8000ee0 <__udivmoddi4+0x2e8>
 8000e62:	1879      	adds	r1, r7, r1
 8000e64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e68:	d201      	bcs.n	8000e6e <__udivmoddi4+0x276>
 8000e6a:	4589      	cmp	r9, r1
 8000e6c:	d81f      	bhi.n	8000eae <__udivmoddi4+0x2b6>
 8000e6e:	eba1 0109 	sub.w	r1, r1, r9
 8000e72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e76:	fb09 f804 	mul.w	r8, r9, r4
 8000e7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e7e:	b292      	uxth	r2, r2
 8000e80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e84:	4542      	cmp	r2, r8
 8000e86:	d229      	bcs.n	8000edc <__udivmoddi4+0x2e4>
 8000e88:	18ba      	adds	r2, r7, r2
 8000e8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e8e:	d2c4      	bcs.n	8000e1a <__udivmoddi4+0x222>
 8000e90:	4542      	cmp	r2, r8
 8000e92:	d2c2      	bcs.n	8000e1a <__udivmoddi4+0x222>
 8000e94:	f1a9 0102 	sub.w	r1, r9, #2
 8000e98:	443a      	add	r2, r7
 8000e9a:	e7be      	b.n	8000e1a <__udivmoddi4+0x222>
 8000e9c:	45f0      	cmp	r8, lr
 8000e9e:	d29d      	bcs.n	8000ddc <__udivmoddi4+0x1e4>
 8000ea0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ea4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	46e1      	mov	r9, ip
 8000eac:	e796      	b.n	8000ddc <__udivmoddi4+0x1e4>
 8000eae:	eba7 0909 	sub.w	r9, r7, r9
 8000eb2:	4449      	add	r1, r9
 8000eb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000eb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ebc:	fb09 f804 	mul.w	r8, r9, r4
 8000ec0:	e7db      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ec2:	4673      	mov	r3, lr
 8000ec4:	e77f      	b.n	8000dc6 <__udivmoddi4+0x1ce>
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	e766      	b.n	8000d98 <__udivmoddi4+0x1a0>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e6fd      	b.n	8000cca <__udivmoddi4+0xd2>
 8000ece:	443b      	add	r3, r7
 8000ed0:	3a02      	subs	r2, #2
 8000ed2:	e733      	b.n	8000d3c <__udivmoddi4+0x144>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	443b      	add	r3, r7
 8000eda:	e71c      	b.n	8000d16 <__udivmoddi4+0x11e>
 8000edc:	4649      	mov	r1, r9
 8000ede:	e79c      	b.n	8000e1a <__udivmoddi4+0x222>
 8000ee0:	eba1 0109 	sub.w	r1, r1, r9
 8000ee4:	46c4      	mov	ip, r8
 8000ee6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eea:	fb09 f804 	mul.w	r8, r9, r4
 8000eee:	e7c4      	b.n	8000e7a <__udivmoddi4+0x282>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000efa:	4a13      	ldr	r2, [pc, #76]	@ (8000f48 <MX_I2C1_Init+0x54>)
 8000efc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000efe:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f00:	4a12      	ldr	r2, [pc, #72]	@ (8000f4c <MX_I2C1_Init+0x58>)
 8000f02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f12:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f1e:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f24:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f30:	4804      	ldr	r0, [pc, #16]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f32:	f001 fc21 	bl	8002778 <HAL_I2C_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f3c:	f000 fb92 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2000021c 	.word	0x2000021c
 8000f48:	40005400 	.word	0x40005400
 8000f4c:	000186a0 	.word	0x000186a0

08000f50 <SendDataOverUART>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SendDataOverUART(MPU6050_t *MPU6050, int8_t xMove, int8_t yMove)
{
 8000f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f54:	b0d1      	sub	sp, #324	@ 0x144
 8000f56:	af0a      	add	r7, sp, #40	@ 0x28
 8000f58:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000f60:	6018      	str	r0, [r3, #0]
 8000f62:	4608      	mov	r0, r1
 8000f64:	4611      	mov	r1, r2
 8000f66:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f6a:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8000f6e:	4602      	mov	r2, r0
 8000f70:	701a      	strb	r2, [r3, #0]
 8000f72:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f76:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8000f7a:	460a      	mov	r2, r1
 8000f7c:	701a      	strb	r2, [r3, #0]
    char buffer[250];

    sprintf(
        buffer,
        "Ax: %d.%02d, Ay: %d.%02d, Az: %d.%02d, AngleX: %d.%02d, AngleY: %d.%02d, dx: %d, dy: %d\r\n",
        (int)MPU6050->Ax, abs((int)(MPU6050->Ax * 100) % 100),
 8000f7e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    sprintf(
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f7ff fdf2 	bl	8000b78 <__aeabi_d2iz>
 8000f94:	4681      	mov	r9, r0
        (int)MPU6050->Ax, abs((int)(MPU6050->Ax * 100) % 100),
 8000f96:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000fa4:	f04f 0200 	mov.w	r2, #0
 8000fa8:	4b7f      	ldr	r3, [pc, #508]	@ (80011a8 <SendDataOverUART+0x258>)
 8000faa:	f7ff fb35 	bl	8000618 <__aeabi_dmul>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	4610      	mov	r0, r2
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f7ff fddf 	bl	8000b78 <__aeabi_d2iz>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	4b7b      	ldr	r3, [pc, #492]	@ (80011ac <SendDataOverUART+0x25c>)
 8000fbe:	fb83 1302 	smull	r1, r3, r3, r2
 8000fc2:	1159      	asrs	r1, r3, #5
 8000fc4:	17d3      	asrs	r3, r2, #31
 8000fc6:	1acb      	subs	r3, r1, r3
 8000fc8:	2164      	movs	r1, #100	@ 0x64
 8000fca:	fb01 f303 	mul.w	r3, r1, r3
 8000fce:	1ad3      	subs	r3, r2, r3
    sprintf(
 8000fd0:	ea83 78e3 	eor.w	r8, r3, r3, asr #31
 8000fd4:	eba8 78e3 	sub.w	r8, r8, r3, asr #31
        (int)MPU6050->Ay, abs((int)(MPU6050->Ay * 100) % 100),
 8000fd8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000fdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    sprintf(
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f7ff fdc5 	bl	8000b78 <__aeabi_d2iz>
 8000fee:	60f8      	str	r0, [r7, #12]
        (int)MPU6050->Ay, abs((int)(MPU6050->Ay * 100) % 100),
 8000ff0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ff4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	4b69      	ldr	r3, [pc, #420]	@ (80011a8 <SendDataOverUART+0x258>)
 8001004:	f7ff fb08 	bl	8000618 <__aeabi_dmul>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	f7ff fdb2 	bl	8000b78 <__aeabi_d2iz>
 8001014:	4602      	mov	r2, r0
 8001016:	4b65      	ldr	r3, [pc, #404]	@ (80011ac <SendDataOverUART+0x25c>)
 8001018:	fb83 1302 	smull	r1, r3, r3, r2
 800101c:	1159      	asrs	r1, r3, #5
 800101e:	17d3      	asrs	r3, r2, #31
 8001020:	1acb      	subs	r3, r1, r3
 8001022:	2164      	movs	r1, #100	@ 0x64
 8001024:	fb01 f303 	mul.w	r3, r1, r3
 8001028:	1ad3      	subs	r3, r2, r3
    sprintf(
 800102a:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 800102e:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
        (int)MPU6050->Az, abs((int)(MPU6050->Az * 100) % 100),
 8001032:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001036:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
    sprintf(
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	f7ff fd98 	bl	8000b78 <__aeabi_d2iz>
 8001048:	60b8      	str	r0, [r7, #8]
        (int)MPU6050->Az, abs((int)(MPU6050->Az * 100) % 100),
 800104a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800104e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	4b52      	ldr	r3, [pc, #328]	@ (80011a8 <SendDataOverUART+0x258>)
 800105e:	f7ff fadb 	bl	8000618 <__aeabi_dmul>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4610      	mov	r0, r2
 8001068:	4619      	mov	r1, r3
 800106a:	f7ff fd85 	bl	8000b78 <__aeabi_d2iz>
 800106e:	4602      	mov	r2, r0
 8001070:	4b4e      	ldr	r3, [pc, #312]	@ (80011ac <SendDataOverUART+0x25c>)
 8001072:	fb83 1302 	smull	r1, r3, r3, r2
 8001076:	1159      	asrs	r1, r3, #5
 8001078:	17d3      	asrs	r3, r2, #31
 800107a:	1acb      	subs	r3, r1, r3
 800107c:	2164      	movs	r1, #100	@ 0x64
 800107e:	fb01 f303 	mul.w	r3, r1, r3
 8001082:	1ad3      	subs	r3, r2, r3
    sprintf(
 8001084:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
 8001088:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
        (int)MPU6050->KalmanAngleX, abs((int)(MPU6050->KalmanAngleX * 100) % 100),
 800108c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001090:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
    sprintf(
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	f7ff fd6b 	bl	8000b78 <__aeabi_d2iz>
 80010a2:	6078      	str	r0, [r7, #4]
        (int)MPU6050->KalmanAngleX, abs((int)(MPU6050->KalmanAngleX * 100) % 100),
 80010a4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	4b3c      	ldr	r3, [pc, #240]	@ (80011a8 <SendDataOverUART+0x258>)
 80010b8:	f7ff faae 	bl	8000618 <__aeabi_dmul>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4610      	mov	r0, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	f7ff fd58 	bl	8000b78 <__aeabi_d2iz>
 80010c8:	4602      	mov	r2, r0
 80010ca:	4b38      	ldr	r3, [pc, #224]	@ (80011ac <SendDataOverUART+0x25c>)
 80010cc:	fb83 1302 	smull	r1, r3, r3, r2
 80010d0:	1159      	asrs	r1, r3, #5
 80010d2:	17d3      	asrs	r3, r2, #31
 80010d4:	1acb      	subs	r3, r1, r3
 80010d6:	2164      	movs	r1, #100	@ 0x64
 80010d8:	fb01 f303 	mul.w	r3, r1, r3
 80010dc:	1ad3      	subs	r3, r2, r3
    sprintf(
 80010de:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
 80010e2:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
        (int)MPU6050->KalmanAngleY, abs((int)(MPU6050->KalmanAngleY * 100) % 100),
 80010e6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
    sprintf(
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f7ff fd3e 	bl	8000b78 <__aeabi_d2iz>
 80010fc:	6038      	str	r0, [r7, #0]
        (int)MPU6050->KalmanAngleY, abs((int)(MPU6050->KalmanAngleY * 100) % 100),
 80010fe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001102:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	4b25      	ldr	r3, [pc, #148]	@ (80011a8 <SendDataOverUART+0x258>)
 8001112:	f7ff fa81 	bl	8000618 <__aeabi_dmul>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fd2b 	bl	8000b78 <__aeabi_d2iz>
 8001122:	4602      	mov	r2, r0
 8001124:	4b21      	ldr	r3, [pc, #132]	@ (80011ac <SendDataOverUART+0x25c>)
 8001126:	fb83 1302 	smull	r1, r3, r3, r2
 800112a:	1159      	asrs	r1, r3, #5
 800112c:	17d3      	asrs	r3, r2, #31
 800112e:	1acb      	subs	r3, r1, r3
 8001130:	2164      	movs	r1, #100	@ 0x64
 8001132:	fb01 f303 	mul.w	r3, r1, r3
 8001136:	1ad3      	subs	r3, r2, r3
    sprintf(
 8001138:	2b00      	cmp	r3, #0
 800113a:	bfb8      	it	lt
 800113c:	425b      	neglt	r3, r3
 800113e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001142:	f2a2 1205 	subw	r2, r2, #261	@ 0x105
 8001146:	f992 2000 	ldrsb.w	r2, [r2]
 800114a:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 800114e:	f5a1 7183 	sub.w	r1, r1, #262	@ 0x106
 8001152:	f991 1000 	ldrsb.w	r1, [r1]
 8001156:	f107 001c 	add.w	r0, r7, #28
 800115a:	9109      	str	r1, [sp, #36]	@ 0x24
 800115c:	9208      	str	r2, [sp, #32]
 800115e:	9307      	str	r3, [sp, #28]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	9306      	str	r3, [sp, #24]
 8001164:	9605      	str	r6, [sp, #20]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	9304      	str	r3, [sp, #16]
 800116a:	9503      	str	r5, [sp, #12]
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	9302      	str	r3, [sp, #8]
 8001170:	9401      	str	r4, [sp, #4]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	4643      	mov	r3, r8
 8001178:	464a      	mov	r2, r9
 800117a:	490d      	ldr	r1, [pc, #52]	@ (80011b0 <SendDataOverUART+0x260>)
 800117c:	f008 fc0a 	bl	8009994 <siprintf>
        xMove, yMove
    );

    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f833 	bl	80001f0 <strlen>
 800118a:	4603      	mov	r3, r0
 800118c:	b29a      	uxth	r2, r3
 800118e:	f107 011c 	add.w	r1, r7, #28
 8001192:	f04f 33ff 	mov.w	r3, #4294967295
 8001196:	4807      	ldr	r0, [pc, #28]	@ (80011b4 <SendDataOverUART+0x264>)
 8001198:	f004 fb62 	bl	8005860 <HAL_UART_Transmit>
}
 800119c:	bf00      	nop
 800119e:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80011a2:	46bd      	mov	sp, r7
 80011a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011a8:	40590000 	.word	0x40590000
 80011ac:	51eb851f 	.word	0x51eb851f
 80011b0:	0800a9c8 	.word	0x0800a9c8
 80011b4:	200002c8 	.word	0x200002c8

080011b8 <Scan_I2C_Addresses>:



void Scan_I2C_Addresses(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08e      	sub	sp, #56	@ 0x38
 80011bc:	af00      	add	r7, sp, #0
    uint8_t i;
    uint8_t ret;
    char buffer[50];

    sprintf(buffer, "Scanning I2C addresses...\r\n");
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	492d      	ldr	r1, [pc, #180]	@ (8001278 <Scan_I2C_Addresses+0xc0>)
 80011c2:	4618      	mov	r0, r3
 80011c4:	f008 fbe6 	bl	8009994 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f810 	bl	80001f0 <strlen>
 80011d0:	4603      	mov	r3, r0
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	1d39      	adds	r1, r7, #4
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
 80011da:	4828      	ldr	r0, [pc, #160]	@ (800127c <Scan_I2C_Addresses+0xc4>)
 80011dc:	f004 fb40 	bl	8005860 <HAL_UART_Transmit>

    for(i = 1; i < 128; i++)
 80011e0:	2301      	movs	r3, #1
 80011e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80011e6:	e028      	b.n	800123a <Scan_I2C_Addresses+0x82>
    {
        ret = HAL_I2C_IsDeviceReady(&hi2c1, (i << 1), 2, 100);
 80011e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	b299      	uxth	r1, r3
 80011f2:	2364      	movs	r3, #100	@ 0x64
 80011f4:	2202      	movs	r2, #2
 80011f6:	4822      	ldr	r0, [pc, #136]	@ (8001280 <Scan_I2C_Addresses+0xc8>)
 80011f8:	f001 ff2e 	bl	8003058 <HAL_I2C_IsDeviceReady>
 80011fc:	4603      	mov	r3, r0
 80011fe:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

        if(ret == HAL_OK)
 8001202:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001206:	2b00      	cmp	r3, #0
 8001208:	d112      	bne.n	8001230 <Scan_I2C_Addresses+0x78>
        {
            sprintf(buffer, "I2C device found at address: 0x%02X\r\n", i);
 800120a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	491c      	ldr	r1, [pc, #112]	@ (8001284 <Scan_I2C_Addresses+0xcc>)
 8001212:	4618      	mov	r0, r3
 8001214:	f008 fbbe 	bl	8009994 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	4618      	mov	r0, r3
 800121c:	f7fe ffe8 	bl	80001f0 <strlen>
 8001220:	4603      	mov	r3, r0
 8001222:	b29a      	uxth	r2, r3
 8001224:	1d39      	adds	r1, r7, #4
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
 800122a:	4814      	ldr	r0, [pc, #80]	@ (800127c <Scan_I2C_Addresses+0xc4>)
 800122c:	f004 fb18 	bl	8005860 <HAL_UART_Transmit>
    for(i = 1; i < 128; i++)
 8001230:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001234:	3301      	adds	r3, #1
 8001236:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800123a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800123e:	2b00      	cmp	r3, #0
 8001240:	dad2      	bge.n	80011e8 <Scan_I2C_Addresses+0x30>
//            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13,GPIO_PIN_SET);
        }
    }

    sprintf(buffer, "I2C scan completed\r\n");
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	4910      	ldr	r1, [pc, #64]	@ (8001288 <Scan_I2C_Addresses+0xd0>)
 8001246:	4618      	mov	r0, r3
 8001248:	f008 fba4 	bl	8009994 <siprintf>
    HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,GPIO_PIN_SET);
 800124c:	2201      	movs	r2, #1
 800124e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001252:	480e      	ldr	r0, [pc, #56]	@ (800128c <Scan_I2C_Addresses+0xd4>)
 8001254:	f001 fa76 	bl	8002744 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	4618      	mov	r0, r3
 800125c:	f7fe ffc8 	bl	80001f0 <strlen>
 8001260:	4603      	mov	r3, r0
 8001262:	b29a      	uxth	r2, r3
 8001264:	1d39      	adds	r1, r7, #4
 8001266:	f04f 33ff 	mov.w	r3, #4294967295
 800126a:	4804      	ldr	r0, [pc, #16]	@ (800127c <Scan_I2C_Addresses+0xc4>)
 800126c:	f004 faf8 	bl	8005860 <HAL_UART_Transmit>
}
 8001270:	bf00      	nop
 8001272:	3738      	adds	r7, #56	@ 0x38
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	0800aa24 	.word	0x0800aa24
 800127c:	200002c8 	.word	0x200002c8
 8001280:	2000021c 	.word	0x2000021c
 8001284:	0800aa40 	.word	0x0800aa40
 8001288:	0800aa68 	.word	0x0800aa68
 800128c:	40021800 	.word	0x40021800

08001290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001290:	b5b0      	push	{r4, r5, r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001296:	f000 ff01 	bl	800209c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129a:	f000 f8bf 	bl	800141c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800129e:	f000 f951 	bl	8001544 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012a2:	f7ff fe27 	bl	8000ef4 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80012a6:	f007 ff3d 	bl	8009124 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 80012aa:	f000 f921 	bl	80014f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Scan_I2C_Addresses();
 80012ae:	f7ff ff83 	bl	80011b8 <Scan_I2C_Addresses>

  uint8_t init_attempts = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	73fb      	strb	r3, [r7, #15]

 while(MPU6050_Init(&hi2c1) == 1) {
 80012b6:	e018      	b.n	80012ea <main+0x5a>
   init_attempts++;
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	3301      	adds	r3, #1
 80012bc:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&huart1, (uint8_t *)"MPU6050 Init Failed, retrying...\r\n", 34, HAL_MAX_DELAY);
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	2222      	movs	r2, #34	@ 0x22
 80012c4:	494c      	ldr	r1, [pc, #304]	@ (80013f8 <main+0x168>)
 80012c6:	484d      	ldr	r0, [pc, #308]	@ (80013fc <main+0x16c>)
 80012c8:	f004 faca 	bl	8005860 <HAL_UART_Transmit>
   HAL_Delay(500);
 80012cc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012d0:	f000 ff56 	bl	8002180 <HAL_Delay>
   if(init_attempts > 10) {
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	2b0a      	cmp	r3, #10
 80012d8:	d907      	bls.n	80012ea <main+0x5a>
     HAL_UART_Transmit(&huart1, (uint8_t *)"MPU6050 Init Failed permanently!\r\n", 35, HAL_MAX_DELAY);
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	2223      	movs	r2, #35	@ 0x23
 80012e0:	4947      	ldr	r1, [pc, #284]	@ (8001400 <main+0x170>)
 80012e2:	4846      	ldr	r0, [pc, #280]	@ (80013fc <main+0x16c>)
 80012e4:	f004 fabc 	bl	8005860 <HAL_UART_Transmit>
     break;
 80012e8:	e005      	b.n	80012f6 <main+0x66>
 while(MPU6050_Init(&hi2c1) == 1) {
 80012ea:	4846      	ldr	r0, [pc, #280]	@ (8001404 <main+0x174>)
 80012ec:	f000 f9c0 	bl	8001670 <MPU6050_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d0e0      	beq.n	80012b8 <main+0x28>
   }
 }

 if(init_attempts <= 10) {
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	2b0a      	cmp	r3, #10
 80012fa:	d806      	bhi.n	800130a <main+0x7a>
//	 HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_SET);
	 HAL_UART_Transmit(&huart1, (uint8_t *)"MPU6050 Initialized Successfully!\r\n", 36, HAL_MAX_DELAY);
 80012fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001300:	2224      	movs	r2, #36	@ 0x24
 8001302:	4941      	ldr	r1, [pc, #260]	@ (8001408 <main+0x178>)
 8001304:	483d      	ldr	r0, [pc, #244]	@ (80013fc <main+0x16c>)
 8001306:	f004 faab 	bl	8005860 <HAL_UART_Transmit>
 }

 HAL_Delay(1000);
 800130a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800130e:	f000 ff37 	bl	8002180 <HAL_Delay>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	    if(hUsbDeviceFS.pClassData != NULL) {
 8001312:	4b3e      	ldr	r3, [pc, #248]	@ (800140c <main+0x17c>)
 8001314:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8001318:	2b00      	cmp	r3, #0
 800131a:	d065      	beq.n	80013e8 <main+0x158>
	   	 HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_SET);
 800131c:	2201      	movs	r2, #1
 800131e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001322:	483b      	ldr	r0, [pc, #236]	@ (8001410 <main+0x180>)
 8001324:	f001 fa0e 	bl	8002744 <HAL_GPIO_WritePin>

//	   	 	MPU6050_Read_Gyro(&hi2c1, &MPU6050);
		    MPU6050_Read_All(&hi2c1, &MPU6050);
 8001328:	493a      	ldr	r1, [pc, #232]	@ (8001414 <main+0x184>)
 800132a:	4836      	ldr	r0, [pc, #216]	@ (8001404 <main+0x174>)
 800132c:	f000 fa00 	bl	8001730 <MPU6050_Read_All>

		    float scale = 0.3f;
 8001330:	4b39      	ldr	r3, [pc, #228]	@ (8001418 <main+0x188>)
 8001332:	60bb      	str	r3, [r7, #8]

		    int8_t xMove = (int8_t)(MPU6050.KalmanAngleX * scale);
 8001334:	4b37      	ldr	r3, [pc, #220]	@ (8001414 <main+0x184>)
 8001336:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	@ 0x48
 800133a:	68b8      	ldr	r0, [r7, #8]
 800133c:	f7ff f914 	bl	8000568 <__aeabi_f2d>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4620      	mov	r0, r4
 8001346:	4629      	mov	r1, r5
 8001348:	f7ff f966 	bl	8000618 <__aeabi_dmul>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fc10 	bl	8000b78 <__aeabi_d2iz>
 8001358:	4603      	mov	r3, r0
 800135a:	73bb      	strb	r3, [r7, #14]
		    int8_t yMove = (int8_t)(MPU6050.KalmanAngleY * scale);
 800135c:	4b2d      	ldr	r3, [pc, #180]	@ (8001414 <main+0x184>)
 800135e:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8001362:	68b8      	ldr	r0, [r7, #8]
 8001364:	f7ff f900 	bl	8000568 <__aeabi_f2d>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4620      	mov	r0, r4
 800136e:	4629      	mov	r1, r5
 8001370:	f7ff f952 	bl	8000618 <__aeabi_dmul>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	f7ff fbfc 	bl	8000b78 <__aeabi_d2iz>
 8001380:	4603      	mov	r3, r0
 8001382:	737b      	strb	r3, [r7, #13]

		    // Prepare HID report
		    //Deadzone
		    if (abs(xMove) < 1) xMove = 0;
 8001384:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001388:	2b00      	cmp	r3, #0
 800138a:	bfb8      	it	lt
 800138c:	425b      	neglt	r3, r3
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <main+0x108>
 8001394:	2300      	movs	r3, #0
 8001396:	73bb      	strb	r3, [r7, #14]
		    if (abs(yMove) < 1) yMove = 0;
 8001398:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800139c:	2b00      	cmp	r3, #0
 800139e:	bfb8      	it	lt
 80013a0:	425b      	neglt	r3, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <main+0x11c>
 80013a8:	2300      	movs	r3, #0
 80013aa:	737b      	strb	r3, [r7, #13]

		    SendDataOverUART(&MPU6050, xMove, yMove);
 80013ac:	f997 200d 	ldrsb.w	r2, [r7, #13]
 80013b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013b4:	4619      	mov	r1, r3
 80013b6:	4817      	ldr	r0, [pc, #92]	@ (8001414 <main+0x184>)
 80013b8:	f7ff fdca 	bl	8000f50 <SendDataOverUART>

		    uint8_t HID_Buffer[3] = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2100      	movs	r1, #0
 80013c0:	460a      	mov	r2, r1
 80013c2:	801a      	strh	r2, [r3, #0]
 80013c4:	460a      	mov	r2, r1
 80013c6:	709a      	strb	r2, [r3, #2]
		    HID_Buffer[1] = xMove;
 80013c8:	7bbb      	ldrb	r3, [r7, #14]
 80013ca:	717b      	strb	r3, [r7, #5]
		    HID_Buffer[2] = -yMove;
 80013cc:	7b7b      	ldrb	r3, [r7, #13]
 80013ce:	425b      	negs	r3, r3
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	71bb      	strb	r3, [r7, #6]

		    // Send HID report
		    USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2203      	movs	r2, #3
 80013d8:	4619      	mov	r1, r3
 80013da:	480c      	ldr	r0, [pc, #48]	@ (800140c <main+0x17c>)
 80013dc:	f006 fb00 	bl	80079e0 <USBD_HID_SendReport>
		    HAL_Delay(10);
 80013e0:	200a      	movs	r0, #10
 80013e2:	f000 fecd 	bl	8002180 <HAL_Delay>
 80013e6:	e794      	b.n	8001312 <main+0x82>

	    } else {
	   	 HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013ee:	4808      	ldr	r0, [pc, #32]	@ (8001410 <main+0x180>)
 80013f0:	f001 f9a8 	bl	8002744 <HAL_GPIO_WritePin>
	    if(hUsbDeviceFS.pClassData != NULL) {
 80013f4:	e78d      	b.n	8001312 <main+0x82>
 80013f6:	bf00      	nop
 80013f8:	0800aa80 	.word	0x0800aa80
 80013fc:	200002c8 	.word	0x200002c8
 8001400:	0800aaa4 	.word	0x0800aaa4
 8001404:	2000021c 	.word	0x2000021c
 8001408:	0800aac8 	.word	0x0800aac8
 800140c:	20000320 	.word	0x20000320
 8001410:	40021800 	.word	0x40021800
 8001414:	20000270 	.word	0x20000270
 8001418:	3e99999a 	.word	0x3e99999a

0800141c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b094      	sub	sp, #80	@ 0x50
 8001420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001422:	f107 0320 	add.w	r3, r7, #32
 8001426:	2230      	movs	r2, #48	@ 0x30
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f008 fad4 	bl	80099d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	4b28      	ldr	r3, [pc, #160]	@ (80014e8 <SystemClock_Config+0xcc>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001448:	4a27      	ldr	r2, [pc, #156]	@ (80014e8 <SystemClock_Config+0xcc>)
 800144a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800144e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001450:	4b25      	ldr	r3, [pc, #148]	@ (80014e8 <SystemClock_Config+0xcc>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	4b22      	ldr	r3, [pc, #136]	@ (80014ec <SystemClock_Config+0xd0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001468:	4a20      	ldr	r2, [pc, #128]	@ (80014ec <SystemClock_Config+0xd0>)
 800146a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	4b1e      	ldr	r3, [pc, #120]	@ (80014ec <SystemClock_Config+0xd0>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800147c:	2301      	movs	r3, #1
 800147e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001480:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001486:	2302      	movs	r3, #2
 8001488:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800148a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800148e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001490:	2304      	movs	r3, #4
 8001492:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001494:	2348      	movs	r3, #72	@ 0x48
 8001496:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001498:	2302      	movs	r3, #2
 800149a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800149c:	2303      	movs	r3, #3
 800149e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a0:	f107 0320 	add.w	r3, r7, #32
 80014a4:	4618      	mov	r0, r3
 80014a6:	f003 fcf3 	bl	8004e90 <HAL_RCC_OscConfig>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014b0:	f000 f8d8 	bl	8001664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b4:	230f      	movs	r3, #15
 80014b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b8:	2302      	movs	r3, #2
 80014ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	2102      	movs	r1, #2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f003 ff55 	bl	8005380 <HAL_RCC_ClockConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80014dc:	f000 f8c2 	bl	8001664 <Error_Handler>
  }
}
 80014e0:	bf00      	nop
 80014e2:	3750      	adds	r7, #80	@ 0x50
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40007000 	.word	0x40007000

080014f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014f4:	4b11      	ldr	r3, [pc, #68]	@ (800153c <MX_USART1_UART_Init+0x4c>)
 80014f6:	4a12      	ldr	r2, [pc, #72]	@ (8001540 <MX_USART1_UART_Init+0x50>)
 80014f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014fa:	4b10      	ldr	r3, [pc, #64]	@ (800153c <MX_USART1_UART_Init+0x4c>)
 80014fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001500:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001502:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <MX_USART1_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001508:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <MX_USART1_UART_Init+0x4c>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800150e:	4b0b      	ldr	r3, [pc, #44]	@ (800153c <MX_USART1_UART_Init+0x4c>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001514:	4b09      	ldr	r3, [pc, #36]	@ (800153c <MX_USART1_UART_Init+0x4c>)
 8001516:	220c      	movs	r2, #12
 8001518:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151a:	4b08      	ldr	r3, [pc, #32]	@ (800153c <MX_USART1_UART_Init+0x4c>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001520:	4b06      	ldr	r3, [pc, #24]	@ (800153c <MX_USART1_UART_Init+0x4c>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001526:	4805      	ldr	r0, [pc, #20]	@ (800153c <MX_USART1_UART_Init+0x4c>)
 8001528:	f004 f94a 	bl	80057c0 <HAL_UART_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001532:	f000 f897 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200002c8 	.word	0x200002c8
 8001540:	40011000 	.word	0x40011000

08001544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	@ 0x28
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	4b3e      	ldr	r3, [pc, #248]	@ (8001658 <MX_GPIO_Init+0x114>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a3d      	ldr	r2, [pc, #244]	@ (8001658 <MX_GPIO_Init+0x114>)
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	4b3b      	ldr	r3, [pc, #236]	@ (8001658 <MX_GPIO_Init+0x114>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]


  // UART GPIO Configuration
  GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8001576:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001588:	2307      	movs	r3, #7
 800158a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	4832      	ldr	r0, [pc, #200]	@ (800165c <MX_GPIO_Init+0x118>)
 8001594:	f000 ff2a 	bl	80023ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 8001598:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800159c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	2301      	movs	r3, #1
 80015a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	482b      	ldr	r0, [pc, #172]	@ (8001660 <MX_GPIO_Init+0x11c>)
 80015b2:	f000 ff1b 	bl	80023ec <HAL_GPIO_Init>


  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b27      	ldr	r3, [pc, #156]	@ (8001658 <MX_GPIO_Init+0x114>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	4a26      	ldr	r2, [pc, #152]	@ (8001658 <MX_GPIO_Init+0x114>)
 80015c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c6:	4b24      	ldr	r3, [pc, #144]	@ (8001658 <MX_GPIO_Init+0x114>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	4b20      	ldr	r3, [pc, #128]	@ (8001658 <MX_GPIO_Init+0x114>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	4a1f      	ldr	r2, [pc, #124]	@ (8001658 <MX_GPIO_Init+0x114>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001658 <MX_GPIO_Init+0x114>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	4b19      	ldr	r3, [pc, #100]	@ (8001658 <MX_GPIO_Init+0x114>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	4a18      	ldr	r2, [pc, #96]	@ (8001658 <MX_GPIO_Init+0x114>)
 80015f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fe:	4b16      	ldr	r3, [pc, #88]	@ (8001658 <MX_GPIO_Init+0x114>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	603b      	str	r3, [r7, #0]
 800160e:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <MX_GPIO_Init+0x114>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a11      	ldr	r2, [pc, #68]	@ (8001658 <MX_GPIO_Init+0x114>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <MX_GPIO_Init+0x114>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800162c:	480c      	ldr	r0, [pc, #48]	@ (8001660 <MX_GPIO_Init+0x11c>)
 800162e:	f001 f889 	bl	8002744 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001632:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001638:	2301      	movs	r3, #1
 800163a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	4805      	ldr	r0, [pc, #20]	@ (8001660 <MX_GPIO_Init+0x11c>)
 800164c:	f000 fece 	bl	80023ec <HAL_GPIO_Init>

  // NOTE: I2C GPIO configuration is now handled in HAL_I2C_MspInit()
  // Remove the I2C GPIO configuration from here to avoid conflicts

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001650:	bf00      	nop
 8001652:	3728      	adds	r7, #40	@ 0x28
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40023800 	.word	0x40023800
 800165c:	40020000 	.word	0x40020000
 8001660:	40021800 	.word	0x40021800

08001664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001668:	b672      	cpsid	i
}
 800166a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <Error_Handler+0x8>

08001670 <MPU6050_Init>:

/**
 * @brief Khởi tạo MPU6050
 * @retval 0 nếu thành công, 1 nếu lỗi
 */
uint8_t MPU6050_Init(I2C_HandleTypeDef *hi2c) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af04      	add	r7, sp, #16
 8001676:	6078      	str	r0, [r7, #4]
    uint8_t check = 0, data = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	73fb      	strb	r3, [r7, #15]
 800167c:	2300      	movs	r3, #0
 800167e:	73bb      	strb	r3, [r7, #14]

    // Đọc thanh ghi WHO_AM_I để kiểm tra thiết bị
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001680:	f04f 33ff 	mov.w	r3, #4294967295
 8001684:	9302      	str	r3, [sp, #8]
 8001686:	2301      	movs	r3, #1
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	f107 030f 	add.w	r3, r7, #15
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2301      	movs	r3, #1
 8001692:	2275      	movs	r2, #117	@ 0x75
 8001694:	21d0      	movs	r1, #208	@ 0xd0
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f001 faac 	bl	8002bf4 <HAL_I2C_Mem_Read>
    if (check != 104) return 1; // 0x68 là ID mặc định của MPU6050
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	2b68      	cmp	r3, #104	@ 0x68
 80016a0:	d001      	beq.n	80016a6 <MPU6050_Init+0x36>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e040      	b.n	8001728 <MPU6050_Init+0xb8>

    // Đưa cảm biến ra khỏi chế độ sleep
    data = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, i2c_timeout);
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	9302      	str	r3, [sp, #8]
 80016b0:	2301      	movs	r3, #1
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	f107 030e 	add.w	r3, r7, #14
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2301      	movs	r3, #1
 80016bc:	226b      	movs	r2, #107	@ 0x6b
 80016be:	21d0      	movs	r1, #208	@ 0xd0
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f001 f99d 	bl	8002a00 <HAL_I2C_Mem_Write>

    // Cấu hình tốc độ lấy mẫu (1KHz / (1 + 7) = 125Hz)
    data = 0x07;
 80016c6:	2307      	movs	r3, #7
 80016c8:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, i2c_timeout);
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
 80016ce:	9302      	str	r3, [sp, #8]
 80016d0:	2301      	movs	r3, #1
 80016d2:	9301      	str	r3, [sp, #4]
 80016d4:	f107 030e 	add.w	r3, r7, #14
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	2301      	movs	r3, #1
 80016dc:	2219      	movs	r2, #25
 80016de:	21d0      	movs	r1, #208	@ 0xd0
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f001 f98d 	bl	8002a00 <HAL_I2C_Mem_Write>

    // Cấu hình gia tốc kế ±2g
    data = 0x00;
 80016e6:	2300      	movs	r3, #0
 80016e8:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, i2c_timeout);
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295
 80016ee:	9302      	str	r3, [sp, #8]
 80016f0:	2301      	movs	r3, #1
 80016f2:	9301      	str	r3, [sp, #4]
 80016f4:	f107 030e 	add.w	r3, r7, #14
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2301      	movs	r3, #1
 80016fc:	221c      	movs	r2, #28
 80016fe:	21d0      	movs	r1, #208	@ 0xd0
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f001 f97d 	bl	8002a00 <HAL_I2C_Mem_Write>

    // Cấu hình con quay hồi chuyển ±250°/s
    data = 0x00;
 8001706:	2300      	movs	r3, #0
 8001708:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, i2c_timeout);
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
 800170e:	9302      	str	r3, [sp, #8]
 8001710:	2301      	movs	r3, #1
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	f107 030e 	add.w	r3, r7, #14
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2301      	movs	r3, #1
 800171c:	221b      	movs	r2, #27
 800171e:	21d0      	movs	r1, #208	@ 0xd0
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f001 f96d 	bl	8002a00 <HAL_I2C_Mem_Write>

    return 0;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <MPU6050_Read_All>:

/**
 * @brief Đọc toàn bộ dữ liệu (gia tốc, nhiệt độ, gyro) và tính góc roll/pitch bằng Kalman
 */
void MPU6050_Read_All(I2C_HandleTypeDef *hi2c, MPU6050_t *data) {
 8001730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001734:	b092      	sub	sp, #72	@ 0x48
 8001736:	af04      	add	r7, sp, #16
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	6039      	str	r1, [r7, #0]
    uint8_t rec_data[14];

    // Đọc 14 byte từ thanh ghi ACCEL_XOUT_H
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, rec_data, 14, i2c_timeout);
 800173c:	f04f 33ff 	mov.w	r3, #4294967295
 8001740:	9302      	str	r3, [sp, #8]
 8001742:	230e      	movs	r3, #14
 8001744:	9301      	str	r3, [sp, #4]
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	2301      	movs	r3, #1
 800174e:	223b      	movs	r2, #59	@ 0x3b
 8001750:	21d0      	movs	r1, #208	@ 0xd0
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f001 fa4e 	bl	8002bf4 <HAL_I2C_Mem_Read>

    // Giải mã dữ liệu gia tốc thô
    data->Accel_X_RAW = (int16_t)(rec_data[0] << 8 | rec_data[1]);
 8001758:	7a3b      	ldrb	r3, [r7, #8]
 800175a:	b21b      	sxth	r3, r3
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	b21a      	sxth	r2, r3
 8001760:	7a7b      	ldrb	r3, [r7, #9]
 8001762:	b21b      	sxth	r3, r3
 8001764:	4313      	orrs	r3, r2
 8001766:	b21a      	sxth	r2, r3
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	801a      	strh	r2, [r3, #0]
    data->Accel_Y_RAW = (int16_t)(rec_data[2] << 8 | rec_data[3]);
 800176c:	7abb      	ldrb	r3, [r7, #10]
 800176e:	b21b      	sxth	r3, r3
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	b21a      	sxth	r2, r3
 8001774:	7afb      	ldrb	r3, [r7, #11]
 8001776:	b21b      	sxth	r3, r3
 8001778:	4313      	orrs	r3, r2
 800177a:	b21a      	sxth	r2, r3
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	805a      	strh	r2, [r3, #2]
    data->Accel_Z_RAW = (int16_t)(rec_data[4] << 8 | rec_data[5]);
 8001780:	7b3b      	ldrb	r3, [r7, #12]
 8001782:	b21b      	sxth	r3, r3
 8001784:	021b      	lsls	r3, r3, #8
 8001786:	b21a      	sxth	r2, r3
 8001788:	7b7b      	ldrb	r3, [r7, #13]
 800178a:	b21b      	sxth	r3, r3
 800178c:	4313      	orrs	r3, r2
 800178e:	b21a      	sxth	r2, r3
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	809a      	strh	r2, [r3, #4]

    // Chuyển đổi gia tốc thô sang đơn vị m/s²
    data->Ax = data->Accel_X_RAW * 981.0f / LSB_ACC;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179a:	ee07 3a90 	vmov	s15, r3
 800179e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a2:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 8001a60 <MPU6050_Read_All+0x330>
 80017a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017aa:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8001a64 <MPU6050_Read_All+0x334>
 80017ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017b2:	ee16 0a90 	vmov	r0, s13
 80017b6:	f7fe fed7 	bl	8000568 <__aeabi_f2d>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	6839      	ldr	r1, [r7, #0]
 80017c0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    data->Ay = data->Accel_Y_RAW * 981.0f / LSB_ACC;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017ca:	ee07 3a90 	vmov	s15, r3
 80017ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d2:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 8001a60 <MPU6050_Read_All+0x330>
 80017d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017da:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8001a64 <MPU6050_Read_All+0x334>
 80017de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017e2:	ee16 0a90 	vmov	r0, s13
 80017e6:	f7fe febf 	bl	8000568 <__aeabi_f2d>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	6839      	ldr	r1, [r7, #0]
 80017f0:	e9c1 2304 	strd	r2, r3, [r1, #16]
    data->Az = data->Accel_Z_RAW * 981.0f / Accel_Z_corrector;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017fa:	ee07 3a90 	vmov	s15, r3
 80017fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001802:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8001a60 <MPU6050_Read_All+0x330>
 8001806:	ee67 7a87 	vmul.f32	s15, s15, s14
 800180a:	ee17 0a90 	vmov	r0, s15
 800180e:	f7fe feab 	bl	8000568 <__aeabi_f2d>
 8001812:	a38f      	add	r3, pc, #572	@ (adr r3, 8001a50 <MPU6050_Read_All+0x320>)
 8001814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001818:	f7ff f828 	bl	800086c <__aeabi_ddiv>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	6839      	ldr	r1, [r7, #0]
 8001822:	e9c1 2306 	strd	r2, r3, [r1, #24]

    // Giải mã dữ liệu gyro
    data->Gyro_X_RAW = (int16_t)(rec_data[8] << 8 | rec_data[9]);
 8001826:	7c3b      	ldrb	r3, [r7, #16]
 8001828:	b21b      	sxth	r3, r3
 800182a:	021b      	lsls	r3, r3, #8
 800182c:	b21a      	sxth	r2, r3
 800182e:	7c7b      	ldrb	r3, [r7, #17]
 8001830:	b21b      	sxth	r3, r3
 8001832:	4313      	orrs	r3, r2
 8001834:	b21a      	sxth	r2, r3
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	841a      	strh	r2, [r3, #32]
    data->Gyro_Y_RAW = (int16_t)(rec_data[10] << 8 | rec_data[11]);
 800183a:	7cbb      	ldrb	r3, [r7, #18]
 800183c:	b21b      	sxth	r3, r3
 800183e:	021b      	lsls	r3, r3, #8
 8001840:	b21a      	sxth	r2, r3
 8001842:	7cfb      	ldrb	r3, [r7, #19]
 8001844:	b21b      	sxth	r3, r3
 8001846:	4313      	orrs	r3, r2
 8001848:	b21a      	sxth	r2, r3
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	845a      	strh	r2, [r3, #34]	@ 0x22
    data->Gyro_Z_RAW = (int16_t)(rec_data[12] << 8 | rec_data[13]);
 800184e:	7d3b      	ldrb	r3, [r7, #20]
 8001850:	b21b      	sxth	r3, r3
 8001852:	021b      	lsls	r3, r3, #8
 8001854:	b21a      	sxth	r2, r3
 8001856:	7d7b      	ldrb	r3, [r7, #21]
 8001858:	b21b      	sxth	r3, r3
 800185a:	4313      	orrs	r3, r2
 800185c:	b21a      	sxth	r2, r3
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	849a      	strh	r2, [r3, #36]	@ 0x24

    // Chuyển gyro từ LSB sang độ/giây (°/s)
    data->Gx = data->Gyro_X_RAW / LSB_GYRO;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001868:	ee07 3a90 	vmov	s15, r3
 800186c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001870:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8001a68 <MPU6050_Read_All+0x338>
 8001874:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001878:	ee16 0a90 	vmov	r0, s13
 800187c:	f7fe fe74 	bl	8000568 <__aeabi_f2d>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	6839      	ldr	r1, [r7, #0]
 8001886:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    data->Gy = data->Gyro_Y_RAW / LSB_GYRO;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001890:	ee07 3a90 	vmov	s15, r3
 8001894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001898:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8001a68 <MPU6050_Read_All+0x338>
 800189c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018a0:	ee16 0a90 	vmov	r0, s13
 80018a4:	f7fe fe60 	bl	8000568 <__aeabi_f2d>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	6839      	ldr	r1, [r7, #0]
 80018ae:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    data->Gz = data->Gyro_Z_RAW / LSB_GYRO;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80018b8:	ee07 3a90 	vmov	s15, r3
 80018bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c0:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8001a68 <MPU6050_Read_All+0x338>
 80018c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018c8:	ee16 0a90 	vmov	r0, s13
 80018cc:	f7fe fe4c 	bl	8000568 <__aeabi_f2d>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	6839      	ldr	r1, [r7, #0]
 80018d6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Tính thời gian dt giữa hai lần đo
    double dt = (double)(HAL_GetTick() - timer) / 1000.0;
 80018da:	f000 fc45 	bl	8002168 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	4b62      	ldr	r3, [pc, #392]	@ (8001a6c <MPU6050_Read_All+0x33c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fe1c 	bl	8000524 <__aeabi_ui2d>
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	4b5f      	ldr	r3, [pc, #380]	@ (8001a70 <MPU6050_Read_All+0x340>)
 80018f2:	f7fe ffbb 	bl	800086c <__aeabi_ddiv>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    timer = HAL_GetTick();
 80018fe:	f000 fc33 	bl	8002168 <HAL_GetTick>
 8001902:	4603      	mov	r3, r0
 8001904:	4a59      	ldr	r2, [pc, #356]	@ (8001a6c <MPU6050_Read_All+0x33c>)
 8001906:	6013      	str	r3, [r2, #0]

    // Tính góc roll từ gia tốc (gần đúng)
    double roll_sqrt = sqrt(data->Accel_X_RAW * data->Accel_X_RAW + data->Accel_Z_RAW * data->Accel_Z_RAW);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800190e:	461a      	mov	r2, r3
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001916:	fb03 f202 	mul.w	r2, r3, r2
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001920:	4619      	mov	r1, r3
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001928:	fb01 f303 	mul.w	r3, r1, r3
 800192c:	4413      	add	r3, r2
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fe08 	bl	8000544 <__aeabi_i2d>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	ec43 2b10 	vmov	d0, r2, r3
 800193c:	f008 fccc 	bl	800a2d8 <sqrt>
 8001940:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
    double roll = (roll_sqrt != 0.0) ? atan(data->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG : 0.0;
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001950:	f7ff f8ca 	bl	8000ae8 <__aeabi_dcmpeq>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d11d      	bne.n	8001996 <MPU6050_Read_All+0x266>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fdef 	bl	8000544 <__aeabi_i2d>
 8001966:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800196a:	f7fe ff7f 	bl	800086c <__aeabi_ddiv>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	ec43 2b17 	vmov	d7, r2, r3
 8001976:	eeb0 0a47 	vmov.f32	s0, s14
 800197a:	eef0 0a67 	vmov.f32	s1, s15
 800197e:	f008 fcd7 	bl	800a330 <atan>
 8001982:	ec51 0b10 	vmov	r0, r1, d0
 8001986:	a334      	add	r3, pc, #208	@ (adr r3, 8001a58 <MPU6050_Read_All+0x328>)
 8001988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198c:	f7fe fe44 	bl	8000618 <__aeabi_dmul>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	e003      	b.n	800199e <MPU6050_Read_All+0x26e>
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Tính góc pitch từ gia tốc bằng atan2
    double pitch = atan2(-data->Accel_X_RAW, data->Accel_Z_RAW) * RAD_TO_DEG;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a8:	425b      	negs	r3, r3
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fdca 	bl	8000544 <__aeabi_i2d>
 80019b0:	4682      	mov	sl, r0
 80019b2:	468b      	mov	fp, r1
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fdc2 	bl	8000544 <__aeabi_i2d>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	ec43 2b11 	vmov	d1, r2, r3
 80019c8:	ec4b ab10 	vmov	d0, sl, fp
 80019cc:	f008 fc82 	bl	800a2d4 <atan2>
 80019d0:	ec51 0b10 	vmov	r0, r1, d0
 80019d4:	a320      	add	r3, pc, #128	@ (adr r3, 8001a58 <MPU6050_Read_All+0x328>)
 80019d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019da:	f7fe fe1d 	bl	8000618 <__aeabi_dmul>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // Bảo vệ bộ lọc Kalman khỏi nhảy đột ngột khi pitch vượt ±90°
    if ((pitch < -90 && data->KalmanAngleY > 90) || (pitch > 90 && data->KalmanAngleY < -90)) {
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	4b22      	ldr	r3, [pc, #136]	@ (8001a74 <MPU6050_Read_All+0x344>)
 80019ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019f0:	f7ff f884 	bl	8000afc <__aeabi_dcmplt>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00a      	beq.n	8001a10 <MPU6050_Read_All+0x2e0>
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	4b1c      	ldr	r3, [pc, #112]	@ (8001a78 <MPU6050_Read_All+0x348>)
 8001a06:	f7ff f897 	bl	8000b38 <__aeabi_dcmpgt>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d114      	bne.n	8001a3a <MPU6050_Read_All+0x30a>
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	4b18      	ldr	r3, [pc, #96]	@ (8001a78 <MPU6050_Read_All+0x348>)
 8001a16:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a1a:	f7ff f88d 	bl	8000b38 <__aeabi_dcmpgt>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d02d      	beq.n	8001a80 <MPU6050_Read_All+0x350>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <MPU6050_Read_All+0x344>)
 8001a30:	f7ff f864 	bl	8000afc <__aeabi_dcmplt>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d022      	beq.n	8001a80 <MPU6050_Read_All+0x350>
        KalmanY.angle = pitch;
 8001a3a:	4910      	ldr	r1, [pc, #64]	@ (8001a7c <MPU6050_Read_All+0x34c>)
 8001a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a40:	e9c1 2306 	strd	r2, r3, [r1, #24]
        data->KalmanAngleY = pitch;
 8001a44:	6839      	ldr	r1, [r7, #0]
 8001a46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a4a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001a4e:	e02c      	b.n	8001aaa <MPU6050_Read_All+0x37a>
 8001a50:	00000000 	.word	0x00000000
 8001a54:	40cc2900 	.word	0x40cc2900
 8001a58:	1a63c1f8 	.word	0x1a63c1f8
 8001a5c:	404ca5dc 	.word	0x404ca5dc
 8001a60:	44754000 	.word	0x44754000
 8001a64:	46800000 	.word	0x46800000
 8001a68:	43030000 	.word	0x43030000
 8001a6c:	20000310 	.word	0x20000310
 8001a70:	408f4000 	.word	0x408f4000
 8001a74:	c0568000 	.word	0xc0568000
 8001a78:	40568000 	.word	0x40568000
 8001a7c:	20000048 	.word	0x20000048
    } else {
        data->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, data->Gy, dt);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8001a86:	ed97 2b0c 	vldr	d2, [r7, #48]	@ 0x30
 8001a8a:	eeb0 1a47 	vmov.f32	s2, s14
 8001a8e:	eef0 1a67 	vmov.f32	s3, s15
 8001a92:	ed97 0b06 	vldr	d0, [r7, #24]
 8001a96:	481e      	ldr	r0, [pc, #120]	@ (8001b10 <MPU6050_Read_All+0x3e0>)
 8001a98:	f000 f840 	bl	8001b1c <Kalman_getAngle>
 8001a9c:	eeb0 7a40 	vmov.f32	s14, s0
 8001aa0:	eef0 7a60 	vmov.f32	s15, s1
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }

    // Nếu pitch vượt ±90°, đảo chiều trục X
    if (fabs(data->KalmanAngleY) > 90)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001ab0:	4690      	mov	r8, r2
 8001ab2:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	4b16      	ldr	r3, [pc, #88]	@ (8001b14 <MPU6050_Read_All+0x3e4>)
 8001abc:	4640      	mov	r0, r8
 8001abe:	4649      	mov	r1, r9
 8001ac0:	f7ff f83a 	bl	8000b38 <__aeabi_dcmpgt>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d008      	beq.n	8001adc <MPU6050_Read_All+0x3ac>
        data->Gx = -data->Gx;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001ad0:	4614      	mov	r4, r2
 8001ad2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28

    // Cập nhật roll bằng Kalman filter
    data->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, data->Gy, dt);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8001ae2:	ed97 2b0c 	vldr	d2, [r7, #48]	@ 0x30
 8001ae6:	eeb0 1a47 	vmov.f32	s2, s14
 8001aea:	eef0 1a67 	vmov.f32	s3, s15
 8001aee:	ed97 0b08 	vldr	d0, [r7, #32]
 8001af2:	4809      	ldr	r0, [pc, #36]	@ (8001b18 <MPU6050_Read_All+0x3e8>)
 8001af4:	f000 f812 	bl	8001b1c <Kalman_getAngle>
 8001af8:	eeb0 7a40 	vmov.f32	s14, s0
 8001afc:	eef0 7a60 	vmov.f32	s15, s1
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 8001b06:	bf00      	nop
 8001b08:	3738      	adds	r7, #56	@ 0x38
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b10:	20000048 	.word	0x20000048
 8001b14:	40568000 	.word	0x40568000
 8001b18:	20000000 	.word	0x20000000

08001b1c <Kalman_getAngle>:

/**
 * @brief Bộ lọc Kalman 1 chiều cho dữ liệu góc
 */
double Kalman_getAngle(Kalman_t *kalman, double newAngle, double newRate, double dt) {
 8001b1c:	b5b0      	push	{r4, r5, r7, lr}
 8001b1e:	b096      	sub	sp, #88	@ 0x58
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	61f8      	str	r0, [r7, #28]
 8001b24:	ed87 0b04 	vstr	d0, [r7, #16]
 8001b28:	ed87 1b02 	vstr	d1, [r7, #8]
 8001b2c:	ed87 2b00 	vstr	d2, [r7]
    // Dự đoán bước tiếp theo
    double rate = newRate - kalman->bias;
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001b36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b3a:	f7fe fbb5 	bl	80002a8 <__aeabi_dsub>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    kalman->angle += dt * rate;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001b4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001b50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b54:	f7fe fd60 	bl	8000618 <__aeabi_dmul>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	4629      	mov	r1, r5
 8001b60:	f7fe fba4 	bl	80002ac <__adddf3>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	69f9      	ldr	r1, [r7, #28]
 8001b6a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    // Cập nhật ma trận hiệp phương sai
    kalman->P[0][0] += dt * (dt * kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001b7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b7e:	f7fe fd4b 	bl	8000618 <__aeabi_dmul>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4610      	mov	r0, r2
 8001b88:	4619      	mov	r1, r3
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001b90:	f7fe fb8a 	bl	80002a8 <__aeabi_dsub>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4610      	mov	r0, r2
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001ba2:	f7fe fb81 	bl	80002a8 <__aeabi_dsub>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb4:	f7fe fb7a 	bl	80002ac <__adddf3>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bc4:	f7fe fd28 	bl	8000618 <__aeabi_dmul>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4620      	mov	r0, r4
 8001bce:	4629      	mov	r1, r5
 8001bd0:	f7fe fb6c 	bl	80002ac <__adddf3>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	69f9      	ldr	r1, [r7, #28]
 8001bda:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    kalman->P[0][1] -= dt * kalman->P[1][1];
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001bea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bee:	f7fe fd13 	bl	8000618 <__aeabi_dmul>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	4629      	mov	r1, r5
 8001bfa:	f7fe fb55 	bl	80002a8 <__aeabi_dsub>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	69f9      	ldr	r1, [r7, #28]
 8001c04:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    kalman->P[1][0] -= dt * kalman->P[1][1];
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001c14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c18:	f7fe fcfe 	bl	8000618 <__aeabi_dmul>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4620      	mov	r0, r4
 8001c22:	4629      	mov	r1, r5
 8001c24:	f7fe fb40 	bl	80002a8 <__aeabi_dsub>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	69f9      	ldr	r1, [r7, #28]
 8001c2e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    kalman->P[1][1] += kalman->Q_bias * dt;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c42:	f7fe fce9 	bl	8000618 <__aeabi_dmul>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	4629      	mov	r1, r5
 8001c4e:	f7fe fb2d 	bl	80002ac <__adddf3>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	69f9      	ldr	r1, [r7, #28]
 8001c58:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    // Tính độ tin cậy đo (S)
    double S = kalman->P[0][0] + kalman->R_measure;
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c68:	f7fe fb20 	bl	80002ac <__adddf3>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    // Kalman Gain
    double K[2];
    K[0] = kalman->P[0][0] / S;
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001c7a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001c7e:	f7fe fdf5 	bl	800086c <__aeabi_ddiv>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = kalman->P[1][0] / S;
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001c90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001c94:	f7fe fdea 	bl	800086c <__aeabi_ddiv>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    // Sai số giữa đo và dự đoán
    double y = newAngle - kalman->angle;
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001ca6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001caa:	f7fe fafd 	bl	80002a8 <__aeabi_dsub>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

    // Cập nhật góc và bias
    kalman->angle += K[0] * y;
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001cbc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cc0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001cc4:	f7fe fca8 	bl	8000618 <__aeabi_dmul>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4620      	mov	r0, r4
 8001cce:	4629      	mov	r1, r5
 8001cd0:	f7fe faec 	bl	80002ac <__adddf3>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	69f9      	ldr	r1, [r7, #28]
 8001cda:	e9c1 2306 	strd	r2, r3, [r1, #24]
    kalman->bias += K[1] * y;
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001ce4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001ce8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001cec:	f7fe fc94 	bl	8000618 <__aeabi_dmul>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	4629      	mov	r1, r5
 8001cf8:	f7fe fad8 	bl	80002ac <__adddf3>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	69f9      	ldr	r1, [r7, #28]
 8001d02:	e9c1 2308 	strd	r2, r3, [r1, #32]

    // Cập nhật lại ma trận P
    double P00_temp = kalman->P[0][0];
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001d0c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = kalman->P[0][1];
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001d16:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    kalman->P[0][0] -= K[0] * P00_temp;
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001d20:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001d28:	f7fe fc76 	bl	8000618 <__aeabi_dmul>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4620      	mov	r0, r4
 8001d32:	4629      	mov	r1, r5
 8001d34:	f7fe fab8 	bl	80002a8 <__aeabi_dsub>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	69f9      	ldr	r1, [r7, #28]
 8001d3e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    kalman->P[0][1] -= K[0] * P01_temp;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001d48:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d4c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d50:	f7fe fc62 	bl	8000618 <__aeabi_dmul>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4620      	mov	r0, r4
 8001d5a:	4629      	mov	r1, r5
 8001d5c:	f7fe faa4 	bl	80002a8 <__aeabi_dsub>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	69f9      	ldr	r1, [r7, #28]
 8001d66:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    kalman->P[1][0] -= K[1] * P00_temp;
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001d70:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001d74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001d78:	f7fe fc4e 	bl	8000618 <__aeabi_dmul>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4620      	mov	r0, r4
 8001d82:	4629      	mov	r1, r5
 8001d84:	f7fe fa90 	bl	80002a8 <__aeabi_dsub>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	69f9      	ldr	r1, [r7, #28]
 8001d8e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    kalman->P[1][1] -= K[1] * P01_temp;
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001d98:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001d9c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001da0:	f7fe fc3a 	bl	8000618 <__aeabi_dmul>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4620      	mov	r0, r4
 8001daa:	4629      	mov	r1, r5
 8001dac:	f7fe fa7c 	bl	80002a8 <__aeabi_dsub>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	69f9      	ldr	r1, [r7, #28]
 8001db6:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return kalman->angle;
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001dc0:	ec43 2b17 	vmov	d7, r2, r3
}
 8001dc4:	eeb0 0a47 	vmov.f32	s0, s14
 8001dc8:	eef0 0a67 	vmov.f32	s1, s15
 8001dcc:	3758      	adds	r7, #88	@ 0x58
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
 8001dde:	4b10      	ldr	r3, [pc, #64]	@ (8001e20 <HAL_MspInit+0x4c>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de2:	4a0f      	ldr	r2, [pc, #60]	@ (8001e20 <HAL_MspInit+0x4c>)
 8001de4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001de8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dea:	4b0d      	ldr	r3, [pc, #52]	@ (8001e20 <HAL_MspInit+0x4c>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	4b09      	ldr	r3, [pc, #36]	@ (8001e20 <HAL_MspInit+0x4c>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfe:	4a08      	ldr	r2, [pc, #32]	@ (8001e20 <HAL_MspInit+0x4c>)
 8001e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e06:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <HAL_MspInit+0x4c>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800

08001e24 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	@ 0x28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a19      	ldr	r2, [pc, #100]	@ (8001ea8 <HAL_I2C_MspInit+0x84>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d12b      	bne.n	8001e9e <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	4b18      	ldr	r3, [pc, #96]	@ (8001eac <HAL_I2C_MspInit+0x88>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	4a17      	ldr	r2, [pc, #92]	@ (8001eac <HAL_I2C_MspInit+0x88>)
 8001e50:	f043 0302 	orr.w	r3, r3, #2
 8001e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e56:	4b15      	ldr	r3, [pc, #84]	@ (8001eac <HAL_I2C_MspInit+0x88>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e62:	23c0      	movs	r3, #192	@ 0xc0
 8001e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e66:	2312      	movs	r3, #18
 8001e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e72:	2304      	movs	r3, #4
 8001e74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e76:	f107 0314 	add.w	r3, r7, #20
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	480c      	ldr	r0, [pc, #48]	@ (8001eb0 <HAL_I2C_MspInit+0x8c>)
 8001e7e:	f000 fab5 	bl	80023ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b09      	ldr	r3, [pc, #36]	@ (8001eac <HAL_I2C_MspInit+0x88>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	4a08      	ldr	r2, [pc, #32]	@ (8001eac <HAL_I2C_MspInit+0x88>)
 8001e8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e92:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <HAL_I2C_MspInit+0x88>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e9e:	bf00      	nop
 8001ea0:	3728      	adds	r7, #40	@ 0x28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40005400 	.word	0x40005400
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40020400 	.word	0x40020400

08001eb4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08a      	sub	sp, #40	@ 0x28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a19      	ldr	r2, [pc, #100]	@ (8001f38 <HAL_UART_MspInit+0x84>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d12c      	bne.n	8001f30 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	4b18      	ldr	r3, [pc, #96]	@ (8001f3c <HAL_UART_MspInit+0x88>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ede:	4a17      	ldr	r2, [pc, #92]	@ (8001f3c <HAL_UART_MspInit+0x88>)
 8001ee0:	f043 0310 	orr.w	r3, r3, #16
 8001ee4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ee6:	4b15      	ldr	r3, [pc, #84]	@ (8001f3c <HAL_UART_MspInit+0x88>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eea:	f003 0310 	and.w	r3, r3, #16
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	4b11      	ldr	r3, [pc, #68]	@ (8001f3c <HAL_UART_MspInit+0x88>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	4a10      	ldr	r2, [pc, #64]	@ (8001f3c <HAL_UART_MspInit+0x88>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f02:	4b0e      	ldr	r3, [pc, #56]	@ (8001f3c <HAL_UART_MspInit+0x88>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f0e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f14:	2302      	movs	r3, #2
 8001f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f20:	2307      	movs	r3, #7
 8001f22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4805      	ldr	r0, [pc, #20]	@ (8001f40 <HAL_UART_MspInit+0x8c>)
 8001f2c:	f000 fa5e 	bl	80023ec <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001f30:	bf00      	nop
 8001f32:	3728      	adds	r7, #40	@ 0x28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40011000 	.word	0x40011000
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40020000 	.word	0x40020000

08001f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f48:	bf00      	nop
 8001f4a:	e7fd      	b.n	8001f48 <NMI_Handler+0x4>

08001f4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <HardFault_Handler+0x4>

08001f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <MemManage_Handler+0x4>

08001f5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f60:	bf00      	nop
 8001f62:	e7fd      	b.n	8001f60 <BusFault_Handler+0x4>

08001f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f68:	bf00      	nop
 8001f6a:	e7fd      	b.n	8001f68 <UsageFault_Handler+0x4>

08001f6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f9a:	f000 f8d1 	bl	8002140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001fa8:	4802      	ldr	r0, [pc, #8]	@ (8001fb4 <OTG_FS_IRQHandler+0x10>)
 8001faa:	f001 fe7b 	bl	8003ca4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200007fc 	.word	0x200007fc

08001fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fc0:	4a14      	ldr	r2, [pc, #80]	@ (8002014 <_sbrk+0x5c>)
 8001fc2:	4b15      	ldr	r3, [pc, #84]	@ (8002018 <_sbrk+0x60>)
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fcc:	4b13      	ldr	r3, [pc, #76]	@ (800201c <_sbrk+0x64>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d102      	bne.n	8001fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fd4:	4b11      	ldr	r3, [pc, #68]	@ (800201c <_sbrk+0x64>)
 8001fd6:	4a12      	ldr	r2, [pc, #72]	@ (8002020 <_sbrk+0x68>)
 8001fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fda:	4b10      	ldr	r3, [pc, #64]	@ (800201c <_sbrk+0x64>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d207      	bcs.n	8001ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fe8:	f007 fcfe 	bl	80099e8 <__errno>
 8001fec:	4603      	mov	r3, r0
 8001fee:	220c      	movs	r2, #12
 8001ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff6:	e009      	b.n	800200c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ff8:	4b08      	ldr	r3, [pc, #32]	@ (800201c <_sbrk+0x64>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ffe:	4b07      	ldr	r3, [pc, #28]	@ (800201c <_sbrk+0x64>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	4a05      	ldr	r2, [pc, #20]	@ (800201c <_sbrk+0x64>)
 8002008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800200a:	68fb      	ldr	r3, [r7, #12]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20030000 	.word	0x20030000
 8002018:	00000400 	.word	0x00000400
 800201c:	20000314 	.word	0x20000314
 8002020:	20000e40 	.word	0x20000e40

08002024 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002028:	4b06      	ldr	r3, [pc, #24]	@ (8002044 <SystemInit+0x20>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202e:	4a05      	ldr	r2, [pc, #20]	@ (8002044 <SystemInit+0x20>)
 8002030:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002034:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002048:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002080 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800204c:	f7ff ffea 	bl	8002024 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002050:	480c      	ldr	r0, [pc, #48]	@ (8002084 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002052:	490d      	ldr	r1, [pc, #52]	@ (8002088 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002054:	4a0d      	ldr	r2, [pc, #52]	@ (800208c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002058:	e002      	b.n	8002060 <LoopCopyDataInit>

0800205a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800205a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800205c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800205e:	3304      	adds	r3, #4

08002060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002064:	d3f9      	bcc.n	800205a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002066:	4a0a      	ldr	r2, [pc, #40]	@ (8002090 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002068:	4c0a      	ldr	r4, [pc, #40]	@ (8002094 <LoopFillZerobss+0x22>)
  movs r3, #0
 800206a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800206c:	e001      	b.n	8002072 <LoopFillZerobss>

0800206e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800206e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002070:	3204      	adds	r2, #4

08002072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002074:	d3fb      	bcc.n	800206e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002076:	f007 fcbd 	bl	80099f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800207a:	f7ff f909 	bl	8001290 <main>
  bx  lr    
 800207e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002080:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002088:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 800208c:	0800ac00 	.word	0x0800ac00
  ldr r2, =_sbss
 8002090:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8002094:	20000e3c 	.word	0x20000e3c

08002098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002098:	e7fe      	b.n	8002098 <ADC_IRQHandler>
	...

0800209c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020a0:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <HAL_Init+0x40>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a0d      	ldr	r2, [pc, #52]	@ (80020dc <HAL_Init+0x40>)
 80020a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020ac:	4b0b      	ldr	r3, [pc, #44]	@ (80020dc <HAL_Init+0x40>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0a      	ldr	r2, [pc, #40]	@ (80020dc <HAL_Init+0x40>)
 80020b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b8:	4b08      	ldr	r3, [pc, #32]	@ (80020dc <HAL_Init+0x40>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a07      	ldr	r2, [pc, #28]	@ (80020dc <HAL_Init+0x40>)
 80020be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c4:	2003      	movs	r0, #3
 80020c6:	f000 f94f 	bl	8002368 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ca:	200f      	movs	r0, #15
 80020cc:	f000 f808 	bl	80020e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020d0:	f7ff fe80 	bl	8001dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023c00 	.word	0x40023c00

080020e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020e8:	4b12      	ldr	r3, [pc, #72]	@ (8002134 <HAL_InitTick+0x54>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4b12      	ldr	r3, [pc, #72]	@ (8002138 <HAL_InitTick+0x58>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	4619      	mov	r1, r3
 80020f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 f967 	bl	80023d2 <HAL_SYSTICK_Config>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e00e      	b.n	800212c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b0f      	cmp	r3, #15
 8002112:	d80a      	bhi.n	800212a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002114:	2200      	movs	r2, #0
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	f04f 30ff 	mov.w	r0, #4294967295
 800211c:	f000 f92f 	bl	800237e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002120:	4a06      	ldr	r2, [pc, #24]	@ (800213c <HAL_InitTick+0x5c>)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	e000      	b.n	800212c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
}
 800212c:	4618      	mov	r0, r3
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000090 	.word	0x20000090
 8002138:	20000098 	.word	0x20000098
 800213c:	20000094 	.word	0x20000094

08002140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002144:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <HAL_IncTick+0x20>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <HAL_IncTick+0x24>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4413      	add	r3, r2
 8002150:	4a04      	ldr	r2, [pc, #16]	@ (8002164 <HAL_IncTick+0x24>)
 8002152:	6013      	str	r3, [r2, #0]
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20000098 	.word	0x20000098
 8002164:	20000318 	.word	0x20000318

08002168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return uwTick;
 800216c:	4b03      	ldr	r3, [pc, #12]	@ (800217c <HAL_GetTick+0x14>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000318 	.word	0x20000318

08002180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002188:	f7ff ffee 	bl	8002168 <HAL_GetTick>
 800218c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002198:	d005      	beq.n	80021a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800219a:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <HAL_Delay+0x44>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	461a      	mov	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4413      	add	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021a6:	bf00      	nop
 80021a8:	f7ff ffde 	bl	8002168 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d8f7      	bhi.n	80021a8 <HAL_Delay+0x28>
  {
  }
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000098 	.word	0x20000098

080021c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d8:	4b0c      	ldr	r3, [pc, #48]	@ (800220c <__NVIC_SetPriorityGrouping+0x44>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021e4:	4013      	ands	r3, r2
 80021e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021fa:	4a04      	ldr	r2, [pc, #16]	@ (800220c <__NVIC_SetPriorityGrouping+0x44>)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	60d3      	str	r3, [r2, #12]
}
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002214:	4b04      	ldr	r3, [pc, #16]	@ (8002228 <__NVIC_GetPriorityGrouping+0x18>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	0a1b      	lsrs	r3, r3, #8
 800221a:	f003 0307 	and.w	r3, r3, #7
}
 800221e:	4618      	mov	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	2b00      	cmp	r3, #0
 800223c:	db0b      	blt.n	8002256 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	f003 021f 	and.w	r2, r3, #31
 8002244:	4907      	ldr	r1, [pc, #28]	@ (8002264 <__NVIC_EnableIRQ+0x38>)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	2001      	movs	r0, #1
 800224e:	fa00 f202 	lsl.w	r2, r0, r2
 8002252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000e100 	.word	0xe000e100

08002268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	6039      	str	r1, [r7, #0]
 8002272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002278:	2b00      	cmp	r3, #0
 800227a:	db0a      	blt.n	8002292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	b2da      	uxtb	r2, r3
 8002280:	490c      	ldr	r1, [pc, #48]	@ (80022b4 <__NVIC_SetPriority+0x4c>)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	0112      	lsls	r2, r2, #4
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	440b      	add	r3, r1
 800228c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002290:	e00a      	b.n	80022a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4908      	ldr	r1, [pc, #32]	@ (80022b8 <__NVIC_SetPriority+0x50>)
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	3b04      	subs	r3, #4
 80022a0:	0112      	lsls	r2, r2, #4
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	440b      	add	r3, r1
 80022a6:	761a      	strb	r2, [r3, #24]
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000e100 	.word	0xe000e100
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022bc:	b480      	push	{r7}
 80022be:	b089      	sub	sp, #36	@ 0x24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f1c3 0307 	rsb	r3, r3, #7
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	bf28      	it	cs
 80022da:	2304      	movcs	r3, #4
 80022dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3304      	adds	r3, #4
 80022e2:	2b06      	cmp	r3, #6
 80022e4:	d902      	bls.n	80022ec <NVIC_EncodePriority+0x30>
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3b03      	subs	r3, #3
 80022ea:	e000      	b.n	80022ee <NVIC_EncodePriority+0x32>
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f0:	f04f 32ff 	mov.w	r2, #4294967295
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43da      	mvns	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	401a      	ands	r2, r3
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002304:	f04f 31ff 	mov.w	r1, #4294967295
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	fa01 f303 	lsl.w	r3, r1, r3
 800230e:	43d9      	mvns	r1, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002314:	4313      	orrs	r3, r2
         );
}
 8002316:	4618      	mov	r0, r3
 8002318:	3724      	adds	r7, #36	@ 0x24
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3b01      	subs	r3, #1
 8002330:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002334:	d301      	bcc.n	800233a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002336:	2301      	movs	r3, #1
 8002338:	e00f      	b.n	800235a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800233a:	4a0a      	ldr	r2, [pc, #40]	@ (8002364 <SysTick_Config+0x40>)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3b01      	subs	r3, #1
 8002340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002342:	210f      	movs	r1, #15
 8002344:	f04f 30ff 	mov.w	r0, #4294967295
 8002348:	f7ff ff8e 	bl	8002268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800234c:	4b05      	ldr	r3, [pc, #20]	@ (8002364 <SysTick_Config+0x40>)
 800234e:	2200      	movs	r2, #0
 8002350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002352:	4b04      	ldr	r3, [pc, #16]	@ (8002364 <SysTick_Config+0x40>)
 8002354:	2207      	movs	r2, #7
 8002356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	e000e010 	.word	0xe000e010

08002368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff ff29 	bl	80021c8 <__NVIC_SetPriorityGrouping>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800237e:	b580      	push	{r7, lr}
 8002380:	b086      	sub	sp, #24
 8002382:	af00      	add	r7, sp, #0
 8002384:	4603      	mov	r3, r0
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002390:	f7ff ff3e 	bl	8002210 <__NVIC_GetPriorityGrouping>
 8002394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68b9      	ldr	r1, [r7, #8]
 800239a:	6978      	ldr	r0, [r7, #20]
 800239c:	f7ff ff8e 	bl	80022bc <NVIC_EncodePriority>
 80023a0:	4602      	mov	r2, r0
 80023a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff5d 	bl	8002268 <__NVIC_SetPriority>
}
 80023ae:	bf00      	nop
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4603      	mov	r3, r0
 80023be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff31 	bl	800222c <__NVIC_EnableIRQ>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ffa2 	bl	8002324 <SysTick_Config>
 80023e0:	4603      	mov	r3, r0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	@ 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023fe:	2300      	movs	r3, #0
 8002400:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	e177      	b.n	80026f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002408:	2201      	movs	r2, #1
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	429a      	cmp	r2, r3
 8002422:	f040 8166 	bne.w	80026f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	2b01      	cmp	r3, #1
 8002430:	d005      	beq.n	800243e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800243a:	2b02      	cmp	r3, #2
 800243c:	d130      	bne.n	80024a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	2203      	movs	r2, #3
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002474:	2201      	movs	r2, #1
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	f003 0201 	and.w	r2, r3, #1
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d017      	beq.n	80024dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	2203      	movs	r2, #3
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d123      	bne.n	8002530 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	08da      	lsrs	r2, r3, #3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3208      	adds	r2, #8
 80024f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	220f      	movs	r2, #15
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	08da      	lsrs	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3208      	adds	r2, #8
 800252a:	69b9      	ldr	r1, [r7, #24]
 800252c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	2203      	movs	r2, #3
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0203 	and.w	r2, r3, #3
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 80c0 	beq.w	80026f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	4b66      	ldr	r3, [pc, #408]	@ (8002710 <HAL_GPIO_Init+0x324>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257a:	4a65      	ldr	r2, [pc, #404]	@ (8002710 <HAL_GPIO_Init+0x324>)
 800257c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002580:	6453      	str	r3, [r2, #68]	@ 0x44
 8002582:	4b63      	ldr	r3, [pc, #396]	@ (8002710 <HAL_GPIO_Init+0x324>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002586:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800258e:	4a61      	ldr	r2, [pc, #388]	@ (8002714 <HAL_GPIO_Init+0x328>)
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	089b      	lsrs	r3, r3, #2
 8002594:	3302      	adds	r3, #2
 8002596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	220f      	movs	r2, #15
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a58      	ldr	r2, [pc, #352]	@ (8002718 <HAL_GPIO_Init+0x32c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d037      	beq.n	800262a <HAL_GPIO_Init+0x23e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a57      	ldr	r2, [pc, #348]	@ (800271c <HAL_GPIO_Init+0x330>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d031      	beq.n	8002626 <HAL_GPIO_Init+0x23a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a56      	ldr	r2, [pc, #344]	@ (8002720 <HAL_GPIO_Init+0x334>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d02b      	beq.n	8002622 <HAL_GPIO_Init+0x236>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a55      	ldr	r2, [pc, #340]	@ (8002724 <HAL_GPIO_Init+0x338>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d025      	beq.n	800261e <HAL_GPIO_Init+0x232>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a54      	ldr	r2, [pc, #336]	@ (8002728 <HAL_GPIO_Init+0x33c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d01f      	beq.n	800261a <HAL_GPIO_Init+0x22e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a53      	ldr	r2, [pc, #332]	@ (800272c <HAL_GPIO_Init+0x340>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d019      	beq.n	8002616 <HAL_GPIO_Init+0x22a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a52      	ldr	r2, [pc, #328]	@ (8002730 <HAL_GPIO_Init+0x344>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d013      	beq.n	8002612 <HAL_GPIO_Init+0x226>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a51      	ldr	r2, [pc, #324]	@ (8002734 <HAL_GPIO_Init+0x348>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00d      	beq.n	800260e <HAL_GPIO_Init+0x222>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a50      	ldr	r2, [pc, #320]	@ (8002738 <HAL_GPIO_Init+0x34c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d007      	beq.n	800260a <HAL_GPIO_Init+0x21e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4f      	ldr	r2, [pc, #316]	@ (800273c <HAL_GPIO_Init+0x350>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <HAL_GPIO_Init+0x21a>
 8002602:	2309      	movs	r3, #9
 8002604:	e012      	b.n	800262c <HAL_GPIO_Init+0x240>
 8002606:	230a      	movs	r3, #10
 8002608:	e010      	b.n	800262c <HAL_GPIO_Init+0x240>
 800260a:	2308      	movs	r3, #8
 800260c:	e00e      	b.n	800262c <HAL_GPIO_Init+0x240>
 800260e:	2307      	movs	r3, #7
 8002610:	e00c      	b.n	800262c <HAL_GPIO_Init+0x240>
 8002612:	2306      	movs	r3, #6
 8002614:	e00a      	b.n	800262c <HAL_GPIO_Init+0x240>
 8002616:	2305      	movs	r3, #5
 8002618:	e008      	b.n	800262c <HAL_GPIO_Init+0x240>
 800261a:	2304      	movs	r3, #4
 800261c:	e006      	b.n	800262c <HAL_GPIO_Init+0x240>
 800261e:	2303      	movs	r3, #3
 8002620:	e004      	b.n	800262c <HAL_GPIO_Init+0x240>
 8002622:	2302      	movs	r3, #2
 8002624:	e002      	b.n	800262c <HAL_GPIO_Init+0x240>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <HAL_GPIO_Init+0x240>
 800262a:	2300      	movs	r3, #0
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	f002 0203 	and.w	r2, r2, #3
 8002632:	0092      	lsls	r2, r2, #2
 8002634:	4093      	lsls	r3, r2
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800263c:	4935      	ldr	r1, [pc, #212]	@ (8002714 <HAL_GPIO_Init+0x328>)
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	089b      	lsrs	r3, r3, #2
 8002642:	3302      	adds	r3, #2
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800264a:	4b3d      	ldr	r3, [pc, #244]	@ (8002740 <HAL_GPIO_Init+0x354>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800266e:	4a34      	ldr	r2, [pc, #208]	@ (8002740 <HAL_GPIO_Init+0x354>)
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002674:	4b32      	ldr	r3, [pc, #200]	@ (8002740 <HAL_GPIO_Init+0x354>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002698:	4a29      	ldr	r2, [pc, #164]	@ (8002740 <HAL_GPIO_Init+0x354>)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800269e:	4b28      	ldr	r3, [pc, #160]	@ (8002740 <HAL_GPIO_Init+0x354>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002740 <HAL_GPIO_Init+0x354>)
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002740 <HAL_GPIO_Init+0x354>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ec:	4a14      	ldr	r2, [pc, #80]	@ (8002740 <HAL_GPIO_Init+0x354>)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3301      	adds	r3, #1
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	2b0f      	cmp	r3, #15
 80026fc:	f67f ae84 	bls.w	8002408 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	3724      	adds	r7, #36	@ 0x24
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800
 8002714:	40013800 	.word	0x40013800
 8002718:	40020000 	.word	0x40020000
 800271c:	40020400 	.word	0x40020400
 8002720:	40020800 	.word	0x40020800
 8002724:	40020c00 	.word	0x40020c00
 8002728:	40021000 	.word	0x40021000
 800272c:	40021400 	.word	0x40021400
 8002730:	40021800 	.word	0x40021800
 8002734:	40021c00 	.word	0x40021c00
 8002738:	40022000 	.word	0x40022000
 800273c:	40022400 	.word	0x40022400
 8002740:	40013c00 	.word	0x40013c00

08002744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	807b      	strh	r3, [r7, #2]
 8002750:	4613      	mov	r3, r2
 8002752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002754:	787b      	ldrb	r3, [r7, #1]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800275a:	887a      	ldrh	r2, [r7, #2]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002760:	e003      	b.n	800276a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002762:	887b      	ldrh	r3, [r7, #2]
 8002764:	041a      	lsls	r2, r3, #16
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	619a      	str	r2, [r3, #24]
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
	...

08002778 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e12b      	b.n	80029e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d106      	bne.n	80027a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff fb40 	bl	8001e24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2224      	movs	r2, #36	@ 0x24
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0201 	bic.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027dc:	f002 ffc8 	bl	8005770 <HAL_RCC_GetPCLK1Freq>
 80027e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4a81      	ldr	r2, [pc, #516]	@ (80029ec <HAL_I2C_Init+0x274>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d807      	bhi.n	80027fc <HAL_I2C_Init+0x84>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4a80      	ldr	r2, [pc, #512]	@ (80029f0 <HAL_I2C_Init+0x278>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	bf94      	ite	ls
 80027f4:	2301      	movls	r3, #1
 80027f6:	2300      	movhi	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	e006      	b.n	800280a <HAL_I2C_Init+0x92>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4a7d      	ldr	r2, [pc, #500]	@ (80029f4 <HAL_I2C_Init+0x27c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	bf94      	ite	ls
 8002804:	2301      	movls	r3, #1
 8002806:	2300      	movhi	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e0e7      	b.n	80029e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	4a78      	ldr	r2, [pc, #480]	@ (80029f8 <HAL_I2C_Init+0x280>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	0c9b      	lsrs	r3, r3, #18
 800281c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	430a      	orrs	r2, r1
 8002830:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	4a6a      	ldr	r2, [pc, #424]	@ (80029ec <HAL_I2C_Init+0x274>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d802      	bhi.n	800284c <HAL_I2C_Init+0xd4>
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	3301      	adds	r3, #1
 800284a:	e009      	b.n	8002860 <HAL_I2C_Init+0xe8>
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002852:	fb02 f303 	mul.w	r3, r2, r3
 8002856:	4a69      	ldr	r2, [pc, #420]	@ (80029fc <HAL_I2C_Init+0x284>)
 8002858:	fba2 2303 	umull	r2, r3, r2, r3
 800285c:	099b      	lsrs	r3, r3, #6
 800285e:	3301      	adds	r3, #1
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	430b      	orrs	r3, r1
 8002866:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002872:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	495c      	ldr	r1, [pc, #368]	@ (80029ec <HAL_I2C_Init+0x274>)
 800287c:	428b      	cmp	r3, r1
 800287e:	d819      	bhi.n	80028b4 <HAL_I2C_Init+0x13c>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1e59      	subs	r1, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	fbb1 f3f3 	udiv	r3, r1, r3
 800288e:	1c59      	adds	r1, r3, #1
 8002890:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002894:	400b      	ands	r3, r1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HAL_I2C_Init+0x138>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1e59      	subs	r1, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80028a8:	3301      	adds	r3, #1
 80028aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ae:	e051      	b.n	8002954 <HAL_I2C_Init+0x1dc>
 80028b0:	2304      	movs	r3, #4
 80028b2:	e04f      	b.n	8002954 <HAL_I2C_Init+0x1dc>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d111      	bne.n	80028e0 <HAL_I2C_Init+0x168>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	1e58      	subs	r0, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6859      	ldr	r1, [r3, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	440b      	add	r3, r1
 80028ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ce:	3301      	adds	r3, #1
 80028d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	bf0c      	ite	eq
 80028d8:	2301      	moveq	r3, #1
 80028da:	2300      	movne	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	e012      	b.n	8002906 <HAL_I2C_Init+0x18e>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1e58      	subs	r0, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6859      	ldr	r1, [r3, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	0099      	lsls	r1, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f6:	3301      	adds	r3, #1
 80028f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	bf0c      	ite	eq
 8002900:	2301      	moveq	r3, #1
 8002902:	2300      	movne	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_I2C_Init+0x196>
 800290a:	2301      	movs	r3, #1
 800290c:	e022      	b.n	8002954 <HAL_I2C_Init+0x1dc>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10e      	bne.n	8002934 <HAL_I2C_Init+0x1bc>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1e58      	subs	r0, r3, #1
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6859      	ldr	r1, [r3, #4]
 800291e:	460b      	mov	r3, r1
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	440b      	add	r3, r1
 8002924:	fbb0 f3f3 	udiv	r3, r0, r3
 8002928:	3301      	adds	r3, #1
 800292a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002932:	e00f      	b.n	8002954 <HAL_I2C_Init+0x1dc>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	1e58      	subs	r0, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6859      	ldr	r1, [r3, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	0099      	lsls	r1, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	fbb0 f3f3 	udiv	r3, r0, r3
 800294a:	3301      	adds	r3, #1
 800294c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002950:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	6809      	ldr	r1, [r1, #0]
 8002958:	4313      	orrs	r3, r2
 800295a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69da      	ldr	r2, [r3, #28]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002982:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6911      	ldr	r1, [r2, #16]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	68d2      	ldr	r2, [r2, #12]
 800298e:	4311      	orrs	r1, r2
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	430b      	orrs	r3, r1
 8002996:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695a      	ldr	r2, [r3, #20]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0201 	orr.w	r2, r2, #1
 80029c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2220      	movs	r2, #32
 80029ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	000186a0 	.word	0x000186a0
 80029f0:	001e847f 	.word	0x001e847f
 80029f4:	003d08ff 	.word	0x003d08ff
 80029f8:	431bde83 	.word	0x431bde83
 80029fc:	10624dd3 	.word	0x10624dd3

08002a00 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af02      	add	r7, sp, #8
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	4608      	mov	r0, r1
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4603      	mov	r3, r0
 8002a10:	817b      	strh	r3, [r7, #10]
 8002a12:	460b      	mov	r3, r1
 8002a14:	813b      	strh	r3, [r7, #8]
 8002a16:	4613      	mov	r3, r2
 8002a18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a1a:	f7ff fba5 	bl	8002168 <HAL_GetTick>
 8002a1e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b20      	cmp	r3, #32
 8002a2a:	f040 80d9 	bne.w	8002be0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	2319      	movs	r3, #25
 8002a34:	2201      	movs	r2, #1
 8002a36:	496d      	ldr	r1, [pc, #436]	@ (8002bec <HAL_I2C_Mem_Write+0x1ec>)
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 fdb9 	bl	80035b0 <I2C_WaitOnFlagUntilTimeout>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a44:	2302      	movs	r3, #2
 8002a46:	e0cc      	b.n	8002be2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <HAL_I2C_Mem_Write+0x56>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e0c5      	b.n	8002be2 <HAL_I2C_Mem_Write+0x1e2>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d007      	beq.n	8002a7c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2221      	movs	r2, #33	@ 0x21
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2240      	movs	r2, #64	@ 0x40
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a3a      	ldr	r2, [r7, #32]
 8002aa6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002aac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4a4d      	ldr	r2, [pc, #308]	@ (8002bf0 <HAL_I2C_Mem_Write+0x1f0>)
 8002abc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002abe:	88f8      	ldrh	r0, [r7, #6]
 8002ac0:	893a      	ldrh	r2, [r7, #8]
 8002ac2:	8979      	ldrh	r1, [r7, #10]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	9301      	str	r3, [sp, #4]
 8002ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	4603      	mov	r3, r0
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 fbf0 	bl	80032b4 <I2C_RequestMemoryWrite>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d052      	beq.n	8002b80 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e081      	b.n	8002be2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 fe7e 	bl	80037e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00d      	beq.n	8002b0a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d107      	bne.n	8002b06 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e06b      	b.n	8002be2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0e:	781a      	ldrb	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d11b      	bne.n	8002b80 <HAL_I2C_Mem_Write+0x180>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d017      	beq.n	8002b80 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b54:	781a      	ldrb	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1aa      	bne.n	8002ade <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 fe71 	bl	8003874 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00d      	beq.n	8002bb4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d107      	bne.n	8002bb0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e016      	b.n	8002be2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	e000      	b.n	8002be2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002be0:	2302      	movs	r3, #2
  }
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	00100002 	.word	0x00100002
 8002bf0:	ffff0000 	.word	0xffff0000

08002bf4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08c      	sub	sp, #48	@ 0x30
 8002bf8:	af02      	add	r7, sp, #8
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	4608      	mov	r0, r1
 8002bfe:	4611      	mov	r1, r2
 8002c00:	461a      	mov	r2, r3
 8002c02:	4603      	mov	r3, r0
 8002c04:	817b      	strh	r3, [r7, #10]
 8002c06:	460b      	mov	r3, r1
 8002c08:	813b      	strh	r3, [r7, #8]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c0e:	f7ff faab 	bl	8002168 <HAL_GetTick>
 8002c12:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	f040 8214 	bne.w	800304a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	2319      	movs	r3, #25
 8002c28:	2201      	movs	r2, #1
 8002c2a:	497b      	ldr	r1, [pc, #492]	@ (8002e18 <HAL_I2C_Mem_Read+0x224>)
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 fcbf 	bl	80035b0 <I2C_WaitOnFlagUntilTimeout>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	e207      	b.n	800304c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_I2C_Mem_Read+0x56>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e200      	b.n	800304c <HAL_I2C_Mem_Read+0x458>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d007      	beq.n	8002c70 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2222      	movs	r2, #34	@ 0x22
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2240      	movs	r2, #64	@ 0x40
 8002c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002ca0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4a5b      	ldr	r2, [pc, #364]	@ (8002e1c <HAL_I2C_Mem_Read+0x228>)
 8002cb0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cb2:	88f8      	ldrh	r0, [r7, #6]
 8002cb4:	893a      	ldrh	r2, [r7, #8]
 8002cb6:	8979      	ldrh	r1, [r7, #10]
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cba:	9301      	str	r3, [sp, #4]
 8002cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 fb8c 	bl	80033e0 <I2C_RequestMemoryRead>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e1bc      	b.n	800304c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d113      	bne.n	8002d02 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cda:	2300      	movs	r3, #0
 8002cdc:	623b      	str	r3, [r7, #32]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	623b      	str	r3, [r7, #32]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	623b      	str	r3, [r7, #32]
 8002cee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	e190      	b.n	8003024 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d11b      	bne.n	8002d42 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	61fb      	str	r3, [r7, #28]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	61fb      	str	r3, [r7, #28]
 8002d2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	e170      	b.n	8003024 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d11b      	bne.n	8002d82 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d58:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61bb      	str	r3, [r7, #24]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	61bb      	str	r3, [r7, #24]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	61bb      	str	r3, [r7, #24]
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	e150      	b.n	8003024 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d98:	e144      	b.n	8003024 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	f200 80f1 	bhi.w	8002f86 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d123      	bne.n	8002df4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 fda7 	bl	8003904 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e145      	b.n	800304c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691a      	ldr	r2, [r3, #16]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002df2:	e117      	b.n	8003024 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d14e      	bne.n	8002e9a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e02:	2200      	movs	r2, #0
 8002e04:	4906      	ldr	r1, [pc, #24]	@ (8002e20 <HAL_I2C_Mem_Read+0x22c>)
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 fbd2 	bl	80035b0 <I2C_WaitOnFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d008      	beq.n	8002e24 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e11a      	b.n	800304c <HAL_I2C_Mem_Read+0x458>
 8002e16:	bf00      	nop
 8002e18:	00100002 	.word	0x00100002
 8002e1c:	ffff0000 	.word	0xffff0000
 8002e20:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691a      	ldr	r2, [r3, #16]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e98:	e0c4      	b.n	8003024 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	496c      	ldr	r1, [pc, #432]	@ (8003054 <HAL_I2C_Mem_Read+0x460>)
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 fb83 	bl	80035b0 <I2C_WaitOnFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e0cb      	b.n	800304c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ec2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691a      	ldr	r2, [r3, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002efc:	2200      	movs	r2, #0
 8002efe:	4955      	ldr	r1, [pc, #340]	@ (8003054 <HAL_I2C_Mem_Read+0x460>)
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 fb55 	bl	80035b0 <I2C_WaitOnFlagUntilTimeout>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e09d      	b.n	800304c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691a      	ldr	r2, [r3, #16]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f32:	1c5a      	adds	r2, r3, #1
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f84:	e04e      	b.n	8003024 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f88:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 fcba 	bl	8003904 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e058      	b.n	800304c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d124      	bne.n	8003024 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d107      	bne.n	8002ff2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ff0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003028:	2b00      	cmp	r3, #0
 800302a:	f47f aeb6 	bne.w	8002d9a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2220      	movs	r2, #32
 8003032:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	e000      	b.n	800304c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800304a:	2302      	movs	r3, #2
  }
}
 800304c:	4618      	mov	r0, r3
 800304e:	3728      	adds	r7, #40	@ 0x28
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	00010004 	.word	0x00010004

08003058 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08a      	sub	sp, #40	@ 0x28
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	607a      	str	r2, [r7, #4]
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	460b      	mov	r3, r1
 8003066:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003068:	f7ff f87e 	bl	8002168 <HAL_GetTick>
 800306c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b20      	cmp	r3, #32
 800307c:	f040 8111 	bne.w	80032a2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	2319      	movs	r3, #25
 8003086:	2201      	movs	r2, #1
 8003088:	4988      	ldr	r1, [pc, #544]	@ (80032ac <HAL_I2C_IsDeviceReady+0x254>)
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 fa90 	bl	80035b0 <I2C_WaitOnFlagUntilTimeout>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003096:	2302      	movs	r3, #2
 8003098:	e104      	b.n	80032a4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_I2C_IsDeviceReady+0x50>
 80030a4:	2302      	movs	r3, #2
 80030a6:	e0fd      	b.n	80032a4 <HAL_I2C_IsDeviceReady+0x24c>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d007      	beq.n	80030ce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0201 	orr.w	r2, r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2224      	movs	r2, #36	@ 0x24
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4a70      	ldr	r2, [pc, #448]	@ (80032b0 <HAL_I2C_IsDeviceReady+0x258>)
 80030f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003100:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2200      	movs	r2, #0
 800310a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 fa4e 	bl	80035b0 <I2C_WaitOnFlagUntilTimeout>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00d      	beq.n	8003136 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003124:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003128:	d103      	bne.n	8003132 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003130:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e0b6      	b.n	80032a4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003136:	897b      	ldrh	r3, [r7, #10]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	461a      	mov	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003144:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003146:	f7ff f80f 	bl	8002168 <HAL_GetTick>
 800314a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b02      	cmp	r3, #2
 8003158:	bf0c      	ite	eq
 800315a:	2301      	moveq	r3, #1
 800315c:	2300      	movne	r3, #0
 800315e:	b2db      	uxtb	r3, r3
 8003160:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800316c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003170:	bf0c      	ite	eq
 8003172:	2301      	moveq	r3, #1
 8003174:	2300      	movne	r3, #0
 8003176:	b2db      	uxtb	r3, r3
 8003178:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800317a:	e025      	b.n	80031c8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800317c:	f7fe fff4 	bl	8002168 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d302      	bcc.n	8003192 <HAL_I2C_IsDeviceReady+0x13a>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d103      	bne.n	800319a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	22a0      	movs	r2, #160	@ 0xa0
 8003196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	bf0c      	ite	eq
 80031a8:	2301      	moveq	r3, #1
 80031aa:	2300      	movne	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031be:	bf0c      	ite	eq
 80031c0:	2301      	moveq	r3, #1
 80031c2:	2300      	movne	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2ba0      	cmp	r3, #160	@ 0xa0
 80031d2:	d005      	beq.n	80031e0 <HAL_I2C_IsDeviceReady+0x188>
 80031d4:	7dfb      	ldrb	r3, [r7, #23]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d102      	bne.n	80031e0 <HAL_I2C_IsDeviceReady+0x188>
 80031da:	7dbb      	ldrb	r3, [r7, #22]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0cd      	beq.n	800317c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d129      	bne.n	800324a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003204:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003206:	2300      	movs	r3, #0
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	2319      	movs	r3, #25
 8003222:	2201      	movs	r2, #1
 8003224:	4921      	ldr	r1, [pc, #132]	@ (80032ac <HAL_I2C_IsDeviceReady+0x254>)
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 f9c2 	bl	80035b0 <I2C_WaitOnFlagUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e036      	b.n	80032a4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	e02c      	b.n	80032a4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003258:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003262:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	2319      	movs	r3, #25
 800326a:	2201      	movs	r2, #1
 800326c:	490f      	ldr	r1, [pc, #60]	@ (80032ac <HAL_I2C_IsDeviceReady+0x254>)
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 f99e 	bl	80035b0 <I2C_WaitOnFlagUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e012      	b.n	80032a4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	3301      	adds	r3, #1
 8003282:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	429a      	cmp	r2, r3
 800328a:	f4ff af32 	bcc.w	80030f2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80032a2:	2302      	movs	r3, #2
  }
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3720      	adds	r7, #32
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	00100002 	.word	0x00100002
 80032b0:	ffff0000 	.word	0xffff0000

080032b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b088      	sub	sp, #32
 80032b8:	af02      	add	r7, sp, #8
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	4608      	mov	r0, r1
 80032be:	4611      	mov	r1, r2
 80032c0:	461a      	mov	r2, r3
 80032c2:	4603      	mov	r3, r0
 80032c4:	817b      	strh	r3, [r7, #10]
 80032c6:	460b      	mov	r3, r1
 80032c8:	813b      	strh	r3, [r7, #8]
 80032ca:	4613      	mov	r3, r2
 80032cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 f960 	bl	80035b0 <I2C_WaitOnFlagUntilTimeout>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00d      	beq.n	8003312 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003300:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003304:	d103      	bne.n	800330e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800330c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e05f      	b.n	80033d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003312:	897b      	ldrh	r3, [r7, #10]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	461a      	mov	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003320:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003324:	6a3a      	ldr	r2, [r7, #32]
 8003326:	492d      	ldr	r1, [pc, #180]	@ (80033dc <I2C_RequestMemoryWrite+0x128>)
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 f9bb 	bl	80036a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e04c      	b.n	80033d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003338:	2300      	movs	r3, #0
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800334e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003350:	6a39      	ldr	r1, [r7, #32]
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 fa46 	bl	80037e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00d      	beq.n	800337a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	2b04      	cmp	r3, #4
 8003364:	d107      	bne.n	8003376 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003374:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e02b      	b.n	80033d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800337a:	88fb      	ldrh	r3, [r7, #6]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d105      	bne.n	800338c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003380:	893b      	ldrh	r3, [r7, #8]
 8003382:	b2da      	uxtb	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	611a      	str	r2, [r3, #16]
 800338a:	e021      	b.n	80033d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800338c:	893b      	ldrh	r3, [r7, #8]
 800338e:	0a1b      	lsrs	r3, r3, #8
 8003390:	b29b      	uxth	r3, r3
 8003392:	b2da      	uxtb	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800339a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800339c:	6a39      	ldr	r1, [r7, #32]
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 fa20 	bl	80037e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00d      	beq.n	80033c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d107      	bne.n	80033c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e005      	b.n	80033d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033c6:	893b      	ldrh	r3, [r7, #8]
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	00010002 	.word	0x00010002

080033e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af02      	add	r7, sp, #8
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	4608      	mov	r0, r1
 80033ea:	4611      	mov	r1, r2
 80033ec:	461a      	mov	r2, r3
 80033ee:	4603      	mov	r3, r0
 80033f0:	817b      	strh	r3, [r7, #10]
 80033f2:	460b      	mov	r3, r1
 80033f4:	813b      	strh	r3, [r7, #8]
 80033f6:	4613      	mov	r3, r2
 80033f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003408:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003418:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800341a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	2200      	movs	r2, #0
 8003422:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 f8c2 	bl	80035b0 <I2C_WaitOnFlagUntilTimeout>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00d      	beq.n	800344e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800343c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003440:	d103      	bne.n	800344a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003448:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e0aa      	b.n	80035a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800344e:	897b      	ldrh	r3, [r7, #10]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	461a      	mov	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800345c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800345e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003460:	6a3a      	ldr	r2, [r7, #32]
 8003462:	4952      	ldr	r1, [pc, #328]	@ (80035ac <I2C_RequestMemoryRead+0x1cc>)
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 f91d 	bl	80036a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e097      	b.n	80035a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800348a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800348c:	6a39      	ldr	r1, [r7, #32]
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 f9a8 	bl	80037e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00d      	beq.n	80034b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d107      	bne.n	80034b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e076      	b.n	80035a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d105      	bne.n	80034c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034bc:	893b      	ldrh	r3, [r7, #8]
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	611a      	str	r2, [r3, #16]
 80034c6:	e021      	b.n	800350c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034c8:	893b      	ldrh	r3, [r7, #8]
 80034ca:	0a1b      	lsrs	r3, r3, #8
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d8:	6a39      	ldr	r1, [r7, #32]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f982 	bl	80037e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00d      	beq.n	8003502 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d107      	bne.n	80034fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e050      	b.n	80035a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003502:	893b      	ldrh	r3, [r7, #8]
 8003504:	b2da      	uxtb	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800350c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800350e:	6a39      	ldr	r1, [r7, #32]
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f967 	bl	80037e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00d      	beq.n	8003538 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003520:	2b04      	cmp	r3, #4
 8003522:	d107      	bne.n	8003534 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003532:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e035      	b.n	80035a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003546:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	2200      	movs	r2, #0
 8003550:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 f82b 	bl	80035b0 <I2C_WaitOnFlagUntilTimeout>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00d      	beq.n	800357c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800356e:	d103      	bne.n	8003578 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003576:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e013      	b.n	80035a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800357c:	897b      	ldrh	r3, [r7, #10]
 800357e:	b2db      	uxtb	r3, r3
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	b2da      	uxtb	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800358c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358e:	6a3a      	ldr	r2, [r7, #32]
 8003590:	4906      	ldr	r1, [pc, #24]	@ (80035ac <I2C_RequestMemoryRead+0x1cc>)
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 f886 	bl	80036a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	00010002 	.word	0x00010002

080035b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	4613      	mov	r3, r2
 80035be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035c0:	e048      	b.n	8003654 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c8:	d044      	beq.n	8003654 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ca:	f7fe fdcd 	bl	8002168 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d302      	bcc.n	80035e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d139      	bne.n	8003654 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	0c1b      	lsrs	r3, r3, #16
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d10d      	bne.n	8003606 <I2C_WaitOnFlagUntilTimeout+0x56>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	43da      	mvns	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	4013      	ands	r3, r2
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	bf0c      	ite	eq
 80035fc:	2301      	moveq	r3, #1
 80035fe:	2300      	movne	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	461a      	mov	r2, r3
 8003604:	e00c      	b.n	8003620 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	43da      	mvns	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	4013      	ands	r3, r2
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	bf0c      	ite	eq
 8003618:	2301      	moveq	r3, #1
 800361a:	2300      	movne	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	461a      	mov	r2, r3
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	429a      	cmp	r2, r3
 8003624:	d116      	bne.n	8003654 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003640:	f043 0220 	orr.w	r2, r3, #32
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e023      	b.n	800369c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	0c1b      	lsrs	r3, r3, #16
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b01      	cmp	r3, #1
 800365c:	d10d      	bne.n	800367a <I2C_WaitOnFlagUntilTimeout+0xca>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	43da      	mvns	r2, r3
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	4013      	ands	r3, r2
 800366a:	b29b      	uxth	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	bf0c      	ite	eq
 8003670:	2301      	moveq	r3, #1
 8003672:	2300      	movne	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	461a      	mov	r2, r3
 8003678:	e00c      	b.n	8003694 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	43da      	mvns	r2, r3
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	4013      	ands	r3, r2
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	bf0c      	ite	eq
 800368c:	2301      	moveq	r3, #1
 800368e:	2300      	movne	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	461a      	mov	r2, r3
 8003694:	79fb      	ldrb	r3, [r7, #7]
 8003696:	429a      	cmp	r2, r3
 8003698:	d093      	beq.n	80035c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036b2:	e071      	b.n	8003798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036c2:	d123      	bne.n	800370c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f8:	f043 0204 	orr.w	r2, r3, #4
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e067      	b.n	80037dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003712:	d041      	beq.n	8003798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003714:	f7fe fd28 	bl	8002168 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	429a      	cmp	r2, r3
 8003722:	d302      	bcc.n	800372a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d136      	bne.n	8003798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	0c1b      	lsrs	r3, r3, #16
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b01      	cmp	r3, #1
 8003732:	d10c      	bne.n	800374e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	43da      	mvns	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4013      	ands	r3, r2
 8003740:	b29b      	uxth	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	bf14      	ite	ne
 8003746:	2301      	movne	r3, #1
 8003748:	2300      	moveq	r3, #0
 800374a:	b2db      	uxtb	r3, r3
 800374c:	e00b      	b.n	8003766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	43da      	mvns	r2, r3
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	4013      	ands	r3, r2
 800375a:	b29b      	uxth	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	bf14      	ite	ne
 8003760:	2301      	movne	r3, #1
 8003762:	2300      	moveq	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d016      	beq.n	8003798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003784:	f043 0220 	orr.w	r2, r3, #32
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e021      	b.n	80037dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	0c1b      	lsrs	r3, r3, #16
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d10c      	bne.n	80037bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	43da      	mvns	r2, r3
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	4013      	ands	r3, r2
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	bf14      	ite	ne
 80037b4:	2301      	movne	r3, #1
 80037b6:	2300      	moveq	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	e00b      	b.n	80037d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	43da      	mvns	r2, r3
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	4013      	ands	r3, r2
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	bf14      	ite	ne
 80037ce:	2301      	movne	r3, #1
 80037d0:	2300      	moveq	r3, #0
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f47f af6d 	bne.w	80036b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037f0:	e034      	b.n	800385c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 f8e3 	bl	80039be <I2C_IsAcknowledgeFailed>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e034      	b.n	800386c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003808:	d028      	beq.n	800385c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380a:	f7fe fcad 	bl	8002168 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	429a      	cmp	r2, r3
 8003818:	d302      	bcc.n	8003820 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d11d      	bne.n	800385c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800382a:	2b80      	cmp	r3, #128	@ 0x80
 800382c:	d016      	beq.n	800385c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003848:	f043 0220 	orr.w	r2, r3, #32
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e007      	b.n	800386c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003866:	2b80      	cmp	r3, #128	@ 0x80
 8003868:	d1c3      	bne.n	80037f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003880:	e034      	b.n	80038ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f89b 	bl	80039be <I2C_IsAcknowledgeFailed>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e034      	b.n	80038fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003898:	d028      	beq.n	80038ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389a:	f7fe fc65 	bl	8002168 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d302      	bcc.n	80038b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d11d      	bne.n	80038ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d016      	beq.n	80038ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d8:	f043 0220 	orr.w	r2, r3, #32
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e007      	b.n	80038fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d1c3      	bne.n	8003882 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003910:	e049      	b.n	80039a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	f003 0310 	and.w	r3, r3, #16
 800391c:	2b10      	cmp	r3, #16
 800391e:	d119      	bne.n	8003954 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0210 	mvn.w	r2, #16
 8003928:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e030      	b.n	80039b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003954:	f7fe fc08 	bl	8002168 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	429a      	cmp	r2, r3
 8003962:	d302      	bcc.n	800396a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d11d      	bne.n	80039a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003974:	2b40      	cmp	r3, #64	@ 0x40
 8003976:	d016      	beq.n	80039a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2220      	movs	r2, #32
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003992:	f043 0220 	orr.w	r2, r3, #32
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e007      	b.n	80039b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b0:	2b40      	cmp	r3, #64	@ 0x40
 80039b2:	d1ae      	bne.n	8003912 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039d4:	d11b      	bne.n	8003a0e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fa:	f043 0204 	orr.w	r2, r3, #4
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e101      	b.n	8003c32 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d106      	bne.n	8003a4e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f005 fca1 	bl	8009390 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2203      	movs	r2, #3
 8003a52:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a5c:	d102      	bne.n	8003a64 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f002 fbcc 	bl	8006206 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	7c1a      	ldrb	r2, [r3, #16]
 8003a76:	f88d 2000 	strb.w	r2, [sp]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a7e:	f002 faab 	bl	8005fd8 <USB_CoreInit>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0ce      	b.n	8003c32 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f002 fbc4 	bl	8006228 <USB_SetCurrentMode>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d005      	beq.n	8003ab2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e0bf      	b.n	8003c32 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	73fb      	strb	r3, [r7, #15]
 8003ab6:	e04a      	b.n	8003b4e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ab8:	7bfa      	ldrb	r2, [r7, #15]
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	4613      	mov	r3, r2
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	4413      	add	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	3315      	adds	r3, #21
 8003ac8:	2201      	movs	r2, #1
 8003aca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003acc:	7bfa      	ldrb	r2, [r7, #15]
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	3314      	adds	r3, #20
 8003adc:	7bfa      	ldrb	r2, [r7, #15]
 8003ade:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ae0:	7bfa      	ldrb	r2, [r7, #15]
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
 8003ae4:	b298      	uxth	r0, r3
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	4413      	add	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	332e      	adds	r3, #46	@ 0x2e
 8003af4:	4602      	mov	r2, r0
 8003af6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003af8:	7bfa      	ldrb	r2, [r7, #15]
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	3318      	adds	r3, #24
 8003b08:	2200      	movs	r2, #0
 8003b0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b0c:	7bfa      	ldrb	r2, [r7, #15]
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	4613      	mov	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	4413      	add	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	331c      	adds	r3, #28
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b20:	7bfa      	ldrb	r2, [r7, #15]
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	4613      	mov	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	3320      	adds	r3, #32
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b34:	7bfa      	ldrb	r2, [r7, #15]
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	3324      	adds	r3, #36	@ 0x24
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	73fb      	strb	r3, [r7, #15]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	791b      	ldrb	r3, [r3, #4]
 8003b52:	7bfa      	ldrb	r2, [r7, #15]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d3af      	bcc.n	8003ab8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b58:	2300      	movs	r3, #0
 8003b5a:	73fb      	strb	r3, [r7, #15]
 8003b5c:	e044      	b.n	8003be8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b5e:	7bfa      	ldrb	r2, [r7, #15]
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	4413      	add	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003b70:	2200      	movs	r2, #0
 8003b72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b74:	7bfa      	ldrb	r2, [r7, #15]
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003b86:	7bfa      	ldrb	r2, [r7, #15]
 8003b88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b8a:	7bfa      	ldrb	r2, [r7, #15]
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	4413      	add	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	440b      	add	r3, r1
 8003b98:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ba0:	7bfa      	ldrb	r2, [r7, #15]
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	4413      	add	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bb6:	7bfa      	ldrb	r2, [r7, #15]
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	440b      	add	r3, r1
 8003bc4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bcc:	7bfa      	ldrb	r2, [r7, #15]
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003bde:	2200      	movs	r2, #0
 8003be0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
 8003be4:	3301      	adds	r3, #1
 8003be6:	73fb      	strb	r3, [r7, #15]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	791b      	ldrb	r3, [r3, #4]
 8003bec:	7bfa      	ldrb	r2, [r7, #15]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d3b5      	bcc.n	8003b5e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6818      	ldr	r0, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	7c1a      	ldrb	r2, [r3, #16]
 8003bfa:	f88d 2000 	strb.w	r2, [sp]
 8003bfe:	3304      	adds	r3, #4
 8003c00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c02:	f002 fb5d 	bl	80062c0 <USB_DevInit>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e00c      	b.n	8003c32 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f003 fba7 	bl	800737e <USB_DevDisconnect>

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b084      	sub	sp, #16
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_PCD_Start+0x1c>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e022      	b.n	8003c9c <HAL_PCD_Start+0x62>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d009      	beq.n	8003c7e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d105      	bne.n	8003c7e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c76:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f002 faae 	bl	80061e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f003 fb55 	bl	800733c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003ca4:	b590      	push	{r4, r7, lr}
 8003ca6:	b08d      	sub	sp, #52	@ 0x34
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f003 fc13 	bl	80074e6 <USB_GetMode>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f040 848c 	bne.w	80045e0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f003 fb77 	bl	80073c0 <USB_ReadInterrupts>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 8482 	beq.w	80045de <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	0a1b      	lsrs	r3, r3, #8
 8003ce4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f003 fb64 	bl	80073c0 <USB_ReadInterrupts>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d107      	bne.n	8003d12 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695a      	ldr	r2, [r3, #20]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f002 0202 	and.w	r2, r2, #2
 8003d10:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f003 fb52 	bl	80073c0 <USB_ReadInterrupts>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	f003 0310 	and.w	r3, r3, #16
 8003d22:	2b10      	cmp	r3, #16
 8003d24:	d161      	bne.n	8003dea <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	699a      	ldr	r2, [r3, #24]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0210 	bic.w	r2, r2, #16
 8003d34:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	f003 020f 	and.w	r2, r3, #15
 8003d42:	4613      	mov	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	4413      	add	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	4413      	add	r3, r2
 8003d52:	3304      	adds	r3, #4
 8003d54:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003d5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d60:	d124      	bne.n	8003dac <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003d68:	4013      	ands	r3, r2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d035      	beq.n	8003dda <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	091b      	lsrs	r3, r3, #4
 8003d76:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	461a      	mov	r2, r3
 8003d80:	6a38      	ldr	r0, [r7, #32]
 8003d82:	f003 f989 	bl	8007098 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d92:	441a      	add	r2, r3
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	695a      	ldr	r2, [r3, #20]
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	091b      	lsrs	r3, r3, #4
 8003da0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003da4:	441a      	add	r2, r3
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	615a      	str	r2, [r3, #20]
 8003daa:	e016      	b.n	8003dda <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003db2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003db6:	d110      	bne.n	8003dda <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003dbe:	2208      	movs	r2, #8
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	6a38      	ldr	r0, [r7, #32]
 8003dc4:	f003 f968 	bl	8007098 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	695a      	ldr	r2, [r3, #20]
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	091b      	lsrs	r3, r3, #4
 8003dd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dd4:	441a      	add	r2, r3
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	699a      	ldr	r2, [r3, #24]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f042 0210 	orr.w	r2, r2, #16
 8003de8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f003 fae6 	bl	80073c0 <USB_ReadInterrupts>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dfa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003dfe:	f040 80a7 	bne.w	8003f50 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f003 faeb 	bl	80073e6 <USB_ReadDevAllOutEpInterrupt>
 8003e10:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003e12:	e099      	b.n	8003f48 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 808e 	beq.w	8003f3c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	4611      	mov	r1, r2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f003 fb0f 	bl	800744e <USB_ReadDevOutEPInterrupt>
 8003e30:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00c      	beq.n	8003e56 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e48:	461a      	mov	r2, r3
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003e4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 fe8b 	bl	8004b6c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00c      	beq.n	8003e7a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	2308      	movs	r3, #8
 8003e70:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 ff61 	bl	8004d3c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e90:	461a      	mov	r2, r3
 8003e92:	2310      	movs	r3, #16
 8003e94:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d030      	beq.n	8003f02 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea8:	2b80      	cmp	r3, #128	@ 0x80
 8003eaa:	d109      	bne.n	8003ec0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	69fa      	ldr	r2, [r7, #28]
 8003eb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003eba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ebe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003ec0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	78db      	ldrb	r3, [r3, #3]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d108      	bne.n	8003ef0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	4619      	mov	r1, r3
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f005 fb56 	bl	800959c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003efc:	461a      	mov	r2, r3
 8003efe:	2302      	movs	r3, #2
 8003f00:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f003 0320 	and.w	r3, r3, #32
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d008      	beq.n	8003f1e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f18:	461a      	mov	r2, r3
 8003f1a:	2320      	movs	r3, #32
 8003f1c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d009      	beq.n	8003f3c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f34:	461a      	mov	r2, r3
 8003f36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f3a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3e:	3301      	adds	r3, #1
 8003f40:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f44:	085b      	lsrs	r3, r3, #1
 8003f46:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f47f af62 	bne.w	8003e14 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f003 fa33 	bl	80073c0 <USB_ReadInterrupts>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f60:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f64:	f040 80db 	bne.w	800411e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f003 fa54 	bl	800741a <USB_ReadDevAllInEpInterrupt>
 8003f72:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003f78:	e0cd      	b.n	8004116 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 80c2 	beq.w	800410a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	4611      	mov	r1, r2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f003 fa7a 	bl	800748a <USB_ReadDevInEPInterrupt>
 8003f96:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d057      	beq.n	8004052 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	2201      	movs	r2, #1
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	69f9      	ldr	r1, [r7, #28]
 8003fbe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	799b      	ldrb	r3, [r3, #6]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d132      	bne.n	8004046 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	4413      	add	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	440b      	add	r3, r1
 8003fee:	3320      	adds	r3, #32
 8003ff0:	6819      	ldr	r1, [r3, #0]
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	4413      	add	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4403      	add	r3, r0
 8004000:	331c      	adds	r3, #28
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4419      	add	r1, r3
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800400a:	4613      	mov	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	4413      	add	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4403      	add	r3, r0
 8004014:	3320      	adds	r3, #32
 8004016:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401a:	2b00      	cmp	r3, #0
 800401c:	d113      	bne.n	8004046 <HAL_PCD_IRQHandler+0x3a2>
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004022:	4613      	mov	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	440b      	add	r3, r1
 800402c:	3324      	adds	r3, #36	@ 0x24
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d108      	bne.n	8004046 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6818      	ldr	r0, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800403e:	461a      	mov	r2, r3
 8004040:	2101      	movs	r1, #1
 8004042:	f003 fa81 	bl	8007548 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004048:	b2db      	uxtb	r3, r3
 800404a:	4619      	mov	r1, r3
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f005 fa20 	bl	8009492 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f003 0308 	and.w	r3, r3, #8
 8004058:	2b00      	cmp	r3, #0
 800405a:	d008      	beq.n	800406e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800405c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	4413      	add	r3, r2
 8004064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004068:	461a      	mov	r2, r3
 800406a:	2308      	movs	r3, #8
 800406c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f003 0310 	and.w	r3, r3, #16
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	4413      	add	r3, r2
 8004080:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004084:	461a      	mov	r2, r3
 8004086:	2310      	movs	r3, #16
 8004088:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004096:	015a      	lsls	r2, r3, #5
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	4413      	add	r3, r2
 800409c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040a0:	461a      	mov	r2, r3
 80040a2:	2340      	movs	r3, #64	@ 0x40
 80040a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d023      	beq.n	80040f8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80040b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040b2:	6a38      	ldr	r0, [r7, #32]
 80040b4:	f002 fa68 	bl	8006588 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80040b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ba:	4613      	mov	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	4413      	add	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	3310      	adds	r3, #16
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	4413      	add	r3, r2
 80040c8:	3304      	adds	r3, #4
 80040ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	78db      	ldrb	r3, [r3, #3]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d108      	bne.n	80040e6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2200      	movs	r2, #0
 80040d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80040da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	4619      	mov	r1, r3
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f005 fa6d 	bl	80095c0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80040e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040f2:	461a      	mov	r2, r3
 80040f4:	2302      	movs	r3, #2
 80040f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004102:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fca5 	bl	8004a54 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	3301      	adds	r3, #1
 800410e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004112:	085b      	lsrs	r3, r3, #1
 8004114:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004118:	2b00      	cmp	r3, #0
 800411a:	f47f af2e 	bne.w	8003f7a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f003 f94c 	bl	80073c0 <USB_ReadInterrupts>
 8004128:	4603      	mov	r3, r0
 800412a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800412e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004132:	d122      	bne.n	800417a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	69fa      	ldr	r2, [r7, #28]
 800413e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004142:	f023 0301 	bic.w	r3, r3, #1
 8004146:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800414e:	2b01      	cmp	r3, #1
 8004150:	d108      	bne.n	8004164 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800415a:	2100      	movs	r1, #0
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fe8b 	bl	8004e78 <HAL_PCDEx_LPM_Callback>
 8004162:	e002      	b.n	800416a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f005 fa0b 	bl	8009580 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695a      	ldr	r2, [r3, #20]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004178:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4618      	mov	r0, r3
 8004180:	f003 f91e 	bl	80073c0 <USB_ReadInterrupts>
 8004184:	4603      	mov	r3, r0
 8004186:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800418a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800418e:	d112      	bne.n	80041b6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	2b01      	cmp	r3, #1
 800419e:	d102      	bne.n	80041a6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f005 f9c7 	bl	8009534 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695a      	ldr	r2, [r3, #20]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80041b4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f003 f900 	bl	80073c0 <USB_ReadInterrupts>
 80041c0:	4603      	mov	r3, r0
 80041c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041ca:	f040 80b7 	bne.w	800433c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041dc:	f023 0301 	bic.w	r3, r3, #1
 80041e0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2110      	movs	r1, #16
 80041e8:	4618      	mov	r0, r3
 80041ea:	f002 f9cd 	bl	8006588 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041ee:	2300      	movs	r3, #0
 80041f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041f2:	e046      	b.n	8004282 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80041f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004200:	461a      	mov	r2, r3
 8004202:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004206:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	4413      	add	r3, r2
 8004210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004218:	0151      	lsls	r1, r2, #5
 800421a:	69fa      	ldr	r2, [r7, #28]
 800421c:	440a      	add	r2, r1
 800421e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004222:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004226:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004234:	461a      	mov	r2, r3
 8004236:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800423a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800423c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	4413      	add	r3, r2
 8004244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800424c:	0151      	lsls	r1, r2, #5
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	440a      	add	r2, r1
 8004252:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004256:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800425a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800425c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	4413      	add	r3, r2
 8004264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800426c:	0151      	lsls	r1, r2, #5
 800426e:	69fa      	ldr	r2, [r7, #28]
 8004270:	440a      	add	r2, r1
 8004272:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004276:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800427a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800427c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800427e:	3301      	adds	r3, #1
 8004280:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	791b      	ldrb	r3, [r3, #4]
 8004286:	461a      	mov	r2, r3
 8004288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800428a:	4293      	cmp	r3, r2
 800428c:	d3b2      	bcc.n	80041f4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800429c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80042a0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	7bdb      	ldrb	r3, [r3, #15]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d016      	beq.n	80042d8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042ba:	f043 030b 	orr.w	r3, r3, #11
 80042be:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042d0:	f043 030b 	orr.w	r3, r3, #11
 80042d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80042d6:	e015      	b.n	8004304 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	69fa      	ldr	r2, [r7, #28]
 80042e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80042ea:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80042ee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	69fa      	ldr	r2, [r7, #28]
 80042fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042fe:	f043 030b 	orr.w	r3, r3, #11
 8004302:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	69fa      	ldr	r2, [r7, #28]
 800430e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004312:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004316:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6818      	ldr	r0, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004326:	461a      	mov	r2, r3
 8004328:	f003 f90e 	bl	8007548 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695a      	ldr	r2, [r3, #20]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800433a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4618      	mov	r0, r3
 8004342:	f003 f83d 	bl	80073c0 <USB_ReadInterrupts>
 8004346:	4603      	mov	r3, r0
 8004348:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800434c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004350:	d123      	bne.n	800439a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f003 f8d3 	bl	8007502 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4618      	mov	r0, r3
 8004362:	f002 f98a 	bl	800667a <USB_GetDevSpeed>
 8004366:	4603      	mov	r3, r0
 8004368:	461a      	mov	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681c      	ldr	r4, [r3, #0]
 8004372:	f001 f9f1 	bl	8005758 <HAL_RCC_GetHCLKFreq>
 8004376:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800437c:	461a      	mov	r2, r3
 800437e:	4620      	mov	r0, r4
 8004380:	f001 fe8e 	bl	80060a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f005 f8ac 	bl	80094e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695a      	ldr	r2, [r3, #20]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004398:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f003 f80e 	bl	80073c0 <USB_ReadInterrupts>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b08      	cmp	r3, #8
 80043ac:	d10a      	bne.n	80043c4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f005 f889 	bl	80094c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695a      	ldr	r2, [r3, #20]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f002 0208 	and.w	r2, r2, #8
 80043c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f002 fff9 	bl	80073c0 <USB_ReadInterrupts>
 80043ce:	4603      	mov	r3, r0
 80043d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d4:	2b80      	cmp	r3, #128	@ 0x80
 80043d6:	d123      	bne.n	8004420 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043e4:	2301      	movs	r3, #1
 80043e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80043e8:	e014      	b.n	8004414 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ee:	4613      	mov	r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	4413      	add	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	440b      	add	r3, r1
 80043f8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d105      	bne.n	800440e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004404:	b2db      	uxtb	r3, r3
 8004406:	4619      	mov	r1, r3
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 faf2 	bl	80049f2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800440e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004410:	3301      	adds	r3, #1
 8004412:	627b      	str	r3, [r7, #36]	@ 0x24
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	791b      	ldrb	r3, [r3, #4]
 8004418:	461a      	mov	r2, r3
 800441a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441c:	4293      	cmp	r3, r2
 800441e:	d3e4      	bcc.n	80043ea <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4618      	mov	r0, r3
 8004426:	f002 ffcb 	bl	80073c0 <USB_ReadInterrupts>
 800442a:	4603      	mov	r3, r0
 800442c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004430:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004434:	d13c      	bne.n	80044b0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004436:	2301      	movs	r3, #1
 8004438:	627b      	str	r3, [r7, #36]	@ 0x24
 800443a:	e02b      	b.n	8004494 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800443c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	4413      	add	r3, r2
 8004444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004450:	4613      	mov	r3, r2
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	4413      	add	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	3318      	adds	r3, #24
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d115      	bne.n	800448e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004462:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004464:	2b00      	cmp	r3, #0
 8004466:	da12      	bge.n	800448e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800446c:	4613      	mov	r3, r2
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	4413      	add	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	440b      	add	r3, r1
 8004476:	3317      	adds	r3, #23
 8004478:	2201      	movs	r2, #1
 800447a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800447c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447e:	b2db      	uxtb	r3, r3
 8004480:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004484:	b2db      	uxtb	r3, r3
 8004486:	4619      	mov	r1, r3
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 fab2 	bl	80049f2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800448e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004490:	3301      	adds	r3, #1
 8004492:	627b      	str	r3, [r7, #36]	@ 0x24
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	791b      	ldrb	r3, [r3, #4]
 8004498:	461a      	mov	r2, r3
 800449a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449c:	4293      	cmp	r3, r2
 800449e:	d3cd      	bcc.n	800443c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695a      	ldr	r2, [r3, #20]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80044ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f002 ff83 	bl	80073c0 <USB_ReadInterrupts>
 80044ba:	4603      	mov	r3, r0
 80044bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044c4:	d156      	bne.n	8004574 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044c6:	2301      	movs	r3, #1
 80044c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80044ca:	e045      	b.n	8004558 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80044cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044e0:	4613      	mov	r3, r2
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	4413      	add	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d12e      	bne.n	8004552 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80044f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	da2b      	bge.n	8004552 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	0c1a      	lsrs	r2, r3, #16
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004504:	4053      	eors	r3, r2
 8004506:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800450a:	2b00      	cmp	r3, #0
 800450c:	d121      	bne.n	8004552 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004512:	4613      	mov	r3, r2
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	440b      	add	r3, r1
 800451c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004520:	2201      	movs	r2, #1
 8004522:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10a      	bne.n	8004552 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	69fa      	ldr	r2, [r7, #28]
 8004546:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800454a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800454e:	6053      	str	r3, [r2, #4]
            break;
 8004550:	e008      	b.n	8004564 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004554:	3301      	adds	r3, #1
 8004556:	627b      	str	r3, [r7, #36]	@ 0x24
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	791b      	ldrb	r3, [r3, #4]
 800455c:	461a      	mov	r2, r3
 800455e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004560:	4293      	cmp	r3, r2
 8004562:	d3b3      	bcc.n	80044cc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695a      	ldr	r2, [r3, #20]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004572:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4618      	mov	r0, r3
 800457a:	f002 ff21 	bl	80073c0 <USB_ReadInterrupts>
 800457e:	4603      	mov	r3, r0
 8004580:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004588:	d10a      	bne.n	80045a0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f005 f82a 	bl	80095e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695a      	ldr	r2, [r3, #20]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800459e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f002 ff0b 	bl	80073c0 <USB_ReadInterrupts>
 80045aa:	4603      	mov	r3, r0
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d115      	bne.n	80045e0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	f003 0304 	and.w	r3, r3, #4
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f005 f81a 	bl	8009600 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6859      	ldr	r1, [r3, #4]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	430a      	orrs	r2, r1
 80045da:	605a      	str	r2, [r3, #4]
 80045dc:	e000      	b.n	80045e0 <HAL_PCD_IRQHandler+0x93c>
      return;
 80045de:	bf00      	nop
    }
  }
}
 80045e0:	3734      	adds	r7, #52	@ 0x34
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd90      	pop	{r4, r7, pc}

080045e6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b082      	sub	sp, #8
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	460b      	mov	r3, r1
 80045f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_PCD_SetAddress+0x1a>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e012      	b.n	8004626 <HAL_PCD_SetAddress+0x40>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	78fa      	ldrb	r2, [r7, #3]
 800460c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	78fa      	ldrb	r2, [r7, #3]
 8004614:	4611      	mov	r1, r2
 8004616:	4618      	mov	r0, r3
 8004618:	f002 fe6a 	bl	80072f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b084      	sub	sp, #16
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	4608      	mov	r0, r1
 8004638:	4611      	mov	r1, r2
 800463a:	461a      	mov	r2, r3
 800463c:	4603      	mov	r3, r0
 800463e:	70fb      	strb	r3, [r7, #3]
 8004640:	460b      	mov	r3, r1
 8004642:	803b      	strh	r3, [r7, #0]
 8004644:	4613      	mov	r3, r2
 8004646:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004648:	2300      	movs	r3, #0
 800464a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800464c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004650:	2b00      	cmp	r3, #0
 8004652:	da0f      	bge.n	8004674 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004654:	78fb      	ldrb	r3, [r7, #3]
 8004656:	f003 020f 	and.w	r2, r3, #15
 800465a:	4613      	mov	r3, r2
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	4413      	add	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	3310      	adds	r3, #16
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	4413      	add	r3, r2
 8004668:	3304      	adds	r3, #4
 800466a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2201      	movs	r2, #1
 8004670:	705a      	strb	r2, [r3, #1]
 8004672:	e00f      	b.n	8004694 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004674:	78fb      	ldrb	r3, [r7, #3]
 8004676:	f003 020f 	and.w	r2, r3, #15
 800467a:	4613      	mov	r3, r2
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	4413      	add	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	4413      	add	r3, r2
 800468a:	3304      	adds	r3, #4
 800468c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	b2da      	uxtb	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80046a0:	883b      	ldrh	r3, [r7, #0]
 80046a2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	78ba      	ldrb	r2, [r7, #2]
 80046ae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	785b      	ldrb	r3, [r3, #1]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d004      	beq.n	80046c2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	461a      	mov	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80046c2:	78bb      	ldrb	r3, [r7, #2]
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d102      	bne.n	80046ce <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d101      	bne.n	80046dc <HAL_PCD_EP_Open+0xae>
 80046d8:	2302      	movs	r3, #2
 80046da:	e00e      	b.n	80046fa <HAL_PCD_EP_Open+0xcc>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68f9      	ldr	r1, [r7, #12]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f001 ffea 	bl	80066c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80046f8:	7afb      	ldrb	r3, [r7, #11]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b084      	sub	sp, #16
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	460b      	mov	r3, r1
 800470c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800470e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004712:	2b00      	cmp	r3, #0
 8004714:	da0f      	bge.n	8004736 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004716:	78fb      	ldrb	r3, [r7, #3]
 8004718:	f003 020f 	and.w	r2, r3, #15
 800471c:	4613      	mov	r3, r2
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	4413      	add	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	3310      	adds	r3, #16
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	4413      	add	r3, r2
 800472a:	3304      	adds	r3, #4
 800472c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2201      	movs	r2, #1
 8004732:	705a      	strb	r2, [r3, #1]
 8004734:	e00f      	b.n	8004756 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004736:	78fb      	ldrb	r3, [r7, #3]
 8004738:	f003 020f 	and.w	r2, r3, #15
 800473c:	4613      	mov	r3, r2
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	4413      	add	r3, r2
 800474c:	3304      	adds	r3, #4
 800474e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004756:	78fb      	ldrb	r3, [r7, #3]
 8004758:	f003 030f 	and.w	r3, r3, #15
 800475c:	b2da      	uxtb	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_PCD_EP_Close+0x6e>
 800476c:	2302      	movs	r3, #2
 800476e:	e00e      	b.n	800478e <HAL_PCD_EP_Close+0x8c>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68f9      	ldr	r1, [r7, #12]
 800477e:	4618      	mov	r0, r3
 8004780:	f002 f828 	bl	80067d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b086      	sub	sp, #24
 800479a:	af00      	add	r7, sp, #0
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	607a      	str	r2, [r7, #4]
 80047a0:	603b      	str	r3, [r7, #0]
 80047a2:	460b      	mov	r3, r1
 80047a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047a6:	7afb      	ldrb	r3, [r7, #11]
 80047a8:	f003 020f 	and.w	r2, r3, #15
 80047ac:	4613      	mov	r3, r2
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	4413      	add	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	4413      	add	r3, r2
 80047bc:	3304      	adds	r3, #4
 80047be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	2200      	movs	r2, #0
 80047d0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2200      	movs	r2, #0
 80047d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047d8:	7afb      	ldrb	r3, [r7, #11]
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	799b      	ldrb	r3, [r3, #6]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d102      	bne.n	80047f2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6818      	ldr	r0, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	799b      	ldrb	r3, [r3, #6]
 80047fa:	461a      	mov	r2, r3
 80047fc:	6979      	ldr	r1, [r7, #20]
 80047fe:	f002 f8c5 	bl	800698c <USB_EPStartXfer>

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	607a      	str	r2, [r7, #4]
 8004816:	603b      	str	r3, [r7, #0]
 8004818:	460b      	mov	r3, r1
 800481a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800481c:	7afb      	ldrb	r3, [r7, #11]
 800481e:	f003 020f 	and.w	r2, r3, #15
 8004822:	4613      	mov	r3, r2
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	4413      	add	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	3310      	adds	r3, #16
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4413      	add	r3, r2
 8004830:	3304      	adds	r3, #4
 8004832:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	2200      	movs	r2, #0
 8004844:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2201      	movs	r2, #1
 800484a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800484c:	7afb      	ldrb	r3, [r7, #11]
 800484e:	f003 030f 	and.w	r3, r3, #15
 8004852:	b2da      	uxtb	r2, r3
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	799b      	ldrb	r3, [r3, #6]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d102      	bne.n	8004866 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	799b      	ldrb	r3, [r3, #6]
 800486e:	461a      	mov	r2, r3
 8004870:	6979      	ldr	r1, [r7, #20]
 8004872:	f002 f88b 	bl	800698c <USB_EPStartXfer>

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	460b      	mov	r3, r1
 800488a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800488c:	78fb      	ldrb	r3, [r7, #3]
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	7912      	ldrb	r2, [r2, #4]
 8004896:	4293      	cmp	r3, r2
 8004898:	d901      	bls.n	800489e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e04f      	b.n	800493e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800489e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	da0f      	bge.n	80048c6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048a6:	78fb      	ldrb	r3, [r7, #3]
 80048a8:	f003 020f 	and.w	r2, r3, #15
 80048ac:	4613      	mov	r3, r2
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	4413      	add	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	3310      	adds	r3, #16
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	4413      	add	r3, r2
 80048ba:	3304      	adds	r3, #4
 80048bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2201      	movs	r2, #1
 80048c2:	705a      	strb	r2, [r3, #1]
 80048c4:	e00d      	b.n	80048e2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048c6:	78fa      	ldrb	r2, [r7, #3]
 80048c8:	4613      	mov	r3, r2
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	4413      	add	r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	4413      	add	r3, r2
 80048d8:	3304      	adds	r3, #4
 80048da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2201      	movs	r2, #1
 80048e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048e8:	78fb      	ldrb	r3, [r7, #3]
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <HAL_PCD_EP_SetStall+0x82>
 80048fe:	2302      	movs	r3, #2
 8004900:	e01d      	b.n	800493e <HAL_PCD_EP_SetStall+0xbe>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68f9      	ldr	r1, [r7, #12]
 8004910:	4618      	mov	r0, r3
 8004912:	f002 fc19 	bl	8007148 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004916:	78fb      	ldrb	r3, [r7, #3]
 8004918:	f003 030f 	and.w	r3, r3, #15
 800491c:	2b00      	cmp	r3, #0
 800491e:	d109      	bne.n	8004934 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6818      	ldr	r0, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	7999      	ldrb	r1, [r3, #6]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800492e:	461a      	mov	r2, r3
 8004930:	f002 fe0a 	bl	8007548 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b084      	sub	sp, #16
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
 800494e:	460b      	mov	r3, r1
 8004950:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004952:	78fb      	ldrb	r3, [r7, #3]
 8004954:	f003 030f 	and.w	r3, r3, #15
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	7912      	ldrb	r2, [r2, #4]
 800495c:	4293      	cmp	r3, r2
 800495e:	d901      	bls.n	8004964 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e042      	b.n	80049ea <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004964:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004968:	2b00      	cmp	r3, #0
 800496a:	da0f      	bge.n	800498c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800496c:	78fb      	ldrb	r3, [r7, #3]
 800496e:	f003 020f 	and.w	r2, r3, #15
 8004972:	4613      	mov	r3, r2
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	4413      	add	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	3310      	adds	r3, #16
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	4413      	add	r3, r2
 8004980:	3304      	adds	r3, #4
 8004982:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2201      	movs	r2, #1
 8004988:	705a      	strb	r2, [r3, #1]
 800498a:	e00f      	b.n	80049ac <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800498c:	78fb      	ldrb	r3, [r7, #3]
 800498e:	f003 020f 	and.w	r2, r3, #15
 8004992:	4613      	mov	r3, r2
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	4413      	add	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	4413      	add	r3, r2
 80049a2:	3304      	adds	r3, #4
 80049a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049b2:	78fb      	ldrb	r3, [r7, #3]
 80049b4:	f003 030f 	and.w	r3, r3, #15
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_PCD_EP_ClrStall+0x86>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e00e      	b.n	80049ea <HAL_PCD_EP_ClrStall+0xa4>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68f9      	ldr	r1, [r7, #12]
 80049da:	4618      	mov	r0, r3
 80049dc:	f002 fc22 	bl	8007224 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b084      	sub	sp, #16
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	460b      	mov	r3, r1
 80049fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80049fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	da0c      	bge.n	8004a20 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a06:	78fb      	ldrb	r3, [r7, #3]
 8004a08:	f003 020f 	and.w	r2, r3, #15
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	4413      	add	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	3310      	adds	r3, #16
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	4413      	add	r3, r2
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	e00c      	b.n	8004a3a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	f003 020f 	and.w	r2, r3, #15
 8004a26:	4613      	mov	r3, r2
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	4413      	add	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	4413      	add	r3, r2
 8004a36:	3304      	adds	r3, #4
 8004a38:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68f9      	ldr	r1, [r7, #12]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f002 fa41 	bl	8006ec8 <USB_EPStopXfer>
 8004a46:	4603      	mov	r3, r0
 8004a48:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a4a:	7afb      	ldrb	r3, [r7, #11]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08a      	sub	sp, #40	@ 0x28
 8004a58:	af02      	add	r7, sp, #8
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	4413      	add	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	3310      	adds	r3, #16
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	4413      	add	r3, r2
 8004a78:	3304      	adds	r3, #4
 8004a7a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	695a      	ldr	r2, [r3, #20]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d901      	bls.n	8004a8c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e06b      	b.n	8004b64 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	69fa      	ldr	r2, [r7, #28]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d902      	bls.n	8004aa8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	3303      	adds	r3, #3
 8004aac:	089b      	lsrs	r3, r3, #2
 8004aae:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ab0:	e02a      	b.n	8004b08 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	691a      	ldr	r2, [r3, #16]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	69fa      	ldr	r2, [r7, #28]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d902      	bls.n	8004ace <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	3303      	adds	r3, #3
 8004ad2:	089b      	lsrs	r3, r3, #2
 8004ad4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	68d9      	ldr	r1, [r3, #12]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	4603      	mov	r3, r0
 8004aea:	6978      	ldr	r0, [r7, #20]
 8004aec:	f002 fa96 	bl	800701c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	441a      	add	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	695a      	ldr	r2, [r3, #20]
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	441a      	add	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d809      	bhi.n	8004b32 <PCD_WriteEmptyTxFifo+0xde>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	695a      	ldr	r2, [r3, #20]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d203      	bcs.n	8004b32 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1bf      	bne.n	8004ab2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	691a      	ldr	r2, [r3, #16]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d811      	bhi.n	8004b62 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	f003 030f 	and.w	r3, r3, #15
 8004b44:	2201      	movs	r2, #1
 8004b46:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	43db      	mvns	r3, r3
 8004b58:	6939      	ldr	r1, [r7, #16]
 8004b5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b5e:	4013      	ands	r3, r2
 8004b60:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3720      	adds	r7, #32
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b088      	sub	sp, #32
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	333c      	adds	r3, #60	@ 0x3c
 8004b84:	3304      	adds	r3, #4
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	799b      	ldrb	r3, [r3, #6]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d17b      	bne.n	8004c9a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d015      	beq.n	8004bd8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	4a61      	ldr	r2, [pc, #388]	@ (8004d34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	f240 80b9 	bls.w	8004d28 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 80b3 	beq.w	8004d28 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bd4:	6093      	str	r3, [r2, #8]
 8004bd6:	e0a7      	b.n	8004d28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d009      	beq.n	8004bf6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bee:	461a      	mov	r2, r3
 8004bf0:	2320      	movs	r3, #32
 8004bf2:	6093      	str	r3, [r2, #8]
 8004bf4:	e098      	b.n	8004d28 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f040 8093 	bne.w	8004d28 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	4a4b      	ldr	r2, [pc, #300]	@ (8004d34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d90f      	bls.n	8004c2a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00a      	beq.n	8004c2a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c20:	461a      	mov	r2, r3
 8004c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c26:	6093      	str	r3, [r2, #8]
 8004c28:	e07e      	b.n	8004d28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	4413      	add	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6a1a      	ldr	r2, [r3, #32]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	0159      	lsls	r1, r3, #5
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	440b      	add	r3, r1
 8004c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c56:	1ad2      	subs	r2, r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d114      	bne.n	8004c8c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d109      	bne.n	8004c7e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6818      	ldr	r0, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c74:	461a      	mov	r2, r3
 8004c76:	2101      	movs	r1, #1
 8004c78:	f002 fc66 	bl	8007548 <USB_EP0_OutStart>
 8004c7c:	e006      	b.n	8004c8c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	441a      	add	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	4619      	mov	r1, r3
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f004 fbe2 	bl	800945c <HAL_PCD_DataOutStageCallback>
 8004c98:	e046      	b.n	8004d28 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	4a26      	ldr	r2, [pc, #152]	@ (8004d38 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d124      	bne.n	8004cec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00a      	beq.n	8004cc2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cb8:	461a      	mov	r2, r3
 8004cba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cbe:	6093      	str	r3, [r2, #8]
 8004cc0:	e032      	b.n	8004d28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f003 0320 	and.w	r3, r3, #32
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d008      	beq.n	8004cde <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cd8:	461a      	mov	r2, r3
 8004cda:	2320      	movs	r3, #32
 8004cdc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f004 fbb9 	bl	800945c <HAL_PCD_DataOutStageCallback>
 8004cea:	e01d      	b.n	8004d28 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d114      	bne.n	8004d1c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	440b      	add	r3, r1
 8004d00:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d108      	bne.n	8004d1c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6818      	ldr	r0, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004d14:	461a      	mov	r2, r3
 8004d16:	2100      	movs	r1, #0
 8004d18:	f002 fc16 	bl	8007548 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	4619      	mov	r1, r3
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f004 fb9a 	bl	800945c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3720      	adds	r7, #32
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	4f54300a 	.word	0x4f54300a
 8004d38:	4f54310a 	.word	0x4f54310a

08004d3c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	333c      	adds	r3, #60	@ 0x3c
 8004d54:	3304      	adds	r3, #4
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4a15      	ldr	r2, [pc, #84]	@ (8004dc4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d90e      	bls.n	8004d90 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d009      	beq.n	8004d90 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d88:	461a      	mov	r2, r3
 8004d8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d8e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f004 fb51 	bl	8009438 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4a0a      	ldr	r2, [pc, #40]	@ (8004dc4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d90c      	bls.n	8004db8 <PCD_EP_OutSetupPacket_int+0x7c>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	799b      	ldrb	r3, [r3, #6]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d108      	bne.n	8004db8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6818      	ldr	r0, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004db0:	461a      	mov	r2, r3
 8004db2:	2101      	movs	r1, #1
 8004db4:	f002 fbc8 	bl	8007548 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	4f54300a 	.word	0x4f54300a

08004dc8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	70fb      	strb	r3, [r7, #3]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dde:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004de0:	78fb      	ldrb	r3, [r7, #3]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d107      	bne.n	8004df6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004de6:	883b      	ldrh	r3, [r7, #0]
 8004de8:	0419      	lsls	r1, r3, #16
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004df4:	e028      	b.n	8004e48 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfc:	0c1b      	lsrs	r3, r3, #16
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	4413      	add	r3, r2
 8004e02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e04:	2300      	movs	r3, #0
 8004e06:	73fb      	strb	r3, [r7, #15]
 8004e08:	e00d      	b.n	8004e26 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	7bfb      	ldrb	r3, [r7, #15]
 8004e10:	3340      	adds	r3, #64	@ 0x40
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	0c1b      	lsrs	r3, r3, #16
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
 8004e22:	3301      	adds	r3, #1
 8004e24:	73fb      	strb	r3, [r7, #15]
 8004e26:	7bfa      	ldrb	r2, [r7, #15]
 8004e28:	78fb      	ldrb	r3, [r7, #3]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d3ec      	bcc.n	8004e0a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004e30:	883b      	ldrh	r3, [r7, #0]
 8004e32:	0418      	lsls	r0, r3, #16
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6819      	ldr	r1, [r3, #0]
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	4302      	orrs	r2, r0
 8004e40:	3340      	adds	r3, #64	@ 0x40
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	887a      	ldrh	r2, [r7, #2]
 8004e68:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	460b      	mov	r3, r1
 8004e82:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e267      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d075      	beq.n	8004f9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004eae:	4b88      	ldr	r3, [pc, #544]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 030c 	and.w	r3, r3, #12
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d00c      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eba:	4b85      	ldr	r3, [pc, #532]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d112      	bne.n	8004eec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ec6:	4b82      	ldr	r3, [pc, #520]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ece:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ed2:	d10b      	bne.n	8004eec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ed4:	4b7e      	ldr	r3, [pc, #504]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d05b      	beq.n	8004f98 <HAL_RCC_OscConfig+0x108>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d157      	bne.n	8004f98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e242      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ef4:	d106      	bne.n	8004f04 <HAL_RCC_OscConfig+0x74>
 8004ef6:	4b76      	ldr	r3, [pc, #472]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a75      	ldr	r2, [pc, #468]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	e01d      	b.n	8004f40 <HAL_RCC_OscConfig+0xb0>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f0c:	d10c      	bne.n	8004f28 <HAL_RCC_OscConfig+0x98>
 8004f0e:	4b70      	ldr	r3, [pc, #448]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a6f      	ldr	r2, [pc, #444]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	4b6d      	ldr	r3, [pc, #436]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a6c      	ldr	r2, [pc, #432]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	e00b      	b.n	8004f40 <HAL_RCC_OscConfig+0xb0>
 8004f28:	4b69      	ldr	r3, [pc, #420]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a68      	ldr	r2, [pc, #416]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	4b66      	ldr	r3, [pc, #408]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a65      	ldr	r2, [pc, #404]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d013      	beq.n	8004f70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f48:	f7fd f90e 	bl	8002168 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f50:	f7fd f90a 	bl	8002168 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b64      	cmp	r3, #100	@ 0x64
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e207      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f62:	4b5b      	ldr	r3, [pc, #364]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f0      	beq.n	8004f50 <HAL_RCC_OscConfig+0xc0>
 8004f6e:	e014      	b.n	8004f9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f70:	f7fd f8fa 	bl	8002168 <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f78:	f7fd f8f6 	bl	8002168 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b64      	cmp	r3, #100	@ 0x64
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e1f3      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f8a:	4b51      	ldr	r3, [pc, #324]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1f0      	bne.n	8004f78 <HAL_RCC_OscConfig+0xe8>
 8004f96:	e000      	b.n	8004f9a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d063      	beq.n	800506e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004fa6:	4b4a      	ldr	r3, [pc, #296]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 030c 	and.w	r3, r3, #12
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00b      	beq.n	8004fca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fb2:	4b47      	ldr	r3, [pc, #284]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004fba:	2b08      	cmp	r3, #8
 8004fbc:	d11c      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fbe:	4b44      	ldr	r3, [pc, #272]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d116      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fca:	4b41      	ldr	r3, [pc, #260]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d005      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x152>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d001      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e1c7      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	4937      	ldr	r1, [pc, #220]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ff6:	e03a      	b.n	800506e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d020      	beq.n	8005042 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005000:	4b34      	ldr	r3, [pc, #208]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8005002:	2201      	movs	r2, #1
 8005004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005006:	f7fd f8af 	bl	8002168 <HAL_GetTick>
 800500a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800500e:	f7fd f8ab 	bl	8002168 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e1a8      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005020:	4b2b      	ldr	r3, [pc, #172]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0f0      	beq.n	800500e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800502c:	4b28      	ldr	r3, [pc, #160]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	4925      	ldr	r1, [pc, #148]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 800503c:	4313      	orrs	r3, r2
 800503e:	600b      	str	r3, [r1, #0]
 8005040:	e015      	b.n	800506e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005042:	4b24      	ldr	r3, [pc, #144]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005048:	f7fd f88e 	bl	8002168 <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005050:	f7fd f88a 	bl	8002168 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e187      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005062:	4b1b      	ldr	r3, [pc, #108]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f0      	bne.n	8005050 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d036      	beq.n	80050e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d016      	beq.n	80050b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005082:	4b15      	ldr	r3, [pc, #84]	@ (80050d8 <HAL_RCC_OscConfig+0x248>)
 8005084:	2201      	movs	r2, #1
 8005086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005088:	f7fd f86e 	bl	8002168 <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005090:	f7fd f86a 	bl	8002168 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e167      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a2:	4b0b      	ldr	r3, [pc, #44]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 80050a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f0      	beq.n	8005090 <HAL_RCC_OscConfig+0x200>
 80050ae:	e01b      	b.n	80050e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050b0:	4b09      	ldr	r3, [pc, #36]	@ (80050d8 <HAL_RCC_OscConfig+0x248>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050b6:	f7fd f857 	bl	8002168 <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050bc:	e00e      	b.n	80050dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050be:	f7fd f853 	bl	8002168 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d907      	bls.n	80050dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e150      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
 80050d0:	40023800 	.word	0x40023800
 80050d4:	42470000 	.word	0x42470000
 80050d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050dc:	4b88      	ldr	r3, [pc, #544]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 80050de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1ea      	bne.n	80050be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 8097 	beq.w	8005224 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050f6:	2300      	movs	r3, #0
 80050f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050fa:	4b81      	ldr	r3, [pc, #516]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 80050fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10f      	bne.n	8005126 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005106:	2300      	movs	r3, #0
 8005108:	60bb      	str	r3, [r7, #8]
 800510a:	4b7d      	ldr	r3, [pc, #500]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 800510c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510e:	4a7c      	ldr	r2, [pc, #496]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005114:	6413      	str	r3, [r2, #64]	@ 0x40
 8005116:	4b7a      	ldr	r3, [pc, #488]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800511e:	60bb      	str	r3, [r7, #8]
 8005120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005122:	2301      	movs	r3, #1
 8005124:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005126:	4b77      	ldr	r3, [pc, #476]	@ (8005304 <HAL_RCC_OscConfig+0x474>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800512e:	2b00      	cmp	r3, #0
 8005130:	d118      	bne.n	8005164 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005132:	4b74      	ldr	r3, [pc, #464]	@ (8005304 <HAL_RCC_OscConfig+0x474>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a73      	ldr	r2, [pc, #460]	@ (8005304 <HAL_RCC_OscConfig+0x474>)
 8005138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800513c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800513e:	f7fd f813 	bl	8002168 <HAL_GetTick>
 8005142:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005144:	e008      	b.n	8005158 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005146:	f7fd f80f 	bl	8002168 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e10c      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005158:	4b6a      	ldr	r3, [pc, #424]	@ (8005304 <HAL_RCC_OscConfig+0x474>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0f0      	beq.n	8005146 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d106      	bne.n	800517a <HAL_RCC_OscConfig+0x2ea>
 800516c:	4b64      	ldr	r3, [pc, #400]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 800516e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005170:	4a63      	ldr	r2, [pc, #396]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005172:	f043 0301 	orr.w	r3, r3, #1
 8005176:	6713      	str	r3, [r2, #112]	@ 0x70
 8005178:	e01c      	b.n	80051b4 <HAL_RCC_OscConfig+0x324>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	2b05      	cmp	r3, #5
 8005180:	d10c      	bne.n	800519c <HAL_RCC_OscConfig+0x30c>
 8005182:	4b5f      	ldr	r3, [pc, #380]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005186:	4a5e      	ldr	r2, [pc, #376]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005188:	f043 0304 	orr.w	r3, r3, #4
 800518c:	6713      	str	r3, [r2, #112]	@ 0x70
 800518e:	4b5c      	ldr	r3, [pc, #368]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005192:	4a5b      	ldr	r2, [pc, #364]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005194:	f043 0301 	orr.w	r3, r3, #1
 8005198:	6713      	str	r3, [r2, #112]	@ 0x70
 800519a:	e00b      	b.n	80051b4 <HAL_RCC_OscConfig+0x324>
 800519c:	4b58      	ldr	r3, [pc, #352]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 800519e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a0:	4a57      	ldr	r2, [pc, #348]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 80051a2:	f023 0301 	bic.w	r3, r3, #1
 80051a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80051a8:	4b55      	ldr	r3, [pc, #340]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 80051aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ac:	4a54      	ldr	r2, [pc, #336]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 80051ae:	f023 0304 	bic.w	r3, r3, #4
 80051b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d015      	beq.n	80051e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051bc:	f7fc ffd4 	bl	8002168 <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c2:	e00a      	b.n	80051da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c4:	f7fc ffd0 	bl	8002168 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e0cb      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051da:	4b49      	ldr	r3, [pc, #292]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 80051dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0ee      	beq.n	80051c4 <HAL_RCC_OscConfig+0x334>
 80051e6:	e014      	b.n	8005212 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e8:	f7fc ffbe 	bl	8002168 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051ee:	e00a      	b.n	8005206 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f0:	f7fc ffba 	bl	8002168 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051fe:	4293      	cmp	r3, r2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e0b5      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005206:	4b3e      	ldr	r3, [pc, #248]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1ee      	bne.n	80051f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005212:	7dfb      	ldrb	r3, [r7, #23]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d105      	bne.n	8005224 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005218:	4b39      	ldr	r3, [pc, #228]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 800521a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521c:	4a38      	ldr	r2, [pc, #224]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 800521e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005222:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 80a1 	beq.w	8005370 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800522e:	4b34      	ldr	r3, [pc, #208]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 030c 	and.w	r3, r3, #12
 8005236:	2b08      	cmp	r3, #8
 8005238:	d05c      	beq.n	80052f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	2b02      	cmp	r3, #2
 8005240:	d141      	bne.n	80052c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005242:	4b31      	ldr	r3, [pc, #196]	@ (8005308 <HAL_RCC_OscConfig+0x478>)
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005248:	f7fc ff8e 	bl	8002168 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005250:	f7fc ff8a 	bl	8002168 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e087      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005262:	4b27      	ldr	r3, [pc, #156]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f0      	bne.n	8005250 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69da      	ldr	r2, [r3, #28]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527c:	019b      	lsls	r3, r3, #6
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005284:	085b      	lsrs	r3, r3, #1
 8005286:	3b01      	subs	r3, #1
 8005288:	041b      	lsls	r3, r3, #16
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005290:	061b      	lsls	r3, r3, #24
 8005292:	491b      	ldr	r1, [pc, #108]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005294:	4313      	orrs	r3, r2
 8005296:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005298:	4b1b      	ldr	r3, [pc, #108]	@ (8005308 <HAL_RCC_OscConfig+0x478>)
 800529a:	2201      	movs	r2, #1
 800529c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800529e:	f7fc ff63 	bl	8002168 <HAL_GetTick>
 80052a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a4:	e008      	b.n	80052b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052a6:	f7fc ff5f 	bl	8002168 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e05c      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052b8:	4b11      	ldr	r3, [pc, #68]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d0f0      	beq.n	80052a6 <HAL_RCC_OscConfig+0x416>
 80052c4:	e054      	b.n	8005370 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052c6:	4b10      	ldr	r3, [pc, #64]	@ (8005308 <HAL_RCC_OscConfig+0x478>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052cc:	f7fc ff4c 	bl	8002168 <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052d4:	f7fc ff48 	bl	8002168 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e045      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052e6:	4b06      	ldr	r3, [pc, #24]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f0      	bne.n	80052d4 <HAL_RCC_OscConfig+0x444>
 80052f2:	e03d      	b.n	8005370 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d107      	bne.n	800530c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e038      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
 8005300:	40023800 	.word	0x40023800
 8005304:	40007000 	.word	0x40007000
 8005308:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800530c:	4b1b      	ldr	r3, [pc, #108]	@ (800537c <HAL_RCC_OscConfig+0x4ec>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d028      	beq.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005324:	429a      	cmp	r2, r3
 8005326:	d121      	bne.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005332:	429a      	cmp	r2, r3
 8005334:	d11a      	bne.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800533c:	4013      	ands	r3, r2
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005342:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005344:	4293      	cmp	r3, r2
 8005346:	d111      	bne.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005352:	085b      	lsrs	r3, r3, #1
 8005354:	3b01      	subs	r3, #1
 8005356:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005358:	429a      	cmp	r2, r3
 800535a:	d107      	bne.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005366:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005368:	429a      	cmp	r2, r3
 800536a:	d001      	beq.n	8005370 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	40023800 	.word	0x40023800

08005380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e0cc      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005394:	4b68      	ldr	r3, [pc, #416]	@ (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 030f 	and.w	r3, r3, #15
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d90c      	bls.n	80053bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a2:	4b65      	ldr	r3, [pc, #404]	@ (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053aa:	4b63      	ldr	r3, [pc, #396]	@ (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 030f 	and.w	r3, r3, #15
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d001      	beq.n	80053bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e0b8      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d020      	beq.n	800540a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d005      	beq.n	80053e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053d4:	4b59      	ldr	r3, [pc, #356]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	4a58      	ldr	r2, [pc, #352]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80053de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0308 	and.w	r3, r3, #8
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053ec:	4b53      	ldr	r3, [pc, #332]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	4a52      	ldr	r2, [pc, #328]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80053f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f8:	4b50      	ldr	r3, [pc, #320]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	494d      	ldr	r1, [pc, #308]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005406:	4313      	orrs	r3, r2
 8005408:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d044      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d107      	bne.n	800542e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800541e:	4b47      	ldr	r3, [pc, #284]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d119      	bne.n	800545e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e07f      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d003      	beq.n	800543e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800543a:	2b03      	cmp	r3, #3
 800543c:	d107      	bne.n	800544e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800543e:	4b3f      	ldr	r3, [pc, #252]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d109      	bne.n	800545e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e06f      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800544e:	4b3b      	ldr	r3, [pc, #236]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e067      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800545e:	4b37      	ldr	r3, [pc, #220]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f023 0203 	bic.w	r2, r3, #3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	4934      	ldr	r1, [pc, #208]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 800546c:	4313      	orrs	r3, r2
 800546e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005470:	f7fc fe7a 	bl	8002168 <HAL_GetTick>
 8005474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005476:	e00a      	b.n	800548e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005478:	f7fc fe76 	bl	8002168 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005486:	4293      	cmp	r3, r2
 8005488:	d901      	bls.n	800548e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e04f      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800548e:	4b2b      	ldr	r3, [pc, #172]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 020c 	and.w	r2, r3, #12
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	429a      	cmp	r2, r3
 800549e:	d1eb      	bne.n	8005478 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054a0:	4b25      	ldr	r3, [pc, #148]	@ (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 030f 	and.w	r3, r3, #15
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d20c      	bcs.n	80054c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ae:	4b22      	ldr	r3, [pc, #136]	@ (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b6:	4b20      	ldr	r3, [pc, #128]	@ (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d001      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e032      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d008      	beq.n	80054e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054d4:	4b19      	ldr	r3, [pc, #100]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4916      	ldr	r1, [pc, #88]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d009      	beq.n	8005506 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054f2:	4b12      	ldr	r3, [pc, #72]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	490e      	ldr	r1, [pc, #56]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005502:	4313      	orrs	r3, r2
 8005504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005506:	f000 f821 	bl	800554c <HAL_RCC_GetSysClockFreq>
 800550a:	4602      	mov	r2, r0
 800550c:	4b0b      	ldr	r3, [pc, #44]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	091b      	lsrs	r3, r3, #4
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	490a      	ldr	r1, [pc, #40]	@ (8005540 <HAL_RCC_ClockConfig+0x1c0>)
 8005518:	5ccb      	ldrb	r3, [r1, r3]
 800551a:	fa22 f303 	lsr.w	r3, r2, r3
 800551e:	4a09      	ldr	r2, [pc, #36]	@ (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 8005520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005522:	4b09      	ldr	r3, [pc, #36]	@ (8005548 <HAL_RCC_ClockConfig+0x1c8>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4618      	mov	r0, r3
 8005528:	f7fc fdda 	bl	80020e0 <HAL_InitTick>

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	40023c00 	.word	0x40023c00
 800553c:	40023800 	.word	0x40023800
 8005540:	0800ab20 	.word	0x0800ab20
 8005544:	20000090 	.word	0x20000090
 8005548:	20000094 	.word	0x20000094

0800554c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800554c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005550:	b094      	sub	sp, #80	@ 0x50
 8005552:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005564:	4b79      	ldr	r3, [pc, #484]	@ (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f003 030c 	and.w	r3, r3, #12
 800556c:	2b08      	cmp	r3, #8
 800556e:	d00d      	beq.n	800558c <HAL_RCC_GetSysClockFreq+0x40>
 8005570:	2b08      	cmp	r3, #8
 8005572:	f200 80e1 	bhi.w	8005738 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <HAL_RCC_GetSysClockFreq+0x34>
 800557a:	2b04      	cmp	r3, #4
 800557c:	d003      	beq.n	8005586 <HAL_RCC_GetSysClockFreq+0x3a>
 800557e:	e0db      	b.n	8005738 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005580:	4b73      	ldr	r3, [pc, #460]	@ (8005750 <HAL_RCC_GetSysClockFreq+0x204>)
 8005582:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005584:	e0db      	b.n	800573e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005586:	4b73      	ldr	r3, [pc, #460]	@ (8005754 <HAL_RCC_GetSysClockFreq+0x208>)
 8005588:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800558a:	e0d8      	b.n	800573e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800558c:	4b6f      	ldr	r3, [pc, #444]	@ (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005594:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005596:	4b6d      	ldr	r3, [pc, #436]	@ (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d063      	beq.n	800566a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055a2:	4b6a      	ldr	r3, [pc, #424]	@ (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	099b      	lsrs	r3, r3, #6
 80055a8:	2200      	movs	r2, #0
 80055aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80055ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80055b6:	2300      	movs	r3, #0
 80055b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80055ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80055be:	4622      	mov	r2, r4
 80055c0:	462b      	mov	r3, r5
 80055c2:	f04f 0000 	mov.w	r0, #0
 80055c6:	f04f 0100 	mov.w	r1, #0
 80055ca:	0159      	lsls	r1, r3, #5
 80055cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055d0:	0150      	lsls	r0, r2, #5
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	4621      	mov	r1, r4
 80055d8:	1a51      	subs	r1, r2, r1
 80055da:	6139      	str	r1, [r7, #16]
 80055dc:	4629      	mov	r1, r5
 80055de:	eb63 0301 	sbc.w	r3, r3, r1
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055f0:	4659      	mov	r1, fp
 80055f2:	018b      	lsls	r3, r1, #6
 80055f4:	4651      	mov	r1, sl
 80055f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055fa:	4651      	mov	r1, sl
 80055fc:	018a      	lsls	r2, r1, #6
 80055fe:	4651      	mov	r1, sl
 8005600:	ebb2 0801 	subs.w	r8, r2, r1
 8005604:	4659      	mov	r1, fp
 8005606:	eb63 0901 	sbc.w	r9, r3, r1
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	f04f 0300 	mov.w	r3, #0
 8005612:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005616:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800561a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800561e:	4690      	mov	r8, r2
 8005620:	4699      	mov	r9, r3
 8005622:	4623      	mov	r3, r4
 8005624:	eb18 0303 	adds.w	r3, r8, r3
 8005628:	60bb      	str	r3, [r7, #8]
 800562a:	462b      	mov	r3, r5
 800562c:	eb49 0303 	adc.w	r3, r9, r3
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	f04f 0200 	mov.w	r2, #0
 8005636:	f04f 0300 	mov.w	r3, #0
 800563a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800563e:	4629      	mov	r1, r5
 8005640:	024b      	lsls	r3, r1, #9
 8005642:	4621      	mov	r1, r4
 8005644:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005648:	4621      	mov	r1, r4
 800564a:	024a      	lsls	r2, r1, #9
 800564c:	4610      	mov	r0, r2
 800564e:	4619      	mov	r1, r3
 8005650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005652:	2200      	movs	r2, #0
 8005654:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005656:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005658:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800565c:	f7fb fab4 	bl	8000bc8 <__aeabi_uldivmod>
 8005660:	4602      	mov	r2, r0
 8005662:	460b      	mov	r3, r1
 8005664:	4613      	mov	r3, r2
 8005666:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005668:	e058      	b.n	800571c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800566a:	4b38      	ldr	r3, [pc, #224]	@ (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	099b      	lsrs	r3, r3, #6
 8005670:	2200      	movs	r2, #0
 8005672:	4618      	mov	r0, r3
 8005674:	4611      	mov	r1, r2
 8005676:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800567a:	623b      	str	r3, [r7, #32]
 800567c:	2300      	movs	r3, #0
 800567e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005680:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005684:	4642      	mov	r2, r8
 8005686:	464b      	mov	r3, r9
 8005688:	f04f 0000 	mov.w	r0, #0
 800568c:	f04f 0100 	mov.w	r1, #0
 8005690:	0159      	lsls	r1, r3, #5
 8005692:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005696:	0150      	lsls	r0, r2, #5
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	4641      	mov	r1, r8
 800569e:	ebb2 0a01 	subs.w	sl, r2, r1
 80056a2:	4649      	mov	r1, r9
 80056a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	f04f 0300 	mov.w	r3, #0
 80056b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80056b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80056b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80056bc:	ebb2 040a 	subs.w	r4, r2, sl
 80056c0:	eb63 050b 	sbc.w	r5, r3, fp
 80056c4:	f04f 0200 	mov.w	r2, #0
 80056c8:	f04f 0300 	mov.w	r3, #0
 80056cc:	00eb      	lsls	r3, r5, #3
 80056ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056d2:	00e2      	lsls	r2, r4, #3
 80056d4:	4614      	mov	r4, r2
 80056d6:	461d      	mov	r5, r3
 80056d8:	4643      	mov	r3, r8
 80056da:	18e3      	adds	r3, r4, r3
 80056dc:	603b      	str	r3, [r7, #0]
 80056de:	464b      	mov	r3, r9
 80056e0:	eb45 0303 	adc.w	r3, r5, r3
 80056e4:	607b      	str	r3, [r7, #4]
 80056e6:	f04f 0200 	mov.w	r2, #0
 80056ea:	f04f 0300 	mov.w	r3, #0
 80056ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056f2:	4629      	mov	r1, r5
 80056f4:	028b      	lsls	r3, r1, #10
 80056f6:	4621      	mov	r1, r4
 80056f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056fc:	4621      	mov	r1, r4
 80056fe:	028a      	lsls	r2, r1, #10
 8005700:	4610      	mov	r0, r2
 8005702:	4619      	mov	r1, r3
 8005704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005706:	2200      	movs	r2, #0
 8005708:	61bb      	str	r3, [r7, #24]
 800570a:	61fa      	str	r2, [r7, #28]
 800570c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005710:	f7fb fa5a 	bl	8000bc8 <__aeabi_uldivmod>
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	4613      	mov	r3, r2
 800571a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800571c:	4b0b      	ldr	r3, [pc, #44]	@ (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	0c1b      	lsrs	r3, r3, #16
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	3301      	adds	r3, #1
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800572c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800572e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005730:	fbb2 f3f3 	udiv	r3, r2, r3
 8005734:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005736:	e002      	b.n	800573e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005738:	4b05      	ldr	r3, [pc, #20]	@ (8005750 <HAL_RCC_GetSysClockFreq+0x204>)
 800573a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800573c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800573e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005740:	4618      	mov	r0, r3
 8005742:	3750      	adds	r7, #80	@ 0x50
 8005744:	46bd      	mov	sp, r7
 8005746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800574a:	bf00      	nop
 800574c:	40023800 	.word	0x40023800
 8005750:	00f42400 	.word	0x00f42400
 8005754:	007a1200 	.word	0x007a1200

08005758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800575c:	4b03      	ldr	r3, [pc, #12]	@ (800576c <HAL_RCC_GetHCLKFreq+0x14>)
 800575e:	681b      	ldr	r3, [r3, #0]
}
 8005760:	4618      	mov	r0, r3
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	20000090 	.word	0x20000090

08005770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005774:	f7ff fff0 	bl	8005758 <HAL_RCC_GetHCLKFreq>
 8005778:	4602      	mov	r2, r0
 800577a:	4b05      	ldr	r3, [pc, #20]	@ (8005790 <HAL_RCC_GetPCLK1Freq+0x20>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	0a9b      	lsrs	r3, r3, #10
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	4903      	ldr	r1, [pc, #12]	@ (8005794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005786:	5ccb      	ldrb	r3, [r1, r3]
 8005788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800578c:	4618      	mov	r0, r3
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40023800 	.word	0x40023800
 8005794:	0800ab30 	.word	0x0800ab30

08005798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800579c:	f7ff ffdc 	bl	8005758 <HAL_RCC_GetHCLKFreq>
 80057a0:	4602      	mov	r2, r0
 80057a2:	4b05      	ldr	r3, [pc, #20]	@ (80057b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	0b5b      	lsrs	r3, r3, #13
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	4903      	ldr	r1, [pc, #12]	@ (80057bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80057ae:	5ccb      	ldrb	r3, [r1, r3]
 80057b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	40023800 	.word	0x40023800
 80057bc:	0800ab30 	.word	0x0800ab30

080057c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e042      	b.n	8005858 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d106      	bne.n	80057ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7fc fb64 	bl	8001eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2224      	movs	r2, #36	@ 0x24
 80057f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005802:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f973 	bl	8005af0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005818:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	695a      	ldr	r2, [r3, #20]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005828:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68da      	ldr	r2, [r3, #12]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005838:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2220      	movs	r2, #32
 8005844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2220      	movs	r2, #32
 800584c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b08a      	sub	sp, #40	@ 0x28
 8005864:	af02      	add	r7, sp, #8
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	603b      	str	r3, [r7, #0]
 800586c:	4613      	mov	r3, r2
 800586e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b20      	cmp	r3, #32
 800587e:	d175      	bne.n	800596c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <HAL_UART_Transmit+0x2c>
 8005886:	88fb      	ldrh	r3, [r7, #6]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e06e      	b.n	800596e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2221      	movs	r2, #33	@ 0x21
 800589a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800589e:	f7fc fc63 	bl	8002168 <HAL_GetTick>
 80058a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	88fa      	ldrh	r2, [r7, #6]
 80058a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	88fa      	ldrh	r2, [r7, #6]
 80058ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058b8:	d108      	bne.n	80058cc <HAL_UART_Transmit+0x6c>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d104      	bne.n	80058cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80058c2:	2300      	movs	r3, #0
 80058c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	61bb      	str	r3, [r7, #24]
 80058ca:	e003      	b.n	80058d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058d0:	2300      	movs	r3, #0
 80058d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058d4:	e02e      	b.n	8005934 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	2200      	movs	r2, #0
 80058de:	2180      	movs	r1, #128	@ 0x80
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 f848 	bl	8005976 <UART_WaitOnFlagUntilTimeout>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e03a      	b.n	800596e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10b      	bne.n	8005916 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800590c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	3302      	adds	r3, #2
 8005912:	61bb      	str	r3, [r7, #24]
 8005914:	e007      	b.n	8005926 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	781a      	ldrb	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	3301      	adds	r3, #1
 8005924:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b01      	subs	r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005938:	b29b      	uxth	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1cb      	bne.n	80058d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2200      	movs	r2, #0
 8005946:	2140      	movs	r1, #64	@ 0x40
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 f814 	bl	8005976 <UART_WaitOnFlagUntilTimeout>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d005      	beq.n	8005960 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2220      	movs	r2, #32
 8005958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e006      	b.n	800596e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2220      	movs	r2, #32
 8005964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005968:	2300      	movs	r3, #0
 800596a:	e000      	b.n	800596e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800596c:	2302      	movs	r3, #2
  }
}
 800596e:	4618      	mov	r0, r3
 8005970:	3720      	adds	r7, #32
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b086      	sub	sp, #24
 800597a:	af00      	add	r7, sp, #0
 800597c:	60f8      	str	r0, [r7, #12]
 800597e:	60b9      	str	r1, [r7, #8]
 8005980:	603b      	str	r3, [r7, #0]
 8005982:	4613      	mov	r3, r2
 8005984:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005986:	e03b      	b.n	8005a00 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598e:	d037      	beq.n	8005a00 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005990:	f7fc fbea 	bl	8002168 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	6a3a      	ldr	r2, [r7, #32]
 800599c:	429a      	cmp	r2, r3
 800599e:	d302      	bcc.n	80059a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e03a      	b.n	8005a20 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d023      	beq.n	8005a00 <UART_WaitOnFlagUntilTimeout+0x8a>
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2b80      	cmp	r3, #128	@ 0x80
 80059bc:	d020      	beq.n	8005a00 <UART_WaitOnFlagUntilTimeout+0x8a>
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b40      	cmp	r3, #64	@ 0x40
 80059c2:	d01d      	beq.n	8005a00 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0308 	and.w	r3, r3, #8
 80059ce:	2b08      	cmp	r3, #8
 80059d0:	d116      	bne.n	8005a00 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80059d2:	2300      	movs	r3, #0
 80059d4:	617b      	str	r3, [r7, #20]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	617b      	str	r3, [r7, #20]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	617b      	str	r3, [r7, #20]
 80059e6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 f81d 	bl	8005a28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2208      	movs	r2, #8
 80059f2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e00f      	b.n	8005a20 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	bf0c      	ite	eq
 8005a10:	2301      	moveq	r3, #1
 8005a12:	2300      	movne	r3, #0
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	461a      	mov	r2, r3
 8005a18:	79fb      	ldrb	r3, [r7, #7]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d0b4      	beq.n	8005988 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3718      	adds	r7, #24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b095      	sub	sp, #84	@ 0x54
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	330c      	adds	r3, #12
 8005a36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a3a:	e853 3f00 	ldrex	r3, [r3]
 8005a3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	330c      	adds	r3, #12
 8005a4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a50:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a58:	e841 2300 	strex	r3, r2, [r1]
 8005a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1e5      	bne.n	8005a30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	3314      	adds	r3, #20
 8005a6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	e853 3f00 	ldrex	r3, [r3]
 8005a72:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	f023 0301 	bic.w	r3, r3, #1
 8005a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	3314      	adds	r3, #20
 8005a82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a8c:	e841 2300 	strex	r3, r2, [r1]
 8005a90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1e5      	bne.n	8005a64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d119      	bne.n	8005ad4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	330c      	adds	r3, #12
 8005aa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	e853 3f00 	ldrex	r3, [r3]
 8005aae:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f023 0310 	bic.w	r3, r3, #16
 8005ab6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	330c      	adds	r3, #12
 8005abe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ac0:	61ba      	str	r2, [r7, #24]
 8005ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac4:	6979      	ldr	r1, [r7, #20]
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	e841 2300 	strex	r3, r2, [r1]
 8005acc:	613b      	str	r3, [r7, #16]
   return(result);
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1e5      	bne.n	8005aa0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005ae2:	bf00      	nop
 8005ae4:	3754      	adds	r7, #84	@ 0x54
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
	...

08005af0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005af4:	b0c0      	sub	sp, #256	@ 0x100
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b0c:	68d9      	ldr	r1, [r3, #12]
 8005b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	ea40 0301 	orr.w	r3, r0, r1
 8005b18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	431a      	orrs	r2, r3
 8005b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005b48:	f021 010c 	bic.w	r1, r1, #12
 8005b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b56:	430b      	orrs	r3, r1
 8005b58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b6a:	6999      	ldr	r1, [r3, #24]
 8005b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	ea40 0301 	orr.w	r3, r0, r1
 8005b76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	4b8f      	ldr	r3, [pc, #572]	@ (8005dbc <UART_SetConfig+0x2cc>)
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d005      	beq.n	8005b90 <UART_SetConfig+0xa0>
 8005b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	4b8d      	ldr	r3, [pc, #564]	@ (8005dc0 <UART_SetConfig+0x2d0>)
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d104      	bne.n	8005b9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b90:	f7ff fe02 	bl	8005798 <HAL_RCC_GetPCLK2Freq>
 8005b94:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005b98:	e003      	b.n	8005ba2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b9a:	f7ff fde9 	bl	8005770 <HAL_RCC_GetPCLK1Freq>
 8005b9e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bac:	f040 810c 	bne.w	8005dc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005bba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005bbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005bc2:	4622      	mov	r2, r4
 8005bc4:	462b      	mov	r3, r5
 8005bc6:	1891      	adds	r1, r2, r2
 8005bc8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005bca:	415b      	adcs	r3, r3
 8005bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	eb12 0801 	adds.w	r8, r2, r1
 8005bd8:	4629      	mov	r1, r5
 8005bda:	eb43 0901 	adc.w	r9, r3, r1
 8005bde:	f04f 0200 	mov.w	r2, #0
 8005be2:	f04f 0300 	mov.w	r3, #0
 8005be6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bf2:	4690      	mov	r8, r2
 8005bf4:	4699      	mov	r9, r3
 8005bf6:	4623      	mov	r3, r4
 8005bf8:	eb18 0303 	adds.w	r3, r8, r3
 8005bfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c00:	462b      	mov	r3, r5
 8005c02:	eb49 0303 	adc.w	r3, r9, r3
 8005c06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c16:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005c1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c1e:	460b      	mov	r3, r1
 8005c20:	18db      	adds	r3, r3, r3
 8005c22:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c24:	4613      	mov	r3, r2
 8005c26:	eb42 0303 	adc.w	r3, r2, r3
 8005c2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005c30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005c34:	f7fa ffc8 	bl	8000bc8 <__aeabi_uldivmod>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4b61      	ldr	r3, [pc, #388]	@ (8005dc4 <UART_SetConfig+0x2d4>)
 8005c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	011c      	lsls	r4, r3, #4
 8005c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c50:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005c54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005c58:	4642      	mov	r2, r8
 8005c5a:	464b      	mov	r3, r9
 8005c5c:	1891      	adds	r1, r2, r2
 8005c5e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005c60:	415b      	adcs	r3, r3
 8005c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005c68:	4641      	mov	r1, r8
 8005c6a:	eb12 0a01 	adds.w	sl, r2, r1
 8005c6e:	4649      	mov	r1, r9
 8005c70:	eb43 0b01 	adc.w	fp, r3, r1
 8005c74:	f04f 0200 	mov.w	r2, #0
 8005c78:	f04f 0300 	mov.w	r3, #0
 8005c7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c88:	4692      	mov	sl, r2
 8005c8a:	469b      	mov	fp, r3
 8005c8c:	4643      	mov	r3, r8
 8005c8e:	eb1a 0303 	adds.w	r3, sl, r3
 8005c92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c96:	464b      	mov	r3, r9
 8005c98:	eb4b 0303 	adc.w	r3, fp, r3
 8005c9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005cac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005cb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	18db      	adds	r3, r3, r3
 8005cb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cba:	4613      	mov	r3, r2
 8005cbc:	eb42 0303 	adc.w	r3, r2, r3
 8005cc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005cc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005cca:	f7fa ff7d 	bl	8000bc8 <__aeabi_uldivmod>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	4611      	mov	r1, r2
 8005cd4:	4b3b      	ldr	r3, [pc, #236]	@ (8005dc4 <UART_SetConfig+0x2d4>)
 8005cd6:	fba3 2301 	umull	r2, r3, r3, r1
 8005cda:	095b      	lsrs	r3, r3, #5
 8005cdc:	2264      	movs	r2, #100	@ 0x64
 8005cde:	fb02 f303 	mul.w	r3, r2, r3
 8005ce2:	1acb      	subs	r3, r1, r3
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005cea:	4b36      	ldr	r3, [pc, #216]	@ (8005dc4 <UART_SetConfig+0x2d4>)
 8005cec:	fba3 2302 	umull	r2, r3, r3, r2
 8005cf0:	095b      	lsrs	r3, r3, #5
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005cf8:	441c      	add	r4, r3
 8005cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d04:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005d08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005d0c:	4642      	mov	r2, r8
 8005d0e:	464b      	mov	r3, r9
 8005d10:	1891      	adds	r1, r2, r2
 8005d12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005d14:	415b      	adcs	r3, r3
 8005d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005d1c:	4641      	mov	r1, r8
 8005d1e:	1851      	adds	r1, r2, r1
 8005d20:	6339      	str	r1, [r7, #48]	@ 0x30
 8005d22:	4649      	mov	r1, r9
 8005d24:	414b      	adcs	r3, r1
 8005d26:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d28:	f04f 0200 	mov.w	r2, #0
 8005d2c:	f04f 0300 	mov.w	r3, #0
 8005d30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005d34:	4659      	mov	r1, fp
 8005d36:	00cb      	lsls	r3, r1, #3
 8005d38:	4651      	mov	r1, sl
 8005d3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d3e:	4651      	mov	r1, sl
 8005d40:	00ca      	lsls	r2, r1, #3
 8005d42:	4610      	mov	r0, r2
 8005d44:	4619      	mov	r1, r3
 8005d46:	4603      	mov	r3, r0
 8005d48:	4642      	mov	r2, r8
 8005d4a:	189b      	adds	r3, r3, r2
 8005d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d50:	464b      	mov	r3, r9
 8005d52:	460a      	mov	r2, r1
 8005d54:	eb42 0303 	adc.w	r3, r2, r3
 8005d58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d68:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005d6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d70:	460b      	mov	r3, r1
 8005d72:	18db      	adds	r3, r3, r3
 8005d74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d76:	4613      	mov	r3, r2
 8005d78:	eb42 0303 	adc.w	r3, r2, r3
 8005d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005d86:	f7fa ff1f 	bl	8000bc8 <__aeabi_uldivmod>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc4 <UART_SetConfig+0x2d4>)
 8005d90:	fba3 1302 	umull	r1, r3, r3, r2
 8005d94:	095b      	lsrs	r3, r3, #5
 8005d96:	2164      	movs	r1, #100	@ 0x64
 8005d98:	fb01 f303 	mul.w	r3, r1, r3
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	00db      	lsls	r3, r3, #3
 8005da0:	3332      	adds	r3, #50	@ 0x32
 8005da2:	4a08      	ldr	r2, [pc, #32]	@ (8005dc4 <UART_SetConfig+0x2d4>)
 8005da4:	fba2 2303 	umull	r2, r3, r2, r3
 8005da8:	095b      	lsrs	r3, r3, #5
 8005daa:	f003 0207 	and.w	r2, r3, #7
 8005dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4422      	add	r2, r4
 8005db6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005db8:	e106      	b.n	8005fc8 <UART_SetConfig+0x4d8>
 8005dba:	bf00      	nop
 8005dbc:	40011000 	.word	0x40011000
 8005dc0:	40011400 	.word	0x40011400
 8005dc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005dd2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005dd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005dda:	4642      	mov	r2, r8
 8005ddc:	464b      	mov	r3, r9
 8005dde:	1891      	adds	r1, r2, r2
 8005de0:	6239      	str	r1, [r7, #32]
 8005de2:	415b      	adcs	r3, r3
 8005de4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005de6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005dea:	4641      	mov	r1, r8
 8005dec:	1854      	adds	r4, r2, r1
 8005dee:	4649      	mov	r1, r9
 8005df0:	eb43 0501 	adc.w	r5, r3, r1
 8005df4:	f04f 0200 	mov.w	r2, #0
 8005df8:	f04f 0300 	mov.w	r3, #0
 8005dfc:	00eb      	lsls	r3, r5, #3
 8005dfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e02:	00e2      	lsls	r2, r4, #3
 8005e04:	4614      	mov	r4, r2
 8005e06:	461d      	mov	r5, r3
 8005e08:	4643      	mov	r3, r8
 8005e0a:	18e3      	adds	r3, r4, r3
 8005e0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e10:	464b      	mov	r3, r9
 8005e12:	eb45 0303 	adc.w	r3, r5, r3
 8005e16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e2a:	f04f 0200 	mov.w	r2, #0
 8005e2e:	f04f 0300 	mov.w	r3, #0
 8005e32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005e36:	4629      	mov	r1, r5
 8005e38:	008b      	lsls	r3, r1, #2
 8005e3a:	4621      	mov	r1, r4
 8005e3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e40:	4621      	mov	r1, r4
 8005e42:	008a      	lsls	r2, r1, #2
 8005e44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005e48:	f7fa febe 	bl	8000bc8 <__aeabi_uldivmod>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4b60      	ldr	r3, [pc, #384]	@ (8005fd4 <UART_SetConfig+0x4e4>)
 8005e52:	fba3 2302 	umull	r2, r3, r3, r2
 8005e56:	095b      	lsrs	r3, r3, #5
 8005e58:	011c      	lsls	r4, r3, #4
 8005e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005e68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005e6c:	4642      	mov	r2, r8
 8005e6e:	464b      	mov	r3, r9
 8005e70:	1891      	adds	r1, r2, r2
 8005e72:	61b9      	str	r1, [r7, #24]
 8005e74:	415b      	adcs	r3, r3
 8005e76:	61fb      	str	r3, [r7, #28]
 8005e78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e7c:	4641      	mov	r1, r8
 8005e7e:	1851      	adds	r1, r2, r1
 8005e80:	6139      	str	r1, [r7, #16]
 8005e82:	4649      	mov	r1, r9
 8005e84:	414b      	adcs	r3, r1
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	f04f 0200 	mov.w	r2, #0
 8005e8c:	f04f 0300 	mov.w	r3, #0
 8005e90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e94:	4659      	mov	r1, fp
 8005e96:	00cb      	lsls	r3, r1, #3
 8005e98:	4651      	mov	r1, sl
 8005e9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e9e:	4651      	mov	r1, sl
 8005ea0:	00ca      	lsls	r2, r1, #3
 8005ea2:	4610      	mov	r0, r2
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	4642      	mov	r2, r8
 8005eaa:	189b      	adds	r3, r3, r2
 8005eac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005eb0:	464b      	mov	r3, r9
 8005eb2:	460a      	mov	r2, r1
 8005eb4:	eb42 0303 	adc.w	r3, r2, r3
 8005eb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ec6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005ec8:	f04f 0200 	mov.w	r2, #0
 8005ecc:	f04f 0300 	mov.w	r3, #0
 8005ed0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ed4:	4649      	mov	r1, r9
 8005ed6:	008b      	lsls	r3, r1, #2
 8005ed8:	4641      	mov	r1, r8
 8005eda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ede:	4641      	mov	r1, r8
 8005ee0:	008a      	lsls	r2, r1, #2
 8005ee2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005ee6:	f7fa fe6f 	bl	8000bc8 <__aeabi_uldivmod>
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	4611      	mov	r1, r2
 8005ef0:	4b38      	ldr	r3, [pc, #224]	@ (8005fd4 <UART_SetConfig+0x4e4>)
 8005ef2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ef6:	095b      	lsrs	r3, r3, #5
 8005ef8:	2264      	movs	r2, #100	@ 0x64
 8005efa:	fb02 f303 	mul.w	r3, r2, r3
 8005efe:	1acb      	subs	r3, r1, r3
 8005f00:	011b      	lsls	r3, r3, #4
 8005f02:	3332      	adds	r3, #50	@ 0x32
 8005f04:	4a33      	ldr	r2, [pc, #204]	@ (8005fd4 <UART_SetConfig+0x4e4>)
 8005f06:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0a:	095b      	lsrs	r3, r3, #5
 8005f0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f10:	441c      	add	r4, r3
 8005f12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f16:	2200      	movs	r2, #0
 8005f18:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f1a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005f1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005f20:	4642      	mov	r2, r8
 8005f22:	464b      	mov	r3, r9
 8005f24:	1891      	adds	r1, r2, r2
 8005f26:	60b9      	str	r1, [r7, #8]
 8005f28:	415b      	adcs	r3, r3
 8005f2a:	60fb      	str	r3, [r7, #12]
 8005f2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f30:	4641      	mov	r1, r8
 8005f32:	1851      	adds	r1, r2, r1
 8005f34:	6039      	str	r1, [r7, #0]
 8005f36:	4649      	mov	r1, r9
 8005f38:	414b      	adcs	r3, r1
 8005f3a:	607b      	str	r3, [r7, #4]
 8005f3c:	f04f 0200 	mov.w	r2, #0
 8005f40:	f04f 0300 	mov.w	r3, #0
 8005f44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f48:	4659      	mov	r1, fp
 8005f4a:	00cb      	lsls	r3, r1, #3
 8005f4c:	4651      	mov	r1, sl
 8005f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f52:	4651      	mov	r1, sl
 8005f54:	00ca      	lsls	r2, r1, #3
 8005f56:	4610      	mov	r0, r2
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	4642      	mov	r2, r8
 8005f5e:	189b      	adds	r3, r3, r2
 8005f60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f62:	464b      	mov	r3, r9
 8005f64:	460a      	mov	r2, r1
 8005f66:	eb42 0303 	adc.w	r3, r2, r3
 8005f6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f76:	667a      	str	r2, [r7, #100]	@ 0x64
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	f04f 0300 	mov.w	r3, #0
 8005f80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005f84:	4649      	mov	r1, r9
 8005f86:	008b      	lsls	r3, r1, #2
 8005f88:	4641      	mov	r1, r8
 8005f8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f8e:	4641      	mov	r1, r8
 8005f90:	008a      	lsls	r2, r1, #2
 8005f92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005f96:	f7fa fe17 	bl	8000bc8 <__aeabi_uldivmod>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005fd4 <UART_SetConfig+0x4e4>)
 8005fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8005fa4:	095b      	lsrs	r3, r3, #5
 8005fa6:	2164      	movs	r1, #100	@ 0x64
 8005fa8:	fb01 f303 	mul.w	r3, r1, r3
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	3332      	adds	r3, #50	@ 0x32
 8005fb2:	4a08      	ldr	r2, [pc, #32]	@ (8005fd4 <UART_SetConfig+0x4e4>)
 8005fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb8:	095b      	lsrs	r3, r3, #5
 8005fba:	f003 020f 	and.w	r2, r3, #15
 8005fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4422      	add	r2, r4
 8005fc6:	609a      	str	r2, [r3, #8]
}
 8005fc8:	bf00      	nop
 8005fca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fd4:	51eb851f 	.word	0x51eb851f

08005fd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fd8:	b084      	sub	sp, #16
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b084      	sub	sp, #16
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
 8005fe2:	f107 001c 	add.w	r0, r7, #28
 8005fe6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d123      	bne.n	800603a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006006:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800601a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800601e:	2b01      	cmp	r3, #1
 8006020:	d105      	bne.n	800602e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f001 fae8 	bl	8007604 <USB_CoreReset>
 8006034:	4603      	mov	r3, r0
 8006036:	73fb      	strb	r3, [r7, #15]
 8006038:	e01b      	b.n	8006072 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f001 fadc 	bl	8007604 <USB_CoreReset>
 800604c:	4603      	mov	r3, r0
 800604e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006050:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006054:	2b00      	cmp	r3, #0
 8006056:	d106      	bne.n	8006066 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800605c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	639a      	str	r2, [r3, #56]	@ 0x38
 8006064:	e005      	b.n	8006072 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800606a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006072:	7fbb      	ldrb	r3, [r7, #30]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d10b      	bne.n	8006090 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f043 0206 	orr.w	r2, r3, #6
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f043 0220 	orr.w	r2, r3, #32
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006090:	7bfb      	ldrb	r3, [r7, #15]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800609c:	b004      	add	sp, #16
 800609e:	4770      	bx	lr

080060a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	4613      	mov	r3, r2
 80060ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80060ae:	79fb      	ldrb	r3, [r7, #7]
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d165      	bne.n	8006180 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	4a41      	ldr	r2, [pc, #260]	@ (80061bc <USB_SetTurnaroundTime+0x11c>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d906      	bls.n	80060ca <USB_SetTurnaroundTime+0x2a>
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	4a40      	ldr	r2, [pc, #256]	@ (80061c0 <USB_SetTurnaroundTime+0x120>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d202      	bcs.n	80060ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80060c4:	230f      	movs	r3, #15
 80060c6:	617b      	str	r3, [r7, #20]
 80060c8:	e062      	b.n	8006190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	4a3c      	ldr	r2, [pc, #240]	@ (80061c0 <USB_SetTurnaroundTime+0x120>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d306      	bcc.n	80060e0 <USB_SetTurnaroundTime+0x40>
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	4a3b      	ldr	r2, [pc, #236]	@ (80061c4 <USB_SetTurnaroundTime+0x124>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d202      	bcs.n	80060e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80060da:	230e      	movs	r3, #14
 80060dc:	617b      	str	r3, [r7, #20]
 80060de:	e057      	b.n	8006190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	4a38      	ldr	r2, [pc, #224]	@ (80061c4 <USB_SetTurnaroundTime+0x124>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d306      	bcc.n	80060f6 <USB_SetTurnaroundTime+0x56>
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	4a37      	ldr	r2, [pc, #220]	@ (80061c8 <USB_SetTurnaroundTime+0x128>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d202      	bcs.n	80060f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80060f0:	230d      	movs	r3, #13
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	e04c      	b.n	8006190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	4a33      	ldr	r2, [pc, #204]	@ (80061c8 <USB_SetTurnaroundTime+0x128>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d306      	bcc.n	800610c <USB_SetTurnaroundTime+0x6c>
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	4a32      	ldr	r2, [pc, #200]	@ (80061cc <USB_SetTurnaroundTime+0x12c>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d802      	bhi.n	800610c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006106:	230c      	movs	r3, #12
 8006108:	617b      	str	r3, [r7, #20]
 800610a:	e041      	b.n	8006190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	4a2f      	ldr	r2, [pc, #188]	@ (80061cc <USB_SetTurnaroundTime+0x12c>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d906      	bls.n	8006122 <USB_SetTurnaroundTime+0x82>
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	4a2e      	ldr	r2, [pc, #184]	@ (80061d0 <USB_SetTurnaroundTime+0x130>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d802      	bhi.n	8006122 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800611c:	230b      	movs	r3, #11
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	e036      	b.n	8006190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	4a2a      	ldr	r2, [pc, #168]	@ (80061d0 <USB_SetTurnaroundTime+0x130>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d906      	bls.n	8006138 <USB_SetTurnaroundTime+0x98>
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	4a29      	ldr	r2, [pc, #164]	@ (80061d4 <USB_SetTurnaroundTime+0x134>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d802      	bhi.n	8006138 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006132:	230a      	movs	r3, #10
 8006134:	617b      	str	r3, [r7, #20]
 8006136:	e02b      	b.n	8006190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4a26      	ldr	r2, [pc, #152]	@ (80061d4 <USB_SetTurnaroundTime+0x134>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d906      	bls.n	800614e <USB_SetTurnaroundTime+0xae>
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	4a25      	ldr	r2, [pc, #148]	@ (80061d8 <USB_SetTurnaroundTime+0x138>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d202      	bcs.n	800614e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006148:	2309      	movs	r3, #9
 800614a:	617b      	str	r3, [r7, #20]
 800614c:	e020      	b.n	8006190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	4a21      	ldr	r2, [pc, #132]	@ (80061d8 <USB_SetTurnaroundTime+0x138>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d306      	bcc.n	8006164 <USB_SetTurnaroundTime+0xc4>
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	4a20      	ldr	r2, [pc, #128]	@ (80061dc <USB_SetTurnaroundTime+0x13c>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d802      	bhi.n	8006164 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800615e:	2308      	movs	r3, #8
 8006160:	617b      	str	r3, [r7, #20]
 8006162:	e015      	b.n	8006190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	4a1d      	ldr	r2, [pc, #116]	@ (80061dc <USB_SetTurnaroundTime+0x13c>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d906      	bls.n	800617a <USB_SetTurnaroundTime+0xda>
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	4a1c      	ldr	r2, [pc, #112]	@ (80061e0 <USB_SetTurnaroundTime+0x140>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d202      	bcs.n	800617a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006174:	2307      	movs	r3, #7
 8006176:	617b      	str	r3, [r7, #20]
 8006178:	e00a      	b.n	8006190 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800617a:	2306      	movs	r3, #6
 800617c:	617b      	str	r3, [r7, #20]
 800617e:	e007      	b.n	8006190 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006180:	79fb      	ldrb	r3, [r7, #7]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d102      	bne.n	800618c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006186:	2309      	movs	r3, #9
 8006188:	617b      	str	r3, [r7, #20]
 800618a:	e001      	b.n	8006190 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800618c:	2309      	movs	r3, #9
 800618e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	029b      	lsls	r3, r3, #10
 80061a4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80061a8:	431a      	orrs	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	371c      	adds	r7, #28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	00d8acbf 	.word	0x00d8acbf
 80061c0:	00e4e1c0 	.word	0x00e4e1c0
 80061c4:	00f42400 	.word	0x00f42400
 80061c8:	01067380 	.word	0x01067380
 80061cc:	011a499f 	.word	0x011a499f
 80061d0:	01312cff 	.word	0x01312cff
 80061d4:	014ca43f 	.word	0x014ca43f
 80061d8:	016e3600 	.word	0x016e3600
 80061dc:	01a6ab1f 	.word	0x01a6ab1f
 80061e0:	01e84800 	.word	0x01e84800

080061e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f043 0201 	orr.w	r2, r3, #1
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f023 0201 	bic.w	r2, r3, #1
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	460b      	mov	r3, r1
 8006232:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006234:	2300      	movs	r3, #0
 8006236:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006244:	78fb      	ldrb	r3, [r7, #3]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d115      	bne.n	8006276 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006256:	200a      	movs	r0, #10
 8006258:	f7fb ff92 	bl	8002180 <HAL_Delay>
      ms += 10U;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	330a      	adds	r3, #10
 8006260:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f001 f93f 	bl	80074e6 <USB_GetMode>
 8006268:	4603      	mov	r3, r0
 800626a:	2b01      	cmp	r3, #1
 800626c:	d01e      	beq.n	80062ac <USB_SetCurrentMode+0x84>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2bc7      	cmp	r3, #199	@ 0xc7
 8006272:	d9f0      	bls.n	8006256 <USB_SetCurrentMode+0x2e>
 8006274:	e01a      	b.n	80062ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006276:	78fb      	ldrb	r3, [r7, #3]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d115      	bne.n	80062a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006288:	200a      	movs	r0, #10
 800628a:	f7fb ff79 	bl	8002180 <HAL_Delay>
      ms += 10U;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	330a      	adds	r3, #10
 8006292:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f001 f926 	bl	80074e6 <USB_GetMode>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d005      	beq.n	80062ac <USB_SetCurrentMode+0x84>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2bc7      	cmp	r3, #199	@ 0xc7
 80062a4:	d9f0      	bls.n	8006288 <USB_SetCurrentMode+0x60>
 80062a6:	e001      	b.n	80062ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e005      	b.n	80062b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2bc8      	cmp	r3, #200	@ 0xc8
 80062b0:	d101      	bne.n	80062b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e000      	b.n	80062b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062c0:	b084      	sub	sp, #16
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b086      	sub	sp, #24
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80062ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80062da:	2300      	movs	r3, #0
 80062dc:	613b      	str	r3, [r7, #16]
 80062de:	e009      	b.n	80062f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	3340      	adds	r3, #64	@ 0x40
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	2200      	movs	r2, #0
 80062ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	3301      	adds	r3, #1
 80062f2:	613b      	str	r3, [r7, #16]
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	2b0e      	cmp	r3, #14
 80062f8:	d9f2      	bls.n	80062e0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80062fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d11c      	bne.n	800633c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006310:	f043 0302 	orr.w	r3, r3, #2
 8006314:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800631a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006326:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006332:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	639a      	str	r2, [r3, #56]	@ 0x38
 800633a:	e00b      	b.n	8006354 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006340:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800635a:	461a      	mov	r2, r3
 800635c:	2300      	movs	r3, #0
 800635e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006360:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006364:	2b01      	cmp	r3, #1
 8006366:	d10d      	bne.n	8006384 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006368:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800636c:	2b00      	cmp	r3, #0
 800636e:	d104      	bne.n	800637a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006370:	2100      	movs	r1, #0
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f968 	bl	8006648 <USB_SetDevSpeed>
 8006378:	e008      	b.n	800638c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800637a:	2101      	movs	r1, #1
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f963 	bl	8006648 <USB_SetDevSpeed>
 8006382:	e003      	b.n	800638c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006384:	2103      	movs	r1, #3
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f95e 	bl	8006648 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800638c:	2110      	movs	r1, #16
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f8fa 	bl	8006588 <USB_FlushTxFifo>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f924 	bl	80065ec <USB_FlushRxFifo>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d001      	beq.n	80063ae <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063b4:	461a      	mov	r2, r3
 80063b6:	2300      	movs	r3, #0
 80063b8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063c0:	461a      	mov	r2, r3
 80063c2:	2300      	movs	r3, #0
 80063c4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063cc:	461a      	mov	r2, r3
 80063ce:	2300      	movs	r3, #0
 80063d0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063d2:	2300      	movs	r3, #0
 80063d4:	613b      	str	r3, [r7, #16]
 80063d6:	e043      	b.n	8006460 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063ee:	d118      	bne.n	8006422 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10a      	bne.n	800640c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006402:	461a      	mov	r2, r3
 8006404:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	e013      	b.n	8006434 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006418:	461a      	mov	r2, r3
 800641a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800641e:	6013      	str	r3, [r2, #0]
 8006420:	e008      	b.n	8006434 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	015a      	lsls	r2, r3, #5
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	4413      	add	r3, r2
 800642a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800642e:	461a      	mov	r2, r3
 8006430:	2300      	movs	r3, #0
 8006432:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4413      	add	r3, r2
 800643c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006440:	461a      	mov	r2, r3
 8006442:	2300      	movs	r3, #0
 8006444:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	4413      	add	r3, r2
 800644e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006452:	461a      	mov	r2, r3
 8006454:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006458:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	3301      	adds	r3, #1
 800645e:	613b      	str	r3, [r7, #16]
 8006460:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006464:	461a      	mov	r2, r3
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	4293      	cmp	r3, r2
 800646a:	d3b5      	bcc.n	80063d8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800646c:	2300      	movs	r3, #0
 800646e:	613b      	str	r3, [r7, #16]
 8006470:	e043      	b.n	80064fa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	4413      	add	r3, r2
 800647a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006484:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006488:	d118      	bne.n	80064bc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10a      	bne.n	80064a6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	015a      	lsls	r2, r3, #5
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	4413      	add	r3, r2
 8006498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800649c:	461a      	mov	r2, r3
 800649e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80064a2:	6013      	str	r3, [r2, #0]
 80064a4:	e013      	b.n	80064ce <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064b2:	461a      	mov	r2, r3
 80064b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80064b8:	6013      	str	r3, [r2, #0]
 80064ba:	e008      	b.n	80064ce <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064c8:	461a      	mov	r2, r3
 80064ca:	2300      	movs	r3, #0
 80064cc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064da:	461a      	mov	r2, r3
 80064dc:	2300      	movs	r3, #0
 80064de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ec:	461a      	mov	r2, r3
 80064ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80064f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	3301      	adds	r3, #1
 80064f8:	613b      	str	r3, [r7, #16]
 80064fa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80064fe:	461a      	mov	r2, r3
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	4293      	cmp	r3, r2
 8006504:	d3b5      	bcc.n	8006472 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006514:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006518:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006526:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006528:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800652c:	2b00      	cmp	r3, #0
 800652e:	d105      	bne.n	800653c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	f043 0210 	orr.w	r2, r3, #16
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	699a      	ldr	r2, [r3, #24]
 8006540:	4b10      	ldr	r3, [pc, #64]	@ (8006584 <USB_DevInit+0x2c4>)
 8006542:	4313      	orrs	r3, r2
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006548:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800654c:	2b00      	cmp	r3, #0
 800654e:	d005      	beq.n	800655c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	f043 0208 	orr.w	r2, r3, #8
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800655c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006560:	2b01      	cmp	r3, #1
 8006562:	d107      	bne.n	8006574 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800656c:	f043 0304 	orr.w	r3, r3, #4
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006574:	7dfb      	ldrb	r3, [r7, #23]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3718      	adds	r7, #24
 800657a:	46bd      	mov	sp, r7
 800657c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006580:	b004      	add	sp, #16
 8006582:	4770      	bx	lr
 8006584:	803c3800 	.word	0x803c3800

08006588 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006592:	2300      	movs	r3, #0
 8006594:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	3301      	adds	r3, #1
 800659a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065a2:	d901      	bls.n	80065a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e01b      	b.n	80065e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	daf2      	bge.n	8006596 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80065b0:	2300      	movs	r3, #0
 80065b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	019b      	lsls	r3, r3, #6
 80065b8:	f043 0220 	orr.w	r2, r3, #32
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3301      	adds	r3, #1
 80065c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065cc:	d901      	bls.n	80065d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e006      	b.n	80065e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	f003 0320 	and.w	r3, r3, #32
 80065da:	2b20      	cmp	r3, #32
 80065dc:	d0f0      	beq.n	80065c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065f4:	2300      	movs	r3, #0
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	3301      	adds	r3, #1
 80065fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006604:	d901      	bls.n	800660a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e018      	b.n	800663c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	2b00      	cmp	r3, #0
 8006610:	daf2      	bge.n	80065f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006612:	2300      	movs	r3, #0
 8006614:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2210      	movs	r2, #16
 800661a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	3301      	adds	r3, #1
 8006620:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006628:	d901      	bls.n	800662e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e006      	b.n	800663c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	f003 0310 	and.w	r3, r3, #16
 8006636:	2b10      	cmp	r3, #16
 8006638:	d0f0      	beq.n	800661c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	460b      	mov	r3, r1
 8006652:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	78fb      	ldrb	r3, [r7, #3]
 8006662:	68f9      	ldr	r1, [r7, #12]
 8006664:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006668:	4313      	orrs	r3, r2
 800666a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800667a:	b480      	push	{r7}
 800667c:	b087      	sub	sp, #28
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 0306 	and.w	r3, r3, #6
 8006692:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d102      	bne.n	80066a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800669a:	2300      	movs	r3, #0
 800669c:	75fb      	strb	r3, [r7, #23]
 800669e:	e00a      	b.n	80066b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d002      	beq.n	80066ac <USB_GetDevSpeed+0x32>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b06      	cmp	r3, #6
 80066aa:	d102      	bne.n	80066b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80066ac:	2302      	movs	r3, #2
 80066ae:	75fb      	strb	r3, [r7, #23]
 80066b0:	e001      	b.n	80066b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80066b2:	230f      	movs	r3, #15
 80066b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80066b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	371c      	adds	r7, #28
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	785b      	ldrb	r3, [r3, #1]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d13a      	bne.n	8006756 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066e6:	69da      	ldr	r2, [r3, #28]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	f003 030f 	and.w	r3, r3, #15
 80066f0:	2101      	movs	r1, #1
 80066f2:	fa01 f303 	lsl.w	r3, r1, r3
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	68f9      	ldr	r1, [r7, #12]
 80066fa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066fe:	4313      	orrs	r3, r2
 8006700:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	4413      	add	r3, r2
 800670a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d155      	bne.n	80067c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	791b      	ldrb	r3, [r3, #4]
 8006732:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006734:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	059b      	lsls	r3, r3, #22
 800673a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800673c:	4313      	orrs	r3, r2
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	0151      	lsls	r1, r2, #5
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	440a      	add	r2, r1
 8006746:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800674a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800674e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006752:	6013      	str	r3, [r2, #0]
 8006754:	e036      	b.n	80067c4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800675c:	69da      	ldr	r2, [r3, #28]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	f003 030f 	and.w	r3, r3, #15
 8006766:	2101      	movs	r1, #1
 8006768:	fa01 f303 	lsl.w	r3, r1, r3
 800676c:	041b      	lsls	r3, r3, #16
 800676e:	68f9      	ldr	r1, [r7, #12]
 8006770:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006774:	4313      	orrs	r3, r2
 8006776:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4413      	add	r3, r2
 8006780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d11a      	bne.n	80067c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	4413      	add	r3, r2
 8006796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	791b      	ldrb	r3, [r3, #4]
 80067a8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80067aa:	430b      	orrs	r3, r1
 80067ac:	4313      	orrs	r3, r2
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	0151      	lsls	r1, r2, #5
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	440a      	add	r2, r1
 80067b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067c2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
	...

080067d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	785b      	ldrb	r3, [r3, #1]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d161      	bne.n	80068b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	015a      	lsls	r2, r3, #5
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006802:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006806:	d11f      	bne.n	8006848 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	0151      	lsls	r1, r2, #5
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	440a      	add	r2, r1
 800681e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006822:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006826:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	015a      	lsls	r2, r3, #5
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4413      	add	r3, r2
 8006830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	0151      	lsls	r1, r2, #5
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	440a      	add	r2, r1
 800683e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006842:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006846:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800684e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	f003 030f 	and.w	r3, r3, #15
 8006858:	2101      	movs	r1, #1
 800685a:	fa01 f303 	lsl.w	r3, r1, r3
 800685e:	b29b      	uxth	r3, r3
 8006860:	43db      	mvns	r3, r3
 8006862:	68f9      	ldr	r1, [r7, #12]
 8006864:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006868:	4013      	ands	r3, r2
 800686a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006872:	69da      	ldr	r2, [r3, #28]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	f003 030f 	and.w	r3, r3, #15
 800687c:	2101      	movs	r1, #1
 800687e:	fa01 f303 	lsl.w	r3, r1, r3
 8006882:	b29b      	uxth	r3, r3
 8006884:	43db      	mvns	r3, r3
 8006886:	68f9      	ldr	r1, [r7, #12]
 8006888:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800688c:	4013      	ands	r3, r2
 800688e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4413      	add	r3, r2
 8006898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	0159      	lsls	r1, r3, #5
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	440b      	add	r3, r1
 80068a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068aa:	4619      	mov	r1, r3
 80068ac:	4b35      	ldr	r3, [pc, #212]	@ (8006984 <USB_DeactivateEndpoint+0x1b0>)
 80068ae:	4013      	ands	r3, r2
 80068b0:	600b      	str	r3, [r1, #0]
 80068b2:	e060      	b.n	8006976 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068ca:	d11f      	bne.n	800690c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	0151      	lsls	r1, r2, #5
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	440a      	add	r2, r1
 80068e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80068ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	0151      	lsls	r1, r2, #5
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	440a      	add	r2, r1
 8006902:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006906:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800690a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006912:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	f003 030f 	and.w	r3, r3, #15
 800691c:	2101      	movs	r1, #1
 800691e:	fa01 f303 	lsl.w	r3, r1, r3
 8006922:	041b      	lsls	r3, r3, #16
 8006924:	43db      	mvns	r3, r3
 8006926:	68f9      	ldr	r1, [r7, #12]
 8006928:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800692c:	4013      	ands	r3, r2
 800692e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006936:	69da      	ldr	r2, [r3, #28]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	f003 030f 	and.w	r3, r3, #15
 8006940:	2101      	movs	r1, #1
 8006942:	fa01 f303 	lsl.w	r3, r1, r3
 8006946:	041b      	lsls	r3, r3, #16
 8006948:	43db      	mvns	r3, r3
 800694a:	68f9      	ldr	r1, [r7, #12]
 800694c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006950:	4013      	ands	r3, r2
 8006952:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4413      	add	r3, r2
 800695c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	0159      	lsls	r1, r3, #5
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	440b      	add	r3, r1
 800696a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800696e:	4619      	mov	r1, r3
 8006970:	4b05      	ldr	r3, [pc, #20]	@ (8006988 <USB_DeactivateEndpoint+0x1b4>)
 8006972:	4013      	ands	r3, r2
 8006974:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	ec337800 	.word	0xec337800
 8006988:	eff37800 	.word	0xeff37800

0800698c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08a      	sub	sp, #40	@ 0x28
 8006990:	af02      	add	r7, sp, #8
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	4613      	mov	r3, r2
 8006998:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	785b      	ldrb	r3, [r3, #1]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	f040 817f 	bne.w	8006cac <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d132      	bne.n	8006a1c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	0151      	lsls	r1, r2, #5
 80069c8:	69fa      	ldr	r2, [r7, #28]
 80069ca:	440a      	add	r2, r1
 80069cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069d0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80069d4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80069d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	69ba      	ldr	r2, [r7, #24]
 80069ea:	0151      	lsls	r1, r2, #5
 80069ec:	69fa      	ldr	r2, [r7, #28]
 80069ee:	440a      	add	r2, r1
 80069f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80069f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	0151      	lsls	r1, r2, #5
 8006a0c:	69fa      	ldr	r2, [r7, #28]
 8006a0e:	440a      	add	r2, r1
 8006a10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a14:	0cdb      	lsrs	r3, r3, #19
 8006a16:	04db      	lsls	r3, r3, #19
 8006a18:	6113      	str	r3, [r2, #16]
 8006a1a:	e097      	b.n	8006b4c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	015a      	lsls	r2, r3, #5
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	4413      	add	r3, r2
 8006a24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	69ba      	ldr	r2, [r7, #24]
 8006a2c:	0151      	lsls	r1, r2, #5
 8006a2e:	69fa      	ldr	r2, [r7, #28]
 8006a30:	440a      	add	r2, r1
 8006a32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a36:	0cdb      	lsrs	r3, r3, #19
 8006a38:	04db      	lsls	r3, r3, #19
 8006a3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	0151      	lsls	r1, r2, #5
 8006a4e:	69fa      	ldr	r2, [r7, #28]
 8006a50:	440a      	add	r2, r1
 8006a52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a56:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006a5a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006a5e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d11a      	bne.n	8006a9c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	691a      	ldr	r2, [r3, #16]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d903      	bls.n	8006a7a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	689a      	ldr	r2, [r3, #8]
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	015a      	lsls	r2, r3, #5
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	4413      	add	r3, r2
 8006a82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	0151      	lsls	r1, r2, #5
 8006a8c:	69fa      	ldr	r2, [r7, #28]
 8006a8e:	440a      	add	r2, r1
 8006a90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a94:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a98:	6113      	str	r3, [r2, #16]
 8006a9a:	e044      	b.n	8006b26 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	691a      	ldr	r2, [r3, #16]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	1e5a      	subs	r2, r3, #1
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006abe:	691a      	ldr	r2, [r3, #16]
 8006ac0:	8afb      	ldrh	r3, [r7, #22]
 8006ac2:	04d9      	lsls	r1, r3, #19
 8006ac4:	4ba4      	ldr	r3, [pc, #656]	@ (8006d58 <USB_EPStartXfer+0x3cc>)
 8006ac6:	400b      	ands	r3, r1
 8006ac8:	69b9      	ldr	r1, [r7, #24]
 8006aca:	0148      	lsls	r0, r1, #5
 8006acc:	69f9      	ldr	r1, [r7, #28]
 8006ace:	4401      	add	r1, r0
 8006ad0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	791b      	ldrb	r3, [r3, #4]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d122      	bne.n	8006b26 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	015a      	lsls	r2, r3, #5
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	69ba      	ldr	r2, [r7, #24]
 8006af0:	0151      	lsls	r1, r2, #5
 8006af2:	69fa      	ldr	r2, [r7, #28]
 8006af4:	440a      	add	r2, r1
 8006af6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006afa:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006afe:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	015a      	lsls	r2, r3, #5
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	4413      	add	r3, r2
 8006b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b0c:	691a      	ldr	r2, [r3, #16]
 8006b0e:	8afb      	ldrh	r3, [r7, #22]
 8006b10:	075b      	lsls	r3, r3, #29
 8006b12:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006b16:	69b9      	ldr	r1, [r7, #24]
 8006b18:	0148      	lsls	r0, r1, #5
 8006b1a:	69f9      	ldr	r1, [r7, #28]
 8006b1c:	4401      	add	r1, r0
 8006b1e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006b22:	4313      	orrs	r3, r2
 8006b24:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b32:	691a      	ldr	r2, [r3, #16]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b3c:	69b9      	ldr	r1, [r7, #24]
 8006b3e:	0148      	lsls	r0, r1, #5
 8006b40:	69f9      	ldr	r1, [r7, #28]
 8006b42:	4401      	add	r1, r0
 8006b44:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006b4c:	79fb      	ldrb	r3, [r7, #7]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d14b      	bne.n	8006bea <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d009      	beq.n	8006b6e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b66:	461a      	mov	r2, r3
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	69db      	ldr	r3, [r3, #28]
 8006b6c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	791b      	ldrb	r3, [r3, #4]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d128      	bne.n	8006bc8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d110      	bne.n	8006ba8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	015a      	lsls	r2, r3, #5
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	69ba      	ldr	r2, [r7, #24]
 8006b96:	0151      	lsls	r1, r2, #5
 8006b98:	69fa      	ldr	r2, [r7, #28]
 8006b9a:	440a      	add	r2, r1
 8006b9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ba0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006ba4:	6013      	str	r3, [r2, #0]
 8006ba6:	e00f      	b.n	8006bc8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	69ba      	ldr	r2, [r7, #24]
 8006bb8:	0151      	lsls	r1, r2, #5
 8006bba:	69fa      	ldr	r2, [r7, #28]
 8006bbc:	440a      	add	r2, r1
 8006bbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bc6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	015a      	lsls	r2, r3, #5
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	4413      	add	r3, r2
 8006bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	69ba      	ldr	r2, [r7, #24]
 8006bd8:	0151      	lsls	r1, r2, #5
 8006bda:	69fa      	ldr	r2, [r7, #28]
 8006bdc:	440a      	add	r2, r1
 8006bde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006be2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006be6:	6013      	str	r3, [r2, #0]
 8006be8:	e166      	b.n	8006eb8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	015a      	lsls	r2, r3, #5
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	69ba      	ldr	r2, [r7, #24]
 8006bfa:	0151      	lsls	r1, r2, #5
 8006bfc:	69fa      	ldr	r2, [r7, #28]
 8006bfe:	440a      	add	r2, r1
 8006c00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c04:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006c08:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	791b      	ldrb	r3, [r3, #4]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d015      	beq.n	8006c3e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 814e 	beq.w	8006eb8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	f003 030f 	and.w	r3, r3, #15
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c32:	69f9      	ldr	r1, [r7, #28]
 8006c34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	634b      	str	r3, [r1, #52]	@ 0x34
 8006c3c:	e13c      	b.n	8006eb8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d110      	bne.n	8006c70 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	69ba      	ldr	r2, [r7, #24]
 8006c5e:	0151      	lsls	r1, r2, #5
 8006c60:	69fa      	ldr	r2, [r7, #28]
 8006c62:	440a      	add	r2, r1
 8006c64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c68:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006c6c:	6013      	str	r3, [r2, #0]
 8006c6e:	e00f      	b.n	8006c90 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	0151      	lsls	r1, r2, #5
 8006c82:	69fa      	ldr	r2, [r7, #28]
 8006c84:	440a      	add	r2, r1
 8006c86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c8e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	68d9      	ldr	r1, [r3, #12]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	781a      	ldrb	r2, [r3, #0]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	b298      	uxth	r0, r3
 8006c9e:	79fb      	ldrb	r3, [r7, #7]
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 f9b9 	bl	800701c <USB_WritePacket>
 8006caa:	e105      	b.n	8006eb8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	69ba      	ldr	r2, [r7, #24]
 8006cbc:	0151      	lsls	r1, r2, #5
 8006cbe:	69fa      	ldr	r2, [r7, #28]
 8006cc0:	440a      	add	r2, r1
 8006cc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cc6:	0cdb      	lsrs	r3, r3, #19
 8006cc8:	04db      	lsls	r3, r3, #19
 8006cca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	0151      	lsls	r1, r2, #5
 8006cde:	69fa      	ldr	r2, [r7, #28]
 8006ce0:	440a      	add	r2, r1
 8006ce2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ce6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006cea:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006cee:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d132      	bne.n	8006d5c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	689a      	ldr	r2, [r3, #8]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	689a      	ldr	r2, [r3, #8]
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	015a      	lsls	r2, r3, #5
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d1a:	691a      	ldr	r2, [r3, #16]
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	6a1b      	ldr	r3, [r3, #32]
 8006d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d24:	69b9      	ldr	r1, [r7, #24]
 8006d26:	0148      	lsls	r0, r1, #5
 8006d28:	69f9      	ldr	r1, [r7, #28]
 8006d2a:	4401      	add	r1, r0
 8006d2c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006d30:	4313      	orrs	r3, r2
 8006d32:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	69ba      	ldr	r2, [r7, #24]
 8006d44:	0151      	lsls	r1, r2, #5
 8006d46:	69fa      	ldr	r2, [r7, #28]
 8006d48:	440a      	add	r2, r1
 8006d4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d4e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d52:	6113      	str	r3, [r2, #16]
 8006d54:	e062      	b.n	8006e1c <USB_EPStartXfer+0x490>
 8006d56:	bf00      	nop
 8006d58:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d123      	bne.n	8006dac <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d70:	691a      	ldr	r2, [r3, #16]
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d7a:	69b9      	ldr	r1, [r7, #24]
 8006d7c:	0148      	lsls	r0, r1, #5
 8006d7e:	69f9      	ldr	r1, [r7, #28]
 8006d80:	4401      	add	r1, r0
 8006d82:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006d86:	4313      	orrs	r3, r2
 8006d88:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	69ba      	ldr	r2, [r7, #24]
 8006d9a:	0151      	lsls	r1, r2, #5
 8006d9c:	69fa      	ldr	r2, [r7, #28]
 8006d9e:	440a      	add	r2, r1
 8006da0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006da4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006da8:	6113      	str	r3, [r2, #16]
 8006daa:	e037      	b.n	8006e1c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	691a      	ldr	r2, [r3, #16]
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	4413      	add	r3, r2
 8006db6:	1e5a      	subs	r2, r3, #1
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	8afa      	ldrh	r2, [r7, #22]
 8006dc8:	fb03 f202 	mul.w	r2, r3, r2
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	015a      	lsls	r2, r3, #5
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ddc:	691a      	ldr	r2, [r3, #16]
 8006dde:	8afb      	ldrh	r3, [r7, #22]
 8006de0:	04d9      	lsls	r1, r3, #19
 8006de2:	4b38      	ldr	r3, [pc, #224]	@ (8006ec4 <USB_EPStartXfer+0x538>)
 8006de4:	400b      	ands	r3, r1
 8006de6:	69b9      	ldr	r1, [r7, #24]
 8006de8:	0148      	lsls	r0, r1, #5
 8006dea:	69f9      	ldr	r1, [r7, #28]
 8006dec:	4401      	add	r1, r0
 8006dee:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006df2:	4313      	orrs	r3, r2
 8006df4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	015a      	lsls	r2, r3, #5
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e02:	691a      	ldr	r2, [r3, #16]
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e0c:	69b9      	ldr	r1, [r7, #24]
 8006e0e:	0148      	lsls	r0, r1, #5
 8006e10:	69f9      	ldr	r1, [r7, #28]
 8006e12:	4401      	add	r1, r0
 8006e14:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006e1c:	79fb      	ldrb	r3, [r7, #7]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d10d      	bne.n	8006e3e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d009      	beq.n	8006e3e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	68d9      	ldr	r1, [r3, #12]
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e3a:	460a      	mov	r2, r1
 8006e3c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	791b      	ldrb	r3, [r3, #4]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d128      	bne.n	8006e98 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d110      	bne.n	8006e78 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	015a      	lsls	r2, r3, #5
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	69ba      	ldr	r2, [r7, #24]
 8006e66:	0151      	lsls	r1, r2, #5
 8006e68:	69fa      	ldr	r2, [r7, #28]
 8006e6a:	440a      	add	r2, r1
 8006e6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e70:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	e00f      	b.n	8006e98 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	69ba      	ldr	r2, [r7, #24]
 8006e88:	0151      	lsls	r1, r2, #5
 8006e8a:	69fa      	ldr	r2, [r7, #28]
 8006e8c:	440a      	add	r2, r1
 8006e8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e96:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	015a      	lsls	r2, r3, #5
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	69ba      	ldr	r2, [r7, #24]
 8006ea8:	0151      	lsls	r1, r2, #5
 8006eaa:	69fa      	ldr	r2, [r7, #28]
 8006eac:	440a      	add	r2, r1
 8006eae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006eb2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006eb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3720      	adds	r7, #32
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	1ff80000 	.word	0x1ff80000

08006ec8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b087      	sub	sp, #28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	785b      	ldrb	r3, [r3, #1]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d14a      	bne.n	8006f7c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006efa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006efe:	f040 8086 	bne.w	800700e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	7812      	ldrb	r2, [r2, #0]
 8006f16:	0151      	lsls	r1, r2, #5
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	440a      	add	r2, r1
 8006f1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f20:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006f24:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	683a      	ldr	r2, [r7, #0]
 8006f38:	7812      	ldrb	r2, [r2, #0]
 8006f3a:	0151      	lsls	r1, r2, #5
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	440a      	add	r2, r1
 8006f40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d902      	bls.n	8006f60 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	75fb      	strb	r3, [r7, #23]
          break;
 8006f5e:	e056      	b.n	800700e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f78:	d0e7      	beq.n	8006f4a <USB_EPStopXfer+0x82>
 8006f7a:	e048      	b.n	800700e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f94:	d13b      	bne.n	800700e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	015a      	lsls	r2, r3, #5
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	7812      	ldrb	r2, [r2, #0]
 8006faa:	0151      	lsls	r1, r2, #5
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	440a      	add	r2, r1
 8006fb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fb4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006fb8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	015a      	lsls	r2, r3, #5
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	7812      	ldrb	r2, [r2, #0]
 8006fce:	0151      	lsls	r1, r2, #5
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	440a      	add	r2, r1
 8006fd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fd8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006fdc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d902      	bls.n	8006ff4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ff2:	e00c      	b.n	800700e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	015a      	lsls	r2, r3, #5
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007008:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800700c:	d0e7      	beq.n	8006fde <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800700e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007010:	4618      	mov	r0, r3
 8007012:	371c      	adds	r7, #28
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800701c:	b480      	push	{r7}
 800701e:	b089      	sub	sp, #36	@ 0x24
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	4611      	mov	r1, r2
 8007028:	461a      	mov	r2, r3
 800702a:	460b      	mov	r3, r1
 800702c:	71fb      	strb	r3, [r7, #7]
 800702e:	4613      	mov	r3, r2
 8007030:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800703a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800703e:	2b00      	cmp	r3, #0
 8007040:	d123      	bne.n	800708a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007042:	88bb      	ldrh	r3, [r7, #4]
 8007044:	3303      	adds	r3, #3
 8007046:	089b      	lsrs	r3, r3, #2
 8007048:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800704a:	2300      	movs	r3, #0
 800704c:	61bb      	str	r3, [r7, #24]
 800704e:	e018      	b.n	8007082 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007050:	79fb      	ldrb	r3, [r7, #7]
 8007052:	031a      	lsls	r2, r3, #12
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	4413      	add	r3, r2
 8007058:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800705c:	461a      	mov	r2, r3
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	3301      	adds	r3, #1
 8007068:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	3301      	adds	r3, #1
 800706e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	3301      	adds	r3, #1
 8007074:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	3301      	adds	r3, #1
 800707a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	3301      	adds	r3, #1
 8007080:	61bb      	str	r3, [r7, #24]
 8007082:	69ba      	ldr	r2, [r7, #24]
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	429a      	cmp	r2, r3
 8007088:	d3e2      	bcc.n	8007050 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3724      	adds	r7, #36	@ 0x24
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007098:	b480      	push	{r7}
 800709a:	b08b      	sub	sp, #44	@ 0x2c
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	4613      	mov	r3, r2
 80070a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80070ae:	88fb      	ldrh	r3, [r7, #6]
 80070b0:	089b      	lsrs	r3, r3, #2
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80070b6:	88fb      	ldrh	r3, [r7, #6]
 80070b8:	f003 0303 	and.w	r3, r3, #3
 80070bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80070be:	2300      	movs	r3, #0
 80070c0:	623b      	str	r3, [r7, #32]
 80070c2:	e014      	b.n	80070ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80070d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d2:	3301      	adds	r3, #1
 80070d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80070d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d8:	3301      	adds	r3, #1
 80070da:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80070dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070de:	3301      	adds	r3, #1
 80070e0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80070e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e4:	3301      	adds	r3, #1
 80070e6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80070e8:	6a3b      	ldr	r3, [r7, #32]
 80070ea:	3301      	adds	r3, #1
 80070ec:	623b      	str	r3, [r7, #32]
 80070ee:	6a3a      	ldr	r2, [r7, #32]
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d3e6      	bcc.n	80070c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80070f6:	8bfb      	ldrh	r3, [r7, #30]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d01e      	beq.n	800713a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80070fc:	2300      	movs	r3, #0
 80070fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007106:	461a      	mov	r2, r3
 8007108:	f107 0310 	add.w	r3, r7, #16
 800710c:	6812      	ldr	r2, [r2, #0]
 800710e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	6a3b      	ldr	r3, [r7, #32]
 8007114:	b2db      	uxtb	r3, r3
 8007116:	00db      	lsls	r3, r3, #3
 8007118:	fa22 f303 	lsr.w	r3, r2, r3
 800711c:	b2da      	uxtb	r2, r3
 800711e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007120:	701a      	strb	r2, [r3, #0]
      i++;
 8007122:	6a3b      	ldr	r3, [r7, #32]
 8007124:	3301      	adds	r3, #1
 8007126:	623b      	str	r3, [r7, #32]
      pDest++;
 8007128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712a:	3301      	adds	r3, #1
 800712c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800712e:	8bfb      	ldrh	r3, [r7, #30]
 8007130:	3b01      	subs	r3, #1
 8007132:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007134:	8bfb      	ldrh	r3, [r7, #30]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1ea      	bne.n	8007110 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800713a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800713c:	4618      	mov	r0, r3
 800713e:	372c      	adds	r7, #44	@ 0x2c
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	785b      	ldrb	r3, [r3, #1]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d12c      	bne.n	80071be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	db12      	blt.n	800719c <USB_EPSetStall+0x54>
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00f      	beq.n	800719c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	015a      	lsls	r2, r3, #5
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	4413      	add	r3, r2
 8007184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	0151      	lsls	r1, r2, #5
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	440a      	add	r2, r1
 8007192:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007196:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800719a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	0151      	lsls	r1, r2, #5
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	440a      	add	r2, r1
 80071b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80071ba:	6013      	str	r3, [r2, #0]
 80071bc:	e02b      	b.n	8007216 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	015a      	lsls	r2, r3, #5
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	db12      	blt.n	80071f6 <USB_EPSetStall+0xae>
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00f      	beq.n	80071f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	0151      	lsls	r1, r2, #5
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	440a      	add	r2, r1
 80071ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80071f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	015a      	lsls	r2, r3, #5
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	4413      	add	r3, r2
 80071fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	0151      	lsls	r1, r2, #5
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	440a      	add	r2, r1
 800720c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007210:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007214:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	785b      	ldrb	r3, [r3, #1]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d128      	bne.n	8007292 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	015a      	lsls	r2, r3, #5
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4413      	add	r3, r2
 8007248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	0151      	lsls	r1, r2, #5
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	440a      	add	r2, r1
 8007256:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800725a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800725e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	791b      	ldrb	r3, [r3, #4]
 8007264:	2b03      	cmp	r3, #3
 8007266:	d003      	beq.n	8007270 <USB_EPClearStall+0x4c>
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	791b      	ldrb	r3, [r3, #4]
 800726c:	2b02      	cmp	r3, #2
 800726e:	d138      	bne.n	80072e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	015a      	lsls	r2, r3, #5
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4413      	add	r3, r2
 8007278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	0151      	lsls	r1, r2, #5
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	440a      	add	r2, r1
 8007286:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800728a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800728e:	6013      	str	r3, [r2, #0]
 8007290:	e027      	b.n	80072e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	015a      	lsls	r2, r3, #5
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	4413      	add	r3, r2
 800729a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	0151      	lsls	r1, r2, #5
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	440a      	add	r2, r1
 80072a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072ac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80072b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	791b      	ldrb	r3, [r3, #4]
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d003      	beq.n	80072c2 <USB_EPClearStall+0x9e>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	791b      	ldrb	r3, [r3, #4]
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d10f      	bne.n	80072e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	0151      	lsls	r1, r2, #5
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	440a      	add	r2, r1
 80072d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	460b      	mov	r3, r1
 80072fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800730e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007312:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	78fb      	ldrb	r3, [r7, #3]
 800731e:	011b      	lsls	r3, r3, #4
 8007320:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007324:	68f9      	ldr	r1, [r7, #12]
 8007326:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800732a:	4313      	orrs	r3, r2
 800732c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007356:	f023 0303 	bic.w	r3, r3, #3
 800735a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800736a:	f023 0302 	bic.w	r3, r3, #2
 800736e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3714      	adds	r7, #20
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800737e:	b480      	push	{r7}
 8007380:	b085      	sub	sp, #20
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007398:	f023 0303 	bic.w	r3, r3, #3
 800739c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073ac:	f043 0302 	orr.w	r3, r3, #2
 80073b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	4013      	ands	r3, r2
 80073d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80073d8:	68fb      	ldr	r3, [r7, #12]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b085      	sub	sp, #20
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007402:	69db      	ldr	r3, [r3, #28]
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	4013      	ands	r3, r2
 8007408:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	0c1b      	lsrs	r3, r3, #16
}
 800740e:	4618      	mov	r0, r3
 8007410:	3714      	adds	r7, #20
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800741a:	b480      	push	{r7}
 800741c:	b085      	sub	sp, #20
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007436:	69db      	ldr	r3, [r3, #28]
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	4013      	ands	r3, r2
 800743c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	b29b      	uxth	r3, r3
}
 8007442:	4618      	mov	r0, r3
 8007444:	3714      	adds	r7, #20
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr

0800744e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800744e:	b480      	push	{r7}
 8007450:	b085      	sub	sp, #20
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	460b      	mov	r3, r1
 8007458:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800745e:	78fb      	ldrb	r3, [r7, #3]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	4413      	add	r3, r2
 8007466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	4013      	ands	r3, r2
 800747a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800747c:	68bb      	ldr	r3, [r7, #8]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800748a:	b480      	push	{r7}
 800748c:	b087      	sub	sp, #28
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	460b      	mov	r3, r1
 8007494:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80074ae:	78fb      	ldrb	r3, [r7, #3]
 80074b0:	f003 030f 	and.w	r3, r3, #15
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	fa22 f303 	lsr.w	r3, r2, r3
 80074ba:	01db      	lsls	r3, r3, #7
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80074c4:	78fb      	ldrb	r3, [r7, #3]
 80074c6:	015a      	lsls	r2, r3, #5
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	4413      	add	r3, r2
 80074cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	4013      	ands	r3, r2
 80074d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80074d8:	68bb      	ldr	r3, [r7, #8]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	371c      	adds	r7, #28
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	695b      	ldr	r3, [r3, #20]
 80074f2:	f003 0301 	and.w	r3, r3, #1
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007502:	b480      	push	{r7}
 8007504:	b085      	sub	sp, #20
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800751c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007520:	f023 0307 	bic.w	r3, r3, #7
 8007524:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007538:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007548:	b480      	push	{r7}
 800754a:	b087      	sub	sp, #28
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	460b      	mov	r3, r1
 8007552:	607a      	str	r2, [r7, #4]
 8007554:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	333c      	adds	r3, #60	@ 0x3c
 800755e:	3304      	adds	r3, #4
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	4a26      	ldr	r2, [pc, #152]	@ (8007600 <USB_EP0_OutStart+0xb8>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d90a      	bls.n	8007582 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007578:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800757c:	d101      	bne.n	8007582 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	e037      	b.n	80075f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007588:	461a      	mov	r2, r3
 800758a:	2300      	movs	r3, #0
 800758c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800759c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80075a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075b0:	f043 0318 	orr.w	r3, r3, #24
 80075b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075c4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80075c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80075ca:	7afb      	ldrb	r3, [r7, #11]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d10f      	bne.n	80075f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075d6:	461a      	mov	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075ea:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80075ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	371c      	adds	r7, #28
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	4f54300a 	.word	0x4f54300a

08007604 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800760c:	2300      	movs	r3, #0
 800760e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	3301      	adds	r3, #1
 8007614:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800761c:	d901      	bls.n	8007622 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e022      	b.n	8007668 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	2b00      	cmp	r3, #0
 8007628:	daf2      	bge.n	8007610 <USB_CoreReset+0xc>

  count = 10U;
 800762a:	230a      	movs	r3, #10
 800762c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800762e:	e002      	b.n	8007636 <USB_CoreReset+0x32>
  {
    count--;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	3b01      	subs	r3, #1
 8007634:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1f9      	bne.n	8007630 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	f043 0201 	orr.w	r2, r3, #1
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	3301      	adds	r3, #1
 800764c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007654:	d901      	bls.n	800765a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	e006      	b.n	8007668 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	2b01      	cmp	r3, #1
 8007664:	d0f0      	beq.n	8007648 <USB_CoreReset+0x44>

  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3714      	adds	r7, #20
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	460b      	mov	r3, r1
 800767e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007680:	2010      	movs	r0, #16
 8007682:	f002 f943 	bl	800990c <USBD_static_malloc>
 8007686:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d109      	bne.n	80076a2 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	32b0      	adds	r2, #176	@ 0xb0
 8007698:	2100      	movs	r1, #0
 800769a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800769e:	2302      	movs	r3, #2
 80076a0:	e048      	b.n	8007734 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	32b0      	adds	r2, #176	@ 0xb0
 80076ac:	68f9      	ldr	r1, [r7, #12]
 80076ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	32b0      	adds	r2, #176	@ 0xb0
 80076bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	7c1b      	ldrb	r3, [r3, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10d      	bne.n	80076ea <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80076ce:	4b1b      	ldr	r3, [pc, #108]	@ (800773c <USBD_HID_Init+0xc8>)
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	f003 020f 	and.w	r2, r3, #15
 80076d6:	6879      	ldr	r1, [r7, #4]
 80076d8:	4613      	mov	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	440b      	add	r3, r1
 80076e2:	331c      	adds	r3, #28
 80076e4:	2207      	movs	r2, #7
 80076e6:	601a      	str	r2, [r3, #0]
 80076e8:	e00c      	b.n	8007704 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80076ea:	4b14      	ldr	r3, [pc, #80]	@ (800773c <USBD_HID_Init+0xc8>)
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	f003 020f 	and.w	r2, r3, #15
 80076f2:	6879      	ldr	r1, [r7, #4]
 80076f4:	4613      	mov	r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	440b      	add	r3, r1
 80076fe:	331c      	adds	r3, #28
 8007700:	220a      	movs	r2, #10
 8007702:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007704:	4b0d      	ldr	r3, [pc, #52]	@ (800773c <USBD_HID_Init+0xc8>)
 8007706:	7819      	ldrb	r1, [r3, #0]
 8007708:	2304      	movs	r3, #4
 800770a:	2203      	movs	r2, #3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f001 ffec 	bl	80096ea <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8007712:	4b0a      	ldr	r3, [pc, #40]	@ (800773c <USBD_HID_Init+0xc8>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	f003 020f 	and.w	r2, r3, #15
 800771a:	6879      	ldr	r1, [r7, #4]
 800771c:	4613      	mov	r3, r2
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	4413      	add	r3, r2
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	440b      	add	r3, r1
 8007726:	3323      	adds	r3, #35	@ 0x23
 8007728:	2201      	movs	r2, #1
 800772a:	701a      	strb	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	2000015a 	.word	0x2000015a

08007740 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800774c:	4b1f      	ldr	r3, [pc, #124]	@ (80077cc <USBD_HID_DeInit+0x8c>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f001 ffef 	bl	8009736 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8007758:	4b1c      	ldr	r3, [pc, #112]	@ (80077cc <USBD_HID_DeInit+0x8c>)
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	f003 020f 	and.w	r2, r3, #15
 8007760:	6879      	ldr	r1, [r7, #4]
 8007762:	4613      	mov	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4413      	add	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	440b      	add	r3, r1
 800776c:	3323      	adds	r3, #35	@ 0x23
 800776e:	2200      	movs	r2, #0
 8007770:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8007772:	4b16      	ldr	r3, [pc, #88]	@ (80077cc <USBD_HID_DeInit+0x8c>)
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	f003 020f 	and.w	r2, r3, #15
 800777a:	6879      	ldr	r1, [r7, #4]
 800777c:	4613      	mov	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4413      	add	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	440b      	add	r3, r1
 8007786:	331c      	adds	r3, #28
 8007788:	2200      	movs	r2, #0
 800778a:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	32b0      	adds	r2, #176	@ 0xb0
 8007796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d011      	beq.n	80077c2 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	32b0      	adds	r2, #176	@ 0xb0
 80077a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f002 f8bb 	bl	8009928 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	32b0      	adds	r2, #176	@ 0xb0
 80077bc:	2100      	movs	r1, #0
 80077be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	2000015a 	.word	0x2000015a

080077d0 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	32b0      	adds	r2, #176	@ 0xb0
 80077e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e8:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ea:	2300      	movs	r3, #0
 80077ec:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e0e8      	b.n	80079ce <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007804:	2b00      	cmp	r3, #0
 8007806:	d046      	beq.n	8007896 <USBD_HID_Setup+0xc6>
 8007808:	2b20      	cmp	r3, #32
 800780a:	f040 80d8 	bne.w	80079be <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	785b      	ldrb	r3, [r3, #1]
 8007812:	3b02      	subs	r3, #2
 8007814:	2b09      	cmp	r3, #9
 8007816:	d836      	bhi.n	8007886 <USBD_HID_Setup+0xb6>
 8007818:	a201      	add	r2, pc, #4	@ (adr r2, 8007820 <USBD_HID_Setup+0x50>)
 800781a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781e:	bf00      	nop
 8007820:	08007877 	.word	0x08007877
 8007824:	08007857 	.word	0x08007857
 8007828:	08007887 	.word	0x08007887
 800782c:	08007887 	.word	0x08007887
 8007830:	08007887 	.word	0x08007887
 8007834:	08007887 	.word	0x08007887
 8007838:	08007887 	.word	0x08007887
 800783c:	08007887 	.word	0x08007887
 8007840:	08007865 	.word	0x08007865
 8007844:	08007849 	.word	0x08007849
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	885b      	ldrh	r3, [r3, #2]
 800784c:	b2db      	uxtb	r3, r3
 800784e:	461a      	mov	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	601a      	str	r2, [r3, #0]
          break;
 8007854:	e01e      	b.n	8007894 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2201      	movs	r2, #1
 800785a:	4619      	mov	r1, r3
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f001 fbfb 	bl	8009058 <USBD_CtlSendData>
          break;
 8007862:	e017      	b.n	8007894 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	885b      	ldrh	r3, [r3, #2]
 8007868:	0a1b      	lsrs	r3, r3, #8
 800786a:	b29b      	uxth	r3, r3
 800786c:	b2db      	uxtb	r3, r3
 800786e:	461a      	mov	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	605a      	str	r2, [r3, #4]
          break;
 8007874:	e00e      	b.n	8007894 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	3304      	adds	r3, #4
 800787a:	2201      	movs	r2, #1
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f001 fbea 	bl	8009058 <USBD_CtlSendData>
          break;
 8007884:	e006      	b.n	8007894 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f001 fb68 	bl	8008f5e <USBD_CtlError>
          ret = USBD_FAIL;
 800788e:	2303      	movs	r3, #3
 8007890:	75fb      	strb	r3, [r7, #23]
          break;
 8007892:	bf00      	nop
      }
      break;
 8007894:	e09a      	b.n	80079cc <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	785b      	ldrb	r3, [r3, #1]
 800789a:	2b0b      	cmp	r3, #11
 800789c:	f200 8086 	bhi.w	80079ac <USBD_HID_Setup+0x1dc>
 80078a0:	a201      	add	r2, pc, #4	@ (adr r2, 80078a8 <USBD_HID_Setup+0xd8>)
 80078a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a6:	bf00      	nop
 80078a8:	080078d9 	.word	0x080078d9
 80078ac:	080079bb 	.word	0x080079bb
 80078b0:	080079ad 	.word	0x080079ad
 80078b4:	080079ad 	.word	0x080079ad
 80078b8:	080079ad 	.word	0x080079ad
 80078bc:	080079ad 	.word	0x080079ad
 80078c0:	08007903 	.word	0x08007903
 80078c4:	080079ad 	.word	0x080079ad
 80078c8:	080079ad 	.word	0x080079ad
 80078cc:	080079ad 	.word	0x080079ad
 80078d0:	0800795b 	.word	0x0800795b
 80078d4:	08007985 	.word	0x08007985
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2b03      	cmp	r3, #3
 80078e2:	d107      	bne.n	80078f4 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80078e4:	f107 030a 	add.w	r3, r7, #10
 80078e8:	2202      	movs	r2, #2
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f001 fbb3 	bl	8009058 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078f2:	e063      	b.n	80079bc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f001 fb31 	bl	8008f5e <USBD_CtlError>
            ret = USBD_FAIL;
 80078fc:	2303      	movs	r3, #3
 80078fe:	75fb      	strb	r3, [r7, #23]
          break;
 8007900:	e05c      	b.n	80079bc <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	885b      	ldrh	r3, [r3, #2]
 8007906:	0a1b      	lsrs	r3, r3, #8
 8007908:	b29b      	uxth	r3, r3
 800790a:	2b22      	cmp	r3, #34	@ 0x22
 800790c:	d108      	bne.n	8007920 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	88db      	ldrh	r3, [r3, #6]
 8007912:	2b4a      	cmp	r3, #74	@ 0x4a
 8007914:	bf28      	it	cs
 8007916:	234a      	movcs	r3, #74	@ 0x4a
 8007918:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800791a:	4b2f      	ldr	r3, [pc, #188]	@ (80079d8 <USBD_HID_Setup+0x208>)
 800791c:	613b      	str	r3, [r7, #16]
 800791e:	e015      	b.n	800794c <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	885b      	ldrh	r3, [r3, #2]
 8007924:	0a1b      	lsrs	r3, r3, #8
 8007926:	b29b      	uxth	r3, r3
 8007928:	2b21      	cmp	r3, #33	@ 0x21
 800792a:	d108      	bne.n	800793e <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 800792c:	4b2b      	ldr	r3, [pc, #172]	@ (80079dc <USBD_HID_Setup+0x20c>)
 800792e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	88db      	ldrh	r3, [r3, #6]
 8007934:	2b09      	cmp	r3, #9
 8007936:	bf28      	it	cs
 8007938:	2309      	movcs	r3, #9
 800793a:	82bb      	strh	r3, [r7, #20]
 800793c:	e006      	b.n	800794c <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800793e:	6839      	ldr	r1, [r7, #0]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f001 fb0c 	bl	8008f5e <USBD_CtlError>
            ret = USBD_FAIL;
 8007946:	2303      	movs	r3, #3
 8007948:	75fb      	strb	r3, [r7, #23]
            break;
 800794a:	e037      	b.n	80079bc <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800794c:	8abb      	ldrh	r3, [r7, #20]
 800794e:	461a      	mov	r2, r3
 8007950:	6939      	ldr	r1, [r7, #16]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f001 fb80 	bl	8009058 <USBD_CtlSendData>
          break;
 8007958:	e030      	b.n	80079bc <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b03      	cmp	r3, #3
 8007964:	d107      	bne.n	8007976 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	3308      	adds	r3, #8
 800796a:	2201      	movs	r2, #1
 800796c:	4619      	mov	r1, r3
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f001 fb72 	bl	8009058 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007974:	e022      	b.n	80079bc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007976:	6839      	ldr	r1, [r7, #0]
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f001 faf0 	bl	8008f5e <USBD_CtlError>
            ret = USBD_FAIL;
 800797e:	2303      	movs	r3, #3
 8007980:	75fb      	strb	r3, [r7, #23]
          break;
 8007982:	e01b      	b.n	80079bc <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b03      	cmp	r3, #3
 800798e:	d106      	bne.n	800799e <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	885b      	ldrh	r3, [r3, #2]
 8007994:	b2db      	uxtb	r3, r3
 8007996:	461a      	mov	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800799c:	e00e      	b.n	80079bc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f001 fadc 	bl	8008f5e <USBD_CtlError>
            ret = USBD_FAIL;
 80079a6:	2303      	movs	r3, #3
 80079a8:	75fb      	strb	r3, [r7, #23]
          break;
 80079aa:	e007      	b.n	80079bc <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f001 fad5 	bl	8008f5e <USBD_CtlError>
          ret = USBD_FAIL;
 80079b4:	2303      	movs	r3, #3
 80079b6:	75fb      	strb	r3, [r7, #23]
          break;
 80079b8:	e000      	b.n	80079bc <USBD_HID_Setup+0x1ec>
          break;
 80079ba:	bf00      	nop
      }
      break;
 80079bc:	e006      	b.n	80079cc <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80079be:	6839      	ldr	r1, [r7, #0]
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f001 facc 	bl	8008f5e <USBD_CtlError>
      ret = USBD_FAIL;
 80079c6:	2303      	movs	r3, #3
 80079c8:	75fb      	strb	r3, [r7, #23]
      break;
 80079ca:	bf00      	nop
  }

  return (uint8_t)ret;
 80079cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3718      	adds	r7, #24
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	20000110 	.word	0x20000110
 80079dc:	200000f8 	.word	0x200000f8

080079e0 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	4613      	mov	r3, r2
 80079ec:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	32b0      	adds	r2, #176	@ 0xb0
 80079f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079fc:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007a04:	2303      	movs	r3, #3
 8007a06:	e014      	b.n	8007a32 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	2b03      	cmp	r3, #3
 8007a12:	d10d      	bne.n	8007a30 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	7b1b      	ldrb	r3, [r3, #12]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d109      	bne.n	8007a30 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8007a22:	4b06      	ldr	r3, [pc, #24]	@ (8007a3c <USBD_HID_SendReport+0x5c>)
 8007a24:	7819      	ldrb	r1, [r3, #0]
 8007a26:	88fb      	ldrh	r3, [r7, #6]
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	f001 ff2b 	bl	8009886 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3718      	adds	r7, #24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	2000015a 	.word	0x2000015a

08007a40 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007a48:	2181      	movs	r1, #129	@ 0x81
 8007a4a:	4809      	ldr	r0, [pc, #36]	@ (8007a70 <USBD_HID_GetFSCfgDesc+0x30>)
 8007a4c:	f000 fc4e 	bl	80082ec <USBD_GetEpDesc>
 8007a50:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d002      	beq.n	8007a5e <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	220a      	movs	r2, #10
 8007a5c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2222      	movs	r2, #34	@ 0x22
 8007a62:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007a64:	4b02      	ldr	r3, [pc, #8]	@ (8007a70 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	200000d4 	.word	0x200000d4

08007a74 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007a7c:	2181      	movs	r1, #129	@ 0x81
 8007a7e:	4809      	ldr	r0, [pc, #36]	@ (8007aa4 <USBD_HID_GetHSCfgDesc+0x30>)
 8007a80:	f000 fc34 	bl	80082ec <USBD_GetEpDesc>
 8007a84:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d002      	beq.n	8007a92 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2207      	movs	r2, #7
 8007a90:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2222      	movs	r2, #34	@ 0x22
 8007a96:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007a98:	4b02      	ldr	r3, [pc, #8]	@ (8007aa4 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	200000d4 	.word	0x200000d4

08007aa8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007ab0:	2181      	movs	r1, #129	@ 0x81
 8007ab2:	4809      	ldr	r0, [pc, #36]	@ (8007ad8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8007ab4:	f000 fc1a 	bl	80082ec <USBD_GetEpDesc>
 8007ab8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d002      	beq.n	8007ac6 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	220a      	movs	r2, #10
 8007ac4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2222      	movs	r2, #34	@ 0x22
 8007aca:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007acc:	4b02      	ldr	r3, [pc, #8]	@ (8007ad8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	200000d4 	.word	0x200000d4

08007adc <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	32b0      	adds	r2, #176	@ 0xb0
 8007af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af6:	2200      	movs	r2, #0
 8007af8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	220a      	movs	r2, #10
 8007b14:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8007b16:	4b03      	ldr	r3, [pc, #12]	@ (8007b24 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	20000104 	.word	0x20000104

08007b28 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	4613      	mov	r3, r2
 8007b34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d101      	bne.n	8007b40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	e01f      	b.n	8007b80 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d003      	beq.n	8007b66 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	79fa      	ldrb	r2, [r7, #7]
 8007b72:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f001 fd51 	bl	800961c <USBD_LL_Init>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3718      	adds	r7, #24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b92:	2300      	movs	r3, #0
 8007b94:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e025      	b.n	8007bec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	32ae      	adds	r2, #174	@ 0xae
 8007bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00f      	beq.n	8007bdc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	32ae      	adds	r2, #174	@ 0xae
 8007bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bcc:	f107 020e 	add.w	r2, r7, #14
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	4798      	blx	r3
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007be2:	1c5a      	adds	r2, r3, #1
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f001 fd59 	bl	80096b4 <USBD_LL_Start>
 8007c02:	4603      	mov	r3, r0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3708      	adds	r7, #8
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c14:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d009      	beq.n	8007c50 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	78fa      	ldrb	r2, [r7, #3]
 8007c46:	4611      	mov	r1, r2
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	4798      	blx	r3
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b084      	sub	sp, #16
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	460b      	mov	r3, r1
 8007c64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	78fa      	ldrb	r2, [r7, #3]
 8007c74:	4611      	mov	r1, r2
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	4798      	blx	r3
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d001      	beq.n	8007c84 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007c80:	2303      	movs	r3, #3
 8007c82:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b084      	sub	sp, #16
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007c9e:	6839      	ldr	r1, [r7, #0]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f001 f922 	bl	8008eea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007cc2:	f003 031f 	and.w	r3, r3, #31
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d01a      	beq.n	8007d00 <USBD_LL_SetupStage+0x72>
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d822      	bhi.n	8007d14 <USBD_LL_SetupStage+0x86>
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d002      	beq.n	8007cd8 <USBD_LL_SetupStage+0x4a>
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d00a      	beq.n	8007cec <USBD_LL_SetupStage+0x5e>
 8007cd6:	e01d      	b.n	8007d14 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007cde:	4619      	mov	r1, r3
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fb77 	bl	80083d4 <USBD_StdDevReq>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	73fb      	strb	r3, [r7, #15]
      break;
 8007cea:	e020      	b.n	8007d2e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 fbdf 	bl	80084b8 <USBD_StdItfReq>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	73fb      	strb	r3, [r7, #15]
      break;
 8007cfe:	e016      	b.n	8007d2e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007d06:	4619      	mov	r1, r3
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fc41 	bl	8008590 <USBD_StdEPReq>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	73fb      	strb	r3, [r7, #15]
      break;
 8007d12:	e00c      	b.n	8007d2e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007d1a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	4619      	mov	r1, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f001 fd26 	bl	8009774 <USBD_LL_StallEP>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d2c:	bf00      	nop
  }

  return ret;
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	460b      	mov	r3, r1
 8007d42:	607a      	str	r2, [r7, #4]
 8007d44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007d4a:	7afb      	ldrb	r3, [r7, #11]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d177      	bne.n	8007e40 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007d56:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007d5e:	2b03      	cmp	r3, #3
 8007d60:	f040 80a1 	bne.w	8007ea6 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	8992      	ldrh	r2, [r2, #12]
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d91c      	bls.n	8007daa <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	8992      	ldrh	r2, [r2, #12]
 8007d78:	1a9a      	subs	r2, r3, r2
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	8992      	ldrh	r2, [r2, #12]
 8007d86:	441a      	add	r2, r3
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	6919      	ldr	r1, [r3, #16]
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	899b      	ldrh	r3, [r3, #12]
 8007d94:	461a      	mov	r2, r3
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	bf38      	it	cc
 8007d9e:	4613      	movcc	r3, r2
 8007da0:	461a      	mov	r2, r3
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f001 f987 	bl	80090b6 <USBD_CtlContinueRx>
 8007da8:	e07d      	b.n	8007ea6 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007db0:	f003 031f 	and.w	r3, r3, #31
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d014      	beq.n	8007de2 <USBD_LL_DataOutStage+0xaa>
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d81d      	bhi.n	8007df8 <USBD_LL_DataOutStage+0xc0>
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d002      	beq.n	8007dc6 <USBD_LL_DataOutStage+0x8e>
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d003      	beq.n	8007dcc <USBD_LL_DataOutStage+0x94>
 8007dc4:	e018      	b.n	8007df8 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	75bb      	strb	r3, [r7, #22]
            break;
 8007dca:	e018      	b.n	8007dfe <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f000 fa6e 	bl	80082b8 <USBD_CoreFindIF>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	75bb      	strb	r3, [r7, #22]
            break;
 8007de0:	e00d      	b.n	8007dfe <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	4619      	mov	r1, r3
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f000 fa70 	bl	80082d2 <USBD_CoreFindEP>
 8007df2:	4603      	mov	r3, r0
 8007df4:	75bb      	strb	r3, [r7, #22]
            break;
 8007df6:	e002      	b.n	8007dfe <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	75bb      	strb	r3, [r7, #22]
            break;
 8007dfc:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007dfe:	7dbb      	ldrb	r3, [r7, #22]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d119      	bne.n	8007e38 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b03      	cmp	r3, #3
 8007e0e:	d113      	bne.n	8007e38 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007e10:	7dba      	ldrb	r2, [r7, #22]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	32ae      	adds	r2, #174	@ 0xae
 8007e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00b      	beq.n	8007e38 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8007e20:	7dba      	ldrb	r2, [r7, #22]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007e28:	7dba      	ldrb	r2, [r7, #22]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	32ae      	adds	r2, #174	@ 0xae
 8007e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f001 f94d 	bl	80090d8 <USBD_CtlSendStatus>
 8007e3e:	e032      	b.n	8007ea6 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007e40:	7afb      	ldrb	r3, [r7, #11]
 8007e42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	4619      	mov	r1, r3
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f000 fa41 	bl	80082d2 <USBD_CoreFindEP>
 8007e50:	4603      	mov	r3, r0
 8007e52:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e54:	7dbb      	ldrb	r3, [r7, #22]
 8007e56:	2bff      	cmp	r3, #255	@ 0xff
 8007e58:	d025      	beq.n	8007ea6 <USBD_LL_DataOutStage+0x16e>
 8007e5a:	7dbb      	ldrb	r3, [r7, #22]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d122      	bne.n	8007ea6 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	2b03      	cmp	r3, #3
 8007e6a:	d117      	bne.n	8007e9c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007e6c:	7dba      	ldrb	r2, [r7, #22]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	32ae      	adds	r2, #174	@ 0xae
 8007e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e76:	699b      	ldr	r3, [r3, #24]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00f      	beq.n	8007e9c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007e7c:	7dba      	ldrb	r2, [r7, #22]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007e84:	7dba      	ldrb	r2, [r7, #22]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	32ae      	adds	r2, #174	@ 0xae
 8007e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	7afa      	ldrb	r2, [r7, #11]
 8007e92:	4611      	mov	r1, r2
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	4798      	blx	r3
 8007e98:	4603      	mov	r3, r0
 8007e9a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007e9c:	7dfb      	ldrb	r3, [r7, #23]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d001      	beq.n	8007ea6 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8007ea2:	7dfb      	ldrb	r3, [r7, #23]
 8007ea4:	e000      	b.n	8007ea8 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3718      	adds	r7, #24
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b086      	sub	sp, #24
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	460b      	mov	r3, r1
 8007eba:	607a      	str	r2, [r7, #4]
 8007ebc:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007ebe:	7afb      	ldrb	r3, [r7, #11]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d178      	bne.n	8007fb6 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	3314      	adds	r3, #20
 8007ec8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d163      	bne.n	8007f9c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	8992      	ldrh	r2, [r2, #12]
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d91c      	bls.n	8007f1a <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	693a      	ldr	r2, [r7, #16]
 8007ee6:	8992      	ldrh	r2, [r2, #12]
 8007ee8:	1a9a      	subs	r2, r3, r2
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	8992      	ldrh	r2, [r2, #12]
 8007ef6:	441a      	add	r2, r3
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	6919      	ldr	r1, [r3, #16]
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	461a      	mov	r2, r3
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f001 f8c4 	bl	8009094 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	2200      	movs	r2, #0
 8007f10:	2100      	movs	r1, #0
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f001 fcd8 	bl	80098c8 <USBD_LL_PrepareReceive>
 8007f18:	e040      	b.n	8007f9c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	899b      	ldrh	r3, [r3, #12]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d11c      	bne.n	8007f62 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d316      	bcc.n	8007f62 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d20f      	bcs.n	8007f62 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f42:	2200      	movs	r2, #0
 8007f44:	2100      	movs	r1, #0
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f001 f8a4 	bl	8009094 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f54:	2300      	movs	r3, #0
 8007f56:	2200      	movs	r2, #0
 8007f58:	2100      	movs	r1, #0
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f001 fcb4 	bl	80098c8 <USBD_LL_PrepareReceive>
 8007f60:	e01c      	b.n	8007f9c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b03      	cmp	r3, #3
 8007f6c:	d10f      	bne.n	8007f8e <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d009      	beq.n	8007f8e <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f8e:	2180      	movs	r1, #128	@ 0x80
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f001 fbef 	bl	8009774 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f001 f8b1 	bl	80090fe <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d03a      	beq.n	800801c <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f7ff fe30 	bl	8007c0c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007fb4:	e032      	b.n	800801c <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007fb6:	7afb      	ldrb	r3, [r7, #11]
 8007fb8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 f986 	bl	80082d2 <USBD_CoreFindEP>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007fca:	7dfb      	ldrb	r3, [r7, #23]
 8007fcc:	2bff      	cmp	r3, #255	@ 0xff
 8007fce:	d025      	beq.n	800801c <USBD_LL_DataInStage+0x16c>
 8007fd0:	7dfb      	ldrb	r3, [r7, #23]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d122      	bne.n	800801c <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b03      	cmp	r3, #3
 8007fe0:	d11c      	bne.n	800801c <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007fe2:	7dfa      	ldrb	r2, [r7, #23]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	32ae      	adds	r2, #174	@ 0xae
 8007fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fec:	695b      	ldr	r3, [r3, #20]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d014      	beq.n	800801c <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007ff2:	7dfa      	ldrb	r2, [r7, #23]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007ffa:	7dfa      	ldrb	r2, [r7, #23]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	32ae      	adds	r2, #174	@ 0xae
 8008000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	7afa      	ldrb	r2, [r7, #11]
 8008008:	4611      	mov	r1, r2
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	4798      	blx	r3
 800800e:	4603      	mov	r3, r0
 8008010:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008012:	7dbb      	ldrb	r3, [r7, #22]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d001      	beq.n	800801c <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8008018:	7dbb      	ldrb	r3, [r7, #22]
 800801a:	e000      	b.n	800801e <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3718      	adds	r7, #24
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b084      	sub	sp, #16
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800805e:	2b00      	cmp	r3, #0
 8008060:	d014      	beq.n	800808c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00e      	beq.n	800808c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	6852      	ldr	r2, [r2, #4]
 800807a:	b2d2      	uxtb	r2, r2
 800807c:	4611      	mov	r1, r2
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	4798      	blx	r3
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d001      	beq.n	800808c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008088:	2303      	movs	r3, #3
 800808a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800808c:	2340      	movs	r3, #64	@ 0x40
 800808e:	2200      	movs	r2, #0
 8008090:	2100      	movs	r1, #0
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f001 fb29 	bl	80096ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2240      	movs	r2, #64	@ 0x40
 80080a4:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080a8:	2340      	movs	r3, #64	@ 0x40
 80080aa:	2200      	movs	r2, #0
 80080ac:	2180      	movs	r1, #128	@ 0x80
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f001 fb1b 	bl	80096ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2240      	movs	r2, #64	@ 0x40
 80080c0:	841a      	strh	r2, [r3, #32]

  return ret;
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	460b      	mov	r3, r1
 80080d6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	78fa      	ldrb	r2, [r7, #3]
 80080dc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b04      	cmp	r3, #4
 80080fe:	d006      	beq.n	800810e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008106:	b2da      	uxtb	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2204      	movs	r2, #4
 8008112:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008132:	b2db      	uxtb	r3, r3
 8008134:	2b04      	cmp	r3, #4
 8008136:	d106      	bne.n	8008146 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800813e:	b2da      	uxtb	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008162:	b2db      	uxtb	r3, r3
 8008164:	2b03      	cmp	r3, #3
 8008166:	d110      	bne.n	800818a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00b      	beq.n	800818a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008178:	69db      	ldr	r3, [r3, #28]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d005      	beq.n	800818a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008184:	69db      	ldr	r3, [r3, #28]
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	460b      	mov	r3, r1
 800819e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	32ae      	adds	r2, #174	@ 0xae
 80081aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d101      	bne.n	80081b6 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e01c      	b.n	80081f0 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b03      	cmp	r3, #3
 80081c0:	d115      	bne.n	80081ee <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	32ae      	adds	r2, #174	@ 0xae
 80081cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d0:	6a1b      	ldr	r3, [r3, #32]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00b      	beq.n	80081ee <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	32ae      	adds	r2, #174	@ 0xae
 80081e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e4:	6a1b      	ldr	r3, [r3, #32]
 80081e6:	78fa      	ldrb	r2, [r7, #3]
 80081e8:	4611      	mov	r1, r2
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	460b      	mov	r3, r1
 8008202:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	32ae      	adds	r2, #174	@ 0xae
 800820e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d101      	bne.n	800821a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008216:	2303      	movs	r3, #3
 8008218:	e01c      	b.n	8008254 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008220:	b2db      	uxtb	r3, r3
 8008222:	2b03      	cmp	r3, #3
 8008224:	d115      	bne.n	8008252 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	32ae      	adds	r2, #174	@ 0xae
 8008230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00b      	beq.n	8008252 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	32ae      	adds	r2, #174	@ 0xae
 8008244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800824a:	78fa      	ldrb	r2, [r7, #3]
 800824c:	4611      	mov	r1, r2
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	370c      	adds	r7, #12
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr

08008272 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b084      	sub	sp, #16
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00e      	beq.n	80082ae <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	6852      	ldr	r2, [r2, #4]
 800829c:	b2d2      	uxtb	r2, r2
 800829e:	4611      	mov	r1, r2
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	4798      	blx	r3
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80082aa:	2303      	movs	r3, #3
 80082ac:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80082ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	460b      	mov	r3, r1
 80082c2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80082c4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b083      	sub	sp, #12
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
 80082da:	460b      	mov	r3, r1
 80082dc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80082de:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b086      	sub	sp, #24
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	460b      	mov	r3, r1
 80082f6:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008300:	2300      	movs	r3, #0
 8008302:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	885b      	ldrh	r3, [r3, #2]
 8008308:	b29b      	uxth	r3, r3
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	7812      	ldrb	r2, [r2, #0]
 800830e:	4293      	cmp	r3, r2
 8008310:	d91f      	bls.n	8008352 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008318:	e013      	b.n	8008342 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800831a:	f107 030a 	add.w	r3, r7, #10
 800831e:	4619      	mov	r1, r3
 8008320:	6978      	ldr	r0, [r7, #20]
 8008322:	f000 f81b 	bl	800835c <USBD_GetNextDesc>
 8008326:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	785b      	ldrb	r3, [r3, #1]
 800832c:	2b05      	cmp	r3, #5
 800832e:	d108      	bne.n	8008342 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	789b      	ldrb	r3, [r3, #2]
 8008338:	78fa      	ldrb	r2, [r7, #3]
 800833a:	429a      	cmp	r2, r3
 800833c:	d008      	beq.n	8008350 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800833e:	2300      	movs	r3, #0
 8008340:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	885b      	ldrh	r3, [r3, #2]
 8008346:	b29a      	uxth	r2, r3
 8008348:	897b      	ldrh	r3, [r7, #10]
 800834a:	429a      	cmp	r2, r3
 800834c:	d8e5      	bhi.n	800831a <USBD_GetEpDesc+0x2e>
 800834e:	e000      	b.n	8008352 <USBD_GetEpDesc+0x66>
          break;
 8008350:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008352:	693b      	ldr	r3, [r7, #16]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3718      	adds	r7, #24
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	881b      	ldrh	r3, [r3, #0]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	7812      	ldrb	r2, [r2, #0]
 8008372:	4413      	add	r3, r2
 8008374:	b29a      	uxth	r2, r3
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	461a      	mov	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4413      	add	r3, r2
 8008384:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008386:	68fb      	ldr	r3, [r7, #12]
}
 8008388:	4618      	mov	r0, r3
 800838a:	3714      	adds	r7, #20
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008394:	b480      	push	{r7}
 8008396:	b087      	sub	sp, #28
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	3301      	adds	r3, #1
 80083aa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80083b2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80083b6:	021b      	lsls	r3, r3, #8
 80083b8:	b21a      	sxth	r2, r3
 80083ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80083be:	4313      	orrs	r3, r2
 80083c0:	b21b      	sxth	r3, r3
 80083c2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80083c4:	89fb      	ldrh	r3, [r7, #14]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	371c      	adds	r7, #28
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
	...

080083d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80083ea:	2b40      	cmp	r3, #64	@ 0x40
 80083ec:	d005      	beq.n	80083fa <USBD_StdDevReq+0x26>
 80083ee:	2b40      	cmp	r3, #64	@ 0x40
 80083f0:	d857      	bhi.n	80084a2 <USBD_StdDevReq+0xce>
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00f      	beq.n	8008416 <USBD_StdDevReq+0x42>
 80083f6:	2b20      	cmp	r3, #32
 80083f8:	d153      	bne.n	80084a2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	32ae      	adds	r2, #174	@ 0xae
 8008404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	6839      	ldr	r1, [r7, #0]
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	4798      	blx	r3
 8008410:	4603      	mov	r3, r0
 8008412:	73fb      	strb	r3, [r7, #15]
      break;
 8008414:	e04a      	b.n	80084ac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	785b      	ldrb	r3, [r3, #1]
 800841a:	2b09      	cmp	r3, #9
 800841c:	d83b      	bhi.n	8008496 <USBD_StdDevReq+0xc2>
 800841e:	a201      	add	r2, pc, #4	@ (adr r2, 8008424 <USBD_StdDevReq+0x50>)
 8008420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008424:	08008479 	.word	0x08008479
 8008428:	0800848d 	.word	0x0800848d
 800842c:	08008497 	.word	0x08008497
 8008430:	08008483 	.word	0x08008483
 8008434:	08008497 	.word	0x08008497
 8008438:	08008457 	.word	0x08008457
 800843c:	0800844d 	.word	0x0800844d
 8008440:	08008497 	.word	0x08008497
 8008444:	0800846f 	.word	0x0800846f
 8008448:	08008461 	.word	0x08008461
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fa3e 	bl	80088d0 <USBD_GetDescriptor>
          break;
 8008454:	e024      	b.n	80084a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fba3 	bl	8008ba4 <USBD_SetAddress>
          break;
 800845e:	e01f      	b.n	80084a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008460:	6839      	ldr	r1, [r7, #0]
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 fbe2 	bl	8008c2c <USBD_SetConfig>
 8008468:	4603      	mov	r3, r0
 800846a:	73fb      	strb	r3, [r7, #15]
          break;
 800846c:	e018      	b.n	80084a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800846e:	6839      	ldr	r1, [r7, #0]
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fc85 	bl	8008d80 <USBD_GetConfig>
          break;
 8008476:	e013      	b.n	80084a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fcb6 	bl	8008dec <USBD_GetStatus>
          break;
 8008480:	e00e      	b.n	80084a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008482:	6839      	ldr	r1, [r7, #0]
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 fce5 	bl	8008e54 <USBD_SetFeature>
          break;
 800848a:	e009      	b.n	80084a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800848c:	6839      	ldr	r1, [r7, #0]
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fd09 	bl	8008ea6 <USBD_ClrFeature>
          break;
 8008494:	e004      	b.n	80084a0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008496:	6839      	ldr	r1, [r7, #0]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 fd60 	bl	8008f5e <USBD_CtlError>
          break;
 800849e:	bf00      	nop
      }
      break;
 80084a0:	e004      	b.n	80084ac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fd5a 	bl	8008f5e <USBD_CtlError>
      break;
 80084aa:	bf00      	nop
  }

  return ret;
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop

080084b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80084ce:	2b40      	cmp	r3, #64	@ 0x40
 80084d0:	d005      	beq.n	80084de <USBD_StdItfReq+0x26>
 80084d2:	2b40      	cmp	r3, #64	@ 0x40
 80084d4:	d852      	bhi.n	800857c <USBD_StdItfReq+0xc4>
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <USBD_StdItfReq+0x26>
 80084da:	2b20      	cmp	r3, #32
 80084dc:	d14e      	bne.n	800857c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	3b01      	subs	r3, #1
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d840      	bhi.n	800856e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	889b      	ldrh	r3, [r3, #4]
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d836      	bhi.n	8008564 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	889b      	ldrh	r3, [r3, #4]
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	4619      	mov	r1, r3
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7ff feda 	bl	80082b8 <USBD_CoreFindIF>
 8008504:	4603      	mov	r3, r0
 8008506:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008508:	7bbb      	ldrb	r3, [r7, #14]
 800850a:	2bff      	cmp	r3, #255	@ 0xff
 800850c:	d01d      	beq.n	800854a <USBD_StdItfReq+0x92>
 800850e:	7bbb      	ldrb	r3, [r7, #14]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d11a      	bne.n	800854a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008514:	7bba      	ldrb	r2, [r7, #14]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	32ae      	adds	r2, #174	@ 0xae
 800851a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00f      	beq.n	8008544 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008524:	7bba      	ldrb	r2, [r7, #14]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800852c:	7bba      	ldrb	r2, [r7, #14]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	32ae      	adds	r2, #174	@ 0xae
 8008532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	6839      	ldr	r1, [r7, #0]
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	4798      	blx	r3
 800853e:	4603      	mov	r3, r0
 8008540:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008542:	e004      	b.n	800854e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008544:	2303      	movs	r3, #3
 8008546:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008548:	e001      	b.n	800854e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800854a:	2303      	movs	r3, #3
 800854c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	88db      	ldrh	r3, [r3, #6]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d110      	bne.n	8008578 <USBD_StdItfReq+0xc0>
 8008556:	7bfb      	ldrb	r3, [r7, #15]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10d      	bne.n	8008578 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fdbb 	bl	80090d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008562:	e009      	b.n	8008578 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fcf9 	bl	8008f5e <USBD_CtlError>
          break;
 800856c:	e004      	b.n	8008578 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fcf4 	bl	8008f5e <USBD_CtlError>
          break;
 8008576:	e000      	b.n	800857a <USBD_StdItfReq+0xc2>
          break;
 8008578:	bf00      	nop
      }
      break;
 800857a:	e004      	b.n	8008586 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800857c:	6839      	ldr	r1, [r7, #0]
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fced 	bl	8008f5e <USBD_CtlError>
      break;
 8008584:	bf00      	nop
  }

  return ret;
 8008586:	7bfb      	ldrb	r3, [r7, #15]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	889b      	ldrh	r3, [r3, #4]
 80085a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80085ac:	2b40      	cmp	r3, #64	@ 0x40
 80085ae:	d007      	beq.n	80085c0 <USBD_StdEPReq+0x30>
 80085b0:	2b40      	cmp	r3, #64	@ 0x40
 80085b2:	f200 8181 	bhi.w	80088b8 <USBD_StdEPReq+0x328>
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d02a      	beq.n	8008610 <USBD_StdEPReq+0x80>
 80085ba:	2b20      	cmp	r3, #32
 80085bc:	f040 817c 	bne.w	80088b8 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80085c0:	7bbb      	ldrb	r3, [r7, #14]
 80085c2:	4619      	mov	r1, r3
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f7ff fe84 	bl	80082d2 <USBD_CoreFindEP>
 80085ca:	4603      	mov	r3, r0
 80085cc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085ce:	7b7b      	ldrb	r3, [r7, #13]
 80085d0:	2bff      	cmp	r3, #255	@ 0xff
 80085d2:	f000 8176 	beq.w	80088c2 <USBD_StdEPReq+0x332>
 80085d6:	7b7b      	ldrb	r3, [r7, #13]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f040 8172 	bne.w	80088c2 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80085de:	7b7a      	ldrb	r2, [r7, #13]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80085e6:	7b7a      	ldrb	r2, [r7, #13]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	32ae      	adds	r2, #174	@ 0xae
 80085ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f000 8165 	beq.w	80088c2 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80085f8:	7b7a      	ldrb	r2, [r7, #13]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	32ae      	adds	r2, #174	@ 0xae
 80085fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	6839      	ldr	r1, [r7, #0]
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	4798      	blx	r3
 800860a:	4603      	mov	r3, r0
 800860c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800860e:	e158      	b.n	80088c2 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	785b      	ldrb	r3, [r3, #1]
 8008614:	2b03      	cmp	r3, #3
 8008616:	d008      	beq.n	800862a <USBD_StdEPReq+0x9a>
 8008618:	2b03      	cmp	r3, #3
 800861a:	f300 8147 	bgt.w	80088ac <USBD_StdEPReq+0x31c>
 800861e:	2b00      	cmp	r3, #0
 8008620:	f000 809b 	beq.w	800875a <USBD_StdEPReq+0x1ca>
 8008624:	2b01      	cmp	r3, #1
 8008626:	d03c      	beq.n	80086a2 <USBD_StdEPReq+0x112>
 8008628:	e140      	b.n	80088ac <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008630:	b2db      	uxtb	r3, r3
 8008632:	2b02      	cmp	r3, #2
 8008634:	d002      	beq.n	800863c <USBD_StdEPReq+0xac>
 8008636:	2b03      	cmp	r3, #3
 8008638:	d016      	beq.n	8008668 <USBD_StdEPReq+0xd8>
 800863a:	e02c      	b.n	8008696 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800863c:	7bbb      	ldrb	r3, [r7, #14]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00d      	beq.n	800865e <USBD_StdEPReq+0xce>
 8008642:	7bbb      	ldrb	r3, [r7, #14]
 8008644:	2b80      	cmp	r3, #128	@ 0x80
 8008646:	d00a      	beq.n	800865e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008648:	7bbb      	ldrb	r3, [r7, #14]
 800864a:	4619      	mov	r1, r3
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f001 f891 	bl	8009774 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008652:	2180      	movs	r1, #128	@ 0x80
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f001 f88d 	bl	8009774 <USBD_LL_StallEP>
 800865a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800865c:	e020      	b.n	80086a0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800865e:	6839      	ldr	r1, [r7, #0]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fc7c 	bl	8008f5e <USBD_CtlError>
              break;
 8008666:	e01b      	b.n	80086a0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	885b      	ldrh	r3, [r3, #2]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d10e      	bne.n	800868e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008670:	7bbb      	ldrb	r3, [r7, #14]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00b      	beq.n	800868e <USBD_StdEPReq+0xfe>
 8008676:	7bbb      	ldrb	r3, [r7, #14]
 8008678:	2b80      	cmp	r3, #128	@ 0x80
 800867a:	d008      	beq.n	800868e <USBD_StdEPReq+0xfe>
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	88db      	ldrh	r3, [r3, #6]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d104      	bne.n	800868e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008684:	7bbb      	ldrb	r3, [r7, #14]
 8008686:	4619      	mov	r1, r3
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f001 f873 	bl	8009774 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fd22 	bl	80090d8 <USBD_CtlSendStatus>

              break;
 8008694:	e004      	b.n	80086a0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fc60 	bl	8008f5e <USBD_CtlError>
              break;
 800869e:	bf00      	nop
          }
          break;
 80086a0:	e109      	b.n	80088b6 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d002      	beq.n	80086b4 <USBD_StdEPReq+0x124>
 80086ae:	2b03      	cmp	r3, #3
 80086b0:	d016      	beq.n	80086e0 <USBD_StdEPReq+0x150>
 80086b2:	e04b      	b.n	800874c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086b4:	7bbb      	ldrb	r3, [r7, #14]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00d      	beq.n	80086d6 <USBD_StdEPReq+0x146>
 80086ba:	7bbb      	ldrb	r3, [r7, #14]
 80086bc:	2b80      	cmp	r3, #128	@ 0x80
 80086be:	d00a      	beq.n	80086d6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80086c0:	7bbb      	ldrb	r3, [r7, #14]
 80086c2:	4619      	mov	r1, r3
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f001 f855 	bl	8009774 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80086ca:	2180      	movs	r1, #128	@ 0x80
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f001 f851 	bl	8009774 <USBD_LL_StallEP>
 80086d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086d4:	e040      	b.n	8008758 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80086d6:	6839      	ldr	r1, [r7, #0]
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 fc40 	bl	8008f5e <USBD_CtlError>
              break;
 80086de:	e03b      	b.n	8008758 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	885b      	ldrh	r3, [r3, #2]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d136      	bne.n	8008756 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80086e8:	7bbb      	ldrb	r3, [r7, #14]
 80086ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d004      	beq.n	80086fc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80086f2:	7bbb      	ldrb	r3, [r7, #14]
 80086f4:	4619      	mov	r1, r3
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f001 f85b 	bl	80097b2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 fceb 	bl	80090d8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008702:	7bbb      	ldrb	r3, [r7, #14]
 8008704:	4619      	mov	r1, r3
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f7ff fde3 	bl	80082d2 <USBD_CoreFindEP>
 800870c:	4603      	mov	r3, r0
 800870e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008710:	7b7b      	ldrb	r3, [r7, #13]
 8008712:	2bff      	cmp	r3, #255	@ 0xff
 8008714:	d01f      	beq.n	8008756 <USBD_StdEPReq+0x1c6>
 8008716:	7b7b      	ldrb	r3, [r7, #13]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d11c      	bne.n	8008756 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800871c:	7b7a      	ldrb	r2, [r7, #13]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008724:	7b7a      	ldrb	r2, [r7, #13]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	32ae      	adds	r2, #174	@ 0xae
 800872a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d010      	beq.n	8008756 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008734:	7b7a      	ldrb	r2, [r7, #13]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	32ae      	adds	r2, #174	@ 0xae
 800873a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	6839      	ldr	r1, [r7, #0]
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	4798      	blx	r3
 8008746:	4603      	mov	r3, r0
 8008748:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800874a:	e004      	b.n	8008756 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800874c:	6839      	ldr	r1, [r7, #0]
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 fc05 	bl	8008f5e <USBD_CtlError>
              break;
 8008754:	e000      	b.n	8008758 <USBD_StdEPReq+0x1c8>
              break;
 8008756:	bf00      	nop
          }
          break;
 8008758:	e0ad      	b.n	80088b6 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b02      	cmp	r3, #2
 8008764:	d002      	beq.n	800876c <USBD_StdEPReq+0x1dc>
 8008766:	2b03      	cmp	r3, #3
 8008768:	d033      	beq.n	80087d2 <USBD_StdEPReq+0x242>
 800876a:	e099      	b.n	80088a0 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800876c:	7bbb      	ldrb	r3, [r7, #14]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d007      	beq.n	8008782 <USBD_StdEPReq+0x1f2>
 8008772:	7bbb      	ldrb	r3, [r7, #14]
 8008774:	2b80      	cmp	r3, #128	@ 0x80
 8008776:	d004      	beq.n	8008782 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fbef 	bl	8008f5e <USBD_CtlError>
                break;
 8008780:	e093      	b.n	80088aa <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008782:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008786:	2b00      	cmp	r3, #0
 8008788:	da0b      	bge.n	80087a2 <USBD_StdEPReq+0x212>
 800878a:	7bbb      	ldrb	r3, [r7, #14]
 800878c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008790:	4613      	mov	r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4413      	add	r3, r2
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	3310      	adds	r3, #16
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	4413      	add	r3, r2
 800879e:	3304      	adds	r3, #4
 80087a0:	e00b      	b.n	80087ba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087a2:	7bbb      	ldrb	r3, [r7, #14]
 80087a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087a8:	4613      	mov	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	4413      	add	r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	4413      	add	r3, r2
 80087b8:	3304      	adds	r3, #4
 80087ba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	2200      	movs	r2, #0
 80087c0:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	330e      	adds	r3, #14
 80087c6:	2202      	movs	r2, #2
 80087c8:	4619      	mov	r1, r3
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fc44 	bl	8009058 <USBD_CtlSendData>
              break;
 80087d0:	e06b      	b.n	80088aa <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80087d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	da11      	bge.n	80087fe <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80087da:	7bbb      	ldrb	r3, [r7, #14]
 80087dc:	f003 020f 	and.w	r2, r3, #15
 80087e0:	6879      	ldr	r1, [r7, #4]
 80087e2:	4613      	mov	r3, r2
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4413      	add	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	440b      	add	r3, r1
 80087ec:	3323      	adds	r3, #35	@ 0x23
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d117      	bne.n	8008824 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80087f4:	6839      	ldr	r1, [r7, #0]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fbb1 	bl	8008f5e <USBD_CtlError>
                  break;
 80087fc:	e055      	b.n	80088aa <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80087fe:	7bbb      	ldrb	r3, [r7, #14]
 8008800:	f003 020f 	and.w	r2, r3, #15
 8008804:	6879      	ldr	r1, [r7, #4]
 8008806:	4613      	mov	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4413      	add	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	440b      	add	r3, r1
 8008810:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d104      	bne.n	8008824 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fb9e 	bl	8008f5e <USBD_CtlError>
                  break;
 8008822:	e042      	b.n	80088aa <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008824:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008828:	2b00      	cmp	r3, #0
 800882a:	da0b      	bge.n	8008844 <USBD_StdEPReq+0x2b4>
 800882c:	7bbb      	ldrb	r3, [r7, #14]
 800882e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008832:	4613      	mov	r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	4413      	add	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	3310      	adds	r3, #16
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	4413      	add	r3, r2
 8008840:	3304      	adds	r3, #4
 8008842:	e00b      	b.n	800885c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008844:	7bbb      	ldrb	r3, [r7, #14]
 8008846:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800884a:	4613      	mov	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4413      	add	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	4413      	add	r3, r2
 800885a:	3304      	adds	r3, #4
 800885c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800885e:	7bbb      	ldrb	r3, [r7, #14]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d002      	beq.n	800886a <USBD_StdEPReq+0x2da>
 8008864:	7bbb      	ldrb	r3, [r7, #14]
 8008866:	2b80      	cmp	r3, #128	@ 0x80
 8008868:	d103      	bne.n	8008872 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2200      	movs	r2, #0
 800886e:	739a      	strb	r2, [r3, #14]
 8008870:	e00e      	b.n	8008890 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008872:	7bbb      	ldrb	r3, [r7, #14]
 8008874:	4619      	mov	r1, r3
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 ffba 	bl	80097f0 <USBD_LL_IsStallEP>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d003      	beq.n	800888a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	2201      	movs	r2, #1
 8008886:	739a      	strb	r2, [r3, #14]
 8008888:	e002      	b.n	8008890 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	2200      	movs	r2, #0
 800888e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	330e      	adds	r3, #14
 8008894:	2202      	movs	r2, #2
 8008896:	4619      	mov	r1, r3
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fbdd 	bl	8009058 <USBD_CtlSendData>
              break;
 800889e:	e004      	b.n	80088aa <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80088a0:	6839      	ldr	r1, [r7, #0]
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fb5b 	bl	8008f5e <USBD_CtlError>
              break;
 80088a8:	bf00      	nop
          }
          break;
 80088aa:	e004      	b.n	80088b6 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 fb55 	bl	8008f5e <USBD_CtlError>
          break;
 80088b4:	bf00      	nop
      }
      break;
 80088b6:	e005      	b.n	80088c4 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80088b8:	6839      	ldr	r1, [r7, #0]
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 fb4f 	bl	8008f5e <USBD_CtlError>
      break;
 80088c0:	e000      	b.n	80088c4 <USBD_StdEPReq+0x334>
      break;
 80088c2:	bf00      	nop
  }

  return ret;
 80088c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
	...

080088d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088da:	2300      	movs	r3, #0
 80088dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80088de:	2300      	movs	r3, #0
 80088e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80088e2:	2300      	movs	r3, #0
 80088e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	885b      	ldrh	r3, [r3, #2]
 80088ea:	0a1b      	lsrs	r3, r3, #8
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	3b01      	subs	r3, #1
 80088f0:	2b06      	cmp	r3, #6
 80088f2:	f200 8128 	bhi.w	8008b46 <USBD_GetDescriptor+0x276>
 80088f6:	a201      	add	r2, pc, #4	@ (adr r2, 80088fc <USBD_GetDescriptor+0x2c>)
 80088f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fc:	08008919 	.word	0x08008919
 8008900:	08008931 	.word	0x08008931
 8008904:	08008971 	.word	0x08008971
 8008908:	08008b47 	.word	0x08008b47
 800890c:	08008b47 	.word	0x08008b47
 8008910:	08008ae7 	.word	0x08008ae7
 8008914:	08008b13 	.word	0x08008b13
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	7c12      	ldrb	r2, [r2, #16]
 8008924:	f107 0108 	add.w	r1, r7, #8
 8008928:	4610      	mov	r0, r2
 800892a:	4798      	blx	r3
 800892c:	60f8      	str	r0, [r7, #12]
      break;
 800892e:	e112      	b.n	8008b56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	7c1b      	ldrb	r3, [r3, #16]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d10d      	bne.n	8008954 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800893e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008940:	f107 0208 	add.w	r2, r7, #8
 8008944:	4610      	mov	r0, r2
 8008946:	4798      	blx	r3
 8008948:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	3301      	adds	r3, #1
 800894e:	2202      	movs	r2, #2
 8008950:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008952:	e100      	b.n	8008b56 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800895a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800895c:	f107 0208 	add.w	r2, r7, #8
 8008960:	4610      	mov	r0, r2
 8008962:	4798      	blx	r3
 8008964:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	3301      	adds	r3, #1
 800896a:	2202      	movs	r2, #2
 800896c:	701a      	strb	r2, [r3, #0]
      break;
 800896e:	e0f2      	b.n	8008b56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	885b      	ldrh	r3, [r3, #2]
 8008974:	b2db      	uxtb	r3, r3
 8008976:	2b05      	cmp	r3, #5
 8008978:	f200 80ac 	bhi.w	8008ad4 <USBD_GetDescriptor+0x204>
 800897c:	a201      	add	r2, pc, #4	@ (adr r2, 8008984 <USBD_GetDescriptor+0xb4>)
 800897e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008982:	bf00      	nop
 8008984:	0800899d 	.word	0x0800899d
 8008988:	080089d1 	.word	0x080089d1
 800898c:	08008a05 	.word	0x08008a05
 8008990:	08008a39 	.word	0x08008a39
 8008994:	08008a6d 	.word	0x08008a6d
 8008998:	08008aa1 	.word	0x08008aa1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00b      	beq.n	80089c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	7c12      	ldrb	r2, [r2, #16]
 80089b4:	f107 0108 	add.w	r1, r7, #8
 80089b8:	4610      	mov	r0, r2
 80089ba:	4798      	blx	r3
 80089bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089be:	e091      	b.n	8008ae4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 facb 	bl	8008f5e <USBD_CtlError>
            err++;
 80089c8:	7afb      	ldrb	r3, [r7, #11]
 80089ca:	3301      	adds	r3, #1
 80089cc:	72fb      	strb	r3, [r7, #11]
          break;
 80089ce:	e089      	b.n	8008ae4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00b      	beq.n	80089f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	7c12      	ldrb	r2, [r2, #16]
 80089e8:	f107 0108 	add.w	r1, r7, #8
 80089ec:	4610      	mov	r0, r2
 80089ee:	4798      	blx	r3
 80089f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089f2:	e077      	b.n	8008ae4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fab1 	bl	8008f5e <USBD_CtlError>
            err++;
 80089fc:	7afb      	ldrb	r3, [r7, #11]
 80089fe:	3301      	adds	r3, #1
 8008a00:	72fb      	strb	r3, [r7, #11]
          break;
 8008a02:	e06f      	b.n	8008ae4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00b      	beq.n	8008a28 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	7c12      	ldrb	r2, [r2, #16]
 8008a1c:	f107 0108 	add.w	r1, r7, #8
 8008a20:	4610      	mov	r0, r2
 8008a22:	4798      	blx	r3
 8008a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a26:	e05d      	b.n	8008ae4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fa97 	bl	8008f5e <USBD_CtlError>
            err++;
 8008a30:	7afb      	ldrb	r3, [r7, #11]
 8008a32:	3301      	adds	r3, #1
 8008a34:	72fb      	strb	r3, [r7, #11]
          break;
 8008a36:	e055      	b.n	8008ae4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00b      	beq.n	8008a5c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	7c12      	ldrb	r2, [r2, #16]
 8008a50:	f107 0108 	add.w	r1, r7, #8
 8008a54:	4610      	mov	r0, r2
 8008a56:	4798      	blx	r3
 8008a58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a5a:	e043      	b.n	8008ae4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fa7d 	bl	8008f5e <USBD_CtlError>
            err++;
 8008a64:	7afb      	ldrb	r3, [r7, #11]
 8008a66:	3301      	adds	r3, #1
 8008a68:	72fb      	strb	r3, [r7, #11]
          break;
 8008a6a:	e03b      	b.n	8008ae4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a72:	695b      	ldr	r3, [r3, #20]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00b      	beq.n	8008a90 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a7e:	695b      	ldr	r3, [r3, #20]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	7c12      	ldrb	r2, [r2, #16]
 8008a84:	f107 0108 	add.w	r1, r7, #8
 8008a88:	4610      	mov	r0, r2
 8008a8a:	4798      	blx	r3
 8008a8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a8e:	e029      	b.n	8008ae4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a90:	6839      	ldr	r1, [r7, #0]
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fa63 	bl	8008f5e <USBD_CtlError>
            err++;
 8008a98:	7afb      	ldrb	r3, [r7, #11]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a9e:	e021      	b.n	8008ae4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00b      	beq.n	8008ac4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	7c12      	ldrb	r2, [r2, #16]
 8008ab8:	f107 0108 	add.w	r1, r7, #8
 8008abc:	4610      	mov	r0, r2
 8008abe:	4798      	blx	r3
 8008ac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ac2:	e00f      	b.n	8008ae4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ac4:	6839      	ldr	r1, [r7, #0]
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fa49 	bl	8008f5e <USBD_CtlError>
            err++;
 8008acc:	7afb      	ldrb	r3, [r7, #11]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ad2:	e007      	b.n	8008ae4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fa41 	bl	8008f5e <USBD_CtlError>
          err++;
 8008adc:	7afb      	ldrb	r3, [r7, #11]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008ae2:	bf00      	nop
      }
      break;
 8008ae4:	e037      	b.n	8008b56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	7c1b      	ldrb	r3, [r3, #16]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d109      	bne.n	8008b02 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008af6:	f107 0208 	add.w	r2, r7, #8
 8008afa:	4610      	mov	r0, r2
 8008afc:	4798      	blx	r3
 8008afe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b00:	e029      	b.n	8008b56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b02:	6839      	ldr	r1, [r7, #0]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 fa2a 	bl	8008f5e <USBD_CtlError>
        err++;
 8008b0a:	7afb      	ldrb	r3, [r7, #11]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	72fb      	strb	r3, [r7, #11]
      break;
 8008b10:	e021      	b.n	8008b56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	7c1b      	ldrb	r3, [r3, #16]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d10d      	bne.n	8008b36 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b22:	f107 0208 	add.w	r2, r7, #8
 8008b26:	4610      	mov	r0, r2
 8008b28:	4798      	blx	r3
 8008b2a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	2207      	movs	r2, #7
 8008b32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b34:	e00f      	b.n	8008b56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b36:	6839      	ldr	r1, [r7, #0]
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fa10 	bl	8008f5e <USBD_CtlError>
        err++;
 8008b3e:	7afb      	ldrb	r3, [r7, #11]
 8008b40:	3301      	adds	r3, #1
 8008b42:	72fb      	strb	r3, [r7, #11]
      break;
 8008b44:	e007      	b.n	8008b56 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 fa08 	bl	8008f5e <USBD_CtlError>
      err++;
 8008b4e:	7afb      	ldrb	r3, [r7, #11]
 8008b50:	3301      	adds	r3, #1
 8008b52:	72fb      	strb	r3, [r7, #11]
      break;
 8008b54:	bf00      	nop
  }

  if (err != 0U)
 8008b56:	7afb      	ldrb	r3, [r7, #11]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d11e      	bne.n	8008b9a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	88db      	ldrh	r3, [r3, #6]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d016      	beq.n	8008b92 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008b64:	893b      	ldrh	r3, [r7, #8]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00e      	beq.n	8008b88 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	88da      	ldrh	r2, [r3, #6]
 8008b6e:	893b      	ldrh	r3, [r7, #8]
 8008b70:	4293      	cmp	r3, r2
 8008b72:	bf28      	it	cs
 8008b74:	4613      	movcs	r3, r2
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b7a:	893b      	ldrh	r3, [r7, #8]
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	68f9      	ldr	r1, [r7, #12]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fa69 	bl	8009058 <USBD_CtlSendData>
 8008b86:	e009      	b.n	8008b9c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f9e7 	bl	8008f5e <USBD_CtlError>
 8008b90:	e004      	b.n	8008b9c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 faa0 	bl	80090d8 <USBD_CtlSendStatus>
 8008b98:	e000      	b.n	8008b9c <USBD_GetDescriptor+0x2cc>
    return;
 8008b9a:	bf00      	nop
  }
}
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop

08008ba4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	889b      	ldrh	r3, [r3, #4]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d131      	bne.n	8008c1a <USBD_SetAddress+0x76>
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	88db      	ldrh	r3, [r3, #6]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d12d      	bne.n	8008c1a <USBD_SetAddress+0x76>
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	885b      	ldrh	r3, [r3, #2]
 8008bc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8008bc4:	d829      	bhi.n	8008c1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	885b      	ldrh	r3, [r3, #2]
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b03      	cmp	r3, #3
 8008bdc:	d104      	bne.n	8008be8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008bde:	6839      	ldr	r1, [r7, #0]
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 f9bc 	bl	8008f5e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008be6:	e01d      	b.n	8008c24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	7bfa      	ldrb	r2, [r7, #15]
 8008bec:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008bf0:	7bfb      	ldrb	r3, [r7, #15]
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 fe27 	bl	8009848 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fa6c 	bl	80090d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c00:	7bfb      	ldrb	r3, [r7, #15]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d004      	beq.n	8008c10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2202      	movs	r2, #2
 8008c0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c0e:	e009      	b.n	8008c24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c18:	e004      	b.n	8008c24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c1a:	6839      	ldr	r1, [r7, #0]
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 f99e 	bl	8008f5e <USBD_CtlError>
  }
}
 8008c22:	bf00      	nop
 8008c24:	bf00      	nop
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c36:	2300      	movs	r3, #0
 8008c38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	885b      	ldrh	r3, [r3, #2]
 8008c3e:	b2da      	uxtb	r2, r3
 8008c40:	4b4e      	ldr	r3, [pc, #312]	@ (8008d7c <USBD_SetConfig+0x150>)
 8008c42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c44:	4b4d      	ldr	r3, [pc, #308]	@ (8008d7c <USBD_SetConfig+0x150>)
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d905      	bls.n	8008c58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008c4c:	6839      	ldr	r1, [r7, #0]
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f985 	bl	8008f5e <USBD_CtlError>
    return USBD_FAIL;
 8008c54:	2303      	movs	r3, #3
 8008c56:	e08c      	b.n	8008d72 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d002      	beq.n	8008c6a <USBD_SetConfig+0x3e>
 8008c64:	2b03      	cmp	r3, #3
 8008c66:	d029      	beq.n	8008cbc <USBD_SetConfig+0x90>
 8008c68:	e075      	b.n	8008d56 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008c6a:	4b44      	ldr	r3, [pc, #272]	@ (8008d7c <USBD_SetConfig+0x150>)
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d020      	beq.n	8008cb4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008c72:	4b42      	ldr	r3, [pc, #264]	@ (8008d7c <USBD_SetConfig+0x150>)
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	461a      	mov	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c7c:	4b3f      	ldr	r3, [pc, #252]	@ (8008d7c <USBD_SetConfig+0x150>)
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	4619      	mov	r1, r3
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7fe ffcd 	bl	8007c22 <USBD_SetClassConfig>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c8c:	7bfb      	ldrb	r3, [r7, #15]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d008      	beq.n	8008ca4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008c92:	6839      	ldr	r1, [r7, #0]
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f962 	bl	8008f5e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2202      	movs	r2, #2
 8008c9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ca2:	e065      	b.n	8008d70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fa17 	bl	80090d8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2203      	movs	r2, #3
 8008cae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008cb2:	e05d      	b.n	8008d70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 fa0f 	bl	80090d8 <USBD_CtlSendStatus>
      break;
 8008cba:	e059      	b.n	8008d70 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008cbc:	4b2f      	ldr	r3, [pc, #188]	@ (8008d7c <USBD_SetConfig+0x150>)
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d112      	bne.n	8008cea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8008d7c <USBD_SetConfig+0x150>)
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cd6:	4b29      	ldr	r3, [pc, #164]	@ (8008d7c <USBD_SetConfig+0x150>)
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	4619      	mov	r1, r3
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f7fe ffbc 	bl	8007c5a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 f9f8 	bl	80090d8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ce8:	e042      	b.n	8008d70 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008cea:	4b24      	ldr	r3, [pc, #144]	@ (8008d7c <USBD_SetConfig+0x150>)
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	461a      	mov	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d02a      	beq.n	8008d4e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7fe ffaa 	bl	8007c5a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008d06:	4b1d      	ldr	r3, [pc, #116]	@ (8008d7c <USBD_SetConfig+0x150>)
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d10:	4b1a      	ldr	r3, [pc, #104]	@ (8008d7c <USBD_SetConfig+0x150>)
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	4619      	mov	r1, r3
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7fe ff83 	bl	8007c22 <USBD_SetClassConfig>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008d20:	7bfb      	ldrb	r3, [r7, #15]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00f      	beq.n	8008d46 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008d26:	6839      	ldr	r1, [r7, #0]
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 f918 	bl	8008f5e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	4619      	mov	r1, r3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f7fe ff8f 	bl	8007c5a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2202      	movs	r2, #2
 8008d40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008d44:	e014      	b.n	8008d70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f9c6 	bl	80090d8 <USBD_CtlSendStatus>
      break;
 8008d4c:	e010      	b.n	8008d70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 f9c2 	bl	80090d8 <USBD_CtlSendStatus>
      break;
 8008d54:	e00c      	b.n	8008d70 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008d56:	6839      	ldr	r1, [r7, #0]
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 f900 	bl	8008f5e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d5e:	4b07      	ldr	r3, [pc, #28]	@ (8008d7c <USBD_SetConfig+0x150>)
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	4619      	mov	r1, r3
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f7fe ff78 	bl	8007c5a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d6e:	bf00      	nop
  }

  return ret;
 8008d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	2000031c 	.word	0x2000031c

08008d80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	88db      	ldrh	r3, [r3, #6]
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d004      	beq.n	8008d9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d92:	6839      	ldr	r1, [r7, #0]
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 f8e2 	bl	8008f5e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d9a:	e023      	b.n	8008de4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	dc02      	bgt.n	8008dae <USBD_GetConfig+0x2e>
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	dc03      	bgt.n	8008db4 <USBD_GetConfig+0x34>
 8008dac:	e015      	b.n	8008dda <USBD_GetConfig+0x5a>
 8008dae:	2b03      	cmp	r3, #3
 8008db0:	d00b      	beq.n	8008dca <USBD_GetConfig+0x4a>
 8008db2:	e012      	b.n	8008dda <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	3308      	adds	r3, #8
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f948 	bl	8009058 <USBD_CtlSendData>
        break;
 8008dc8:	e00c      	b.n	8008de4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	3304      	adds	r3, #4
 8008dce:	2201      	movs	r2, #1
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f940 	bl	8009058 <USBD_CtlSendData>
        break;
 8008dd8:	e004      	b.n	8008de4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 f8be 	bl	8008f5e <USBD_CtlError>
        break;
 8008de2:	bf00      	nop
}
 8008de4:	bf00      	nop
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d81e      	bhi.n	8008e42 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	88db      	ldrh	r3, [r3, #6]
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	d004      	beq.n	8008e16 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f8a5 	bl	8008f5e <USBD_CtlError>
        break;
 8008e14:	e01a      	b.n	8008e4c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d005      	beq.n	8008e32 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	f043 0202 	orr.w	r2, r3, #2
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	330c      	adds	r3, #12
 8008e36:	2202      	movs	r2, #2
 8008e38:	4619      	mov	r1, r3
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f90c 	bl	8009058 <USBD_CtlSendData>
      break;
 8008e40:	e004      	b.n	8008e4c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008e42:	6839      	ldr	r1, [r7, #0]
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 f88a 	bl	8008f5e <USBD_CtlError>
      break;
 8008e4a:	bf00      	nop
  }
}
 8008e4c:	bf00      	nop
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	885b      	ldrh	r3, [r3, #2]
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d107      	bne.n	8008e76 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f932 	bl	80090d8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008e74:	e013      	b.n	8008e9e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	885b      	ldrh	r3, [r3, #2]
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d10b      	bne.n	8008e96 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	889b      	ldrh	r3, [r3, #4]
 8008e82:	0a1b      	lsrs	r3, r3, #8
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	b2da      	uxtb	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f922 	bl	80090d8 <USBD_CtlSendStatus>
}
 8008e94:	e003      	b.n	8008e9e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008e96:	6839      	ldr	r1, [r7, #0]
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 f860 	bl	8008f5e <USBD_CtlError>
}
 8008e9e:	bf00      	nop
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b082      	sub	sp, #8
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
 8008eae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d80b      	bhi.n	8008ed6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	885b      	ldrh	r3, [r3, #2]
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d10c      	bne.n	8008ee0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 f902 	bl	80090d8 <USBD_CtlSendStatus>
      }
      break;
 8008ed4:	e004      	b.n	8008ee0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008ed6:	6839      	ldr	r1, [r7, #0]
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 f840 	bl	8008f5e <USBD_CtlError>
      break;
 8008ede:	e000      	b.n	8008ee2 <USBD_ClrFeature+0x3c>
      break;
 8008ee0:	bf00      	nop
  }
}
 8008ee2:	bf00      	nop
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b084      	sub	sp, #16
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
 8008ef2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	781a      	ldrb	r2, [r3, #0]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	3301      	adds	r3, #1
 8008f04:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	781a      	ldrb	r2, [r3, #0]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	3301      	adds	r3, #1
 8008f12:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008f14:	68f8      	ldr	r0, [r7, #12]
 8008f16:	f7ff fa3d 	bl	8008394 <SWAPBYTE>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	3301      	adds	r3, #1
 8008f26:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f7ff fa30 	bl	8008394 <SWAPBYTE>
 8008f34:	4603      	mov	r3, r0
 8008f36:	461a      	mov	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	3301      	adds	r3, #1
 8008f46:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f7ff fa23 	bl	8008394 <SWAPBYTE>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	461a      	mov	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	80da      	strh	r2, [r3, #6]
}
 8008f56:	bf00      	nop
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b082      	sub	sp, #8
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
 8008f66:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f68:	2180      	movs	r1, #128	@ 0x80
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fc02 	bl	8009774 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f70:	2100      	movs	r1, #0
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fbfe 	bl	8009774 <USBD_LL_StallEP>
}
 8008f78:	bf00      	nop
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b086      	sub	sp, #24
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d042      	beq.n	800901c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008f9a:	6938      	ldr	r0, [r7, #16]
 8008f9c:	f000 f842 	bl	8009024 <USBD_GetLen>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	005b      	lsls	r3, r3, #1
 8008fa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008faa:	d808      	bhi.n	8008fbe <USBD_GetString+0x3e>
 8008fac:	6938      	ldr	r0, [r7, #16]
 8008fae:	f000 f839 	bl	8009024 <USBD_GetLen>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	005b      	lsls	r3, r3, #1
 8008fba:	b29a      	uxth	r2, r3
 8008fbc:	e001      	b.n	8008fc2 <USBD_GetString+0x42>
 8008fbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008fc6:	7dfb      	ldrb	r3, [r7, #23]
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	4413      	add	r3, r2
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	7812      	ldrb	r2, [r2, #0]
 8008fd0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008fd2:	7dfb      	ldrb	r3, [r7, #23]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008fd8:	7dfb      	ldrb	r3, [r7, #23]
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	4413      	add	r3, r2
 8008fde:	2203      	movs	r2, #3
 8008fe0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008fe2:	7dfb      	ldrb	r3, [r7, #23]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008fe8:	e013      	b.n	8009012 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008fea:	7dfb      	ldrb	r3, [r7, #23]
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	4413      	add	r3, r2
 8008ff0:	693a      	ldr	r2, [r7, #16]
 8008ff2:	7812      	ldrb	r2, [r2, #0]
 8008ff4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	613b      	str	r3, [r7, #16]
    idx++;
 8008ffc:	7dfb      	ldrb	r3, [r7, #23]
 8008ffe:	3301      	adds	r3, #1
 8009000:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009002:	7dfb      	ldrb	r3, [r7, #23]
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	4413      	add	r3, r2
 8009008:	2200      	movs	r2, #0
 800900a:	701a      	strb	r2, [r3, #0]
    idx++;
 800900c:	7dfb      	ldrb	r3, [r7, #23]
 800900e:	3301      	adds	r3, #1
 8009010:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1e7      	bne.n	8008fea <USBD_GetString+0x6a>
 800901a:	e000      	b.n	800901e <USBD_GetString+0x9e>
    return;
 800901c:	bf00      	nop
  }
}
 800901e:	3718      	adds	r7, #24
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009024:	b480      	push	{r7}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800902c:	2300      	movs	r3, #0
 800902e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009034:	e005      	b.n	8009042 <USBD_GetLen+0x1e>
  {
    len++;
 8009036:	7bfb      	ldrb	r3, [r7, #15]
 8009038:	3301      	adds	r3, #1
 800903a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	3301      	adds	r3, #1
 8009040:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1f5      	bne.n	8009036 <USBD_GetLen+0x12>
  }

  return len;
 800904a:	7bfb      	ldrb	r3, [r7, #15]
}
 800904c:	4618      	mov	r0, r3
 800904e:	3714      	adds	r7, #20
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2202      	movs	r2, #2
 8009068:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	68ba      	ldr	r2, [r7, #8]
 8009076:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	68ba      	ldr	r2, [r7, #8]
 8009082:	2100      	movs	r1, #0
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f000 fbfe 	bl	8009886 <USBD_LL_Transmit>

  return USBD_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3710      	adds	r7, #16
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	68ba      	ldr	r2, [r7, #8]
 80090a4:	2100      	movs	r1, #0
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	f000 fbed 	bl	8009886 <USBD_LL_Transmit>

  return USBD_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b084      	sub	sp, #16
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	60f8      	str	r0, [r7, #12]
 80090be:	60b9      	str	r1, [r7, #8]
 80090c0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	68ba      	ldr	r2, [r7, #8]
 80090c6:	2100      	movs	r1, #0
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f000 fbfd 	bl	80098c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2204      	movs	r2, #4
 80090e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80090e8:	2300      	movs	r3, #0
 80090ea:	2200      	movs	r2, #0
 80090ec:	2100      	movs	r1, #0
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fbc9 	bl	8009886 <USBD_LL_Transmit>

  return USBD_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b082      	sub	sp, #8
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2205      	movs	r2, #5
 800910a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800910e:	2300      	movs	r3, #0
 8009110:	2200      	movs	r2, #0
 8009112:	2100      	movs	r1, #0
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fbd7 	bl	80098c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009128:	2200      	movs	r2, #0
 800912a:	490e      	ldr	r1, [pc, #56]	@ (8009164 <MX_USB_DEVICE_Init+0x40>)
 800912c:	480e      	ldr	r0, [pc, #56]	@ (8009168 <MX_USB_DEVICE_Init+0x44>)
 800912e:	f7fe fcfb 	bl	8007b28 <USBD_Init>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d001      	beq.n	800913c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009138:	f7f8 fa94 	bl	8001664 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800913c:	490b      	ldr	r1, [pc, #44]	@ (800916c <MX_USB_DEVICE_Init+0x48>)
 800913e:	480a      	ldr	r0, [pc, #40]	@ (8009168 <MX_USB_DEVICE_Init+0x44>)
 8009140:	f7fe fd22 	bl	8007b88 <USBD_RegisterClass>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800914a:	f7f8 fa8b 	bl	8001664 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800914e:	4806      	ldr	r0, [pc, #24]	@ (8009168 <MX_USB_DEVICE_Init+0x44>)
 8009150:	f7fe fd50 	bl	8007bf4 <USBD_Start>
 8009154:	4603      	mov	r3, r0
 8009156:	2b00      	cmp	r3, #0
 8009158:	d001      	beq.n	800915e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800915a:	f7f8 fa83 	bl	8001664 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800915e:	bf00      	nop
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	2000015c 	.word	0x2000015c
 8009168:	20000320 	.word	0x20000320
 800916c:	2000009c 	.word	0x2000009c

08009170 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	4603      	mov	r3, r0
 8009178:	6039      	str	r1, [r7, #0]
 800917a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	2212      	movs	r2, #18
 8009180:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009182:	4b03      	ldr	r3, [pc, #12]	@ (8009190 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009184:	4618      	mov	r0, r3
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr
 8009190:	20000178 	.word	0x20000178

08009194 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	4603      	mov	r3, r0
 800919c:	6039      	str	r1, [r7, #0]
 800919e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	2204      	movs	r2, #4
 80091a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80091a6:	4b03      	ldr	r3, [pc, #12]	@ (80091b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr
 80091b4:	2000018c 	.word	0x2000018c

080091b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	4603      	mov	r3, r0
 80091c0:	6039      	str	r1, [r7, #0]
 80091c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80091c4:	79fb      	ldrb	r3, [r7, #7]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d105      	bne.n	80091d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80091ca:	683a      	ldr	r2, [r7, #0]
 80091cc:	4907      	ldr	r1, [pc, #28]	@ (80091ec <USBD_FS_ProductStrDescriptor+0x34>)
 80091ce:	4808      	ldr	r0, [pc, #32]	@ (80091f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80091d0:	f7ff fed6 	bl	8008f80 <USBD_GetString>
 80091d4:	e004      	b.n	80091e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80091d6:	683a      	ldr	r2, [r7, #0]
 80091d8:	4904      	ldr	r1, [pc, #16]	@ (80091ec <USBD_FS_ProductStrDescriptor+0x34>)
 80091da:	4805      	ldr	r0, [pc, #20]	@ (80091f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80091dc:	f7ff fed0 	bl	8008f80 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091e0:	4b02      	ldr	r3, [pc, #8]	@ (80091ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	200005fc 	.word	0x200005fc
 80091f0:	0800aaec 	.word	0x0800aaec

080091f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	4603      	mov	r3, r0
 80091fc:	6039      	str	r1, [r7, #0]
 80091fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009200:	683a      	ldr	r2, [r7, #0]
 8009202:	4904      	ldr	r1, [pc, #16]	@ (8009214 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009204:	4804      	ldr	r0, [pc, #16]	@ (8009218 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009206:	f7ff febb 	bl	8008f80 <USBD_GetString>
  return USBD_StrDesc;
 800920a:	4b02      	ldr	r3, [pc, #8]	@ (8009214 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800920c:	4618      	mov	r0, r3
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	200005fc 	.word	0x200005fc
 8009218:	0800aaf0 	.word	0x0800aaf0

0800921c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	4603      	mov	r3, r0
 8009224:	6039      	str	r1, [r7, #0]
 8009226:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	221a      	movs	r2, #26
 800922c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800922e:	f000 f843 	bl	80092b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009232:	4b02      	ldr	r3, [pc, #8]	@ (800923c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009234:	4618      	mov	r0, r3
 8009236:	3708      	adds	r7, #8
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}
 800923c:	20000190 	.word	0x20000190

08009240 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	4603      	mov	r3, r0
 8009248:	6039      	str	r1, [r7, #0]
 800924a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800924c:	79fb      	ldrb	r3, [r7, #7]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d105      	bne.n	800925e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009252:	683a      	ldr	r2, [r7, #0]
 8009254:	4907      	ldr	r1, [pc, #28]	@ (8009274 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009256:	4808      	ldr	r0, [pc, #32]	@ (8009278 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009258:	f7ff fe92 	bl	8008f80 <USBD_GetString>
 800925c:	e004      	b.n	8009268 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800925e:	683a      	ldr	r2, [r7, #0]
 8009260:	4904      	ldr	r1, [pc, #16]	@ (8009274 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009262:	4805      	ldr	r0, [pc, #20]	@ (8009278 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009264:	f7ff fe8c 	bl	8008f80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009268:	4b02      	ldr	r3, [pc, #8]	@ (8009274 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800926a:	4618      	mov	r0, r3
 800926c:	3708      	adds	r7, #8
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	200005fc 	.word	0x200005fc
 8009278:	0800ab04 	.word	0x0800ab04

0800927c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	4603      	mov	r3, r0
 8009284:	6039      	str	r1, [r7, #0]
 8009286:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009288:	79fb      	ldrb	r3, [r7, #7]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d105      	bne.n	800929a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800928e:	683a      	ldr	r2, [r7, #0]
 8009290:	4907      	ldr	r1, [pc, #28]	@ (80092b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009292:	4808      	ldr	r0, [pc, #32]	@ (80092b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009294:	f7ff fe74 	bl	8008f80 <USBD_GetString>
 8009298:	e004      	b.n	80092a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800929a:	683a      	ldr	r2, [r7, #0]
 800929c:	4904      	ldr	r1, [pc, #16]	@ (80092b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800929e:	4805      	ldr	r0, [pc, #20]	@ (80092b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092a0:	f7ff fe6e 	bl	8008f80 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092a4:	4b02      	ldr	r3, [pc, #8]	@ (80092b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	200005fc 	.word	0x200005fc
 80092b4:	0800ab10 	.word	0x0800ab10

080092b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80092be:	4b0f      	ldr	r3, [pc, #60]	@ (80092fc <Get_SerialNum+0x44>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80092c4:	4b0e      	ldr	r3, [pc, #56]	@ (8009300 <Get_SerialNum+0x48>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80092ca:	4b0e      	ldr	r3, [pc, #56]	@ (8009304 <Get_SerialNum+0x4c>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	4413      	add	r3, r2
 80092d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d009      	beq.n	80092f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80092de:	2208      	movs	r2, #8
 80092e0:	4909      	ldr	r1, [pc, #36]	@ (8009308 <Get_SerialNum+0x50>)
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	f000 f814 	bl	8009310 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80092e8:	2204      	movs	r2, #4
 80092ea:	4908      	ldr	r1, [pc, #32]	@ (800930c <Get_SerialNum+0x54>)
 80092ec:	68b8      	ldr	r0, [r7, #8]
 80092ee:	f000 f80f 	bl	8009310 <IntToUnicode>
  }
}
 80092f2:	bf00      	nop
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	1fff7a10 	.word	0x1fff7a10
 8009300:	1fff7a14 	.word	0x1fff7a14
 8009304:	1fff7a18 	.word	0x1fff7a18
 8009308:	20000192 	.word	0x20000192
 800930c:	200001a2 	.word	0x200001a2

08009310 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009310:	b480      	push	{r7}
 8009312:	b087      	sub	sp, #28
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	4613      	mov	r3, r2
 800931c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800931e:	2300      	movs	r3, #0
 8009320:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009322:	2300      	movs	r3, #0
 8009324:	75fb      	strb	r3, [r7, #23]
 8009326:	e027      	b.n	8009378 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	0f1b      	lsrs	r3, r3, #28
 800932c:	2b09      	cmp	r3, #9
 800932e:	d80b      	bhi.n	8009348 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	0f1b      	lsrs	r3, r3, #28
 8009334:	b2da      	uxtb	r2, r3
 8009336:	7dfb      	ldrb	r3, [r7, #23]
 8009338:	005b      	lsls	r3, r3, #1
 800933a:	4619      	mov	r1, r3
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	440b      	add	r3, r1
 8009340:	3230      	adds	r2, #48	@ 0x30
 8009342:	b2d2      	uxtb	r2, r2
 8009344:	701a      	strb	r2, [r3, #0]
 8009346:	e00a      	b.n	800935e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	0f1b      	lsrs	r3, r3, #28
 800934c:	b2da      	uxtb	r2, r3
 800934e:	7dfb      	ldrb	r3, [r7, #23]
 8009350:	005b      	lsls	r3, r3, #1
 8009352:	4619      	mov	r1, r3
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	440b      	add	r3, r1
 8009358:	3237      	adds	r2, #55	@ 0x37
 800935a:	b2d2      	uxtb	r2, r2
 800935c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	011b      	lsls	r3, r3, #4
 8009362:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009364:	7dfb      	ldrb	r3, [r7, #23]
 8009366:	005b      	lsls	r3, r3, #1
 8009368:	3301      	adds	r3, #1
 800936a:	68ba      	ldr	r2, [r7, #8]
 800936c:	4413      	add	r3, r2
 800936e:	2200      	movs	r2, #0
 8009370:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009372:	7dfb      	ldrb	r3, [r7, #23]
 8009374:	3301      	adds	r3, #1
 8009376:	75fb      	strb	r3, [r7, #23]
 8009378:	7dfa      	ldrb	r2, [r7, #23]
 800937a:	79fb      	ldrb	r3, [r7, #7]
 800937c:	429a      	cmp	r2, r3
 800937e:	d3d3      	bcc.n	8009328 <IntToUnicode+0x18>
  }
}
 8009380:	bf00      	nop
 8009382:	bf00      	nop
 8009384:	371c      	adds	r7, #28
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr
	...

08009390 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b08a      	sub	sp, #40	@ 0x28
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009398:	f107 0314 	add.w	r3, r7, #20
 800939c:	2200      	movs	r2, #0
 800939e:	601a      	str	r2, [r3, #0]
 80093a0:	605a      	str	r2, [r3, #4]
 80093a2:	609a      	str	r2, [r3, #8]
 80093a4:	60da      	str	r2, [r3, #12]
 80093a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80093b0:	d13a      	bne.n	8009428 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093b2:	2300      	movs	r3, #0
 80093b4:	613b      	str	r3, [r7, #16]
 80093b6:	4b1e      	ldr	r3, [pc, #120]	@ (8009430 <HAL_PCD_MspInit+0xa0>)
 80093b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093ba:	4a1d      	ldr	r2, [pc, #116]	@ (8009430 <HAL_PCD_MspInit+0xa0>)
 80093bc:	f043 0301 	orr.w	r3, r3, #1
 80093c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80093c2:	4b1b      	ldr	r3, [pc, #108]	@ (8009430 <HAL_PCD_MspInit+0xa0>)
 80093c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093c6:	f003 0301 	and.w	r3, r3, #1
 80093ca:	613b      	str	r3, [r7, #16]
 80093cc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80093ce:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80093d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093d4:	2302      	movs	r3, #2
 80093d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093d8:	2300      	movs	r3, #0
 80093da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093dc:	2303      	movs	r3, #3
 80093de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80093e0:	230a      	movs	r3, #10
 80093e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093e4:	f107 0314 	add.w	r3, r7, #20
 80093e8:	4619      	mov	r1, r3
 80093ea:	4812      	ldr	r0, [pc, #72]	@ (8009434 <HAL_PCD_MspInit+0xa4>)
 80093ec:	f7f8 fffe 	bl	80023ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80093f0:	4b0f      	ldr	r3, [pc, #60]	@ (8009430 <HAL_PCD_MspInit+0xa0>)
 80093f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093f4:	4a0e      	ldr	r2, [pc, #56]	@ (8009430 <HAL_PCD_MspInit+0xa0>)
 80093f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093fa:	6353      	str	r3, [r2, #52]	@ 0x34
 80093fc:	2300      	movs	r3, #0
 80093fe:	60fb      	str	r3, [r7, #12]
 8009400:	4b0b      	ldr	r3, [pc, #44]	@ (8009430 <HAL_PCD_MspInit+0xa0>)
 8009402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009404:	4a0a      	ldr	r2, [pc, #40]	@ (8009430 <HAL_PCD_MspInit+0xa0>)
 8009406:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800940a:	6453      	str	r3, [r2, #68]	@ 0x44
 800940c:	4b08      	ldr	r3, [pc, #32]	@ (8009430 <HAL_PCD_MspInit+0xa0>)
 800940e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009410:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009414:	60fb      	str	r3, [r7, #12]
 8009416:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009418:	2200      	movs	r2, #0
 800941a:	2100      	movs	r1, #0
 800941c:	2043      	movs	r0, #67	@ 0x43
 800941e:	f7f8 ffae 	bl	800237e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009422:	2043      	movs	r0, #67	@ 0x43
 8009424:	f7f8 ffc7 	bl	80023b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009428:	bf00      	nop
 800942a:	3728      	adds	r7, #40	@ 0x28
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	40023800 	.word	0x40023800
 8009434:	40020000 	.word	0x40020000

08009438 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800944c:	4619      	mov	r1, r3
 800944e:	4610      	mov	r0, r2
 8009450:	f7fe fc1d 	bl	8007c8e <USBD_LL_SetupStage>
}
 8009454:	bf00      	nop
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	460b      	mov	r3, r1
 8009466:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800946e:	78fa      	ldrb	r2, [r7, #3]
 8009470:	6879      	ldr	r1, [r7, #4]
 8009472:	4613      	mov	r3, r2
 8009474:	00db      	lsls	r3, r3, #3
 8009476:	4413      	add	r3, r2
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	440b      	add	r3, r1
 800947c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	78fb      	ldrb	r3, [r7, #3]
 8009484:	4619      	mov	r1, r3
 8009486:	f7fe fc57 	bl	8007d38 <USBD_LL_DataOutStage>
}
 800948a:	bf00      	nop
 800948c:	3708      	adds	r7, #8
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b082      	sub	sp, #8
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	460b      	mov	r3, r1
 800949c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80094a4:	78fa      	ldrb	r2, [r7, #3]
 80094a6:	6879      	ldr	r1, [r7, #4]
 80094a8:	4613      	mov	r3, r2
 80094aa:	00db      	lsls	r3, r3, #3
 80094ac:	4413      	add	r3, r2
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	440b      	add	r3, r1
 80094b2:	3320      	adds	r3, #32
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	78fb      	ldrb	r3, [r7, #3]
 80094b8:	4619      	mov	r1, r3
 80094ba:	f7fe fcf9 	bl	8007eb0 <USBD_LL_DataInStage>
}
 80094be:	bf00      	nop
 80094c0:	3708      	adds	r7, #8
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b082      	sub	sp, #8
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7fe fe3d 	bl	8008154 <USBD_LL_SOF>
}
 80094da:	bf00      	nop
 80094dc:	3708      	adds	r7, #8
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b084      	sub	sp, #16
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80094ea:	2301      	movs	r3, #1
 80094ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	79db      	ldrb	r3, [r3, #7]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d102      	bne.n	80094fc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80094f6:	2300      	movs	r3, #0
 80094f8:	73fb      	strb	r3, [r7, #15]
 80094fa:	e008      	b.n	800950e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	79db      	ldrb	r3, [r3, #7]
 8009500:	2b02      	cmp	r3, #2
 8009502:	d102      	bne.n	800950a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009504:	2301      	movs	r3, #1
 8009506:	73fb      	strb	r3, [r7, #15]
 8009508:	e001      	b.n	800950e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800950a:	f7f8 f8ab 	bl	8001664 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009514:	7bfa      	ldrb	r2, [r7, #15]
 8009516:	4611      	mov	r1, r2
 8009518:	4618      	mov	r0, r3
 800951a:	f7fe fdd7 	bl	80080cc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009524:	4618      	mov	r0, r3
 8009526:	f7fe fd7e 	bl	8008026 <USBD_LL_Reset>
}
 800952a:	bf00      	nop
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
	...

08009534 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009542:	4618      	mov	r0, r3
 8009544:	f7fe fdd2 	bl	80080ec <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	6812      	ldr	r2, [r2, #0]
 8009556:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800955a:	f043 0301 	orr.w	r3, r3, #1
 800955e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	7adb      	ldrb	r3, [r3, #11]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d005      	beq.n	8009574 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009568:	4b04      	ldr	r3, [pc, #16]	@ (800957c <HAL_PCD_SuspendCallback+0x48>)
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	4a03      	ldr	r2, [pc, #12]	@ (800957c <HAL_PCD_SuspendCallback+0x48>)
 800956e:	f043 0306 	orr.w	r3, r3, #6
 8009572:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009574:	bf00      	nop
 8009576:	3708      	adds	r7, #8
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	e000ed00 	.word	0xe000ed00

08009580 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800958e:	4618      	mov	r0, r3
 8009590:	f7fe fdc8 	bl	8008124 <USBD_LL_Resume>
}
 8009594:	bf00      	nop
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	460b      	mov	r3, r1
 80095a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095ae:	78fa      	ldrb	r2, [r7, #3]
 80095b0:	4611      	mov	r1, r2
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7fe fe20 	bl	80081f8 <USBD_LL_IsoOUTIncomplete>
}
 80095b8:	bf00      	nop
 80095ba:	3708      	adds	r7, #8
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	460b      	mov	r3, r1
 80095ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095d2:	78fa      	ldrb	r2, [r7, #3]
 80095d4:	4611      	mov	r1, r2
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7fe fddc 	bl	8008194 <USBD_LL_IsoINIncomplete>
}
 80095dc:	bf00      	nop
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7fe fe32 	bl	800825c <USBD_LL_DevConnected>
}
 80095f8:	bf00      	nop
 80095fa:	3708      	adds	r7, #8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800960e:	4618      	mov	r0, r3
 8009610:	f7fe fe2f 	bl	8008272 <USBD_LL_DevDisconnected>
}
 8009614:	bf00      	nop
 8009616:	3708      	adds	r7, #8
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d13c      	bne.n	80096a6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800962c:	4a20      	ldr	r2, [pc, #128]	@ (80096b0 <USBD_LL_Init+0x94>)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a1e      	ldr	r2, [pc, #120]	@ (80096b0 <USBD_LL_Init+0x94>)
 8009638:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800963c:	4b1c      	ldr	r3, [pc, #112]	@ (80096b0 <USBD_LL_Init+0x94>)
 800963e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009642:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009644:	4b1a      	ldr	r3, [pc, #104]	@ (80096b0 <USBD_LL_Init+0x94>)
 8009646:	2204      	movs	r2, #4
 8009648:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800964a:	4b19      	ldr	r3, [pc, #100]	@ (80096b0 <USBD_LL_Init+0x94>)
 800964c:	2202      	movs	r2, #2
 800964e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009650:	4b17      	ldr	r3, [pc, #92]	@ (80096b0 <USBD_LL_Init+0x94>)
 8009652:	2200      	movs	r2, #0
 8009654:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009656:	4b16      	ldr	r3, [pc, #88]	@ (80096b0 <USBD_LL_Init+0x94>)
 8009658:	2202      	movs	r2, #2
 800965a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800965c:	4b14      	ldr	r3, [pc, #80]	@ (80096b0 <USBD_LL_Init+0x94>)
 800965e:	2200      	movs	r2, #0
 8009660:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009662:	4b13      	ldr	r3, [pc, #76]	@ (80096b0 <USBD_LL_Init+0x94>)
 8009664:	2200      	movs	r2, #0
 8009666:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009668:	4b11      	ldr	r3, [pc, #68]	@ (80096b0 <USBD_LL_Init+0x94>)
 800966a:	2200      	movs	r2, #0
 800966c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800966e:	4b10      	ldr	r3, [pc, #64]	@ (80096b0 <USBD_LL_Init+0x94>)
 8009670:	2200      	movs	r2, #0
 8009672:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009674:	4b0e      	ldr	r3, [pc, #56]	@ (80096b0 <USBD_LL_Init+0x94>)
 8009676:	2200      	movs	r2, #0
 8009678:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800967a:	480d      	ldr	r0, [pc, #52]	@ (80096b0 <USBD_LL_Init+0x94>)
 800967c:	f7fa f9ce 	bl	8003a1c <HAL_PCD_Init>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009686:	f7f7 ffed 	bl	8001664 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800968a:	2180      	movs	r1, #128	@ 0x80
 800968c:	4808      	ldr	r0, [pc, #32]	@ (80096b0 <USBD_LL_Init+0x94>)
 800968e:	f7fb fbe2 	bl	8004e56 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009692:	2240      	movs	r2, #64	@ 0x40
 8009694:	2100      	movs	r1, #0
 8009696:	4806      	ldr	r0, [pc, #24]	@ (80096b0 <USBD_LL_Init+0x94>)
 8009698:	f7fb fb96 	bl	8004dc8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800969c:	2280      	movs	r2, #128	@ 0x80
 800969e:	2101      	movs	r1, #1
 80096a0:	4803      	ldr	r0, [pc, #12]	@ (80096b0 <USBD_LL_Init+0x94>)
 80096a2:	f7fb fb91 	bl	8004dc8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	200007fc 	.word	0x200007fc

080096b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096bc:	2300      	movs	r3, #0
 80096be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096c0:	2300      	movs	r3, #0
 80096c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fa fab5 	bl	8003c3a <HAL_PCD_Start>
 80096d0:	4603      	mov	r3, r0
 80096d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096d4:	7bfb      	ldrb	r3, [r7, #15]
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 f930 	bl	800993c <USBD_Get_USB_Status>
 80096dc:	4603      	mov	r3, r0
 80096de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b084      	sub	sp, #16
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
 80096f2:	4608      	mov	r0, r1
 80096f4:	4611      	mov	r1, r2
 80096f6:	461a      	mov	r2, r3
 80096f8:	4603      	mov	r3, r0
 80096fa:	70fb      	strb	r3, [r7, #3]
 80096fc:	460b      	mov	r3, r1
 80096fe:	70bb      	strb	r3, [r7, #2]
 8009700:	4613      	mov	r3, r2
 8009702:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009704:	2300      	movs	r3, #0
 8009706:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009712:	78bb      	ldrb	r3, [r7, #2]
 8009714:	883a      	ldrh	r2, [r7, #0]
 8009716:	78f9      	ldrb	r1, [r7, #3]
 8009718:	f7fa ff89 	bl	800462e <HAL_PCD_EP_Open>
 800971c:	4603      	mov	r3, r0
 800971e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009720:	7bfb      	ldrb	r3, [r7, #15]
 8009722:	4618      	mov	r0, r3
 8009724:	f000 f90a 	bl	800993c <USBD_Get_USB_Status>
 8009728:	4603      	mov	r3, r0
 800972a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800972c:	7bbb      	ldrb	r3, [r7, #14]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b084      	sub	sp, #16
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	460b      	mov	r3, r1
 8009740:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009742:	2300      	movs	r3, #0
 8009744:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009746:	2300      	movs	r3, #0
 8009748:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009750:	78fa      	ldrb	r2, [r7, #3]
 8009752:	4611      	mov	r1, r2
 8009754:	4618      	mov	r0, r3
 8009756:	f7fa ffd4 	bl	8004702 <HAL_PCD_EP_Close>
 800975a:	4603      	mov	r3, r0
 800975c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800975e:	7bfb      	ldrb	r3, [r7, #15]
 8009760:	4618      	mov	r0, r3
 8009762:	f000 f8eb 	bl	800993c <USBD_Get_USB_Status>
 8009766:	4603      	mov	r3, r0
 8009768:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800976a:	7bbb      	ldrb	r3, [r7, #14]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	460b      	mov	r3, r1
 800977e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009780:	2300      	movs	r3, #0
 8009782:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800978e:	78fa      	ldrb	r2, [r7, #3]
 8009790:	4611      	mov	r1, r2
 8009792:	4618      	mov	r0, r3
 8009794:	f7fb f874 	bl	8004880 <HAL_PCD_EP_SetStall>
 8009798:	4603      	mov	r3, r0
 800979a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800979c:	7bfb      	ldrb	r3, [r7, #15]
 800979e:	4618      	mov	r0, r3
 80097a0:	f000 f8cc 	bl	800993c <USBD_Get_USB_Status>
 80097a4:	4603      	mov	r3, r0
 80097a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b084      	sub	sp, #16
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
 80097ba:	460b      	mov	r3, r1
 80097bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097be:	2300      	movs	r3, #0
 80097c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097c2:	2300      	movs	r3, #0
 80097c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80097cc:	78fa      	ldrb	r2, [r7, #3]
 80097ce:	4611      	mov	r1, r2
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7fb f8b8 	bl	8004946 <HAL_PCD_EP_ClrStall>
 80097d6:	4603      	mov	r3, r0
 80097d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097da:	7bfb      	ldrb	r3, [r7, #15]
 80097dc:	4618      	mov	r0, r3
 80097de:	f000 f8ad 	bl	800993c <USBD_Get_USB_Status>
 80097e2:	4603      	mov	r3, r0
 80097e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3710      	adds	r7, #16
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b085      	sub	sp, #20
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	460b      	mov	r3, r1
 80097fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009802:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009804:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009808:	2b00      	cmp	r3, #0
 800980a:	da0b      	bge.n	8009824 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800980c:	78fb      	ldrb	r3, [r7, #3]
 800980e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009812:	68f9      	ldr	r1, [r7, #12]
 8009814:	4613      	mov	r3, r2
 8009816:	00db      	lsls	r3, r3, #3
 8009818:	4413      	add	r3, r2
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	440b      	add	r3, r1
 800981e:	3316      	adds	r3, #22
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	e00b      	b.n	800983c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009824:	78fb      	ldrb	r3, [r7, #3]
 8009826:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800982a:	68f9      	ldr	r1, [r7, #12]
 800982c:	4613      	mov	r3, r2
 800982e:	00db      	lsls	r3, r3, #3
 8009830:	4413      	add	r3, r2
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	440b      	add	r3, r1
 8009836:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800983a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800983c:	4618      	mov	r0, r3
 800983e:	3714      	adds	r7, #20
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	460b      	mov	r3, r1
 8009852:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009854:	2300      	movs	r3, #0
 8009856:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009858:	2300      	movs	r3, #0
 800985a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009862:	78fa      	ldrb	r2, [r7, #3]
 8009864:	4611      	mov	r1, r2
 8009866:	4618      	mov	r0, r3
 8009868:	f7fa febd 	bl	80045e6 <HAL_PCD_SetAddress>
 800986c:	4603      	mov	r3, r0
 800986e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009870:	7bfb      	ldrb	r3, [r7, #15]
 8009872:	4618      	mov	r0, r3
 8009874:	f000 f862 	bl	800993c <USBD_Get_USB_Status>
 8009878:	4603      	mov	r3, r0
 800987a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800987c:	7bbb      	ldrb	r3, [r7, #14]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b086      	sub	sp, #24
 800988a:	af00      	add	r7, sp, #0
 800988c:	60f8      	str	r0, [r7, #12]
 800988e:	607a      	str	r2, [r7, #4]
 8009890:	603b      	str	r3, [r7, #0]
 8009892:	460b      	mov	r3, r1
 8009894:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80098a4:	7af9      	ldrb	r1, [r7, #11]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	f7fa ffaf 	bl	800480c <HAL_PCD_EP_Transmit>
 80098ae:	4603      	mov	r3, r0
 80098b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098b2:	7dfb      	ldrb	r3, [r7, #23]
 80098b4:	4618      	mov	r0, r3
 80098b6:	f000 f841 	bl	800993c <USBD_Get_USB_Status>
 80098ba:	4603      	mov	r3, r0
 80098bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098be:	7dbb      	ldrb	r3, [r7, #22]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3718      	adds	r7, #24
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b086      	sub	sp, #24
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	607a      	str	r2, [r7, #4]
 80098d2:	603b      	str	r3, [r7, #0]
 80098d4:	460b      	mov	r3, r1
 80098d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098d8:	2300      	movs	r3, #0
 80098da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098dc:	2300      	movs	r3, #0
 80098de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80098e6:	7af9      	ldrb	r1, [r7, #11]
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	f7fa ff53 	bl	8004796 <HAL_PCD_EP_Receive>
 80098f0:	4603      	mov	r3, r0
 80098f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098f4:	7dfb      	ldrb	r3, [r7, #23]
 80098f6:	4618      	mov	r0, r3
 80098f8:	f000 f820 	bl	800993c <USBD_Get_USB_Status>
 80098fc:	4603      	mov	r3, r0
 80098fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009900:	7dbb      	ldrb	r3, [r7, #22]
}
 8009902:	4618      	mov	r0, r3
 8009904:	3718      	adds	r7, #24
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
	...

0800990c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009914:	4b03      	ldr	r3, [pc, #12]	@ (8009924 <USBD_static_malloc+0x18>)
}
 8009916:	4618      	mov	r0, r3
 8009918:	370c      	adds	r7, #12
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	20000ce0 	.word	0x20000ce0

08009928 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]

}
 8009930:	bf00      	nop
 8009932:	370c      	adds	r7, #12
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	4603      	mov	r3, r0
 8009944:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009946:	2300      	movs	r3, #0
 8009948:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800994a:	79fb      	ldrb	r3, [r7, #7]
 800994c:	2b03      	cmp	r3, #3
 800994e:	d817      	bhi.n	8009980 <USBD_Get_USB_Status+0x44>
 8009950:	a201      	add	r2, pc, #4	@ (adr r2, 8009958 <USBD_Get_USB_Status+0x1c>)
 8009952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009956:	bf00      	nop
 8009958:	08009969 	.word	0x08009969
 800995c:	0800996f 	.word	0x0800996f
 8009960:	08009975 	.word	0x08009975
 8009964:	0800997b 	.word	0x0800997b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009968:	2300      	movs	r3, #0
 800996a:	73fb      	strb	r3, [r7, #15]
    break;
 800996c:	e00b      	b.n	8009986 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800996e:	2303      	movs	r3, #3
 8009970:	73fb      	strb	r3, [r7, #15]
    break;
 8009972:	e008      	b.n	8009986 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009974:	2301      	movs	r3, #1
 8009976:	73fb      	strb	r3, [r7, #15]
    break;
 8009978:	e005      	b.n	8009986 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800997a:	2303      	movs	r3, #3
 800997c:	73fb      	strb	r3, [r7, #15]
    break;
 800997e:	e002      	b.n	8009986 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009980:	2303      	movs	r3, #3
 8009982:	73fb      	strb	r3, [r7, #15]
    break;
 8009984:	bf00      	nop
  }
  return usb_status;
 8009986:	7bfb      	ldrb	r3, [r7, #15]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3714      	adds	r7, #20
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <siprintf>:
 8009994:	b40e      	push	{r1, r2, r3}
 8009996:	b510      	push	{r4, lr}
 8009998:	b09d      	sub	sp, #116	@ 0x74
 800999a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800999c:	9002      	str	r0, [sp, #8]
 800999e:	9006      	str	r0, [sp, #24]
 80099a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80099a4:	480a      	ldr	r0, [pc, #40]	@ (80099d0 <siprintf+0x3c>)
 80099a6:	9107      	str	r1, [sp, #28]
 80099a8:	9104      	str	r1, [sp, #16]
 80099aa:	490a      	ldr	r1, [pc, #40]	@ (80099d4 <siprintf+0x40>)
 80099ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80099b0:	9105      	str	r1, [sp, #20]
 80099b2:	2400      	movs	r4, #0
 80099b4:	a902      	add	r1, sp, #8
 80099b6:	6800      	ldr	r0, [r0, #0]
 80099b8:	9301      	str	r3, [sp, #4]
 80099ba:	941b      	str	r4, [sp, #108]	@ 0x6c
 80099bc:	f000 f994 	bl	8009ce8 <_svfiprintf_r>
 80099c0:	9b02      	ldr	r3, [sp, #8]
 80099c2:	701c      	strb	r4, [r3, #0]
 80099c4:	b01d      	add	sp, #116	@ 0x74
 80099c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099ca:	b003      	add	sp, #12
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop
 80099d0:	200001ac 	.word	0x200001ac
 80099d4:	ffff0208 	.word	0xffff0208

080099d8 <memset>:
 80099d8:	4402      	add	r2, r0
 80099da:	4603      	mov	r3, r0
 80099dc:	4293      	cmp	r3, r2
 80099de:	d100      	bne.n	80099e2 <memset+0xa>
 80099e0:	4770      	bx	lr
 80099e2:	f803 1b01 	strb.w	r1, [r3], #1
 80099e6:	e7f9      	b.n	80099dc <memset+0x4>

080099e8 <__errno>:
 80099e8:	4b01      	ldr	r3, [pc, #4]	@ (80099f0 <__errno+0x8>)
 80099ea:	6818      	ldr	r0, [r3, #0]
 80099ec:	4770      	bx	lr
 80099ee:	bf00      	nop
 80099f0:	200001ac 	.word	0x200001ac

080099f4 <__libc_init_array>:
 80099f4:	b570      	push	{r4, r5, r6, lr}
 80099f6:	4d0d      	ldr	r5, [pc, #52]	@ (8009a2c <__libc_init_array+0x38>)
 80099f8:	4c0d      	ldr	r4, [pc, #52]	@ (8009a30 <__libc_init_array+0x3c>)
 80099fa:	1b64      	subs	r4, r4, r5
 80099fc:	10a4      	asrs	r4, r4, #2
 80099fe:	2600      	movs	r6, #0
 8009a00:	42a6      	cmp	r6, r4
 8009a02:	d109      	bne.n	8009a18 <__libc_init_array+0x24>
 8009a04:	4d0b      	ldr	r5, [pc, #44]	@ (8009a34 <__libc_init_array+0x40>)
 8009a06:	4c0c      	ldr	r4, [pc, #48]	@ (8009a38 <__libc_init_array+0x44>)
 8009a08:	f000 ffd0 	bl	800a9ac <_init>
 8009a0c:	1b64      	subs	r4, r4, r5
 8009a0e:	10a4      	asrs	r4, r4, #2
 8009a10:	2600      	movs	r6, #0
 8009a12:	42a6      	cmp	r6, r4
 8009a14:	d105      	bne.n	8009a22 <__libc_init_array+0x2e>
 8009a16:	bd70      	pop	{r4, r5, r6, pc}
 8009a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a1c:	4798      	blx	r3
 8009a1e:	3601      	adds	r6, #1
 8009a20:	e7ee      	b.n	8009a00 <__libc_init_array+0xc>
 8009a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a26:	4798      	blx	r3
 8009a28:	3601      	adds	r6, #1
 8009a2a:	e7f2      	b.n	8009a12 <__libc_init_array+0x1e>
 8009a2c:	0800abf8 	.word	0x0800abf8
 8009a30:	0800abf8 	.word	0x0800abf8
 8009a34:	0800abf8 	.word	0x0800abf8
 8009a38:	0800abfc 	.word	0x0800abfc

08009a3c <__retarget_lock_acquire_recursive>:
 8009a3c:	4770      	bx	lr

08009a3e <__retarget_lock_release_recursive>:
 8009a3e:	4770      	bx	lr

08009a40 <_free_r>:
 8009a40:	b538      	push	{r3, r4, r5, lr}
 8009a42:	4605      	mov	r5, r0
 8009a44:	2900      	cmp	r1, #0
 8009a46:	d041      	beq.n	8009acc <_free_r+0x8c>
 8009a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a4c:	1f0c      	subs	r4, r1, #4
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	bfb8      	it	lt
 8009a52:	18e4      	addlt	r4, r4, r3
 8009a54:	f000 f8e0 	bl	8009c18 <__malloc_lock>
 8009a58:	4a1d      	ldr	r2, [pc, #116]	@ (8009ad0 <_free_r+0x90>)
 8009a5a:	6813      	ldr	r3, [r2, #0]
 8009a5c:	b933      	cbnz	r3, 8009a6c <_free_r+0x2c>
 8009a5e:	6063      	str	r3, [r4, #4]
 8009a60:	6014      	str	r4, [r2, #0]
 8009a62:	4628      	mov	r0, r5
 8009a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a68:	f000 b8dc 	b.w	8009c24 <__malloc_unlock>
 8009a6c:	42a3      	cmp	r3, r4
 8009a6e:	d908      	bls.n	8009a82 <_free_r+0x42>
 8009a70:	6820      	ldr	r0, [r4, #0]
 8009a72:	1821      	adds	r1, r4, r0
 8009a74:	428b      	cmp	r3, r1
 8009a76:	bf01      	itttt	eq
 8009a78:	6819      	ldreq	r1, [r3, #0]
 8009a7a:	685b      	ldreq	r3, [r3, #4]
 8009a7c:	1809      	addeq	r1, r1, r0
 8009a7e:	6021      	streq	r1, [r4, #0]
 8009a80:	e7ed      	b.n	8009a5e <_free_r+0x1e>
 8009a82:	461a      	mov	r2, r3
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	b10b      	cbz	r3, 8009a8c <_free_r+0x4c>
 8009a88:	42a3      	cmp	r3, r4
 8009a8a:	d9fa      	bls.n	8009a82 <_free_r+0x42>
 8009a8c:	6811      	ldr	r1, [r2, #0]
 8009a8e:	1850      	adds	r0, r2, r1
 8009a90:	42a0      	cmp	r0, r4
 8009a92:	d10b      	bne.n	8009aac <_free_r+0x6c>
 8009a94:	6820      	ldr	r0, [r4, #0]
 8009a96:	4401      	add	r1, r0
 8009a98:	1850      	adds	r0, r2, r1
 8009a9a:	4283      	cmp	r3, r0
 8009a9c:	6011      	str	r1, [r2, #0]
 8009a9e:	d1e0      	bne.n	8009a62 <_free_r+0x22>
 8009aa0:	6818      	ldr	r0, [r3, #0]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	6053      	str	r3, [r2, #4]
 8009aa6:	4408      	add	r0, r1
 8009aa8:	6010      	str	r0, [r2, #0]
 8009aaa:	e7da      	b.n	8009a62 <_free_r+0x22>
 8009aac:	d902      	bls.n	8009ab4 <_free_r+0x74>
 8009aae:	230c      	movs	r3, #12
 8009ab0:	602b      	str	r3, [r5, #0]
 8009ab2:	e7d6      	b.n	8009a62 <_free_r+0x22>
 8009ab4:	6820      	ldr	r0, [r4, #0]
 8009ab6:	1821      	adds	r1, r4, r0
 8009ab8:	428b      	cmp	r3, r1
 8009aba:	bf04      	itt	eq
 8009abc:	6819      	ldreq	r1, [r3, #0]
 8009abe:	685b      	ldreq	r3, [r3, #4]
 8009ac0:	6063      	str	r3, [r4, #4]
 8009ac2:	bf04      	itt	eq
 8009ac4:	1809      	addeq	r1, r1, r0
 8009ac6:	6021      	streq	r1, [r4, #0]
 8009ac8:	6054      	str	r4, [r2, #4]
 8009aca:	e7ca      	b.n	8009a62 <_free_r+0x22>
 8009acc:	bd38      	pop	{r3, r4, r5, pc}
 8009ace:	bf00      	nop
 8009ad0:	20000e38 	.word	0x20000e38

08009ad4 <sbrk_aligned>:
 8009ad4:	b570      	push	{r4, r5, r6, lr}
 8009ad6:	4e0f      	ldr	r6, [pc, #60]	@ (8009b14 <sbrk_aligned+0x40>)
 8009ad8:	460c      	mov	r4, r1
 8009ada:	6831      	ldr	r1, [r6, #0]
 8009adc:	4605      	mov	r5, r0
 8009ade:	b911      	cbnz	r1, 8009ae6 <sbrk_aligned+0x12>
 8009ae0:	f000 fba4 	bl	800a22c <_sbrk_r>
 8009ae4:	6030      	str	r0, [r6, #0]
 8009ae6:	4621      	mov	r1, r4
 8009ae8:	4628      	mov	r0, r5
 8009aea:	f000 fb9f 	bl	800a22c <_sbrk_r>
 8009aee:	1c43      	adds	r3, r0, #1
 8009af0:	d103      	bne.n	8009afa <sbrk_aligned+0x26>
 8009af2:	f04f 34ff 	mov.w	r4, #4294967295
 8009af6:	4620      	mov	r0, r4
 8009af8:	bd70      	pop	{r4, r5, r6, pc}
 8009afa:	1cc4      	adds	r4, r0, #3
 8009afc:	f024 0403 	bic.w	r4, r4, #3
 8009b00:	42a0      	cmp	r0, r4
 8009b02:	d0f8      	beq.n	8009af6 <sbrk_aligned+0x22>
 8009b04:	1a21      	subs	r1, r4, r0
 8009b06:	4628      	mov	r0, r5
 8009b08:	f000 fb90 	bl	800a22c <_sbrk_r>
 8009b0c:	3001      	adds	r0, #1
 8009b0e:	d1f2      	bne.n	8009af6 <sbrk_aligned+0x22>
 8009b10:	e7ef      	b.n	8009af2 <sbrk_aligned+0x1e>
 8009b12:	bf00      	nop
 8009b14:	20000e34 	.word	0x20000e34

08009b18 <_malloc_r>:
 8009b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b1c:	1ccd      	adds	r5, r1, #3
 8009b1e:	f025 0503 	bic.w	r5, r5, #3
 8009b22:	3508      	adds	r5, #8
 8009b24:	2d0c      	cmp	r5, #12
 8009b26:	bf38      	it	cc
 8009b28:	250c      	movcc	r5, #12
 8009b2a:	2d00      	cmp	r5, #0
 8009b2c:	4606      	mov	r6, r0
 8009b2e:	db01      	blt.n	8009b34 <_malloc_r+0x1c>
 8009b30:	42a9      	cmp	r1, r5
 8009b32:	d904      	bls.n	8009b3e <_malloc_r+0x26>
 8009b34:	230c      	movs	r3, #12
 8009b36:	6033      	str	r3, [r6, #0]
 8009b38:	2000      	movs	r0, #0
 8009b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009c14 <_malloc_r+0xfc>
 8009b42:	f000 f869 	bl	8009c18 <__malloc_lock>
 8009b46:	f8d8 3000 	ldr.w	r3, [r8]
 8009b4a:	461c      	mov	r4, r3
 8009b4c:	bb44      	cbnz	r4, 8009ba0 <_malloc_r+0x88>
 8009b4e:	4629      	mov	r1, r5
 8009b50:	4630      	mov	r0, r6
 8009b52:	f7ff ffbf 	bl	8009ad4 <sbrk_aligned>
 8009b56:	1c43      	adds	r3, r0, #1
 8009b58:	4604      	mov	r4, r0
 8009b5a:	d158      	bne.n	8009c0e <_malloc_r+0xf6>
 8009b5c:	f8d8 4000 	ldr.w	r4, [r8]
 8009b60:	4627      	mov	r7, r4
 8009b62:	2f00      	cmp	r7, #0
 8009b64:	d143      	bne.n	8009bee <_malloc_r+0xd6>
 8009b66:	2c00      	cmp	r4, #0
 8009b68:	d04b      	beq.n	8009c02 <_malloc_r+0xea>
 8009b6a:	6823      	ldr	r3, [r4, #0]
 8009b6c:	4639      	mov	r1, r7
 8009b6e:	4630      	mov	r0, r6
 8009b70:	eb04 0903 	add.w	r9, r4, r3
 8009b74:	f000 fb5a 	bl	800a22c <_sbrk_r>
 8009b78:	4581      	cmp	r9, r0
 8009b7a:	d142      	bne.n	8009c02 <_malloc_r+0xea>
 8009b7c:	6821      	ldr	r1, [r4, #0]
 8009b7e:	1a6d      	subs	r5, r5, r1
 8009b80:	4629      	mov	r1, r5
 8009b82:	4630      	mov	r0, r6
 8009b84:	f7ff ffa6 	bl	8009ad4 <sbrk_aligned>
 8009b88:	3001      	adds	r0, #1
 8009b8a:	d03a      	beq.n	8009c02 <_malloc_r+0xea>
 8009b8c:	6823      	ldr	r3, [r4, #0]
 8009b8e:	442b      	add	r3, r5
 8009b90:	6023      	str	r3, [r4, #0]
 8009b92:	f8d8 3000 	ldr.w	r3, [r8]
 8009b96:	685a      	ldr	r2, [r3, #4]
 8009b98:	bb62      	cbnz	r2, 8009bf4 <_malloc_r+0xdc>
 8009b9a:	f8c8 7000 	str.w	r7, [r8]
 8009b9e:	e00f      	b.n	8009bc0 <_malloc_r+0xa8>
 8009ba0:	6822      	ldr	r2, [r4, #0]
 8009ba2:	1b52      	subs	r2, r2, r5
 8009ba4:	d420      	bmi.n	8009be8 <_malloc_r+0xd0>
 8009ba6:	2a0b      	cmp	r2, #11
 8009ba8:	d917      	bls.n	8009bda <_malloc_r+0xc2>
 8009baa:	1961      	adds	r1, r4, r5
 8009bac:	42a3      	cmp	r3, r4
 8009bae:	6025      	str	r5, [r4, #0]
 8009bb0:	bf18      	it	ne
 8009bb2:	6059      	strne	r1, [r3, #4]
 8009bb4:	6863      	ldr	r3, [r4, #4]
 8009bb6:	bf08      	it	eq
 8009bb8:	f8c8 1000 	streq.w	r1, [r8]
 8009bbc:	5162      	str	r2, [r4, r5]
 8009bbe:	604b      	str	r3, [r1, #4]
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	f000 f82f 	bl	8009c24 <__malloc_unlock>
 8009bc6:	f104 000b 	add.w	r0, r4, #11
 8009bca:	1d23      	adds	r3, r4, #4
 8009bcc:	f020 0007 	bic.w	r0, r0, #7
 8009bd0:	1ac2      	subs	r2, r0, r3
 8009bd2:	bf1c      	itt	ne
 8009bd4:	1a1b      	subne	r3, r3, r0
 8009bd6:	50a3      	strne	r3, [r4, r2]
 8009bd8:	e7af      	b.n	8009b3a <_malloc_r+0x22>
 8009bda:	6862      	ldr	r2, [r4, #4]
 8009bdc:	42a3      	cmp	r3, r4
 8009bde:	bf0c      	ite	eq
 8009be0:	f8c8 2000 	streq.w	r2, [r8]
 8009be4:	605a      	strne	r2, [r3, #4]
 8009be6:	e7eb      	b.n	8009bc0 <_malloc_r+0xa8>
 8009be8:	4623      	mov	r3, r4
 8009bea:	6864      	ldr	r4, [r4, #4]
 8009bec:	e7ae      	b.n	8009b4c <_malloc_r+0x34>
 8009bee:	463c      	mov	r4, r7
 8009bf0:	687f      	ldr	r7, [r7, #4]
 8009bf2:	e7b6      	b.n	8009b62 <_malloc_r+0x4a>
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	42a3      	cmp	r3, r4
 8009bfa:	d1fb      	bne.n	8009bf4 <_malloc_r+0xdc>
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	6053      	str	r3, [r2, #4]
 8009c00:	e7de      	b.n	8009bc0 <_malloc_r+0xa8>
 8009c02:	230c      	movs	r3, #12
 8009c04:	6033      	str	r3, [r6, #0]
 8009c06:	4630      	mov	r0, r6
 8009c08:	f000 f80c 	bl	8009c24 <__malloc_unlock>
 8009c0c:	e794      	b.n	8009b38 <_malloc_r+0x20>
 8009c0e:	6005      	str	r5, [r0, #0]
 8009c10:	e7d6      	b.n	8009bc0 <_malloc_r+0xa8>
 8009c12:	bf00      	nop
 8009c14:	20000e38 	.word	0x20000e38

08009c18 <__malloc_lock>:
 8009c18:	4801      	ldr	r0, [pc, #4]	@ (8009c20 <__malloc_lock+0x8>)
 8009c1a:	f7ff bf0f 	b.w	8009a3c <__retarget_lock_acquire_recursive>
 8009c1e:	bf00      	nop
 8009c20:	20000e30 	.word	0x20000e30

08009c24 <__malloc_unlock>:
 8009c24:	4801      	ldr	r0, [pc, #4]	@ (8009c2c <__malloc_unlock+0x8>)
 8009c26:	f7ff bf0a 	b.w	8009a3e <__retarget_lock_release_recursive>
 8009c2a:	bf00      	nop
 8009c2c:	20000e30 	.word	0x20000e30

08009c30 <__ssputs_r>:
 8009c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c34:	688e      	ldr	r6, [r1, #8]
 8009c36:	461f      	mov	r7, r3
 8009c38:	42be      	cmp	r6, r7
 8009c3a:	680b      	ldr	r3, [r1, #0]
 8009c3c:	4682      	mov	sl, r0
 8009c3e:	460c      	mov	r4, r1
 8009c40:	4690      	mov	r8, r2
 8009c42:	d82d      	bhi.n	8009ca0 <__ssputs_r+0x70>
 8009c44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009c4c:	d026      	beq.n	8009c9c <__ssputs_r+0x6c>
 8009c4e:	6965      	ldr	r5, [r4, #20]
 8009c50:	6909      	ldr	r1, [r1, #16]
 8009c52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c56:	eba3 0901 	sub.w	r9, r3, r1
 8009c5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c5e:	1c7b      	adds	r3, r7, #1
 8009c60:	444b      	add	r3, r9
 8009c62:	106d      	asrs	r5, r5, #1
 8009c64:	429d      	cmp	r5, r3
 8009c66:	bf38      	it	cc
 8009c68:	461d      	movcc	r5, r3
 8009c6a:	0553      	lsls	r3, r2, #21
 8009c6c:	d527      	bpl.n	8009cbe <__ssputs_r+0x8e>
 8009c6e:	4629      	mov	r1, r5
 8009c70:	f7ff ff52 	bl	8009b18 <_malloc_r>
 8009c74:	4606      	mov	r6, r0
 8009c76:	b360      	cbz	r0, 8009cd2 <__ssputs_r+0xa2>
 8009c78:	6921      	ldr	r1, [r4, #16]
 8009c7a:	464a      	mov	r2, r9
 8009c7c:	f000 fae6 	bl	800a24c <memcpy>
 8009c80:	89a3      	ldrh	r3, [r4, #12]
 8009c82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009c86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c8a:	81a3      	strh	r3, [r4, #12]
 8009c8c:	6126      	str	r6, [r4, #16]
 8009c8e:	6165      	str	r5, [r4, #20]
 8009c90:	444e      	add	r6, r9
 8009c92:	eba5 0509 	sub.w	r5, r5, r9
 8009c96:	6026      	str	r6, [r4, #0]
 8009c98:	60a5      	str	r5, [r4, #8]
 8009c9a:	463e      	mov	r6, r7
 8009c9c:	42be      	cmp	r6, r7
 8009c9e:	d900      	bls.n	8009ca2 <__ssputs_r+0x72>
 8009ca0:	463e      	mov	r6, r7
 8009ca2:	6820      	ldr	r0, [r4, #0]
 8009ca4:	4632      	mov	r2, r6
 8009ca6:	4641      	mov	r1, r8
 8009ca8:	f000 faa6 	bl	800a1f8 <memmove>
 8009cac:	68a3      	ldr	r3, [r4, #8]
 8009cae:	1b9b      	subs	r3, r3, r6
 8009cb0:	60a3      	str	r3, [r4, #8]
 8009cb2:	6823      	ldr	r3, [r4, #0]
 8009cb4:	4433      	add	r3, r6
 8009cb6:	6023      	str	r3, [r4, #0]
 8009cb8:	2000      	movs	r0, #0
 8009cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cbe:	462a      	mov	r2, r5
 8009cc0:	f000 fad2 	bl	800a268 <_realloc_r>
 8009cc4:	4606      	mov	r6, r0
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d1e0      	bne.n	8009c8c <__ssputs_r+0x5c>
 8009cca:	6921      	ldr	r1, [r4, #16]
 8009ccc:	4650      	mov	r0, sl
 8009cce:	f7ff feb7 	bl	8009a40 <_free_r>
 8009cd2:	230c      	movs	r3, #12
 8009cd4:	f8ca 3000 	str.w	r3, [sl]
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cde:	81a3      	strh	r3, [r4, #12]
 8009ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce4:	e7e9      	b.n	8009cba <__ssputs_r+0x8a>
	...

08009ce8 <_svfiprintf_r>:
 8009ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cec:	4698      	mov	r8, r3
 8009cee:	898b      	ldrh	r3, [r1, #12]
 8009cf0:	061b      	lsls	r3, r3, #24
 8009cf2:	b09d      	sub	sp, #116	@ 0x74
 8009cf4:	4607      	mov	r7, r0
 8009cf6:	460d      	mov	r5, r1
 8009cf8:	4614      	mov	r4, r2
 8009cfa:	d510      	bpl.n	8009d1e <_svfiprintf_r+0x36>
 8009cfc:	690b      	ldr	r3, [r1, #16]
 8009cfe:	b973      	cbnz	r3, 8009d1e <_svfiprintf_r+0x36>
 8009d00:	2140      	movs	r1, #64	@ 0x40
 8009d02:	f7ff ff09 	bl	8009b18 <_malloc_r>
 8009d06:	6028      	str	r0, [r5, #0]
 8009d08:	6128      	str	r0, [r5, #16]
 8009d0a:	b930      	cbnz	r0, 8009d1a <_svfiprintf_r+0x32>
 8009d0c:	230c      	movs	r3, #12
 8009d0e:	603b      	str	r3, [r7, #0]
 8009d10:	f04f 30ff 	mov.w	r0, #4294967295
 8009d14:	b01d      	add	sp, #116	@ 0x74
 8009d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d1a:	2340      	movs	r3, #64	@ 0x40
 8009d1c:	616b      	str	r3, [r5, #20]
 8009d1e:	2300      	movs	r3, #0
 8009d20:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d22:	2320      	movs	r3, #32
 8009d24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d28:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d2c:	2330      	movs	r3, #48	@ 0x30
 8009d2e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009ecc <_svfiprintf_r+0x1e4>
 8009d32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d36:	f04f 0901 	mov.w	r9, #1
 8009d3a:	4623      	mov	r3, r4
 8009d3c:	469a      	mov	sl, r3
 8009d3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d42:	b10a      	cbz	r2, 8009d48 <_svfiprintf_r+0x60>
 8009d44:	2a25      	cmp	r2, #37	@ 0x25
 8009d46:	d1f9      	bne.n	8009d3c <_svfiprintf_r+0x54>
 8009d48:	ebba 0b04 	subs.w	fp, sl, r4
 8009d4c:	d00b      	beq.n	8009d66 <_svfiprintf_r+0x7e>
 8009d4e:	465b      	mov	r3, fp
 8009d50:	4622      	mov	r2, r4
 8009d52:	4629      	mov	r1, r5
 8009d54:	4638      	mov	r0, r7
 8009d56:	f7ff ff6b 	bl	8009c30 <__ssputs_r>
 8009d5a:	3001      	adds	r0, #1
 8009d5c:	f000 80a7 	beq.w	8009eae <_svfiprintf_r+0x1c6>
 8009d60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d62:	445a      	add	r2, fp
 8009d64:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d66:	f89a 3000 	ldrb.w	r3, [sl]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	f000 809f 	beq.w	8009eae <_svfiprintf_r+0x1c6>
 8009d70:	2300      	movs	r3, #0
 8009d72:	f04f 32ff 	mov.w	r2, #4294967295
 8009d76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d7a:	f10a 0a01 	add.w	sl, sl, #1
 8009d7e:	9304      	str	r3, [sp, #16]
 8009d80:	9307      	str	r3, [sp, #28]
 8009d82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d86:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d88:	4654      	mov	r4, sl
 8009d8a:	2205      	movs	r2, #5
 8009d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d90:	484e      	ldr	r0, [pc, #312]	@ (8009ecc <_svfiprintf_r+0x1e4>)
 8009d92:	f7f6 fa35 	bl	8000200 <memchr>
 8009d96:	9a04      	ldr	r2, [sp, #16]
 8009d98:	b9d8      	cbnz	r0, 8009dd2 <_svfiprintf_r+0xea>
 8009d9a:	06d0      	lsls	r0, r2, #27
 8009d9c:	bf44      	itt	mi
 8009d9e:	2320      	movmi	r3, #32
 8009da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009da4:	0711      	lsls	r1, r2, #28
 8009da6:	bf44      	itt	mi
 8009da8:	232b      	movmi	r3, #43	@ 0x2b
 8009daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dae:	f89a 3000 	ldrb.w	r3, [sl]
 8009db2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009db4:	d015      	beq.n	8009de2 <_svfiprintf_r+0xfa>
 8009db6:	9a07      	ldr	r2, [sp, #28]
 8009db8:	4654      	mov	r4, sl
 8009dba:	2000      	movs	r0, #0
 8009dbc:	f04f 0c0a 	mov.w	ip, #10
 8009dc0:	4621      	mov	r1, r4
 8009dc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dc6:	3b30      	subs	r3, #48	@ 0x30
 8009dc8:	2b09      	cmp	r3, #9
 8009dca:	d94b      	bls.n	8009e64 <_svfiprintf_r+0x17c>
 8009dcc:	b1b0      	cbz	r0, 8009dfc <_svfiprintf_r+0x114>
 8009dce:	9207      	str	r2, [sp, #28]
 8009dd0:	e014      	b.n	8009dfc <_svfiprintf_r+0x114>
 8009dd2:	eba0 0308 	sub.w	r3, r0, r8
 8009dd6:	fa09 f303 	lsl.w	r3, r9, r3
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	9304      	str	r3, [sp, #16]
 8009dde:	46a2      	mov	sl, r4
 8009de0:	e7d2      	b.n	8009d88 <_svfiprintf_r+0xa0>
 8009de2:	9b03      	ldr	r3, [sp, #12]
 8009de4:	1d19      	adds	r1, r3, #4
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	9103      	str	r1, [sp, #12]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	bfbb      	ittet	lt
 8009dee:	425b      	neglt	r3, r3
 8009df0:	f042 0202 	orrlt.w	r2, r2, #2
 8009df4:	9307      	strge	r3, [sp, #28]
 8009df6:	9307      	strlt	r3, [sp, #28]
 8009df8:	bfb8      	it	lt
 8009dfa:	9204      	strlt	r2, [sp, #16]
 8009dfc:	7823      	ldrb	r3, [r4, #0]
 8009dfe:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e00:	d10a      	bne.n	8009e18 <_svfiprintf_r+0x130>
 8009e02:	7863      	ldrb	r3, [r4, #1]
 8009e04:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e06:	d132      	bne.n	8009e6e <_svfiprintf_r+0x186>
 8009e08:	9b03      	ldr	r3, [sp, #12]
 8009e0a:	1d1a      	adds	r2, r3, #4
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	9203      	str	r2, [sp, #12]
 8009e10:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e14:	3402      	adds	r4, #2
 8009e16:	9305      	str	r3, [sp, #20]
 8009e18:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009edc <_svfiprintf_r+0x1f4>
 8009e1c:	7821      	ldrb	r1, [r4, #0]
 8009e1e:	2203      	movs	r2, #3
 8009e20:	4650      	mov	r0, sl
 8009e22:	f7f6 f9ed 	bl	8000200 <memchr>
 8009e26:	b138      	cbz	r0, 8009e38 <_svfiprintf_r+0x150>
 8009e28:	9b04      	ldr	r3, [sp, #16]
 8009e2a:	eba0 000a 	sub.w	r0, r0, sl
 8009e2e:	2240      	movs	r2, #64	@ 0x40
 8009e30:	4082      	lsls	r2, r0
 8009e32:	4313      	orrs	r3, r2
 8009e34:	3401      	adds	r4, #1
 8009e36:	9304      	str	r3, [sp, #16]
 8009e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e3c:	4824      	ldr	r0, [pc, #144]	@ (8009ed0 <_svfiprintf_r+0x1e8>)
 8009e3e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e42:	2206      	movs	r2, #6
 8009e44:	f7f6 f9dc 	bl	8000200 <memchr>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	d036      	beq.n	8009eba <_svfiprintf_r+0x1d2>
 8009e4c:	4b21      	ldr	r3, [pc, #132]	@ (8009ed4 <_svfiprintf_r+0x1ec>)
 8009e4e:	bb1b      	cbnz	r3, 8009e98 <_svfiprintf_r+0x1b0>
 8009e50:	9b03      	ldr	r3, [sp, #12]
 8009e52:	3307      	adds	r3, #7
 8009e54:	f023 0307 	bic.w	r3, r3, #7
 8009e58:	3308      	adds	r3, #8
 8009e5a:	9303      	str	r3, [sp, #12]
 8009e5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e5e:	4433      	add	r3, r6
 8009e60:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e62:	e76a      	b.n	8009d3a <_svfiprintf_r+0x52>
 8009e64:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e68:	460c      	mov	r4, r1
 8009e6a:	2001      	movs	r0, #1
 8009e6c:	e7a8      	b.n	8009dc0 <_svfiprintf_r+0xd8>
 8009e6e:	2300      	movs	r3, #0
 8009e70:	3401      	adds	r4, #1
 8009e72:	9305      	str	r3, [sp, #20]
 8009e74:	4619      	mov	r1, r3
 8009e76:	f04f 0c0a 	mov.w	ip, #10
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e80:	3a30      	subs	r2, #48	@ 0x30
 8009e82:	2a09      	cmp	r2, #9
 8009e84:	d903      	bls.n	8009e8e <_svfiprintf_r+0x1a6>
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d0c6      	beq.n	8009e18 <_svfiprintf_r+0x130>
 8009e8a:	9105      	str	r1, [sp, #20]
 8009e8c:	e7c4      	b.n	8009e18 <_svfiprintf_r+0x130>
 8009e8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e92:	4604      	mov	r4, r0
 8009e94:	2301      	movs	r3, #1
 8009e96:	e7f0      	b.n	8009e7a <_svfiprintf_r+0x192>
 8009e98:	ab03      	add	r3, sp, #12
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	462a      	mov	r2, r5
 8009e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8009ed8 <_svfiprintf_r+0x1f0>)
 8009ea0:	a904      	add	r1, sp, #16
 8009ea2:	4638      	mov	r0, r7
 8009ea4:	f3af 8000 	nop.w
 8009ea8:	1c42      	adds	r2, r0, #1
 8009eaa:	4606      	mov	r6, r0
 8009eac:	d1d6      	bne.n	8009e5c <_svfiprintf_r+0x174>
 8009eae:	89ab      	ldrh	r3, [r5, #12]
 8009eb0:	065b      	lsls	r3, r3, #25
 8009eb2:	f53f af2d 	bmi.w	8009d10 <_svfiprintf_r+0x28>
 8009eb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009eb8:	e72c      	b.n	8009d14 <_svfiprintf_r+0x2c>
 8009eba:	ab03      	add	r3, sp, #12
 8009ebc:	9300      	str	r3, [sp, #0]
 8009ebe:	462a      	mov	r2, r5
 8009ec0:	4b05      	ldr	r3, [pc, #20]	@ (8009ed8 <_svfiprintf_r+0x1f0>)
 8009ec2:	a904      	add	r1, sp, #16
 8009ec4:	4638      	mov	r0, r7
 8009ec6:	f000 f879 	bl	8009fbc <_printf_i>
 8009eca:	e7ed      	b.n	8009ea8 <_svfiprintf_r+0x1c0>
 8009ecc:	0800ab38 	.word	0x0800ab38
 8009ed0:	0800ab42 	.word	0x0800ab42
 8009ed4:	00000000 	.word	0x00000000
 8009ed8:	08009c31 	.word	0x08009c31
 8009edc:	0800ab3e 	.word	0x0800ab3e

08009ee0 <_printf_common>:
 8009ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee4:	4616      	mov	r6, r2
 8009ee6:	4698      	mov	r8, r3
 8009ee8:	688a      	ldr	r2, [r1, #8]
 8009eea:	690b      	ldr	r3, [r1, #16]
 8009eec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	bfb8      	it	lt
 8009ef4:	4613      	movlt	r3, r2
 8009ef6:	6033      	str	r3, [r6, #0]
 8009ef8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009efc:	4607      	mov	r7, r0
 8009efe:	460c      	mov	r4, r1
 8009f00:	b10a      	cbz	r2, 8009f06 <_printf_common+0x26>
 8009f02:	3301      	adds	r3, #1
 8009f04:	6033      	str	r3, [r6, #0]
 8009f06:	6823      	ldr	r3, [r4, #0]
 8009f08:	0699      	lsls	r1, r3, #26
 8009f0a:	bf42      	ittt	mi
 8009f0c:	6833      	ldrmi	r3, [r6, #0]
 8009f0e:	3302      	addmi	r3, #2
 8009f10:	6033      	strmi	r3, [r6, #0]
 8009f12:	6825      	ldr	r5, [r4, #0]
 8009f14:	f015 0506 	ands.w	r5, r5, #6
 8009f18:	d106      	bne.n	8009f28 <_printf_common+0x48>
 8009f1a:	f104 0a19 	add.w	sl, r4, #25
 8009f1e:	68e3      	ldr	r3, [r4, #12]
 8009f20:	6832      	ldr	r2, [r6, #0]
 8009f22:	1a9b      	subs	r3, r3, r2
 8009f24:	42ab      	cmp	r3, r5
 8009f26:	dc26      	bgt.n	8009f76 <_printf_common+0x96>
 8009f28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f2c:	6822      	ldr	r2, [r4, #0]
 8009f2e:	3b00      	subs	r3, #0
 8009f30:	bf18      	it	ne
 8009f32:	2301      	movne	r3, #1
 8009f34:	0692      	lsls	r2, r2, #26
 8009f36:	d42b      	bmi.n	8009f90 <_printf_common+0xb0>
 8009f38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f3c:	4641      	mov	r1, r8
 8009f3e:	4638      	mov	r0, r7
 8009f40:	47c8      	blx	r9
 8009f42:	3001      	adds	r0, #1
 8009f44:	d01e      	beq.n	8009f84 <_printf_common+0xa4>
 8009f46:	6823      	ldr	r3, [r4, #0]
 8009f48:	6922      	ldr	r2, [r4, #16]
 8009f4a:	f003 0306 	and.w	r3, r3, #6
 8009f4e:	2b04      	cmp	r3, #4
 8009f50:	bf02      	ittt	eq
 8009f52:	68e5      	ldreq	r5, [r4, #12]
 8009f54:	6833      	ldreq	r3, [r6, #0]
 8009f56:	1aed      	subeq	r5, r5, r3
 8009f58:	68a3      	ldr	r3, [r4, #8]
 8009f5a:	bf0c      	ite	eq
 8009f5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f60:	2500      	movne	r5, #0
 8009f62:	4293      	cmp	r3, r2
 8009f64:	bfc4      	itt	gt
 8009f66:	1a9b      	subgt	r3, r3, r2
 8009f68:	18ed      	addgt	r5, r5, r3
 8009f6a:	2600      	movs	r6, #0
 8009f6c:	341a      	adds	r4, #26
 8009f6e:	42b5      	cmp	r5, r6
 8009f70:	d11a      	bne.n	8009fa8 <_printf_common+0xc8>
 8009f72:	2000      	movs	r0, #0
 8009f74:	e008      	b.n	8009f88 <_printf_common+0xa8>
 8009f76:	2301      	movs	r3, #1
 8009f78:	4652      	mov	r2, sl
 8009f7a:	4641      	mov	r1, r8
 8009f7c:	4638      	mov	r0, r7
 8009f7e:	47c8      	blx	r9
 8009f80:	3001      	adds	r0, #1
 8009f82:	d103      	bne.n	8009f8c <_printf_common+0xac>
 8009f84:	f04f 30ff 	mov.w	r0, #4294967295
 8009f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f8c:	3501      	adds	r5, #1
 8009f8e:	e7c6      	b.n	8009f1e <_printf_common+0x3e>
 8009f90:	18e1      	adds	r1, r4, r3
 8009f92:	1c5a      	adds	r2, r3, #1
 8009f94:	2030      	movs	r0, #48	@ 0x30
 8009f96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f9a:	4422      	add	r2, r4
 8009f9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009fa0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009fa4:	3302      	adds	r3, #2
 8009fa6:	e7c7      	b.n	8009f38 <_printf_common+0x58>
 8009fa8:	2301      	movs	r3, #1
 8009faa:	4622      	mov	r2, r4
 8009fac:	4641      	mov	r1, r8
 8009fae:	4638      	mov	r0, r7
 8009fb0:	47c8      	blx	r9
 8009fb2:	3001      	adds	r0, #1
 8009fb4:	d0e6      	beq.n	8009f84 <_printf_common+0xa4>
 8009fb6:	3601      	adds	r6, #1
 8009fb8:	e7d9      	b.n	8009f6e <_printf_common+0x8e>
	...

08009fbc <_printf_i>:
 8009fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fc0:	7e0f      	ldrb	r7, [r1, #24]
 8009fc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009fc4:	2f78      	cmp	r7, #120	@ 0x78
 8009fc6:	4691      	mov	r9, r2
 8009fc8:	4680      	mov	r8, r0
 8009fca:	460c      	mov	r4, r1
 8009fcc:	469a      	mov	sl, r3
 8009fce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009fd2:	d807      	bhi.n	8009fe4 <_printf_i+0x28>
 8009fd4:	2f62      	cmp	r7, #98	@ 0x62
 8009fd6:	d80a      	bhi.n	8009fee <_printf_i+0x32>
 8009fd8:	2f00      	cmp	r7, #0
 8009fda:	f000 80d1 	beq.w	800a180 <_printf_i+0x1c4>
 8009fde:	2f58      	cmp	r7, #88	@ 0x58
 8009fe0:	f000 80b8 	beq.w	800a154 <_printf_i+0x198>
 8009fe4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009fe8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009fec:	e03a      	b.n	800a064 <_printf_i+0xa8>
 8009fee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009ff2:	2b15      	cmp	r3, #21
 8009ff4:	d8f6      	bhi.n	8009fe4 <_printf_i+0x28>
 8009ff6:	a101      	add	r1, pc, #4	@ (adr r1, 8009ffc <_printf_i+0x40>)
 8009ff8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ffc:	0800a055 	.word	0x0800a055
 800a000:	0800a069 	.word	0x0800a069
 800a004:	08009fe5 	.word	0x08009fe5
 800a008:	08009fe5 	.word	0x08009fe5
 800a00c:	08009fe5 	.word	0x08009fe5
 800a010:	08009fe5 	.word	0x08009fe5
 800a014:	0800a069 	.word	0x0800a069
 800a018:	08009fe5 	.word	0x08009fe5
 800a01c:	08009fe5 	.word	0x08009fe5
 800a020:	08009fe5 	.word	0x08009fe5
 800a024:	08009fe5 	.word	0x08009fe5
 800a028:	0800a167 	.word	0x0800a167
 800a02c:	0800a093 	.word	0x0800a093
 800a030:	0800a121 	.word	0x0800a121
 800a034:	08009fe5 	.word	0x08009fe5
 800a038:	08009fe5 	.word	0x08009fe5
 800a03c:	0800a189 	.word	0x0800a189
 800a040:	08009fe5 	.word	0x08009fe5
 800a044:	0800a093 	.word	0x0800a093
 800a048:	08009fe5 	.word	0x08009fe5
 800a04c:	08009fe5 	.word	0x08009fe5
 800a050:	0800a129 	.word	0x0800a129
 800a054:	6833      	ldr	r3, [r6, #0]
 800a056:	1d1a      	adds	r2, r3, #4
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	6032      	str	r2, [r6, #0]
 800a05c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a060:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a064:	2301      	movs	r3, #1
 800a066:	e09c      	b.n	800a1a2 <_printf_i+0x1e6>
 800a068:	6833      	ldr	r3, [r6, #0]
 800a06a:	6820      	ldr	r0, [r4, #0]
 800a06c:	1d19      	adds	r1, r3, #4
 800a06e:	6031      	str	r1, [r6, #0]
 800a070:	0606      	lsls	r6, r0, #24
 800a072:	d501      	bpl.n	800a078 <_printf_i+0xbc>
 800a074:	681d      	ldr	r5, [r3, #0]
 800a076:	e003      	b.n	800a080 <_printf_i+0xc4>
 800a078:	0645      	lsls	r5, r0, #25
 800a07a:	d5fb      	bpl.n	800a074 <_printf_i+0xb8>
 800a07c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a080:	2d00      	cmp	r5, #0
 800a082:	da03      	bge.n	800a08c <_printf_i+0xd0>
 800a084:	232d      	movs	r3, #45	@ 0x2d
 800a086:	426d      	negs	r5, r5
 800a088:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a08c:	4858      	ldr	r0, [pc, #352]	@ (800a1f0 <_printf_i+0x234>)
 800a08e:	230a      	movs	r3, #10
 800a090:	e011      	b.n	800a0b6 <_printf_i+0xfa>
 800a092:	6821      	ldr	r1, [r4, #0]
 800a094:	6833      	ldr	r3, [r6, #0]
 800a096:	0608      	lsls	r0, r1, #24
 800a098:	f853 5b04 	ldr.w	r5, [r3], #4
 800a09c:	d402      	bmi.n	800a0a4 <_printf_i+0xe8>
 800a09e:	0649      	lsls	r1, r1, #25
 800a0a0:	bf48      	it	mi
 800a0a2:	b2ad      	uxthmi	r5, r5
 800a0a4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a0a6:	4852      	ldr	r0, [pc, #328]	@ (800a1f0 <_printf_i+0x234>)
 800a0a8:	6033      	str	r3, [r6, #0]
 800a0aa:	bf14      	ite	ne
 800a0ac:	230a      	movne	r3, #10
 800a0ae:	2308      	moveq	r3, #8
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a0b6:	6866      	ldr	r6, [r4, #4]
 800a0b8:	60a6      	str	r6, [r4, #8]
 800a0ba:	2e00      	cmp	r6, #0
 800a0bc:	db05      	blt.n	800a0ca <_printf_i+0x10e>
 800a0be:	6821      	ldr	r1, [r4, #0]
 800a0c0:	432e      	orrs	r6, r5
 800a0c2:	f021 0104 	bic.w	r1, r1, #4
 800a0c6:	6021      	str	r1, [r4, #0]
 800a0c8:	d04b      	beq.n	800a162 <_printf_i+0x1a6>
 800a0ca:	4616      	mov	r6, r2
 800a0cc:	fbb5 f1f3 	udiv	r1, r5, r3
 800a0d0:	fb03 5711 	mls	r7, r3, r1, r5
 800a0d4:	5dc7      	ldrb	r7, [r0, r7]
 800a0d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a0da:	462f      	mov	r7, r5
 800a0dc:	42bb      	cmp	r3, r7
 800a0de:	460d      	mov	r5, r1
 800a0e0:	d9f4      	bls.n	800a0cc <_printf_i+0x110>
 800a0e2:	2b08      	cmp	r3, #8
 800a0e4:	d10b      	bne.n	800a0fe <_printf_i+0x142>
 800a0e6:	6823      	ldr	r3, [r4, #0]
 800a0e8:	07df      	lsls	r7, r3, #31
 800a0ea:	d508      	bpl.n	800a0fe <_printf_i+0x142>
 800a0ec:	6923      	ldr	r3, [r4, #16]
 800a0ee:	6861      	ldr	r1, [r4, #4]
 800a0f0:	4299      	cmp	r1, r3
 800a0f2:	bfde      	ittt	le
 800a0f4:	2330      	movle	r3, #48	@ 0x30
 800a0f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a0fe:	1b92      	subs	r2, r2, r6
 800a100:	6122      	str	r2, [r4, #16]
 800a102:	f8cd a000 	str.w	sl, [sp]
 800a106:	464b      	mov	r3, r9
 800a108:	aa03      	add	r2, sp, #12
 800a10a:	4621      	mov	r1, r4
 800a10c:	4640      	mov	r0, r8
 800a10e:	f7ff fee7 	bl	8009ee0 <_printf_common>
 800a112:	3001      	adds	r0, #1
 800a114:	d14a      	bne.n	800a1ac <_printf_i+0x1f0>
 800a116:	f04f 30ff 	mov.w	r0, #4294967295
 800a11a:	b004      	add	sp, #16
 800a11c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a120:	6823      	ldr	r3, [r4, #0]
 800a122:	f043 0320 	orr.w	r3, r3, #32
 800a126:	6023      	str	r3, [r4, #0]
 800a128:	4832      	ldr	r0, [pc, #200]	@ (800a1f4 <_printf_i+0x238>)
 800a12a:	2778      	movs	r7, #120	@ 0x78
 800a12c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a130:	6823      	ldr	r3, [r4, #0]
 800a132:	6831      	ldr	r1, [r6, #0]
 800a134:	061f      	lsls	r7, r3, #24
 800a136:	f851 5b04 	ldr.w	r5, [r1], #4
 800a13a:	d402      	bmi.n	800a142 <_printf_i+0x186>
 800a13c:	065f      	lsls	r7, r3, #25
 800a13e:	bf48      	it	mi
 800a140:	b2ad      	uxthmi	r5, r5
 800a142:	6031      	str	r1, [r6, #0]
 800a144:	07d9      	lsls	r1, r3, #31
 800a146:	bf44      	itt	mi
 800a148:	f043 0320 	orrmi.w	r3, r3, #32
 800a14c:	6023      	strmi	r3, [r4, #0]
 800a14e:	b11d      	cbz	r5, 800a158 <_printf_i+0x19c>
 800a150:	2310      	movs	r3, #16
 800a152:	e7ad      	b.n	800a0b0 <_printf_i+0xf4>
 800a154:	4826      	ldr	r0, [pc, #152]	@ (800a1f0 <_printf_i+0x234>)
 800a156:	e7e9      	b.n	800a12c <_printf_i+0x170>
 800a158:	6823      	ldr	r3, [r4, #0]
 800a15a:	f023 0320 	bic.w	r3, r3, #32
 800a15e:	6023      	str	r3, [r4, #0]
 800a160:	e7f6      	b.n	800a150 <_printf_i+0x194>
 800a162:	4616      	mov	r6, r2
 800a164:	e7bd      	b.n	800a0e2 <_printf_i+0x126>
 800a166:	6833      	ldr	r3, [r6, #0]
 800a168:	6825      	ldr	r5, [r4, #0]
 800a16a:	6961      	ldr	r1, [r4, #20]
 800a16c:	1d18      	adds	r0, r3, #4
 800a16e:	6030      	str	r0, [r6, #0]
 800a170:	062e      	lsls	r6, r5, #24
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	d501      	bpl.n	800a17a <_printf_i+0x1be>
 800a176:	6019      	str	r1, [r3, #0]
 800a178:	e002      	b.n	800a180 <_printf_i+0x1c4>
 800a17a:	0668      	lsls	r0, r5, #25
 800a17c:	d5fb      	bpl.n	800a176 <_printf_i+0x1ba>
 800a17e:	8019      	strh	r1, [r3, #0]
 800a180:	2300      	movs	r3, #0
 800a182:	6123      	str	r3, [r4, #16]
 800a184:	4616      	mov	r6, r2
 800a186:	e7bc      	b.n	800a102 <_printf_i+0x146>
 800a188:	6833      	ldr	r3, [r6, #0]
 800a18a:	1d1a      	adds	r2, r3, #4
 800a18c:	6032      	str	r2, [r6, #0]
 800a18e:	681e      	ldr	r6, [r3, #0]
 800a190:	6862      	ldr	r2, [r4, #4]
 800a192:	2100      	movs	r1, #0
 800a194:	4630      	mov	r0, r6
 800a196:	f7f6 f833 	bl	8000200 <memchr>
 800a19a:	b108      	cbz	r0, 800a1a0 <_printf_i+0x1e4>
 800a19c:	1b80      	subs	r0, r0, r6
 800a19e:	6060      	str	r0, [r4, #4]
 800a1a0:	6863      	ldr	r3, [r4, #4]
 800a1a2:	6123      	str	r3, [r4, #16]
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1aa:	e7aa      	b.n	800a102 <_printf_i+0x146>
 800a1ac:	6923      	ldr	r3, [r4, #16]
 800a1ae:	4632      	mov	r2, r6
 800a1b0:	4649      	mov	r1, r9
 800a1b2:	4640      	mov	r0, r8
 800a1b4:	47d0      	blx	sl
 800a1b6:	3001      	adds	r0, #1
 800a1b8:	d0ad      	beq.n	800a116 <_printf_i+0x15a>
 800a1ba:	6823      	ldr	r3, [r4, #0]
 800a1bc:	079b      	lsls	r3, r3, #30
 800a1be:	d413      	bmi.n	800a1e8 <_printf_i+0x22c>
 800a1c0:	68e0      	ldr	r0, [r4, #12]
 800a1c2:	9b03      	ldr	r3, [sp, #12]
 800a1c4:	4298      	cmp	r0, r3
 800a1c6:	bfb8      	it	lt
 800a1c8:	4618      	movlt	r0, r3
 800a1ca:	e7a6      	b.n	800a11a <_printf_i+0x15e>
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	4632      	mov	r2, r6
 800a1d0:	4649      	mov	r1, r9
 800a1d2:	4640      	mov	r0, r8
 800a1d4:	47d0      	blx	sl
 800a1d6:	3001      	adds	r0, #1
 800a1d8:	d09d      	beq.n	800a116 <_printf_i+0x15a>
 800a1da:	3501      	adds	r5, #1
 800a1dc:	68e3      	ldr	r3, [r4, #12]
 800a1de:	9903      	ldr	r1, [sp, #12]
 800a1e0:	1a5b      	subs	r3, r3, r1
 800a1e2:	42ab      	cmp	r3, r5
 800a1e4:	dcf2      	bgt.n	800a1cc <_printf_i+0x210>
 800a1e6:	e7eb      	b.n	800a1c0 <_printf_i+0x204>
 800a1e8:	2500      	movs	r5, #0
 800a1ea:	f104 0619 	add.w	r6, r4, #25
 800a1ee:	e7f5      	b.n	800a1dc <_printf_i+0x220>
 800a1f0:	0800ab49 	.word	0x0800ab49
 800a1f4:	0800ab5a 	.word	0x0800ab5a

0800a1f8 <memmove>:
 800a1f8:	4288      	cmp	r0, r1
 800a1fa:	b510      	push	{r4, lr}
 800a1fc:	eb01 0402 	add.w	r4, r1, r2
 800a200:	d902      	bls.n	800a208 <memmove+0x10>
 800a202:	4284      	cmp	r4, r0
 800a204:	4623      	mov	r3, r4
 800a206:	d807      	bhi.n	800a218 <memmove+0x20>
 800a208:	1e43      	subs	r3, r0, #1
 800a20a:	42a1      	cmp	r1, r4
 800a20c:	d008      	beq.n	800a220 <memmove+0x28>
 800a20e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a212:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a216:	e7f8      	b.n	800a20a <memmove+0x12>
 800a218:	4402      	add	r2, r0
 800a21a:	4601      	mov	r1, r0
 800a21c:	428a      	cmp	r2, r1
 800a21e:	d100      	bne.n	800a222 <memmove+0x2a>
 800a220:	bd10      	pop	{r4, pc}
 800a222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a226:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a22a:	e7f7      	b.n	800a21c <memmove+0x24>

0800a22c <_sbrk_r>:
 800a22c:	b538      	push	{r3, r4, r5, lr}
 800a22e:	4d06      	ldr	r5, [pc, #24]	@ (800a248 <_sbrk_r+0x1c>)
 800a230:	2300      	movs	r3, #0
 800a232:	4604      	mov	r4, r0
 800a234:	4608      	mov	r0, r1
 800a236:	602b      	str	r3, [r5, #0]
 800a238:	f7f7 febe 	bl	8001fb8 <_sbrk>
 800a23c:	1c43      	adds	r3, r0, #1
 800a23e:	d102      	bne.n	800a246 <_sbrk_r+0x1a>
 800a240:	682b      	ldr	r3, [r5, #0]
 800a242:	b103      	cbz	r3, 800a246 <_sbrk_r+0x1a>
 800a244:	6023      	str	r3, [r4, #0]
 800a246:	bd38      	pop	{r3, r4, r5, pc}
 800a248:	20000e2c 	.word	0x20000e2c

0800a24c <memcpy>:
 800a24c:	440a      	add	r2, r1
 800a24e:	4291      	cmp	r1, r2
 800a250:	f100 33ff 	add.w	r3, r0, #4294967295
 800a254:	d100      	bne.n	800a258 <memcpy+0xc>
 800a256:	4770      	bx	lr
 800a258:	b510      	push	{r4, lr}
 800a25a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a25e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a262:	4291      	cmp	r1, r2
 800a264:	d1f9      	bne.n	800a25a <memcpy+0xe>
 800a266:	bd10      	pop	{r4, pc}

0800a268 <_realloc_r>:
 800a268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a26c:	4607      	mov	r7, r0
 800a26e:	4614      	mov	r4, r2
 800a270:	460d      	mov	r5, r1
 800a272:	b921      	cbnz	r1, 800a27e <_realloc_r+0x16>
 800a274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a278:	4611      	mov	r1, r2
 800a27a:	f7ff bc4d 	b.w	8009b18 <_malloc_r>
 800a27e:	b92a      	cbnz	r2, 800a28c <_realloc_r+0x24>
 800a280:	f7ff fbde 	bl	8009a40 <_free_r>
 800a284:	4625      	mov	r5, r4
 800a286:	4628      	mov	r0, r5
 800a288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a28c:	f000 f81a 	bl	800a2c4 <_malloc_usable_size_r>
 800a290:	4284      	cmp	r4, r0
 800a292:	4606      	mov	r6, r0
 800a294:	d802      	bhi.n	800a29c <_realloc_r+0x34>
 800a296:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a29a:	d8f4      	bhi.n	800a286 <_realloc_r+0x1e>
 800a29c:	4621      	mov	r1, r4
 800a29e:	4638      	mov	r0, r7
 800a2a0:	f7ff fc3a 	bl	8009b18 <_malloc_r>
 800a2a4:	4680      	mov	r8, r0
 800a2a6:	b908      	cbnz	r0, 800a2ac <_realloc_r+0x44>
 800a2a8:	4645      	mov	r5, r8
 800a2aa:	e7ec      	b.n	800a286 <_realloc_r+0x1e>
 800a2ac:	42b4      	cmp	r4, r6
 800a2ae:	4622      	mov	r2, r4
 800a2b0:	4629      	mov	r1, r5
 800a2b2:	bf28      	it	cs
 800a2b4:	4632      	movcs	r2, r6
 800a2b6:	f7ff ffc9 	bl	800a24c <memcpy>
 800a2ba:	4629      	mov	r1, r5
 800a2bc:	4638      	mov	r0, r7
 800a2be:	f7ff fbbf 	bl	8009a40 <_free_r>
 800a2c2:	e7f1      	b.n	800a2a8 <_realloc_r+0x40>

0800a2c4 <_malloc_usable_size_r>:
 800a2c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2c8:	1f18      	subs	r0, r3, #4
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	bfbc      	itt	lt
 800a2ce:	580b      	ldrlt	r3, [r1, r0]
 800a2d0:	18c0      	addlt	r0, r0, r3
 800a2d2:	4770      	bx	lr

0800a2d4 <atan2>:
 800a2d4:	f000 baa4 	b.w	800a820 <__ieee754_atan2>

0800a2d8 <sqrt>:
 800a2d8:	b538      	push	{r3, r4, r5, lr}
 800a2da:	ed2d 8b02 	vpush	{d8}
 800a2de:	ec55 4b10 	vmov	r4, r5, d0
 800a2e2:	f000 f9c5 	bl	800a670 <__ieee754_sqrt>
 800a2e6:	4622      	mov	r2, r4
 800a2e8:	462b      	mov	r3, r5
 800a2ea:	4620      	mov	r0, r4
 800a2ec:	4629      	mov	r1, r5
 800a2ee:	eeb0 8a40 	vmov.f32	s16, s0
 800a2f2:	eef0 8a60 	vmov.f32	s17, s1
 800a2f6:	f7f6 fc29 	bl	8000b4c <__aeabi_dcmpun>
 800a2fa:	b990      	cbnz	r0, 800a322 <sqrt+0x4a>
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	2300      	movs	r3, #0
 800a300:	4620      	mov	r0, r4
 800a302:	4629      	mov	r1, r5
 800a304:	f7f6 fbfa 	bl	8000afc <__aeabi_dcmplt>
 800a308:	b158      	cbz	r0, 800a322 <sqrt+0x4a>
 800a30a:	f7ff fb6d 	bl	80099e8 <__errno>
 800a30e:	2321      	movs	r3, #33	@ 0x21
 800a310:	6003      	str	r3, [r0, #0]
 800a312:	2200      	movs	r2, #0
 800a314:	2300      	movs	r3, #0
 800a316:	4610      	mov	r0, r2
 800a318:	4619      	mov	r1, r3
 800a31a:	f7f6 faa7 	bl	800086c <__aeabi_ddiv>
 800a31e:	ec41 0b18 	vmov	d8, r0, r1
 800a322:	eeb0 0a48 	vmov.f32	s0, s16
 800a326:	eef0 0a68 	vmov.f32	s1, s17
 800a32a:	ecbd 8b02 	vpop	{d8}
 800a32e:	bd38      	pop	{r3, r4, r5, pc}

0800a330 <atan>:
 800a330:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a334:	ec55 4b10 	vmov	r4, r5, d0
 800a338:	4bbf      	ldr	r3, [pc, #764]	@ (800a638 <atan+0x308>)
 800a33a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800a33e:	429e      	cmp	r6, r3
 800a340:	46ab      	mov	fp, r5
 800a342:	d918      	bls.n	800a376 <atan+0x46>
 800a344:	4bbd      	ldr	r3, [pc, #756]	@ (800a63c <atan+0x30c>)
 800a346:	429e      	cmp	r6, r3
 800a348:	d801      	bhi.n	800a34e <atan+0x1e>
 800a34a:	d109      	bne.n	800a360 <atan+0x30>
 800a34c:	b144      	cbz	r4, 800a360 <atan+0x30>
 800a34e:	4622      	mov	r2, r4
 800a350:	462b      	mov	r3, r5
 800a352:	4620      	mov	r0, r4
 800a354:	4629      	mov	r1, r5
 800a356:	f7f5 ffa9 	bl	80002ac <__adddf3>
 800a35a:	4604      	mov	r4, r0
 800a35c:	460d      	mov	r5, r1
 800a35e:	e006      	b.n	800a36e <atan+0x3e>
 800a360:	f1bb 0f00 	cmp.w	fp, #0
 800a364:	f340 812b 	ble.w	800a5be <atan+0x28e>
 800a368:	a597      	add	r5, pc, #604	@ (adr r5, 800a5c8 <atan+0x298>)
 800a36a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a36e:	ec45 4b10 	vmov	d0, r4, r5
 800a372:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a376:	4bb2      	ldr	r3, [pc, #712]	@ (800a640 <atan+0x310>)
 800a378:	429e      	cmp	r6, r3
 800a37a:	d813      	bhi.n	800a3a4 <atan+0x74>
 800a37c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a380:	429e      	cmp	r6, r3
 800a382:	d80c      	bhi.n	800a39e <atan+0x6e>
 800a384:	a392      	add	r3, pc, #584	@ (adr r3, 800a5d0 <atan+0x2a0>)
 800a386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38a:	4620      	mov	r0, r4
 800a38c:	4629      	mov	r1, r5
 800a38e:	f7f5 ff8d 	bl	80002ac <__adddf3>
 800a392:	4bac      	ldr	r3, [pc, #688]	@ (800a644 <atan+0x314>)
 800a394:	2200      	movs	r2, #0
 800a396:	f7f6 fbcf 	bl	8000b38 <__aeabi_dcmpgt>
 800a39a:	2800      	cmp	r0, #0
 800a39c:	d1e7      	bne.n	800a36e <atan+0x3e>
 800a39e:	f04f 3aff 	mov.w	sl, #4294967295
 800a3a2:	e029      	b.n	800a3f8 <atan+0xc8>
 800a3a4:	f000 f95c 	bl	800a660 <fabs>
 800a3a8:	4ba7      	ldr	r3, [pc, #668]	@ (800a648 <atan+0x318>)
 800a3aa:	429e      	cmp	r6, r3
 800a3ac:	ec55 4b10 	vmov	r4, r5, d0
 800a3b0:	f200 80bc 	bhi.w	800a52c <atan+0x1fc>
 800a3b4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a3b8:	429e      	cmp	r6, r3
 800a3ba:	f200 809e 	bhi.w	800a4fa <atan+0x1ca>
 800a3be:	4622      	mov	r2, r4
 800a3c0:	462b      	mov	r3, r5
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	4629      	mov	r1, r5
 800a3c6:	f7f5 ff71 	bl	80002ac <__adddf3>
 800a3ca:	4b9e      	ldr	r3, [pc, #632]	@ (800a644 <atan+0x314>)
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f7f5 ff6b 	bl	80002a8 <__aeabi_dsub>
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	4606      	mov	r6, r0
 800a3d6:	460f      	mov	r7, r1
 800a3d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a3dc:	4620      	mov	r0, r4
 800a3de:	4629      	mov	r1, r5
 800a3e0:	f7f5 ff64 	bl	80002ac <__adddf3>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	4639      	mov	r1, r7
 800a3ec:	f7f6 fa3e 	bl	800086c <__aeabi_ddiv>
 800a3f0:	f04f 0a00 	mov.w	sl, #0
 800a3f4:	4604      	mov	r4, r0
 800a3f6:	460d      	mov	r5, r1
 800a3f8:	4622      	mov	r2, r4
 800a3fa:	462b      	mov	r3, r5
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	4629      	mov	r1, r5
 800a400:	f7f6 f90a 	bl	8000618 <__aeabi_dmul>
 800a404:	4602      	mov	r2, r0
 800a406:	460b      	mov	r3, r1
 800a408:	4680      	mov	r8, r0
 800a40a:	4689      	mov	r9, r1
 800a40c:	f7f6 f904 	bl	8000618 <__aeabi_dmul>
 800a410:	a371      	add	r3, pc, #452	@ (adr r3, 800a5d8 <atan+0x2a8>)
 800a412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a416:	4606      	mov	r6, r0
 800a418:	460f      	mov	r7, r1
 800a41a:	f7f6 f8fd 	bl	8000618 <__aeabi_dmul>
 800a41e:	a370      	add	r3, pc, #448	@ (adr r3, 800a5e0 <atan+0x2b0>)
 800a420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a424:	f7f5 ff42 	bl	80002ac <__adddf3>
 800a428:	4632      	mov	r2, r6
 800a42a:	463b      	mov	r3, r7
 800a42c:	f7f6 f8f4 	bl	8000618 <__aeabi_dmul>
 800a430:	a36d      	add	r3, pc, #436	@ (adr r3, 800a5e8 <atan+0x2b8>)
 800a432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a436:	f7f5 ff39 	bl	80002ac <__adddf3>
 800a43a:	4632      	mov	r2, r6
 800a43c:	463b      	mov	r3, r7
 800a43e:	f7f6 f8eb 	bl	8000618 <__aeabi_dmul>
 800a442:	a36b      	add	r3, pc, #428	@ (adr r3, 800a5f0 <atan+0x2c0>)
 800a444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a448:	f7f5 ff30 	bl	80002ac <__adddf3>
 800a44c:	4632      	mov	r2, r6
 800a44e:	463b      	mov	r3, r7
 800a450:	f7f6 f8e2 	bl	8000618 <__aeabi_dmul>
 800a454:	a368      	add	r3, pc, #416	@ (adr r3, 800a5f8 <atan+0x2c8>)
 800a456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45a:	f7f5 ff27 	bl	80002ac <__adddf3>
 800a45e:	4632      	mov	r2, r6
 800a460:	463b      	mov	r3, r7
 800a462:	f7f6 f8d9 	bl	8000618 <__aeabi_dmul>
 800a466:	a366      	add	r3, pc, #408	@ (adr r3, 800a600 <atan+0x2d0>)
 800a468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46c:	f7f5 ff1e 	bl	80002ac <__adddf3>
 800a470:	4642      	mov	r2, r8
 800a472:	464b      	mov	r3, r9
 800a474:	f7f6 f8d0 	bl	8000618 <__aeabi_dmul>
 800a478:	a363      	add	r3, pc, #396	@ (adr r3, 800a608 <atan+0x2d8>)
 800a47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47e:	4680      	mov	r8, r0
 800a480:	4689      	mov	r9, r1
 800a482:	4630      	mov	r0, r6
 800a484:	4639      	mov	r1, r7
 800a486:	f7f6 f8c7 	bl	8000618 <__aeabi_dmul>
 800a48a:	a361      	add	r3, pc, #388	@ (adr r3, 800a610 <atan+0x2e0>)
 800a48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a490:	f7f5 ff0a 	bl	80002a8 <__aeabi_dsub>
 800a494:	4632      	mov	r2, r6
 800a496:	463b      	mov	r3, r7
 800a498:	f7f6 f8be 	bl	8000618 <__aeabi_dmul>
 800a49c:	a35e      	add	r3, pc, #376	@ (adr r3, 800a618 <atan+0x2e8>)
 800a49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a2:	f7f5 ff01 	bl	80002a8 <__aeabi_dsub>
 800a4a6:	4632      	mov	r2, r6
 800a4a8:	463b      	mov	r3, r7
 800a4aa:	f7f6 f8b5 	bl	8000618 <__aeabi_dmul>
 800a4ae:	a35c      	add	r3, pc, #368	@ (adr r3, 800a620 <atan+0x2f0>)
 800a4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b4:	f7f5 fef8 	bl	80002a8 <__aeabi_dsub>
 800a4b8:	4632      	mov	r2, r6
 800a4ba:	463b      	mov	r3, r7
 800a4bc:	f7f6 f8ac 	bl	8000618 <__aeabi_dmul>
 800a4c0:	a359      	add	r3, pc, #356	@ (adr r3, 800a628 <atan+0x2f8>)
 800a4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c6:	f7f5 feef 	bl	80002a8 <__aeabi_dsub>
 800a4ca:	4632      	mov	r2, r6
 800a4cc:	463b      	mov	r3, r7
 800a4ce:	f7f6 f8a3 	bl	8000618 <__aeabi_dmul>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	4640      	mov	r0, r8
 800a4d8:	4649      	mov	r1, r9
 800a4da:	f7f5 fee7 	bl	80002ac <__adddf3>
 800a4de:	4622      	mov	r2, r4
 800a4e0:	462b      	mov	r3, r5
 800a4e2:	f7f6 f899 	bl	8000618 <__aeabi_dmul>
 800a4e6:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	d148      	bne.n	800a582 <atan+0x252>
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	4629      	mov	r1, r5
 800a4f4:	f7f5 fed8 	bl	80002a8 <__aeabi_dsub>
 800a4f8:	e72f      	b.n	800a35a <atan+0x2a>
 800a4fa:	4b52      	ldr	r3, [pc, #328]	@ (800a644 <atan+0x314>)
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	4620      	mov	r0, r4
 800a500:	4629      	mov	r1, r5
 800a502:	f7f5 fed1 	bl	80002a8 <__aeabi_dsub>
 800a506:	4b4f      	ldr	r3, [pc, #316]	@ (800a644 <atan+0x314>)
 800a508:	4606      	mov	r6, r0
 800a50a:	460f      	mov	r7, r1
 800a50c:	2200      	movs	r2, #0
 800a50e:	4620      	mov	r0, r4
 800a510:	4629      	mov	r1, r5
 800a512:	f7f5 fecb 	bl	80002ac <__adddf3>
 800a516:	4602      	mov	r2, r0
 800a518:	460b      	mov	r3, r1
 800a51a:	4630      	mov	r0, r6
 800a51c:	4639      	mov	r1, r7
 800a51e:	f7f6 f9a5 	bl	800086c <__aeabi_ddiv>
 800a522:	f04f 0a01 	mov.w	sl, #1
 800a526:	4604      	mov	r4, r0
 800a528:	460d      	mov	r5, r1
 800a52a:	e765      	b.n	800a3f8 <atan+0xc8>
 800a52c:	4b47      	ldr	r3, [pc, #284]	@ (800a64c <atan+0x31c>)
 800a52e:	429e      	cmp	r6, r3
 800a530:	d21c      	bcs.n	800a56c <atan+0x23c>
 800a532:	4b47      	ldr	r3, [pc, #284]	@ (800a650 <atan+0x320>)
 800a534:	2200      	movs	r2, #0
 800a536:	4620      	mov	r0, r4
 800a538:	4629      	mov	r1, r5
 800a53a:	f7f5 feb5 	bl	80002a8 <__aeabi_dsub>
 800a53e:	4b44      	ldr	r3, [pc, #272]	@ (800a650 <atan+0x320>)
 800a540:	4606      	mov	r6, r0
 800a542:	460f      	mov	r7, r1
 800a544:	2200      	movs	r2, #0
 800a546:	4620      	mov	r0, r4
 800a548:	4629      	mov	r1, r5
 800a54a:	f7f6 f865 	bl	8000618 <__aeabi_dmul>
 800a54e:	4b3d      	ldr	r3, [pc, #244]	@ (800a644 <atan+0x314>)
 800a550:	2200      	movs	r2, #0
 800a552:	f7f5 feab 	bl	80002ac <__adddf3>
 800a556:	4602      	mov	r2, r0
 800a558:	460b      	mov	r3, r1
 800a55a:	4630      	mov	r0, r6
 800a55c:	4639      	mov	r1, r7
 800a55e:	f7f6 f985 	bl	800086c <__aeabi_ddiv>
 800a562:	f04f 0a02 	mov.w	sl, #2
 800a566:	4604      	mov	r4, r0
 800a568:	460d      	mov	r5, r1
 800a56a:	e745      	b.n	800a3f8 <atan+0xc8>
 800a56c:	4622      	mov	r2, r4
 800a56e:	462b      	mov	r3, r5
 800a570:	4938      	ldr	r1, [pc, #224]	@ (800a654 <atan+0x324>)
 800a572:	2000      	movs	r0, #0
 800a574:	f7f6 f97a 	bl	800086c <__aeabi_ddiv>
 800a578:	f04f 0a03 	mov.w	sl, #3
 800a57c:	4604      	mov	r4, r0
 800a57e:	460d      	mov	r5, r1
 800a580:	e73a      	b.n	800a3f8 <atan+0xc8>
 800a582:	4b35      	ldr	r3, [pc, #212]	@ (800a658 <atan+0x328>)
 800a584:	4e35      	ldr	r6, [pc, #212]	@ (800a65c <atan+0x32c>)
 800a586:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58e:	f7f5 fe8b 	bl	80002a8 <__aeabi_dsub>
 800a592:	4622      	mov	r2, r4
 800a594:	462b      	mov	r3, r5
 800a596:	f7f5 fe87 	bl	80002a8 <__aeabi_dsub>
 800a59a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a59e:	4602      	mov	r2, r0
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a5a6:	f7f5 fe7f 	bl	80002a8 <__aeabi_dsub>
 800a5aa:	f1bb 0f00 	cmp.w	fp, #0
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	460d      	mov	r5, r1
 800a5b2:	f6bf aedc 	bge.w	800a36e <atan+0x3e>
 800a5b6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a5ba:	461d      	mov	r5, r3
 800a5bc:	e6d7      	b.n	800a36e <atan+0x3e>
 800a5be:	a51c      	add	r5, pc, #112	@ (adr r5, 800a630 <atan+0x300>)
 800a5c0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a5c4:	e6d3      	b.n	800a36e <atan+0x3e>
 800a5c6:	bf00      	nop
 800a5c8:	54442d18 	.word	0x54442d18
 800a5cc:	3ff921fb 	.word	0x3ff921fb
 800a5d0:	8800759c 	.word	0x8800759c
 800a5d4:	7e37e43c 	.word	0x7e37e43c
 800a5d8:	e322da11 	.word	0xe322da11
 800a5dc:	3f90ad3a 	.word	0x3f90ad3a
 800a5e0:	24760deb 	.word	0x24760deb
 800a5e4:	3fa97b4b 	.word	0x3fa97b4b
 800a5e8:	a0d03d51 	.word	0xa0d03d51
 800a5ec:	3fb10d66 	.word	0x3fb10d66
 800a5f0:	c54c206e 	.word	0xc54c206e
 800a5f4:	3fb745cd 	.word	0x3fb745cd
 800a5f8:	920083ff 	.word	0x920083ff
 800a5fc:	3fc24924 	.word	0x3fc24924
 800a600:	5555550d 	.word	0x5555550d
 800a604:	3fd55555 	.word	0x3fd55555
 800a608:	2c6a6c2f 	.word	0x2c6a6c2f
 800a60c:	bfa2b444 	.word	0xbfa2b444
 800a610:	52defd9a 	.word	0x52defd9a
 800a614:	3fadde2d 	.word	0x3fadde2d
 800a618:	af749a6d 	.word	0xaf749a6d
 800a61c:	3fb3b0f2 	.word	0x3fb3b0f2
 800a620:	fe231671 	.word	0xfe231671
 800a624:	3fbc71c6 	.word	0x3fbc71c6
 800a628:	9998ebc4 	.word	0x9998ebc4
 800a62c:	3fc99999 	.word	0x3fc99999
 800a630:	54442d18 	.word	0x54442d18
 800a634:	bff921fb 	.word	0xbff921fb
 800a638:	440fffff 	.word	0x440fffff
 800a63c:	7ff00000 	.word	0x7ff00000
 800a640:	3fdbffff 	.word	0x3fdbffff
 800a644:	3ff00000 	.word	0x3ff00000
 800a648:	3ff2ffff 	.word	0x3ff2ffff
 800a64c:	40038000 	.word	0x40038000
 800a650:	3ff80000 	.word	0x3ff80000
 800a654:	bff00000 	.word	0xbff00000
 800a658:	0800ab70 	.word	0x0800ab70
 800a65c:	0800ab90 	.word	0x0800ab90

0800a660 <fabs>:
 800a660:	ec51 0b10 	vmov	r0, r1, d0
 800a664:	4602      	mov	r2, r0
 800a666:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a66a:	ec43 2b10 	vmov	d0, r2, r3
 800a66e:	4770      	bx	lr

0800a670 <__ieee754_sqrt>:
 800a670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a674:	4a66      	ldr	r2, [pc, #408]	@ (800a810 <__ieee754_sqrt+0x1a0>)
 800a676:	ec55 4b10 	vmov	r4, r5, d0
 800a67a:	43aa      	bics	r2, r5
 800a67c:	462b      	mov	r3, r5
 800a67e:	4621      	mov	r1, r4
 800a680:	d110      	bne.n	800a6a4 <__ieee754_sqrt+0x34>
 800a682:	4622      	mov	r2, r4
 800a684:	4620      	mov	r0, r4
 800a686:	4629      	mov	r1, r5
 800a688:	f7f5 ffc6 	bl	8000618 <__aeabi_dmul>
 800a68c:	4602      	mov	r2, r0
 800a68e:	460b      	mov	r3, r1
 800a690:	4620      	mov	r0, r4
 800a692:	4629      	mov	r1, r5
 800a694:	f7f5 fe0a 	bl	80002ac <__adddf3>
 800a698:	4604      	mov	r4, r0
 800a69a:	460d      	mov	r5, r1
 800a69c:	ec45 4b10 	vmov	d0, r4, r5
 800a6a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a4:	2d00      	cmp	r5, #0
 800a6a6:	dc0e      	bgt.n	800a6c6 <__ieee754_sqrt+0x56>
 800a6a8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a6ac:	4322      	orrs	r2, r4
 800a6ae:	d0f5      	beq.n	800a69c <__ieee754_sqrt+0x2c>
 800a6b0:	b19d      	cbz	r5, 800a6da <__ieee754_sqrt+0x6a>
 800a6b2:	4622      	mov	r2, r4
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	4629      	mov	r1, r5
 800a6b8:	f7f5 fdf6 	bl	80002a8 <__aeabi_dsub>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	460b      	mov	r3, r1
 800a6c0:	f7f6 f8d4 	bl	800086c <__aeabi_ddiv>
 800a6c4:	e7e8      	b.n	800a698 <__ieee754_sqrt+0x28>
 800a6c6:	152a      	asrs	r2, r5, #20
 800a6c8:	d115      	bne.n	800a6f6 <__ieee754_sqrt+0x86>
 800a6ca:	2000      	movs	r0, #0
 800a6cc:	e009      	b.n	800a6e2 <__ieee754_sqrt+0x72>
 800a6ce:	0acb      	lsrs	r3, r1, #11
 800a6d0:	3a15      	subs	r2, #21
 800a6d2:	0549      	lsls	r1, r1, #21
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d0fa      	beq.n	800a6ce <__ieee754_sqrt+0x5e>
 800a6d8:	e7f7      	b.n	800a6ca <__ieee754_sqrt+0x5a>
 800a6da:	462a      	mov	r2, r5
 800a6dc:	e7fa      	b.n	800a6d4 <__ieee754_sqrt+0x64>
 800a6de:	005b      	lsls	r3, r3, #1
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	02dc      	lsls	r4, r3, #11
 800a6e4:	d5fb      	bpl.n	800a6de <__ieee754_sqrt+0x6e>
 800a6e6:	1e44      	subs	r4, r0, #1
 800a6e8:	1b12      	subs	r2, r2, r4
 800a6ea:	f1c0 0420 	rsb	r4, r0, #32
 800a6ee:	fa21 f404 	lsr.w	r4, r1, r4
 800a6f2:	4323      	orrs	r3, r4
 800a6f4:	4081      	lsls	r1, r0
 800a6f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6fa:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800a6fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a702:	07d2      	lsls	r2, r2, #31
 800a704:	bf5c      	itt	pl
 800a706:	005b      	lslpl	r3, r3, #1
 800a708:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a70c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a710:	bf58      	it	pl
 800a712:	0049      	lslpl	r1, r1, #1
 800a714:	2600      	movs	r6, #0
 800a716:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a71a:	107f      	asrs	r7, r7, #1
 800a71c:	0049      	lsls	r1, r1, #1
 800a71e:	2016      	movs	r0, #22
 800a720:	4632      	mov	r2, r6
 800a722:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a726:	1915      	adds	r5, r2, r4
 800a728:	429d      	cmp	r5, r3
 800a72a:	bfde      	ittt	le
 800a72c:	192a      	addle	r2, r5, r4
 800a72e:	1b5b      	suble	r3, r3, r5
 800a730:	1936      	addle	r6, r6, r4
 800a732:	0fcd      	lsrs	r5, r1, #31
 800a734:	3801      	subs	r0, #1
 800a736:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800a73a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a73e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a742:	d1f0      	bne.n	800a726 <__ieee754_sqrt+0xb6>
 800a744:	4605      	mov	r5, r0
 800a746:	2420      	movs	r4, #32
 800a748:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a74c:	4293      	cmp	r3, r2
 800a74e:	eb0c 0e00 	add.w	lr, ip, r0
 800a752:	dc02      	bgt.n	800a75a <__ieee754_sqrt+0xea>
 800a754:	d113      	bne.n	800a77e <__ieee754_sqrt+0x10e>
 800a756:	458e      	cmp	lr, r1
 800a758:	d811      	bhi.n	800a77e <__ieee754_sqrt+0x10e>
 800a75a:	f1be 0f00 	cmp.w	lr, #0
 800a75e:	eb0e 000c 	add.w	r0, lr, ip
 800a762:	da3f      	bge.n	800a7e4 <__ieee754_sqrt+0x174>
 800a764:	2800      	cmp	r0, #0
 800a766:	db3d      	blt.n	800a7e4 <__ieee754_sqrt+0x174>
 800a768:	f102 0801 	add.w	r8, r2, #1
 800a76c:	1a9b      	subs	r3, r3, r2
 800a76e:	458e      	cmp	lr, r1
 800a770:	bf88      	it	hi
 800a772:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a776:	eba1 010e 	sub.w	r1, r1, lr
 800a77a:	4465      	add	r5, ip
 800a77c:	4642      	mov	r2, r8
 800a77e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a782:	3c01      	subs	r4, #1
 800a784:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a788:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a78c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a790:	d1dc      	bne.n	800a74c <__ieee754_sqrt+0xdc>
 800a792:	4319      	orrs	r1, r3
 800a794:	d01b      	beq.n	800a7ce <__ieee754_sqrt+0x15e>
 800a796:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800a814 <__ieee754_sqrt+0x1a4>
 800a79a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800a818 <__ieee754_sqrt+0x1a8>
 800a79e:	e9da 0100 	ldrd	r0, r1, [sl]
 800a7a2:	e9db 2300 	ldrd	r2, r3, [fp]
 800a7a6:	f7f5 fd7f 	bl	80002a8 <__aeabi_dsub>
 800a7aa:	e9da 8900 	ldrd	r8, r9, [sl]
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	4640      	mov	r0, r8
 800a7b4:	4649      	mov	r1, r9
 800a7b6:	f7f6 f9ab 	bl	8000b10 <__aeabi_dcmple>
 800a7ba:	b140      	cbz	r0, 800a7ce <__ieee754_sqrt+0x15e>
 800a7bc:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a7c0:	e9da 0100 	ldrd	r0, r1, [sl]
 800a7c4:	e9db 2300 	ldrd	r2, r3, [fp]
 800a7c8:	d10e      	bne.n	800a7e8 <__ieee754_sqrt+0x178>
 800a7ca:	3601      	adds	r6, #1
 800a7cc:	4625      	mov	r5, r4
 800a7ce:	1073      	asrs	r3, r6, #1
 800a7d0:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800a7d4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800a7d8:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800a7dc:	086b      	lsrs	r3, r5, #1
 800a7de:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800a7e2:	e759      	b.n	800a698 <__ieee754_sqrt+0x28>
 800a7e4:	4690      	mov	r8, r2
 800a7e6:	e7c1      	b.n	800a76c <__ieee754_sqrt+0xfc>
 800a7e8:	f7f5 fd60 	bl	80002ac <__adddf3>
 800a7ec:	e9da 8900 	ldrd	r8, r9, [sl]
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	4640      	mov	r0, r8
 800a7f6:	4649      	mov	r1, r9
 800a7f8:	f7f6 f980 	bl	8000afc <__aeabi_dcmplt>
 800a7fc:	b120      	cbz	r0, 800a808 <__ieee754_sqrt+0x198>
 800a7fe:	1cab      	adds	r3, r5, #2
 800a800:	bf08      	it	eq
 800a802:	3601      	addeq	r6, #1
 800a804:	3502      	adds	r5, #2
 800a806:	e7e2      	b.n	800a7ce <__ieee754_sqrt+0x15e>
 800a808:	1c6b      	adds	r3, r5, #1
 800a80a:	f023 0501 	bic.w	r5, r3, #1
 800a80e:	e7de      	b.n	800a7ce <__ieee754_sqrt+0x15e>
 800a810:	7ff00000 	.word	0x7ff00000
 800a814:	0800abb8 	.word	0x0800abb8
 800a818:	0800abb0 	.word	0x0800abb0
 800a81c:	00000000 	.word	0x00000000

0800a820 <__ieee754_atan2>:
 800a820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a824:	ec57 6b11 	vmov	r6, r7, d1
 800a828:	4273      	negs	r3, r6
 800a82a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800a9a8 <__ieee754_atan2+0x188>
 800a82e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800a832:	4333      	orrs	r3, r6
 800a834:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a838:	4543      	cmp	r3, r8
 800a83a:	ec51 0b10 	vmov	r0, r1, d0
 800a83e:	4635      	mov	r5, r6
 800a840:	d809      	bhi.n	800a856 <__ieee754_atan2+0x36>
 800a842:	4244      	negs	r4, r0
 800a844:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a848:	4304      	orrs	r4, r0
 800a84a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a84e:	4544      	cmp	r4, r8
 800a850:	468e      	mov	lr, r1
 800a852:	4681      	mov	r9, r0
 800a854:	d907      	bls.n	800a866 <__ieee754_atan2+0x46>
 800a856:	4632      	mov	r2, r6
 800a858:	463b      	mov	r3, r7
 800a85a:	f7f5 fd27 	bl	80002ac <__adddf3>
 800a85e:	ec41 0b10 	vmov	d0, r0, r1
 800a862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a866:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800a86a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800a86e:	4334      	orrs	r4, r6
 800a870:	d103      	bne.n	800a87a <__ieee754_atan2+0x5a>
 800a872:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a876:	f7ff bd5b 	b.w	800a330 <atan>
 800a87a:	17bc      	asrs	r4, r7, #30
 800a87c:	f004 0402 	and.w	r4, r4, #2
 800a880:	ea53 0909 	orrs.w	r9, r3, r9
 800a884:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a888:	d107      	bne.n	800a89a <__ieee754_atan2+0x7a>
 800a88a:	2c02      	cmp	r4, #2
 800a88c:	d05f      	beq.n	800a94e <__ieee754_atan2+0x12e>
 800a88e:	2c03      	cmp	r4, #3
 800a890:	d1e5      	bne.n	800a85e <__ieee754_atan2+0x3e>
 800a892:	a143      	add	r1, pc, #268	@ (adr r1, 800a9a0 <__ieee754_atan2+0x180>)
 800a894:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a898:	e7e1      	b.n	800a85e <__ieee754_atan2+0x3e>
 800a89a:	4315      	orrs	r5, r2
 800a89c:	d106      	bne.n	800a8ac <__ieee754_atan2+0x8c>
 800a89e:	f1be 0f00 	cmp.w	lr, #0
 800a8a2:	db5f      	blt.n	800a964 <__ieee754_atan2+0x144>
 800a8a4:	a136      	add	r1, pc, #216	@ (adr r1, 800a980 <__ieee754_atan2+0x160>)
 800a8a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8aa:	e7d8      	b.n	800a85e <__ieee754_atan2+0x3e>
 800a8ac:	4542      	cmp	r2, r8
 800a8ae:	d10f      	bne.n	800a8d0 <__ieee754_atan2+0xb0>
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	f104 34ff 	add.w	r4, r4, #4294967295
 800a8b6:	d107      	bne.n	800a8c8 <__ieee754_atan2+0xa8>
 800a8b8:	2c02      	cmp	r4, #2
 800a8ba:	d84c      	bhi.n	800a956 <__ieee754_atan2+0x136>
 800a8bc:	4b36      	ldr	r3, [pc, #216]	@ (800a998 <__ieee754_atan2+0x178>)
 800a8be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a8c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a8c6:	e7ca      	b.n	800a85e <__ieee754_atan2+0x3e>
 800a8c8:	2c02      	cmp	r4, #2
 800a8ca:	d848      	bhi.n	800a95e <__ieee754_atan2+0x13e>
 800a8cc:	4b33      	ldr	r3, [pc, #204]	@ (800a99c <__ieee754_atan2+0x17c>)
 800a8ce:	e7f6      	b.n	800a8be <__ieee754_atan2+0x9e>
 800a8d0:	4543      	cmp	r3, r8
 800a8d2:	d0e4      	beq.n	800a89e <__ieee754_atan2+0x7e>
 800a8d4:	1a9b      	subs	r3, r3, r2
 800a8d6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800a8da:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a8de:	da1e      	bge.n	800a91e <__ieee754_atan2+0xfe>
 800a8e0:	2f00      	cmp	r7, #0
 800a8e2:	da01      	bge.n	800a8e8 <__ieee754_atan2+0xc8>
 800a8e4:	323c      	adds	r2, #60	@ 0x3c
 800a8e6:	db1e      	blt.n	800a926 <__ieee754_atan2+0x106>
 800a8e8:	4632      	mov	r2, r6
 800a8ea:	463b      	mov	r3, r7
 800a8ec:	f7f5 ffbe 	bl	800086c <__aeabi_ddiv>
 800a8f0:	ec41 0b10 	vmov	d0, r0, r1
 800a8f4:	f7ff feb4 	bl	800a660 <fabs>
 800a8f8:	f7ff fd1a 	bl	800a330 <atan>
 800a8fc:	ec51 0b10 	vmov	r0, r1, d0
 800a900:	2c01      	cmp	r4, #1
 800a902:	d013      	beq.n	800a92c <__ieee754_atan2+0x10c>
 800a904:	2c02      	cmp	r4, #2
 800a906:	d015      	beq.n	800a934 <__ieee754_atan2+0x114>
 800a908:	2c00      	cmp	r4, #0
 800a90a:	d0a8      	beq.n	800a85e <__ieee754_atan2+0x3e>
 800a90c:	a318      	add	r3, pc, #96	@ (adr r3, 800a970 <__ieee754_atan2+0x150>)
 800a90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a912:	f7f5 fcc9 	bl	80002a8 <__aeabi_dsub>
 800a916:	a318      	add	r3, pc, #96	@ (adr r3, 800a978 <__ieee754_atan2+0x158>)
 800a918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91c:	e014      	b.n	800a948 <__ieee754_atan2+0x128>
 800a91e:	a118      	add	r1, pc, #96	@ (adr r1, 800a980 <__ieee754_atan2+0x160>)
 800a920:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a924:	e7ec      	b.n	800a900 <__ieee754_atan2+0xe0>
 800a926:	2000      	movs	r0, #0
 800a928:	2100      	movs	r1, #0
 800a92a:	e7e9      	b.n	800a900 <__ieee754_atan2+0xe0>
 800a92c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a930:	4619      	mov	r1, r3
 800a932:	e794      	b.n	800a85e <__ieee754_atan2+0x3e>
 800a934:	a30e      	add	r3, pc, #56	@ (adr r3, 800a970 <__ieee754_atan2+0x150>)
 800a936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93a:	f7f5 fcb5 	bl	80002a8 <__aeabi_dsub>
 800a93e:	4602      	mov	r2, r0
 800a940:	460b      	mov	r3, r1
 800a942:	a10d      	add	r1, pc, #52	@ (adr r1, 800a978 <__ieee754_atan2+0x158>)
 800a944:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a948:	f7f5 fcae 	bl	80002a8 <__aeabi_dsub>
 800a94c:	e787      	b.n	800a85e <__ieee754_atan2+0x3e>
 800a94e:	a10a      	add	r1, pc, #40	@ (adr r1, 800a978 <__ieee754_atan2+0x158>)
 800a950:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a954:	e783      	b.n	800a85e <__ieee754_atan2+0x3e>
 800a956:	a10c      	add	r1, pc, #48	@ (adr r1, 800a988 <__ieee754_atan2+0x168>)
 800a958:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a95c:	e77f      	b.n	800a85e <__ieee754_atan2+0x3e>
 800a95e:	2000      	movs	r0, #0
 800a960:	2100      	movs	r1, #0
 800a962:	e77c      	b.n	800a85e <__ieee754_atan2+0x3e>
 800a964:	a10a      	add	r1, pc, #40	@ (adr r1, 800a990 <__ieee754_atan2+0x170>)
 800a966:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a96a:	e778      	b.n	800a85e <__ieee754_atan2+0x3e>
 800a96c:	f3af 8000 	nop.w
 800a970:	33145c07 	.word	0x33145c07
 800a974:	3ca1a626 	.word	0x3ca1a626
 800a978:	54442d18 	.word	0x54442d18
 800a97c:	400921fb 	.word	0x400921fb
 800a980:	54442d18 	.word	0x54442d18
 800a984:	3ff921fb 	.word	0x3ff921fb
 800a988:	54442d18 	.word	0x54442d18
 800a98c:	3fe921fb 	.word	0x3fe921fb
 800a990:	54442d18 	.word	0x54442d18
 800a994:	bff921fb 	.word	0xbff921fb
 800a998:	0800abd8 	.word	0x0800abd8
 800a99c:	0800abc0 	.word	0x0800abc0
 800a9a0:	54442d18 	.word	0x54442d18
 800a9a4:	c00921fb 	.word	0xc00921fb
 800a9a8:	7ff00000 	.word	0x7ff00000

0800a9ac <_init>:
 800a9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ae:	bf00      	nop
 800a9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9b2:	bc08      	pop	{r3}
 800a9b4:	469e      	mov	lr, r3
 800a9b6:	4770      	bx	lr

0800a9b8 <_fini>:
 800a9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ba:	bf00      	nop
 800a9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9be:	bc08      	pop	{r3}
 800a9c0:	469e      	mov	lr, r3
 800a9c2:	4770      	bx	lr
