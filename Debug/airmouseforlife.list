
airmouseforlife.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  0800a880  0800a880  0000b880  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa90  0800aa90  0000c1fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800aa90  0800aa90  0000ba90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa98  0800aa98  0000c1fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa98  0800aa98  0000ba98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aa9c  0800aa9c  0000ba9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  0800aaa0  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1fc  2**0
                  CONTENTS
 10 .bss          00000c3c  20000200  20000200  0000c200  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000e3c  20000e3c  0000c200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001422f  00000000  00000000  0000c22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003270  00000000  00000000  0002045b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001050  00000000  00000000  000236d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c85  00000000  00000000  00024720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023aa0  00000000  00000000  000253a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001664b  00000000  00000000  00048e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9c93  00000000  00000000  0005f490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00129123  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bf0  00000000  00000000  00129168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0012dd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a864 	.word	0x0800a864

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800a864 	.word	0x0800a864

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000eda:	4a13      	ldr	r2, [pc, #76]	@ (8000f28 <MX_I2C1_Init+0x54>)
 8000edc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ede:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000ee0:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <MX_I2C1_Init+0x58>)
 8000ee2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000ef2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ef6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000efe:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f04:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f0a:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f10:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000f12:	f001 fb8b 	bl	800262c <HAL_I2C_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f1c:	f000 faee 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	2000021c 	.word	0x2000021c
 8000f28:	40005400 	.word	0x40005400
 8000f2c:	000186a0 	.word	0x000186a0

08000f30 <SendDataOverUART>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SendDataOverUART(MPU6050_t *MPU6050)
{
 8000f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f34:	b0b8      	sub	sp, #224	@ 0xe0
 8000f36:	af04      	add	r7, sp, #16
 8000f38:	6078      	str	r0, [r7, #4]

    // Format: time,Ax,Ay,Az,Gx,Gy,Gz,Temp
    sprintf(
        buffer,
        "x:%d.%02d, y:%d.%02d, z:%d.%02d\r\n",
        (int)MPU6050->Ax, abs((int)(MPU6050->Ax * 100) % 100),
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    sprintf(
 8000f40:	4610      	mov	r0, r2
 8000f42:	4619      	mov	r1, r3
 8000f44:	f7ff fe08 	bl	8000b58 <__aeabi_d2iz>
 8000f48:	4680      	mov	r8, r0
        (int)MPU6050->Ax, abs((int)(MPU6050->Ax * 100) % 100),
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	4b42      	ldr	r3, [pc, #264]	@ (8001060 <SendDataOverUART+0x130>)
 8000f56:	f7ff fb4f 	bl	80005f8 <__aeabi_dmul>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4610      	mov	r0, r2
 8000f60:	4619      	mov	r1, r3
 8000f62:	f7ff fdf9 	bl	8000b58 <__aeabi_d2iz>
 8000f66:	4602      	mov	r2, r0
 8000f68:	4b3e      	ldr	r3, [pc, #248]	@ (8001064 <SendDataOverUART+0x134>)
 8000f6a:	fb83 1302 	smull	r1, r3, r3, r2
 8000f6e:	1159      	asrs	r1, r3, #5
 8000f70:	17d3      	asrs	r3, r2, #31
 8000f72:	1acb      	subs	r3, r1, r3
 8000f74:	2164      	movs	r1, #100	@ 0x64
 8000f76:	fb01 f303 	mul.w	r3, r1, r3
 8000f7a:	1ad3      	subs	r3, r2, r3
    sprintf(
 8000f7c:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
 8000f80:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
        (int)MPU6050->Ay, abs((int)(MPU6050->Ay * 100) % 100),
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    sprintf(
 8000f8a:	4610      	mov	r0, r2
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f7ff fde3 	bl	8000b58 <__aeabi_d2iz>
 8000f92:	4606      	mov	r6, r0
        (int)MPU6050->Ay, abs((int)(MPU6050->Ay * 100) % 100),
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000f9a:	f04f 0200 	mov.w	r2, #0
 8000f9e:	4b30      	ldr	r3, [pc, #192]	@ (8001060 <SendDataOverUART+0x130>)
 8000fa0:	f7ff fb2a 	bl	80005f8 <__aeabi_dmul>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4610      	mov	r0, r2
 8000faa:	4619      	mov	r1, r3
 8000fac:	f7ff fdd4 	bl	8000b58 <__aeabi_d2iz>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	4b2c      	ldr	r3, [pc, #176]	@ (8001064 <SendDataOverUART+0x134>)
 8000fb4:	fb83 1302 	smull	r1, r3, r3, r2
 8000fb8:	1159      	asrs	r1, r3, #5
 8000fba:	17d3      	asrs	r3, r2, #31
 8000fbc:	1acb      	subs	r3, r1, r3
 8000fbe:	2164      	movs	r1, #100	@ 0x64
 8000fc0:	fb01 f303 	mul.w	r3, r1, r3
 8000fc4:	1ad3      	subs	r3, r2, r3
    sprintf(
 8000fc6:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8000fca:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
        (int)MPU6050->Az, abs((int)(MPU6050->Az * 100) % 100)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
    sprintf(
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f7ff fdbe 	bl	8000b58 <__aeabi_d2iz>
 8000fdc:	6038      	str	r0, [r7, #0]
        (int)MPU6050->Az, abs((int)(MPU6050->Az * 100) % 100)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8001060 <SendDataOverUART+0x130>)
 8000fea:	f7ff fb05 	bl	80005f8 <__aeabi_dmul>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	4610      	mov	r0, r2
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f7ff fdaf 	bl	8000b58 <__aeabi_d2iz>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	4b19      	ldr	r3, [pc, #100]	@ (8001064 <SendDataOverUART+0x134>)
 8000ffe:	fb83 1302 	smull	r1, r3, r3, r2
 8001002:	1159      	asrs	r1, r3, #5
 8001004:	17d3      	asrs	r3, r2, #31
 8001006:	1acb      	subs	r3, r1, r3
 8001008:	2164      	movs	r1, #100	@ 0x64
 800100a:	fb01 f303 	mul.w	r3, r1, r3
 800100e:	1ad3      	subs	r3, r2, r3
    sprintf(
 8001010:	2b00      	cmp	r3, #0
 8001012:	bfb8      	it	lt
 8001014:	425b      	neglt	r3, r3
 8001016:	f107 0008 	add.w	r0, r7, #8
 800101a:	9303      	str	r3, [sp, #12]
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	9401      	str	r4, [sp, #4]
 8001022:	9600      	str	r6, [sp, #0]
 8001024:	462b      	mov	r3, r5
 8001026:	4642      	mov	r2, r8
 8001028:	490f      	ldr	r1, [pc, #60]	@ (8001068 <SendDataOverUART+0x138>)
 800102a:	f008 fc0d 	bl	8009848 <siprintf>
//        (int)MPU6050->Gz, abs((int)(MPU6050->Gz * 100) % 100),
//        (int)MPU6050->Temperature, abs((int)(MPU6050->Temperature * 100) % 100)
    );

    // Send the data over UART
    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 800102e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001032:	480e      	ldr	r0, [pc, #56]	@ (800106c <SendDataOverUART+0x13c>)
 8001034:	f001 fadf 	bl	80025f6 <HAL_GPIO_TogglePin>
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff f8c7 	bl	80001d0 <strlen>
 8001042:	4603      	mov	r3, r0
 8001044:	b29a      	uxth	r2, r3
 8001046:	f107 0108 	add.w	r1, r7, #8
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	4808      	ldr	r0, [pc, #32]	@ (8001070 <SendDataOverUART+0x140>)
 8001050:	f004 fb60 	bl	8005714 <HAL_UART_Transmit>
}
 8001054:	bf00      	nop
 8001056:	37d0      	adds	r7, #208	@ 0xd0
 8001058:	46bd      	mov	sp, r7
 800105a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800105e:	bf00      	nop
 8001060:	40590000 	.word	0x40590000
 8001064:	51eb851f 	.word	0x51eb851f
 8001068:	0800a880 	.word	0x0800a880
 800106c:	40021800 	.word	0x40021800
 8001070:	200002c8 	.word	0x200002c8

08001074 <Scan_I2C_Addresses>:


void Scan_I2C_Addresses(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08e      	sub	sp, #56	@ 0x38
 8001078:	af00      	add	r7, sp, #0
    uint8_t i;
    uint8_t ret;
    char buffer[50];

    sprintf(buffer, "Scanning I2C addresses...\r\n");
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	492d      	ldr	r1, [pc, #180]	@ (8001134 <Scan_I2C_Addresses+0xc0>)
 800107e:	4618      	mov	r0, r3
 8001080:	f008 fbe2 	bl	8009848 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff f8a2 	bl	80001d0 <strlen>
 800108c:	4603      	mov	r3, r0
 800108e:	b29a      	uxth	r2, r3
 8001090:	1d39      	adds	r1, r7, #4
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	4828      	ldr	r0, [pc, #160]	@ (8001138 <Scan_I2C_Addresses+0xc4>)
 8001098:	f004 fb3c 	bl	8005714 <HAL_UART_Transmit>

    for(i = 1; i < 128; i++)
 800109c:	2301      	movs	r3, #1
 800109e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80010a2:	e02e      	b.n	8001102 <Scan_I2C_Addresses+0x8e>
    {
        ret = HAL_I2C_IsDeviceReady(&hi2c1, (i << 1), 2, 100);
 80010a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	b299      	uxth	r1, r3
 80010ae:	2364      	movs	r3, #100	@ 0x64
 80010b0:	2202      	movs	r2, #2
 80010b2:	4822      	ldr	r0, [pc, #136]	@ (800113c <Scan_I2C_Addresses+0xc8>)
 80010b4:	f001 ff2a 	bl	8002f0c <HAL_I2C_IsDeviceReady>
 80010b8:	4603      	mov	r3, r0
 80010ba:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

        if(ret == HAL_OK)
 80010be:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d118      	bne.n	80010f8 <Scan_I2C_Addresses+0x84>
        {
            sprintf(buffer, "I2C device found at address: 0x%02X\r\n", i);
 80010c6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	491c      	ldr	r1, [pc, #112]	@ (8001140 <Scan_I2C_Addresses+0xcc>)
 80010ce:	4618      	mov	r0, r3
 80010d0:	f008 fbba 	bl	8009848 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff f87a 	bl	80001d0 <strlen>
 80010dc:	4603      	mov	r3, r0
 80010de:	b29a      	uxth	r2, r3
 80010e0:	1d39      	adds	r1, r7, #4
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	4814      	ldr	r0, [pc, #80]	@ (8001138 <Scan_I2C_Addresses+0xc4>)
 80010e8:	f004 fb14 	bl	8005714 <HAL_UART_Transmit>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13,GPIO_PIN_SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010f2:	4814      	ldr	r0, [pc, #80]	@ (8001144 <Scan_I2C_Addresses+0xd0>)
 80010f4:	f001 fa66 	bl	80025c4 <HAL_GPIO_WritePin>
    for(i = 1; i < 128; i++)
 80010f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80010fc:	3301      	adds	r3, #1
 80010fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001102:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001106:	2b00      	cmp	r3, #0
 8001108:	dacc      	bge.n	80010a4 <Scan_I2C_Addresses+0x30>
        }
    }

    sprintf(buffer, "I2C scan completed\r\n");
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	490e      	ldr	r1, [pc, #56]	@ (8001148 <Scan_I2C_Addresses+0xd4>)
 800110e:	4618      	mov	r0, r3
 8001110:	f008 fb9a 	bl	8009848 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff f85a 	bl	80001d0 <strlen>
 800111c:	4603      	mov	r3, r0
 800111e:	b29a      	uxth	r2, r3
 8001120:	1d39      	adds	r1, r7, #4
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	4804      	ldr	r0, [pc, #16]	@ (8001138 <Scan_I2C_Addresses+0xc4>)
 8001128:	f004 faf4 	bl	8005714 <HAL_UART_Transmit>
}
 800112c:	bf00      	nop
 800112e:	3738      	adds	r7, #56	@ 0x38
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	0800a8a4 	.word	0x0800a8a4
 8001138:	200002c8 	.word	0x200002c8
 800113c:	2000021c 	.word	0x2000021c
 8001140:	0800a8c0 	.word	0x0800a8c0
 8001144:	40021800 	.word	0x40021800
 8001148:	0800a8e8 	.word	0x0800a8e8

0800114c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800114c:	b5b0      	push	{r4, r5, r7, lr}
 800114e:	b09c      	sub	sp, #112	@ 0x70
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001152:	f000 fef3 	bl	8001f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001156:	f000 f8d1 	bl	80012fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800115a:	f000 f961 	bl	8001420 <MX_GPIO_Init>
  MX_I2C1_Init();
 800115e:	f7ff feb9 	bl	8000ed4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001162:	f000 f933 	bl	80013cc <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8001166:	f007 ff37 	bl	8008fd8 <MX_USB_DEVICE_Init>

  Scan_I2C_Addresses();
 800116a:	f7ff ff83 	bl	8001074 <Scan_I2C_Addresses>

  uint8_t buffer[100] = "Starting MPU6050...\r\n";
 800116e:	4b5a      	ldr	r3, [pc, #360]	@ (80012d8 <main+0x18c>)
 8001170:	f107 0408 	add.w	r4, r7, #8
 8001174:	461d      	mov	r5, r3
 8001176:	6828      	ldr	r0, [r5, #0]
 8001178:	6869      	ldr	r1, [r5, #4]
 800117a:	68aa      	ldr	r2, [r5, #8]
 800117c:	68eb      	ldr	r3, [r5, #12]
 800117e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001180:	6928      	ldr	r0, [r5, #16]
 8001182:	6020      	str	r0, [r4, #0]
 8001184:	8aab      	ldrh	r3, [r5, #20]
 8001186:	80a3      	strh	r3, [r4, #4]
 8001188:	f107 031e 	add.w	r3, r7, #30
 800118c:	224e      	movs	r2, #78	@ 0x4e
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f008 fb7b 	bl	800988c <memset>
  HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 10);
 8001196:	f107 0308 	add.w	r3, r7, #8
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f818 	bl	80001d0 <strlen>
 80011a0:	4603      	mov	r3, r0
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	f107 0108 	add.w	r1, r7, #8
 80011a8:	230a      	movs	r3, #10
 80011aa:	484c      	ldr	r0, [pc, #304]	@ (80012dc <main+0x190>)
 80011ac:	f004 fab2 	bl	8005714 <HAL_UART_Transmit>

  /* USER CODE BEGIN 2 */
  uint8_t init_attempts = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

 while(MPU6050_Init(&hi2c1) == 1) {
 80011b6:	e01b      	b.n	80011f0 <main+0xa4>
   init_attempts++;
 80011b8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80011bc:	3301      	adds	r3, #1
 80011be:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
//   HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
    HAL_UART_Transmit(&huart1, (uint8_t *)"MPU6050 Init Failed, retrying...\r\n", 34, HAL_MAX_DELAY);
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	2222      	movs	r2, #34	@ 0x22
 80011c8:	4945      	ldr	r1, [pc, #276]	@ (80012e0 <main+0x194>)
 80011ca:	4844      	ldr	r0, [pc, #272]	@ (80012dc <main+0x190>)
 80011cc:	f004 faa2 	bl	8005714 <HAL_UART_Transmit>
   HAL_Delay(500);
 80011d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011d4:	f000 ff24 	bl	8002020 <HAL_Delay>
   if(init_attempts > 10) {
 80011d8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80011dc:	2b0a      	cmp	r3, #10
 80011de:	d907      	bls.n	80011f0 <main+0xa4>
     HAL_UART_Transmit(&huart1, (uint8_t *)"MPU6050 Init Failed permanently!\r\n", 35, HAL_MAX_DELAY);
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
 80011e4:	2223      	movs	r2, #35	@ 0x23
 80011e6:	493f      	ldr	r1, [pc, #252]	@ (80012e4 <main+0x198>)
 80011e8:	483c      	ldr	r0, [pc, #240]	@ (80012dc <main+0x190>)
 80011ea:	f004 fa93 	bl	8005714 <HAL_UART_Transmit>
//     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
     break;
 80011ee:	e005      	b.n	80011fc <main+0xb0>
 while(MPU6050_Init(&hi2c1) == 1) {
 80011f0:	483d      	ldr	r0, [pc, #244]	@ (80012e8 <main+0x19c>)
 80011f2:	f000 f989 	bl	8001508 <MPU6050_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d0dd      	beq.n	80011b8 <main+0x6c>
   }
 }

 if(init_attempts <= 10) {
 80011fc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001200:	2b0a      	cmp	r3, #10
 8001202:	d806      	bhi.n	8001212 <main+0xc6>
	 HAL_UART_Transmit(&huart1, (uint8_t *)"MPU6050 Initialized Successfully!\r\n", 36, HAL_MAX_DELAY);
 8001204:	f04f 33ff 	mov.w	r3, #4294967295
 8001208:	2224      	movs	r2, #36	@ 0x24
 800120a:	4938      	ldr	r1, [pc, #224]	@ (80012ec <main+0x1a0>)
 800120c:	4833      	ldr	r0, [pc, #204]	@ (80012dc <main+0x190>)
 800120e:	f004 fa81 	bl	8005714 <HAL_UART_Transmit>
//	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 }

 HAL_Delay(1000);
 8001212:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001216:	f000 ff03 	bl	8002020 <HAL_Delay>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	    MPU6050_Read_All(&hi2c1, &MPU6050);
 800121a:	4935      	ldr	r1, [pc, #212]	@ (80012f0 <main+0x1a4>)
 800121c:	4832      	ldr	r0, [pc, #200]	@ (80012e8 <main+0x19c>)
 800121e:	f000 f9cf 	bl	80015c0 <MPU6050_Read_All>
	    SendDataOverUART(&MPU6050);
 8001222:	4833      	ldr	r0, [pc, #204]	@ (80012f0 <main+0x1a4>)
 8001224:	f7ff fe84 	bl	8000f30 <SendDataOverUART>

	    int8_t xMove = (int8_t)(MPU6050.Ax / 1000.0f * sensitivity);
 8001228:	4b31      	ldr	r3, [pc, #196]	@ (80012f0 <main+0x1a4>)
 800122a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	4b30      	ldr	r3, [pc, #192]	@ (80012f4 <main+0x1a8>)
 8001234:	f7ff fb0a 	bl	800084c <__aeabi_ddiv>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4614      	mov	r4, r2
 800123e:	461d      	mov	r5, r3
 8001240:	230a      	movs	r3, #10
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f96e 	bl	8000524 <__aeabi_i2d>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4620      	mov	r0, r4
 800124e:	4629      	mov	r1, r5
 8001250:	f7ff f9d2 	bl	80005f8 <__aeabi_dmul>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f7ff fc7c 	bl	8000b58 <__aeabi_d2iz>
 8001260:	4603      	mov	r3, r0
 8001262:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	    int8_t yMove = (int8_t)(MPU6050.Ay / 1000.0f * sensitivity);
 8001266:	4b22      	ldr	r3, [pc, #136]	@ (80012f0 <main+0x1a4>)
 8001268:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	4b20      	ldr	r3, [pc, #128]	@ (80012f4 <main+0x1a8>)
 8001272:	f7ff faeb 	bl	800084c <__aeabi_ddiv>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4614      	mov	r4, r2
 800127c:	461d      	mov	r5, r3
 800127e:	230a      	movs	r3, #10
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f94f 	bl	8000524 <__aeabi_i2d>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4620      	mov	r0, r4
 800128c:	4629      	mov	r1, r5
 800128e:	f7ff f9b3 	bl	80005f8 <__aeabi_dmul>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	f7ff fc5d 	bl	8000b58 <__aeabi_d2iz>
 800129e:	4603      	mov	r3, r0
 80012a0:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

	    // Prepare HID report
	    uint8_t HID_Buffer[3] = {0};
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	2100      	movs	r1, #0
 80012a8:	460a      	mov	r2, r1
 80012aa:	801a      	strh	r2, [r3, #0]
 80012ac:	460a      	mov	r2, r1
 80012ae:	709a      	strb	r2, [r3, #2]
	    HID_Buffer[1] = xMove;
 80012b0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80012b4:	717b      	strb	r3, [r7, #5]
	    HID_Buffer[2] = -yMove;
 80012b6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80012ba:	425b      	negs	r3, r3
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	71bb      	strb	r3, [r7, #6]

	    // Send HID report
	    USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2203      	movs	r2, #3
 80012c4:	4619      	mov	r1, r3
 80012c6:	480c      	ldr	r0, [pc, #48]	@ (80012f8 <main+0x1ac>)
 80012c8:	f006 fae4 	bl	8007894 <USBD_HID_SendReport>
	    HAL_Delay(10);
 80012cc:	200a      	movs	r0, #10
 80012ce:	f000 fea7 	bl	8002020 <HAL_Delay>
  {
 80012d2:	bf00      	nop
 80012d4:	e7a1      	b.n	800121a <main+0xce>
 80012d6:	bf00      	nop
 80012d8:	0800a96c 	.word	0x0800a96c
 80012dc:	200002c8 	.word	0x200002c8
 80012e0:	0800a900 	.word	0x0800a900
 80012e4:	0800a924 	.word	0x0800a924
 80012e8:	2000021c 	.word	0x2000021c
 80012ec:	0800a948 	.word	0x0800a948
 80012f0:	20000270 	.word	0x20000270
 80012f4:	408f4000 	.word	0x408f4000
 80012f8:	20000320 	.word	0x20000320

080012fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b094      	sub	sp, #80	@ 0x50
 8001300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001302:	f107 0320 	add.w	r3, r7, #32
 8001306:	2230      	movs	r2, #48	@ 0x30
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f008 fabe 	bl	800988c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001320:	2300      	movs	r3, #0
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	4b27      	ldr	r3, [pc, #156]	@ (80013c4 <SystemClock_Config+0xc8>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001328:	4a26      	ldr	r2, [pc, #152]	@ (80013c4 <SystemClock_Config+0xc8>)
 800132a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800132e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001330:	4b24      	ldr	r3, [pc, #144]	@ (80013c4 <SystemClock_Config+0xc8>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800133c:	2300      	movs	r3, #0
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	4b21      	ldr	r3, [pc, #132]	@ (80013c8 <SystemClock_Config+0xcc>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a20      	ldr	r2, [pc, #128]	@ (80013c8 <SystemClock_Config+0xcc>)
 8001346:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	4b1e      	ldr	r3, [pc, #120]	@ (80013c8 <SystemClock_Config+0xcc>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001358:	2301      	movs	r3, #1
 800135a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800135c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001362:	2302      	movs	r3, #2
 8001364:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001366:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800136a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800136c:	2304      	movs	r3, #4
 800136e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001370:	2348      	movs	r3, #72	@ 0x48
 8001372:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001374:	2302      	movs	r3, #2
 8001376:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001378:	2303      	movs	r3, #3
 800137a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137c:	f107 0320 	add.w	r3, r7, #32
 8001380:	4618      	mov	r0, r3
 8001382:	f003 fcdf 	bl	8004d44 <HAL_RCC_OscConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800138c:	f000 f8b6 	bl	80014fc <Error_Handler>
//    Error_Handler();
//  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001390:	230f      	movs	r3, #15
 8001392:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001394:	2302      	movs	r3, #2
 8001396:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800139c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	2102      	movs	r1, #2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f003 ff41 	bl	8005234 <HAL_RCC_ClockConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013b8:	f000 f8a0 	bl	80014fc <Error_Handler>
  }
}
 80013bc:	bf00      	nop
 80013be:	3750      	adds	r7, #80	@ 0x50
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40007000 	.word	0x40007000

080013cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013d0:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <MX_USART1_UART_Init+0x4c>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	@ (800141c <MX_USART1_UART_Init+0x50>)
 80013d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013d6:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <MX_USART1_UART_Init+0x4c>)
 80013d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013de:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <MX_USART1_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <MX_USART1_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <MX_USART1_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013f0:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <MX_USART1_UART_Init+0x4c>)
 80013f2:	220c      	movs	r2, #12
 80013f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <MX_USART1_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <MX_USART1_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	@ (8001418 <MX_USART1_UART_Init+0x4c>)
 8001404:	f004 f936 	bl	8005674 <HAL_UART_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800140e:	f000 f875 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200002c8 	.word	0x200002c8
 800141c:	40011000 	.word	0x40011000

08001420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	@ 0x28
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	4b2d      	ldr	r3, [pc, #180]	@ (80014f0 <MX_GPIO_Init+0xd0>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a2c      	ldr	r2, [pc, #176]	@ (80014f0 <MX_GPIO_Init+0xd0>)
 8001440:	f043 0308 	orr.w	r3, r3, #8
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b2a      	ldr	r3, [pc, #168]	@ (80014f0 <MX_GPIO_Init+0xd0>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]


  // UART GPIO Configuration
  GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8001452:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001464:	2307      	movs	r3, #7
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	4821      	ldr	r0, [pc, #132]	@ (80014f4 <MX_GPIO_Init+0xd4>)
 8001470:	f000 ff0c 	bl	800228c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 8001474:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147a:	2301      	movs	r3, #1
 800147c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	481a      	ldr	r0, [pc, #104]	@ (80014f8 <MX_GPIO_Init+0xd8>)
 800148e:	f000 fefd 	bl	800228c <HAL_GPIO_Init>


  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	4b16      	ldr	r3, [pc, #88]	@ (80014f0 <MX_GPIO_Init+0xd0>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a15      	ldr	r2, [pc, #84]	@ (80014f0 <MX_GPIO_Init+0xd0>)
 800149c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b13      	ldr	r3, [pc, #76]	@ (80014f0 <MX_GPIO_Init+0xd0>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <MX_GPIO_Init+0xd0>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	4a0e      	ldr	r2, [pc, #56]	@ (80014f0 <MX_GPIO_Init+0xd0>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014be:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <MX_GPIO_Init+0xd0>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <MX_GPIO_Init+0xd0>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	4a07      	ldr	r2, [pc, #28]	@ (80014f0 <MX_GPIO_Init+0xd0>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014da:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <MX_GPIO_Init+0xd0>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]

  // NOTE: I2C GPIO configuration is now handled in HAL_I2C_MspInit()
  // Remove the I2C GPIO configuration from here to avoid conflicts

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014e6:	bf00      	nop
 80014e8:	3728      	adds	r7, #40	@ 0x28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020000 	.word	0x40020000
 80014f8:	40021800 	.word	0x40021800

080014fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001500:	b672      	cpsid	i
}
 8001502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <Error_Handler+0x8>

08001508 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af04      	add	r7, sp, #16
 800150e:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001510:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001514:	9302      	str	r3, [sp, #8]
 8001516:	2301      	movs	r3, #1
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	f107 030f 	add.w	r3, r7, #15
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	2301      	movs	r3, #1
 8001522:	2275      	movs	r2, #117	@ 0x75
 8001524:	21d0      	movs	r1, #208	@ 0xd0
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f001 fabe 	bl	8002aa8 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	2b68      	cmp	r3, #104	@ 0x68
 8001530:	d141      	bne.n	80015b6 <MPU6050_Init+0xae>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001536:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800153a:	9302      	str	r3, [sp, #8]
 800153c:	2301      	movs	r3, #1
 800153e:	9301      	str	r3, [sp, #4]
 8001540:	f107 030e 	add.w	r3, r7, #14
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	2301      	movs	r3, #1
 8001548:	226b      	movs	r2, #107	@ 0x6b
 800154a:	21d0      	movs	r1, #208	@ 0xd0
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f001 f9b1 	bl	80028b4 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001552:	2307      	movs	r3, #7
 8001554:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001556:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800155a:	9302      	str	r3, [sp, #8]
 800155c:	2301      	movs	r3, #1
 800155e:	9301      	str	r3, [sp, #4]
 8001560:	f107 030e 	add.w	r3, r7, #14
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	2301      	movs	r3, #1
 8001568:	2219      	movs	r2, #25
 800156a:	21d0      	movs	r1, #208	@ 0xd0
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f001 f9a1 	bl	80028b4 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001572:	2300      	movs	r3, #0
 8001574:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001576:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800157a:	9302      	str	r3, [sp, #8]
 800157c:	2301      	movs	r3, #1
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	f107 030e 	add.w	r3, r7, #14
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2301      	movs	r3, #1
 8001588:	221c      	movs	r2, #28
 800158a:	21d0      	movs	r1, #208	@ 0xd0
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f001 f991 	bl	80028b4 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001592:	2300      	movs	r3, #0
 8001594:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001596:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800159a:	9302      	str	r3, [sp, #8]
 800159c:	2301      	movs	r3, #1
 800159e:	9301      	str	r3, [sp, #4]
 80015a0:	f107 030e 	add.w	r3, r7, #14
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	2301      	movs	r3, #1
 80015a8:	221b      	movs	r2, #27
 80015aa:	21d0      	movs	r1, #208	@ 0xd0
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f001 f981 	bl	80028b4 <HAL_I2C_Mem_Write>
        return 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e000      	b.n	80015b8 <MPU6050_Init+0xb0>
    }
    return 1;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80015c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015c4:	b094      	sub	sp, #80	@ 0x50
 80015c6:	af04      	add	r7, sp, #16
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80015cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015d0:	9302      	str	r3, [sp, #8]
 80015d2:	230e      	movs	r3, #14
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	f107 0308 	add.w	r3, r7, #8
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2301      	movs	r3, #1
 80015de:	223b      	movs	r2, #59	@ 0x3b
 80015e0:	21d0      	movs	r1, #208	@ 0xd0
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f001 fa60 	bl	8002aa8 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80015e8:	7a3b      	ldrb	r3, [r7, #8]
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	7a7b      	ldrb	r3, [r7, #9]
 80015f2:	b21b      	sxth	r3, r3
 80015f4:	4313      	orrs	r3, r2
 80015f6:	b21a      	sxth	r2, r3
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80015fc:	7abb      	ldrb	r3, [r7, #10]
 80015fe:	b21b      	sxth	r3, r3
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	b21a      	sxth	r2, r3
 8001604:	7afb      	ldrb	r3, [r7, #11]
 8001606:	b21b      	sxth	r3, r3
 8001608:	4313      	orrs	r3, r2
 800160a:	b21a      	sxth	r2, r3
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001610:	7b3b      	ldrb	r3, [r7, #12]
 8001612:	b21b      	sxth	r3, r3
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	b21a      	sxth	r2, r3
 8001618:	7b7b      	ldrb	r3, [r7, #13]
 800161a:	b21b      	sxth	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	b21a      	sxth	r2, r3
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001624:	7bbb      	ldrb	r3, [r7, #14]
 8001626:	b21b      	sxth	r3, r3
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	b21a      	sxth	r2, r3
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	b21b      	sxth	r3, r3
 8001630:	4313      	orrs	r3, r2
 8001632:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001634:	7c3b      	ldrb	r3, [r7, #16]
 8001636:	b21b      	sxth	r3, r3
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	b21a      	sxth	r2, r3
 800163c:	7c7b      	ldrb	r3, [r7, #17]
 800163e:	b21b      	sxth	r3, r3
 8001640:	4313      	orrs	r3, r2
 8001642:	b21a      	sxth	r2, r3
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001648:	7cbb      	ldrb	r3, [r7, #18]
 800164a:	b21b      	sxth	r3, r3
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	b21a      	sxth	r2, r3
 8001650:	7cfb      	ldrb	r3, [r7, #19]
 8001652:	b21b      	sxth	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	b21a      	sxth	r2, r3
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 800165c:	7d3b      	ldrb	r3, [r7, #20]
 800165e:	b21b      	sxth	r3, r3
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	b21a      	sxth	r2, r3
 8001664:	7d7b      	ldrb	r3, [r7, #21]
 8001666:	b21b      	sxth	r3, r3
 8001668:	4313      	orrs	r3, r2
 800166a:	b21a      	sxth	r2, r3
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW * 981 / lsb;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001676:	461a      	mov	r2, r3
 8001678:	f240 33d5 	movw	r3, #981	@ 0x3d5
 800167c:	fb02 f303 	mul.w	r3, r2, r3
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe ff4f 	bl	8000524 <__aeabi_i2d>
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	4bc3      	ldr	r3, [pc, #780]	@ (8001998 <MPU6050_Read_All+0x3d8>)
 800168c:	f7ff f8de 	bl	800084c <__aeabi_ddiv>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	6839      	ldr	r1, [r7, #0]
 8001696:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW * 981 / lsb;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016a0:	461a      	mov	r2, r3
 80016a2:	f240 33d5 	movw	r3, #981	@ 0x3d5
 80016a6:	fb02 f303 	mul.w	r3, r2, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff3a 	bl	8000524 <__aeabi_i2d>
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	4bb8      	ldr	r3, [pc, #736]	@ (8001998 <MPU6050_Read_All+0x3d8>)
 80016b6:	f7ff f8c9 	bl	800084c <__aeabi_ddiv>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	6839      	ldr	r1, [r7, #0]
 80016c0:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW * 981 / Accel_Z_corrector;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016ca:	461a      	mov	r2, r3
 80016cc:	f240 33d5 	movw	r3, #981	@ 0x3d5
 80016d0:	fb02 f303 	mul.w	r3, r2, r3
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe ff25 	bl	8000524 <__aeabi_i2d>
 80016da:	a3a9      	add	r3, pc, #676	@ (adr r3, 8001980 <MPU6050_Read_All+0x3c0>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7ff f8b4 	bl	800084c <__aeabi_ddiv>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	6839      	ldr	r1, [r7, #0]
 80016ea:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 80016ee:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80016f2:	ee07 3a90 	vmov	s15, r3
 80016f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016fa:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 800199c <MPU6050_Read_All+0x3dc>
 80016fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001702:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 80019a0 <MPU6050_Read_All+0x3e0>
 8001706:	ee77 7a87 	vadd.f32	s15, s15, s14
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe ff04 	bl	8000524 <__aeabi_i2d>
 800171c:	a39a      	add	r3, pc, #616	@ (adr r3, 8001988 <MPU6050_Read_All+0x3c8>)
 800171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001722:	f7ff f893 	bl	800084c <__aeabi_ddiv>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	6839      	ldr	r1, [r7, #0]
 800172c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe fef4 	bl	8000524 <__aeabi_i2d>
 800173c:	a392      	add	r3, pc, #584	@ (adr r3, 8001988 <MPU6050_Read_All+0x3c8>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	f7ff f883 	bl	800084c <__aeabi_ddiv>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	6839      	ldr	r1, [r7, #0]
 800174c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fee4 	bl	8000524 <__aeabi_i2d>
 800175c:	a38a      	add	r3, pc, #552	@ (adr r3, 8001988 <MPU6050_Read_All+0x3c8>)
 800175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001762:	f7ff f873 	bl	800084c <__aeabi_ddiv>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	6839      	ldr	r1, [r7, #0]
 800176c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8001770:	f000 fc4a 	bl	8002008 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	4b8b      	ldr	r3, [pc, #556]	@ (80019a4 <MPU6050_Read_All+0x3e4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fec1 	bl	8000504 <__aeabi_ui2d>
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	4b88      	ldr	r3, [pc, #544]	@ (80019a8 <MPU6050_Read_All+0x3e8>)
 8001788:	f7ff f860 	bl	800084c <__aeabi_ddiv>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 8001794:	f000 fc38 	bl	8002008 <HAL_GetTick>
 8001798:	4603      	mov	r3, r0
 800179a:	4a82      	ldr	r2, [pc, #520]	@ (80019a4 <MPU6050_Read_All+0x3e4>)
 800179c:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a4:	461a      	mov	r2, r3
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ac:	fb03 f202 	mul.w	r2, r3, r2
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017b6:	4619      	mov	r1, r3
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017be:	fb01 f303 	mul.w	r3, r1, r3
 80017c2:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fead 	bl	8000524 <__aeabi_i2d>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	ec43 2b10 	vmov	d0, r2, r3
 80017d2:	f008 fcdb 	bl	800a18c <sqrt>
 80017d6:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017e6:	f7ff f96f 	bl	8000ac8 <__aeabi_dcmpeq>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d11f      	bne.n	8001830 <MPU6050_Read_All+0x270>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fe94 	bl	8000524 <__aeabi_i2d>
 80017fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001800:	f7ff f824 	bl	800084c <__aeabi_ddiv>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	ec43 2b17 	vmov	d7, r2, r3
 800180c:	eeb0 0a47 	vmov.f32	s0, s14
 8001810:	eef0 0a67 	vmov.f32	s1, s15
 8001814:	f008 fce8 	bl	800a1e8 <atan>
 8001818:	ec51 0b10 	vmov	r0, r1, d0
 800181c:	a35c      	add	r3, pc, #368	@ (adr r3, 8001990 <MPU6050_Read_All+0x3d0>)
 800181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001822:	f7fe fee9 	bl	80005f8 <__aeabi_dmul>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 800182e:	e005      	b.n	800183c <MPU6050_Read_All+0x27c>
    } else {
        roll = 0.0;
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001842:	425b      	negs	r3, r3
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fe6d 	bl	8000524 <__aeabi_i2d>
 800184a:	4682      	mov	sl, r0
 800184c:	468b      	mov	fp, r1
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fe65 	bl	8000524 <__aeabi_i2d>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	ec43 2b11 	vmov	d1, r2, r3
 8001862:	ec4b ab10 	vmov	d0, sl, fp
 8001866:	f008 fc8f 	bl	800a188 <atan2>
 800186a:	ec51 0b10 	vmov	r0, r1, d0
 800186e:	a348      	add	r3, pc, #288	@ (adr r3, 8001990 <MPU6050_Read_All+0x3d0>)
 8001870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001874:	f7fe fec0 	bl	80005f8 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	4b49      	ldr	r3, [pc, #292]	@ (80019ac <MPU6050_Read_All+0x3ec>)
 8001886:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800188a:	f7ff f927 	bl	8000adc <__aeabi_dcmplt>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00a      	beq.n	80018aa <MPU6050_Read_All+0x2ea>
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	4b44      	ldr	r3, [pc, #272]	@ (80019b0 <MPU6050_Read_All+0x3f0>)
 80018a0:	f7ff f93a 	bl	8000b18 <__aeabi_dcmpgt>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d114      	bne.n	80018d4 <MPU6050_Read_All+0x314>
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	4b40      	ldr	r3, [pc, #256]	@ (80019b0 <MPU6050_Read_All+0x3f0>)
 80018b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80018b4:	f7ff f930 	bl	8000b18 <__aeabi_dcmpgt>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d015      	beq.n	80018ea <MPU6050_Read_All+0x32a>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	4b38      	ldr	r3, [pc, #224]	@ (80019ac <MPU6050_Read_All+0x3ec>)
 80018ca:	f7ff f907 	bl	8000adc <__aeabi_dcmplt>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00a      	beq.n	80018ea <MPU6050_Read_All+0x32a>
        KalmanY.angle = pitch;
 80018d4:	4937      	ldr	r1, [pc, #220]	@ (80019b4 <MPU6050_Read_All+0x3f4>)
 80018d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018da:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80018de:	6839      	ldr	r1, [r7, #0]
 80018e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018e4:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 80018e8:	e014      	b.n	8001914 <MPU6050_Read_All+0x354>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 80018f0:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 80018f4:	eeb0 1a47 	vmov.f32	s2, s14
 80018f8:	eef0 1a67 	vmov.f32	s3, s15
 80018fc:	ed97 0b06 	vldr	d0, [r7, #24]
 8001900:	482c      	ldr	r0, [pc, #176]	@ (80019b4 <MPU6050_Read_All+0x3f4>)
 8001902:	f000 f85b 	bl	80019bc <Kalman_getAngle>
 8001906:	eeb0 7a40 	vmov.f32	s14, s0
 800190a:	eef0 7a60 	vmov.f32	s15, s1
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800191a:	4690      	mov	r8, r2
 800191c:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	4b22      	ldr	r3, [pc, #136]	@ (80019b0 <MPU6050_Read_All+0x3f0>)
 8001926:	4640      	mov	r0, r8
 8001928:	4649      	mov	r1, r9
 800192a:	f7ff f8f5 	bl	8000b18 <__aeabi_dcmpgt>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d008      	beq.n	8001946 <MPU6050_Read_All+0x386>
        DataStruct->Gx = -DataStruct->Gx;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800193a:	4614      	mov	r4, r2
 800193c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 800194c:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8001950:	eeb0 1a47 	vmov.f32	s2, s14
 8001954:	eef0 1a67 	vmov.f32	s3, s15
 8001958:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 800195c:	4816      	ldr	r0, [pc, #88]	@ (80019b8 <MPU6050_Read_All+0x3f8>)
 800195e:	f000 f82d 	bl	80019bc <Kalman_getAngle>
 8001962:	eeb0 7a40 	vmov.f32	s14, s0
 8001966:	eef0 7a60 	vmov.f32	s15, s1
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48

}
 8001970:	bf00      	nop
 8001972:	3740      	adds	r7, #64	@ 0x40
 8001974:	46bd      	mov	sp, r7
 8001976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800197a:	bf00      	nop
 800197c:	f3af 8000 	nop.w
 8001980:	00000000 	.word	0x00000000
 8001984:	40cc2900 	.word	0x40cc2900
 8001988:	00000000 	.word	0x00000000
 800198c:	40606000 	.word	0x40606000
 8001990:	1a63c1f8 	.word	0x1a63c1f8
 8001994:	404ca5dc 	.word	0x404ca5dc
 8001998:	40d00000 	.word	0x40d00000
 800199c:	43aa0000 	.word	0x43aa0000
 80019a0:	42121eb8 	.word	0x42121eb8
 80019a4:	20000310 	.word	0x20000310
 80019a8:	408f4000 	.word	0x408f4000
 80019ac:	c0568000 	.word	0xc0568000
 80019b0:	40568000 	.word	0x40568000
 80019b4:	20000048 	.word	0x20000048
 80019b8:	20000000 	.word	0x20000000

080019bc <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 80019bc:	b5b0      	push	{r4, r5, r7, lr}
 80019be:	b096      	sub	sp, #88	@ 0x58
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	61f8      	str	r0, [r7, #28]
 80019c4:	ed87 0b04 	vstr	d0, [r7, #16]
 80019c8:	ed87 1b02 	vstr	d1, [r7, #8]
 80019cc:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80019d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019da:	f7fe fc55 	bl	8000288 <__aeabi_dsub>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80019ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80019f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019f4:	f7fe fe00 	bl	80005f8 <__aeabi_dmul>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4620      	mov	r0, r4
 80019fe:	4629      	mov	r1, r5
 8001a00:	f7fe fc44 	bl	800028c <__adddf3>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	69f9      	ldr	r1, [r7, #28]
 8001a0a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001a1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a1e:	f7fe fdeb 	bl	80005f8 <__aeabi_dmul>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001a30:	f7fe fc2a 	bl	8000288 <__aeabi_dsub>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001a42:	f7fe fc21 	bl	8000288 <__aeabi_dsub>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	f7fe fc1a 	bl	800028c <__adddf3>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a64:	f7fe fdc8 	bl	80005f8 <__aeabi_dmul>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	4629      	mov	r1, r5
 8001a70:	f7fe fc0c 	bl	800028c <__adddf3>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	69f9      	ldr	r1, [r7, #28]
 8001a7a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001a8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a8e:	f7fe fdb3 	bl	80005f8 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4620      	mov	r0, r4
 8001a98:	4629      	mov	r1, r5
 8001a9a:	f7fe fbf5 	bl	8000288 <__aeabi_dsub>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	69f9      	ldr	r1, [r7, #28]
 8001aa4:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001ab4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ab8:	f7fe fd9e 	bl	80005f8 <__aeabi_dmul>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	4629      	mov	r1, r5
 8001ac4:	f7fe fbe0 	bl	8000288 <__aeabi_dsub>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	69f9      	ldr	r1, [r7, #28]
 8001ace:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ade:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ae2:	f7fe fd89 	bl	80005f8 <__aeabi_dmul>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4620      	mov	r0, r4
 8001aec:	4629      	mov	r1, r5
 8001aee:	f7fe fbcd 	bl	800028c <__adddf3>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	69f9      	ldr	r1, [r7, #28]
 8001af8:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001b08:	f7fe fbc0 	bl	800028c <__adddf3>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001b1a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b1e:	f7fe fe95 	bl	800084c <__aeabi_ddiv>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001b30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b34:	f7fe fe8a 	bl	800084c <__aeabi_ddiv>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b46:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b4a:	f7fe fb9d 	bl	8000288 <__aeabi_dsub>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001b5c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001b64:	f7fe fd48 	bl	80005f8 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	4629      	mov	r1, r5
 8001b70:	f7fe fb8c 	bl	800028c <__adddf3>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	69f9      	ldr	r1, [r7, #28]
 8001b7a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001b84:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b88:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001b8c:	f7fe fd34 	bl	80005f8 <__aeabi_dmul>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4620      	mov	r0, r4
 8001b96:	4629      	mov	r1, r5
 8001b98:	f7fe fb78 	bl	800028c <__adddf3>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	69f9      	ldr	r1, [r7, #28]
 8001ba2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001bac:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001bb6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001bc0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001bc8:	f7fe fd16 	bl	80005f8 <__aeabi_dmul>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	f7fe fb58 	bl	8000288 <__aeabi_dsub>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	69f9      	ldr	r1, [r7, #28]
 8001bde:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001be8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001bf0:	f7fe fd02 	bl	80005f8 <__aeabi_dmul>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4620      	mov	r0, r4
 8001bfa:	4629      	mov	r1, r5
 8001bfc:	f7fe fb44 	bl	8000288 <__aeabi_dsub>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	69f9      	ldr	r1, [r7, #28]
 8001c06:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001c10:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001c18:	f7fe fcee 	bl	80005f8 <__aeabi_dmul>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4620      	mov	r0, r4
 8001c22:	4629      	mov	r1, r5
 8001c24:	f7fe fb30 	bl	8000288 <__aeabi_dsub>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	69f9      	ldr	r1, [r7, #28]
 8001c2e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001c38:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c3c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001c40:	f7fe fcda 	bl	80005f8 <__aeabi_dmul>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4620      	mov	r0, r4
 8001c4a:	4629      	mov	r1, r5
 8001c4c:	f7fe fb1c 	bl	8000288 <__aeabi_dsub>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	69f9      	ldr	r1, [r7, #28]
 8001c56:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001c60:	ec43 2b17 	vmov	d7, r2, r3
};
 8001c64:	eeb0 0a47 	vmov.f32	s0, s14
 8001c68:	eef0 0a67 	vmov.f32	s1, s15
 8001c6c:	3758      	adds	r7, #88	@ 0x58
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c82:	4a0f      	ldr	r2, [pc, #60]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	4a08      	ldr	r2, [pc, #32]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ca6:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800

08001cc4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	@ 0x28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a19      	ldr	r2, [pc, #100]	@ (8001d48 <HAL_I2C_MspInit+0x84>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d12b      	bne.n	8001d3e <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	4b18      	ldr	r3, [pc, #96]	@ (8001d4c <HAL_I2C_MspInit+0x88>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	4a17      	ldr	r2, [pc, #92]	@ (8001d4c <HAL_I2C_MspInit+0x88>)
 8001cf0:	f043 0302 	orr.w	r3, r3, #2
 8001cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf6:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <HAL_I2C_MspInit+0x88>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d02:	23c0      	movs	r3, #192	@ 0xc0
 8001d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d06:	2312      	movs	r3, #18
 8001d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d12:	2304      	movs	r3, #4
 8001d14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d16:	f107 0314 	add.w	r3, r7, #20
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	480c      	ldr	r0, [pc, #48]	@ (8001d50 <HAL_I2C_MspInit+0x8c>)
 8001d1e:	f000 fab5 	bl	800228c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	4b09      	ldr	r3, [pc, #36]	@ (8001d4c <HAL_I2C_MspInit+0x88>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	4a08      	ldr	r2, [pc, #32]	@ (8001d4c <HAL_I2C_MspInit+0x88>)
 8001d2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d32:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <HAL_I2C_MspInit+0x88>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001d3e:	bf00      	nop
 8001d40:	3728      	adds	r7, #40	@ 0x28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40005400 	.word	0x40005400
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40020400 	.word	0x40020400

08001d54 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	@ 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a19      	ldr	r2, [pc, #100]	@ (8001dd8 <HAL_UART_MspInit+0x84>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d12c      	bne.n	8001dd0 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	4b18      	ldr	r3, [pc, #96]	@ (8001ddc <HAL_UART_MspInit+0x88>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7e:	4a17      	ldr	r2, [pc, #92]	@ (8001ddc <HAL_UART_MspInit+0x88>)
 8001d80:	f043 0310 	orr.w	r3, r3, #16
 8001d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d86:	4b15      	ldr	r3, [pc, #84]	@ (8001ddc <HAL_UART_MspInit+0x88>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8a:	f003 0310 	and.w	r3, r3, #16
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b11      	ldr	r3, [pc, #68]	@ (8001ddc <HAL_UART_MspInit+0x88>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	4a10      	ldr	r2, [pc, #64]	@ (8001ddc <HAL_UART_MspInit+0x88>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da2:	4b0e      	ldr	r3, [pc, #56]	@ (8001ddc <HAL_UART_MspInit+0x88>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001dae:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dc0:	2307      	movs	r3, #7
 8001dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4805      	ldr	r0, [pc, #20]	@ (8001de0 <HAL_UART_MspInit+0x8c>)
 8001dcc:	f000 fa5e 	bl	800228c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001dd0:	bf00      	nop
 8001dd2:	3728      	adds	r7, #40	@ 0x28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40011000 	.word	0x40011000
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40020000 	.word	0x40020000

08001de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <NMI_Handler+0x4>

08001dec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <HardFault_Handler+0x4>

08001df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <MemManage_Handler+0x4>

08001dfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e00:	bf00      	nop
 8001e02:	e7fd      	b.n	8001e00 <BusFault_Handler+0x4>

08001e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <UsageFault_Handler+0x4>

08001e0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e3a:	f000 f8d1 	bl	8001fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e48:	4802      	ldr	r0, [pc, #8]	@ (8001e54 <OTG_FS_IRQHandler+0x10>)
 8001e4a:	f001 fe85 	bl	8003b58 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200007fc 	.word	0x200007fc

08001e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e60:	4a14      	ldr	r2, [pc, #80]	@ (8001eb4 <_sbrk+0x5c>)
 8001e62:	4b15      	ldr	r3, [pc, #84]	@ (8001eb8 <_sbrk+0x60>)
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e6c:	4b13      	ldr	r3, [pc, #76]	@ (8001ebc <_sbrk+0x64>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d102      	bne.n	8001e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e74:	4b11      	ldr	r3, [pc, #68]	@ (8001ebc <_sbrk+0x64>)
 8001e76:	4a12      	ldr	r2, [pc, #72]	@ (8001ec0 <_sbrk+0x68>)
 8001e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e7a:	4b10      	ldr	r3, [pc, #64]	@ (8001ebc <_sbrk+0x64>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d207      	bcs.n	8001e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e88:	f007 fd08 	bl	800989c <__errno>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	220c      	movs	r2, #12
 8001e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295
 8001e96:	e009      	b.n	8001eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e98:	4b08      	ldr	r3, [pc, #32]	@ (8001ebc <_sbrk+0x64>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e9e:	4b07      	ldr	r3, [pc, #28]	@ (8001ebc <_sbrk+0x64>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	4a05      	ldr	r2, [pc, #20]	@ (8001ebc <_sbrk+0x64>)
 8001ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20020000 	.word	0x20020000
 8001eb8:	00000400 	.word	0x00000400
 8001ebc:	20000314 	.word	0x20000314
 8001ec0:	20000e40 	.word	0x20000e40

08001ec4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec8:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <SystemInit+0x20>)
 8001eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ece:	4a05      	ldr	r2, [pc, #20]	@ (8001ee4 <SystemInit+0x20>)
 8001ed0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ed4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ee8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001eec:	f7ff ffea 	bl	8001ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ef0:	480c      	ldr	r0, [pc, #48]	@ (8001f24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ef2:	490d      	ldr	r1, [pc, #52]	@ (8001f28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8001f2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef8:	e002      	b.n	8001f00 <LoopCopyDataInit>

08001efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001efe:	3304      	adds	r3, #4

08001f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f04:	d3f9      	bcc.n	8001efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f06:	4a0a      	ldr	r2, [pc, #40]	@ (8001f30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f08:	4c0a      	ldr	r4, [pc, #40]	@ (8001f34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f0c:	e001      	b.n	8001f12 <LoopFillZerobss>

08001f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f10:	3204      	adds	r2, #4

08001f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f14:	d3fb      	bcc.n	8001f0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f16:	f007 fcc7 	bl	80098a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f1a:	f7ff f917 	bl	800114c <main>
  bx  lr    
 8001f1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f28:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001f2c:	0800aaa0 	.word	0x0800aaa0
  ldr r2, =_sbss
 8001f30:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8001f34:	20000e3c 	.word	0x20000e3c

08001f38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f38:	e7fe      	b.n	8001f38 <ADC_IRQHandler>
	...

08001f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f40:	4b0e      	ldr	r3, [pc, #56]	@ (8001f7c <HAL_Init+0x40>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0d      	ldr	r2, [pc, #52]	@ (8001f7c <HAL_Init+0x40>)
 8001f46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <HAL_Init+0x40>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0a      	ldr	r2, [pc, #40]	@ (8001f7c <HAL_Init+0x40>)
 8001f52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f58:	4b08      	ldr	r3, [pc, #32]	@ (8001f7c <HAL_Init+0x40>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a07      	ldr	r2, [pc, #28]	@ (8001f7c <HAL_Init+0x40>)
 8001f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f64:	2003      	movs	r0, #3
 8001f66:	f000 f94f 	bl	8002208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f6a:	200f      	movs	r0, #15
 8001f6c:	f000 f808 	bl	8001f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f70:	f7ff fe80 	bl	8001c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40023c00 	.word	0x40023c00

08001f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f88:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <HAL_InitTick+0x54>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b12      	ldr	r3, [pc, #72]	@ (8001fd8 <HAL_InitTick+0x58>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	4619      	mov	r1, r3
 8001f92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 f967 	bl	8002272 <HAL_SYSTICK_Config>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e00e      	b.n	8001fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b0f      	cmp	r3, #15
 8001fb2:	d80a      	bhi.n	8001fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fbc:	f000 f92f 	bl	800221e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc0:	4a06      	ldr	r2, [pc, #24]	@ (8001fdc <HAL_InitTick+0x5c>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e000      	b.n	8001fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000090 	.word	0x20000090
 8001fd8:	20000098 	.word	0x20000098
 8001fdc:	20000094 	.word	0x20000094

08001fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_IncTick+0x20>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <HAL_IncTick+0x24>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4413      	add	r3, r2
 8001ff0:	4a04      	ldr	r2, [pc, #16]	@ (8002004 <HAL_IncTick+0x24>)
 8001ff2:	6013      	str	r3, [r2, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000098 	.word	0x20000098
 8002004:	20000318 	.word	0x20000318

08002008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return uwTick;
 800200c:	4b03      	ldr	r3, [pc, #12]	@ (800201c <HAL_GetTick+0x14>)
 800200e:	681b      	ldr	r3, [r3, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	20000318 	.word	0x20000318

08002020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002028:	f7ff ffee 	bl	8002008 <HAL_GetTick>
 800202c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002038:	d005      	beq.n	8002046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800203a:	4b0a      	ldr	r3, [pc, #40]	@ (8002064 <HAL_Delay+0x44>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002046:	bf00      	nop
 8002048:	f7ff ffde 	bl	8002008 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	429a      	cmp	r2, r3
 8002056:	d8f7      	bhi.n	8002048 <HAL_Delay+0x28>
  {
  }
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000098 	.word	0x20000098

08002068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002078:	4b0c      	ldr	r3, [pc, #48]	@ (80020ac <__NVIC_SetPriorityGrouping+0x44>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002084:	4013      	ands	r3, r2
 8002086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002090:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209a:	4a04      	ldr	r2, [pc, #16]	@ (80020ac <__NVIC_SetPriorityGrouping+0x44>)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	60d3      	str	r3, [r2, #12]
}
 80020a0:	bf00      	nop
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b4:	4b04      	ldr	r3, [pc, #16]	@ (80020c8 <__NVIC_GetPriorityGrouping+0x18>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	0a1b      	lsrs	r3, r3, #8
 80020ba:	f003 0307 	and.w	r3, r3, #7
}
 80020be:	4618      	mov	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	db0b      	blt.n	80020f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	f003 021f 	and.w	r2, r3, #31
 80020e4:	4907      	ldr	r1, [pc, #28]	@ (8002104 <__NVIC_EnableIRQ+0x38>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	095b      	lsrs	r3, r3, #5
 80020ec:	2001      	movs	r0, #1
 80020ee:	fa00 f202 	lsl.w	r2, r0, r2
 80020f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000e100 	.word	0xe000e100

08002108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	6039      	str	r1, [r7, #0]
 8002112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002118:	2b00      	cmp	r3, #0
 800211a:	db0a      	blt.n	8002132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	b2da      	uxtb	r2, r3
 8002120:	490c      	ldr	r1, [pc, #48]	@ (8002154 <__NVIC_SetPriority+0x4c>)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	0112      	lsls	r2, r2, #4
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	440b      	add	r3, r1
 800212c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002130:	e00a      	b.n	8002148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4908      	ldr	r1, [pc, #32]	@ (8002158 <__NVIC_SetPriority+0x50>)
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	3b04      	subs	r3, #4
 8002140:	0112      	lsls	r2, r2, #4
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	440b      	add	r3, r1
 8002146:	761a      	strb	r2, [r3, #24]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000e100 	.word	0xe000e100
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	@ 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f1c3 0307 	rsb	r3, r3, #7
 8002176:	2b04      	cmp	r3, #4
 8002178:	bf28      	it	cs
 800217a:	2304      	movcs	r3, #4
 800217c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3304      	adds	r3, #4
 8002182:	2b06      	cmp	r3, #6
 8002184:	d902      	bls.n	800218c <NVIC_EncodePriority+0x30>
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3b03      	subs	r3, #3
 800218a:	e000      	b.n	800218e <NVIC_EncodePriority+0x32>
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002190:	f04f 32ff 	mov.w	r2, #4294967295
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43da      	mvns	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	401a      	ands	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a4:	f04f 31ff 	mov.w	r1, #4294967295
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	fa01 f303 	lsl.w	r3, r1, r3
 80021ae:	43d9      	mvns	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	4313      	orrs	r3, r2
         );
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3724      	adds	r7, #36	@ 0x24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021d4:	d301      	bcc.n	80021da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d6:	2301      	movs	r3, #1
 80021d8:	e00f      	b.n	80021fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021da:	4a0a      	ldr	r2, [pc, #40]	@ (8002204 <SysTick_Config+0x40>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e2:	210f      	movs	r1, #15
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295
 80021e8:	f7ff ff8e 	bl	8002108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ec:	4b05      	ldr	r3, [pc, #20]	@ (8002204 <SysTick_Config+0x40>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f2:	4b04      	ldr	r3, [pc, #16]	@ (8002204 <SysTick_Config+0x40>)
 80021f4:	2207      	movs	r2, #7
 80021f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	e000e010 	.word	0xe000e010

08002208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ff29 	bl	8002068 <__NVIC_SetPriorityGrouping>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af00      	add	r7, sp, #0
 8002224:	4603      	mov	r3, r0
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002230:	f7ff ff3e 	bl	80020b0 <__NVIC_GetPriorityGrouping>
 8002234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	6978      	ldr	r0, [r7, #20]
 800223c:	f7ff ff8e 	bl	800215c <NVIC_EncodePriority>
 8002240:	4602      	mov	r2, r0
 8002242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff5d 	bl	8002108 <__NVIC_SetPriority>
}
 800224e:	bf00      	nop
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	4603      	mov	r3, r0
 800225e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff31 	bl	80020cc <__NVIC_EnableIRQ>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff ffa2 	bl	80021c4 <SysTick_Config>
 8002280:	4603      	mov	r3, r0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800228c:	b480      	push	{r7}
 800228e:	b089      	sub	sp, #36	@ 0x24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800229e:	2300      	movs	r3, #0
 80022a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	e16b      	b.n	8002580 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022a8:	2201      	movs	r2, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4013      	ands	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	f040 815a 	bne.w	800257a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d005      	beq.n	80022de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d130      	bne.n	8002340 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	2203      	movs	r2, #3
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002314:	2201      	movs	r2, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	091b      	lsrs	r3, r3, #4
 800232a:	f003 0201 	and.w	r2, r3, #1
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	2b03      	cmp	r3, #3
 800234a:	d017      	beq.n	800237c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	2203      	movs	r2, #3
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d123      	bne.n	80023d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	08da      	lsrs	r2, r3, #3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3208      	adds	r2, #8
 8002390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002394:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	220f      	movs	r2, #15
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	691a      	ldr	r2, [r3, #16]
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	08da      	lsrs	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3208      	adds	r2, #8
 80023ca:	69b9      	ldr	r1, [r7, #24]
 80023cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	2203      	movs	r2, #3
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0203 	and.w	r2, r3, #3
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80b4 	beq.w	800257a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	4b60      	ldr	r3, [pc, #384]	@ (8002598 <HAL_GPIO_Init+0x30c>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241a:	4a5f      	ldr	r2, [pc, #380]	@ (8002598 <HAL_GPIO_Init+0x30c>)
 800241c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002420:	6453      	str	r3, [r2, #68]	@ 0x44
 8002422:	4b5d      	ldr	r3, [pc, #372]	@ (8002598 <HAL_GPIO_Init+0x30c>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002426:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800242e:	4a5b      	ldr	r2, [pc, #364]	@ (800259c <HAL_GPIO_Init+0x310>)
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	089b      	lsrs	r3, r3, #2
 8002434:	3302      	adds	r3, #2
 8002436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	220f      	movs	r2, #15
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a52      	ldr	r2, [pc, #328]	@ (80025a0 <HAL_GPIO_Init+0x314>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d02b      	beq.n	80024b2 <HAL_GPIO_Init+0x226>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a51      	ldr	r2, [pc, #324]	@ (80025a4 <HAL_GPIO_Init+0x318>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d025      	beq.n	80024ae <HAL_GPIO_Init+0x222>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a50      	ldr	r2, [pc, #320]	@ (80025a8 <HAL_GPIO_Init+0x31c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d01f      	beq.n	80024aa <HAL_GPIO_Init+0x21e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a4f      	ldr	r2, [pc, #316]	@ (80025ac <HAL_GPIO_Init+0x320>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d019      	beq.n	80024a6 <HAL_GPIO_Init+0x21a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a4e      	ldr	r2, [pc, #312]	@ (80025b0 <HAL_GPIO_Init+0x324>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d013      	beq.n	80024a2 <HAL_GPIO_Init+0x216>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a4d      	ldr	r2, [pc, #308]	@ (80025b4 <HAL_GPIO_Init+0x328>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d00d      	beq.n	800249e <HAL_GPIO_Init+0x212>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a4c      	ldr	r2, [pc, #304]	@ (80025b8 <HAL_GPIO_Init+0x32c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d007      	beq.n	800249a <HAL_GPIO_Init+0x20e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4b      	ldr	r2, [pc, #300]	@ (80025bc <HAL_GPIO_Init+0x330>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d101      	bne.n	8002496 <HAL_GPIO_Init+0x20a>
 8002492:	2307      	movs	r3, #7
 8002494:	e00e      	b.n	80024b4 <HAL_GPIO_Init+0x228>
 8002496:	2308      	movs	r3, #8
 8002498:	e00c      	b.n	80024b4 <HAL_GPIO_Init+0x228>
 800249a:	2306      	movs	r3, #6
 800249c:	e00a      	b.n	80024b4 <HAL_GPIO_Init+0x228>
 800249e:	2305      	movs	r3, #5
 80024a0:	e008      	b.n	80024b4 <HAL_GPIO_Init+0x228>
 80024a2:	2304      	movs	r3, #4
 80024a4:	e006      	b.n	80024b4 <HAL_GPIO_Init+0x228>
 80024a6:	2303      	movs	r3, #3
 80024a8:	e004      	b.n	80024b4 <HAL_GPIO_Init+0x228>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e002      	b.n	80024b4 <HAL_GPIO_Init+0x228>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_GPIO_Init+0x228>
 80024b2:	2300      	movs	r3, #0
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	f002 0203 	and.w	r2, r2, #3
 80024ba:	0092      	lsls	r2, r2, #2
 80024bc:	4093      	lsls	r3, r2
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024c4:	4935      	ldr	r1, [pc, #212]	@ (800259c <HAL_GPIO_Init+0x310>)
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	3302      	adds	r3, #2
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024d2:	4b3b      	ldr	r3, [pc, #236]	@ (80025c0 <HAL_GPIO_Init+0x334>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	43db      	mvns	r3, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4013      	ands	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024f6:	4a32      	ldr	r2, [pc, #200]	@ (80025c0 <HAL_GPIO_Init+0x334>)
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024fc:	4b30      	ldr	r3, [pc, #192]	@ (80025c0 <HAL_GPIO_Init+0x334>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002520:	4a27      	ldr	r2, [pc, #156]	@ (80025c0 <HAL_GPIO_Init+0x334>)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002526:	4b26      	ldr	r3, [pc, #152]	@ (80025c0 <HAL_GPIO_Init+0x334>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800254a:	4a1d      	ldr	r2, [pc, #116]	@ (80025c0 <HAL_GPIO_Init+0x334>)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002550:	4b1b      	ldr	r3, [pc, #108]	@ (80025c0 <HAL_GPIO_Init+0x334>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002574:	4a12      	ldr	r2, [pc, #72]	@ (80025c0 <HAL_GPIO_Init+0x334>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3301      	adds	r3, #1
 800257e:	61fb      	str	r3, [r7, #28]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	2b0f      	cmp	r3, #15
 8002584:	f67f ae90 	bls.w	80022a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	3724      	adds	r7, #36	@ 0x24
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800
 800259c:	40013800 	.word	0x40013800
 80025a0:	40020000 	.word	0x40020000
 80025a4:	40020400 	.word	0x40020400
 80025a8:	40020800 	.word	0x40020800
 80025ac:	40020c00 	.word	0x40020c00
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40021400 	.word	0x40021400
 80025b8:	40021800 	.word	0x40021800
 80025bc:	40021c00 	.word	0x40021c00
 80025c0:	40013c00 	.word	0x40013c00

080025c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
 80025d0:	4613      	mov	r3, r2
 80025d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d4:	787b      	ldrb	r3, [r7, #1]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025e0:	e003      	b.n	80025ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025e2:	887b      	ldrh	r3, [r7, #2]
 80025e4:	041a      	lsls	r2, r3, #16
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	619a      	str	r2, [r3, #24]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b085      	sub	sp, #20
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	460b      	mov	r3, r1
 8002600:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002608:	887a      	ldrh	r2, [r7, #2]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4013      	ands	r3, r2
 800260e:	041a      	lsls	r2, r3, #16
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	43d9      	mvns	r1, r3
 8002614:	887b      	ldrh	r3, [r7, #2]
 8002616:	400b      	ands	r3, r1
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	619a      	str	r2, [r3, #24]
}
 800261e:	bf00      	nop
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e12b      	b.n	8002896 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff fb36 	bl	8001cc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2224      	movs	r2, #36	@ 0x24
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0201 	bic.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800267e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800268e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002690:	f002 ffc8 	bl	8005624 <HAL_RCC_GetPCLK1Freq>
 8002694:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4a81      	ldr	r2, [pc, #516]	@ (80028a0 <HAL_I2C_Init+0x274>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d807      	bhi.n	80026b0 <HAL_I2C_Init+0x84>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4a80      	ldr	r2, [pc, #512]	@ (80028a4 <HAL_I2C_Init+0x278>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	bf94      	ite	ls
 80026a8:	2301      	movls	r3, #1
 80026aa:	2300      	movhi	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	e006      	b.n	80026be <HAL_I2C_Init+0x92>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4a7d      	ldr	r2, [pc, #500]	@ (80028a8 <HAL_I2C_Init+0x27c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	bf94      	ite	ls
 80026b8:	2301      	movls	r3, #1
 80026ba:	2300      	movhi	r3, #0
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e0e7      	b.n	8002896 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4a78      	ldr	r2, [pc, #480]	@ (80028ac <HAL_I2C_Init+0x280>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	0c9b      	lsrs	r3, r3, #18
 80026d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	4a6a      	ldr	r2, [pc, #424]	@ (80028a0 <HAL_I2C_Init+0x274>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d802      	bhi.n	8002700 <HAL_I2C_Init+0xd4>
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	3301      	adds	r3, #1
 80026fe:	e009      	b.n	8002714 <HAL_I2C_Init+0xe8>
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002706:	fb02 f303 	mul.w	r3, r2, r3
 800270a:	4a69      	ldr	r2, [pc, #420]	@ (80028b0 <HAL_I2C_Init+0x284>)
 800270c:	fba2 2303 	umull	r2, r3, r2, r3
 8002710:	099b      	lsrs	r3, r3, #6
 8002712:	3301      	adds	r3, #1
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	430b      	orrs	r3, r1
 800271a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002726:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	495c      	ldr	r1, [pc, #368]	@ (80028a0 <HAL_I2C_Init+0x274>)
 8002730:	428b      	cmp	r3, r1
 8002732:	d819      	bhi.n	8002768 <HAL_I2C_Init+0x13c>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1e59      	subs	r1, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002742:	1c59      	adds	r1, r3, #1
 8002744:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002748:	400b      	ands	r3, r1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <HAL_I2C_Init+0x138>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1e59      	subs	r1, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	fbb1 f3f3 	udiv	r3, r1, r3
 800275c:	3301      	adds	r3, #1
 800275e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002762:	e051      	b.n	8002808 <HAL_I2C_Init+0x1dc>
 8002764:	2304      	movs	r3, #4
 8002766:	e04f      	b.n	8002808 <HAL_I2C_Init+0x1dc>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d111      	bne.n	8002794 <HAL_I2C_Init+0x168>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1e58      	subs	r0, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6859      	ldr	r1, [r3, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	440b      	add	r3, r1
 800277e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002782:	3301      	adds	r3, #1
 8002784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002788:	2b00      	cmp	r3, #0
 800278a:	bf0c      	ite	eq
 800278c:	2301      	moveq	r3, #1
 800278e:	2300      	movne	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	e012      	b.n	80027ba <HAL_I2C_Init+0x18e>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	1e58      	subs	r0, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6859      	ldr	r1, [r3, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	0099      	lsls	r1, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027aa:	3301      	adds	r3, #1
 80027ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bf0c      	ite	eq
 80027b4:	2301      	moveq	r3, #1
 80027b6:	2300      	movne	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_I2C_Init+0x196>
 80027be:	2301      	movs	r3, #1
 80027c0:	e022      	b.n	8002808 <HAL_I2C_Init+0x1dc>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10e      	bne.n	80027e8 <HAL_I2C_Init+0x1bc>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1e58      	subs	r0, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6859      	ldr	r1, [r3, #4]
 80027d2:	460b      	mov	r3, r1
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	440b      	add	r3, r1
 80027d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027dc:	3301      	adds	r3, #1
 80027de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027e6:	e00f      	b.n	8002808 <HAL_I2C_Init+0x1dc>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	1e58      	subs	r0, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6859      	ldr	r1, [r3, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	0099      	lsls	r1, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80027fe:	3301      	adds	r3, #1
 8002800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002804:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	6809      	ldr	r1, [r1, #0]
 800280c:	4313      	orrs	r3, r2
 800280e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69da      	ldr	r2, [r3, #28]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002836:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6911      	ldr	r1, [r2, #16]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	68d2      	ldr	r2, [r2, #12]
 8002842:	4311      	orrs	r1, r2
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	430b      	orrs	r3, r1
 800284a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695a      	ldr	r2, [r3, #20]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2220      	movs	r2, #32
 8002882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	000186a0 	.word	0x000186a0
 80028a4:	001e847f 	.word	0x001e847f
 80028a8:	003d08ff 	.word	0x003d08ff
 80028ac:	431bde83 	.word	0x431bde83
 80028b0:	10624dd3 	.word	0x10624dd3

080028b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	4608      	mov	r0, r1
 80028be:	4611      	mov	r1, r2
 80028c0:	461a      	mov	r2, r3
 80028c2:	4603      	mov	r3, r0
 80028c4:	817b      	strh	r3, [r7, #10]
 80028c6:	460b      	mov	r3, r1
 80028c8:	813b      	strh	r3, [r7, #8]
 80028ca:	4613      	mov	r3, r2
 80028cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028ce:	f7ff fb9b 	bl	8002008 <HAL_GetTick>
 80028d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b20      	cmp	r3, #32
 80028de:	f040 80d9 	bne.w	8002a94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	2319      	movs	r3, #25
 80028e8:	2201      	movs	r2, #1
 80028ea:	496d      	ldr	r1, [pc, #436]	@ (8002aa0 <HAL_I2C_Mem_Write+0x1ec>)
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 fdb9 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80028f8:	2302      	movs	r3, #2
 80028fa:	e0cc      	b.n	8002a96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_I2C_Mem_Write+0x56>
 8002906:	2302      	movs	r3, #2
 8002908:	e0c5      	b.n	8002a96 <HAL_I2C_Mem_Write+0x1e2>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b01      	cmp	r3, #1
 800291e:	d007      	beq.n	8002930 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0201 	orr.w	r2, r2, #1
 800292e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800293e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2221      	movs	r2, #33	@ 0x21
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2240      	movs	r2, #64	@ 0x40
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a3a      	ldr	r2, [r7, #32]
 800295a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002960:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4a4d      	ldr	r2, [pc, #308]	@ (8002aa4 <HAL_I2C_Mem_Write+0x1f0>)
 8002970:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002972:	88f8      	ldrh	r0, [r7, #6]
 8002974:	893a      	ldrh	r2, [r7, #8]
 8002976:	8979      	ldrh	r1, [r7, #10]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	9301      	str	r3, [sp, #4]
 800297c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	4603      	mov	r3, r0
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 fbf0 	bl	8003168 <I2C_RequestMemoryWrite>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d052      	beq.n	8002a34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e081      	b.n	8002a96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 fe7e 	bl	8003698 <I2C_WaitOnTXEFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00d      	beq.n	80029be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d107      	bne.n	80029ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e06b      	b.n	8002a96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c2:	781a      	ldrb	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d11b      	bne.n	8002a34 <HAL_I2C_Mem_Write+0x180>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d017      	beq.n	8002a34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a08:	781a      	ldrb	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1aa      	bne.n	8002992 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 fe71 	bl	8003728 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00d      	beq.n	8002a68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d107      	bne.n	8002a64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e016      	b.n	8002a96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	e000      	b.n	8002a96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a94:	2302      	movs	r3, #2
  }
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	00100002 	.word	0x00100002
 8002aa4:	ffff0000 	.word	0xffff0000

08002aa8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08c      	sub	sp, #48	@ 0x30
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	4608      	mov	r0, r1
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	817b      	strh	r3, [r7, #10]
 8002aba:	460b      	mov	r3, r1
 8002abc:	813b      	strh	r3, [r7, #8]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ac2:	f7ff faa1 	bl	8002008 <HAL_GetTick>
 8002ac6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	f040 8214 	bne.w	8002efe <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	2319      	movs	r3, #25
 8002adc:	2201      	movs	r2, #1
 8002ade:	497b      	ldr	r1, [pc, #492]	@ (8002ccc <HAL_I2C_Mem_Read+0x224>)
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 fcbf 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002aec:	2302      	movs	r3, #2
 8002aee:	e207      	b.n	8002f00 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_I2C_Mem_Read+0x56>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e200      	b.n	8002f00 <HAL_I2C_Mem_Read+0x458>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d007      	beq.n	8002b24 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2222      	movs	r2, #34	@ 0x22
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2240      	movs	r2, #64	@ 0x40
 8002b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002b54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4a5b      	ldr	r2, [pc, #364]	@ (8002cd0 <HAL_I2C_Mem_Read+0x228>)
 8002b64:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b66:	88f8      	ldrh	r0, [r7, #6]
 8002b68:	893a      	ldrh	r2, [r7, #8]
 8002b6a:	8979      	ldrh	r1, [r7, #10]
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6e:	9301      	str	r3, [sp, #4]
 8002b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	4603      	mov	r3, r0
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 fb8c 	bl	8003294 <I2C_RequestMemoryRead>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e1bc      	b.n	8002f00 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d113      	bne.n	8002bb6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8e:	2300      	movs	r3, #0
 8002b90:	623b      	str	r3, [r7, #32]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	623b      	str	r3, [r7, #32]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	623b      	str	r3, [r7, #32]
 8002ba2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	e190      	b.n	8002ed8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d11b      	bne.n	8002bf6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	e170      	b.n	8002ed8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d11b      	bne.n	8002c36 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61bb      	str	r3, [r7, #24]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	61bb      	str	r3, [r7, #24]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	61bb      	str	r3, [r7, #24]
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	e150      	b.n	8002ed8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c4c:	e144      	b.n	8002ed8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	f200 80f1 	bhi.w	8002e3a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d123      	bne.n	8002ca8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c62:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 fda7 	bl	80037b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e145      	b.n	8002f00 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691a      	ldr	r2, [r3, #16]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ca6:	e117      	b.n	8002ed8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d14e      	bne.n	8002d4e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	4906      	ldr	r1, [pc, #24]	@ (8002cd4 <HAL_I2C_Mem_Read+0x22c>)
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 fbd2 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d008      	beq.n	8002cd8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e11a      	b.n	8002f00 <HAL_I2C_Mem_Read+0x458>
 8002cca:	bf00      	nop
 8002ccc:	00100002 	.word	0x00100002
 8002cd0:	ffff0000 	.word	0xffff0000
 8002cd4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ce6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d4c:	e0c4      	b.n	8002ed8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d54:	2200      	movs	r2, #0
 8002d56:	496c      	ldr	r1, [pc, #432]	@ (8002f08 <HAL_I2C_Mem_Read+0x460>)
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 fb83 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0cb      	b.n	8002f00 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691a      	ldr	r2, [r3, #16]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db0:	2200      	movs	r2, #0
 8002db2:	4955      	ldr	r1, [pc, #340]	@ (8002f08 <HAL_I2C_Mem_Read+0x460>)
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 fb55 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e09d      	b.n	8002f00 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e38:	e04e      	b.n	8002ed8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e3c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 fcba 	bl	80037b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e058      	b.n	8002f00 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d124      	bne.n	8002ed8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	d107      	bne.n	8002ea6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ea4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f47f aeb6 	bne.w	8002c4e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	e000      	b.n	8002f00 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002efe:	2302      	movs	r3, #2
  }
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3728      	adds	r7, #40	@ 0x28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	00010004 	.word	0x00010004

08002f0c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08a      	sub	sp, #40	@ 0x28
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	607a      	str	r2, [r7, #4]
 8002f16:	603b      	str	r3, [r7, #0]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002f1c:	f7ff f874 	bl	8002008 <HAL_GetTick>
 8002f20:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b20      	cmp	r3, #32
 8002f30:	f040 8111 	bne.w	8003156 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	2319      	movs	r3, #25
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	4988      	ldr	r1, [pc, #544]	@ (8003160 <HAL_I2C_IsDeviceReady+0x254>)
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 fa90 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e104      	b.n	8003158 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_I2C_IsDeviceReady+0x50>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e0fd      	b.n	8003158 <HAL_I2C_IsDeviceReady+0x24c>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d007      	beq.n	8002f82 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f042 0201 	orr.w	r2, r2, #1
 8002f80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2224      	movs	r2, #36	@ 0x24
 8002f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4a70      	ldr	r2, [pc, #448]	@ (8003164 <HAL_I2C_IsDeviceReady+0x258>)
 8002fa4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fb4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 fa4e 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00d      	beq.n	8002fea <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fdc:	d103      	bne.n	8002fe6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fe4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e0b6      	b.n	8003158 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fea:	897b      	ldrh	r3, [r7, #10]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ff8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002ffa:	f7ff f805 	bl	8002008 <HAL_GetTick>
 8002ffe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b02      	cmp	r3, #2
 800300c:	bf0c      	ite	eq
 800300e:	2301      	moveq	r3, #1
 8003010:	2300      	movne	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003020:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003024:	bf0c      	ite	eq
 8003026:	2301      	moveq	r3, #1
 8003028:	2300      	movne	r3, #0
 800302a:	b2db      	uxtb	r3, r3
 800302c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800302e:	e025      	b.n	800307c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003030:	f7fe ffea 	bl	8002008 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d302      	bcc.n	8003046 <HAL_I2C_IsDeviceReady+0x13a>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d103      	bne.n	800304e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	22a0      	movs	r2, #160	@ 0xa0
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b02      	cmp	r3, #2
 800305a:	bf0c      	ite	eq
 800305c:	2301      	moveq	r3, #1
 800305e:	2300      	movne	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800306e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003072:	bf0c      	ite	eq
 8003074:	2301      	moveq	r3, #1
 8003076:	2300      	movne	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2ba0      	cmp	r3, #160	@ 0xa0
 8003086:	d005      	beq.n	8003094 <HAL_I2C_IsDeviceReady+0x188>
 8003088:	7dfb      	ldrb	r3, [r7, #23]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d102      	bne.n	8003094 <HAL_I2C_IsDeviceReady+0x188>
 800308e:	7dbb      	ldrb	r3, [r7, #22]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0cd      	beq.n	8003030 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d129      	bne.n	80030fe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030b8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ba:	2300      	movs	r3, #0
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	2319      	movs	r3, #25
 80030d6:	2201      	movs	r2, #1
 80030d8:	4921      	ldr	r1, [pc, #132]	@ (8003160 <HAL_I2C_IsDeviceReady+0x254>)
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f9c2 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e036      	b.n	8003158 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	e02c      	b.n	8003158 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800310c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003116:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	2319      	movs	r3, #25
 800311e:	2201      	movs	r2, #1
 8003120:	490f      	ldr	r1, [pc, #60]	@ (8003160 <HAL_I2C_IsDeviceReady+0x254>)
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f99e 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e012      	b.n	8003158 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	3301      	adds	r3, #1
 8003136:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	429a      	cmp	r2, r3
 800313e:	f4ff af32 	bcc.w	8002fa6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003156:	2302      	movs	r3, #2
  }
}
 8003158:	4618      	mov	r0, r3
 800315a:	3720      	adds	r7, #32
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	00100002 	.word	0x00100002
 8003164:	ffff0000 	.word	0xffff0000

08003168 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af02      	add	r7, sp, #8
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	4608      	mov	r0, r1
 8003172:	4611      	mov	r1, r2
 8003174:	461a      	mov	r2, r3
 8003176:	4603      	mov	r3, r0
 8003178:	817b      	strh	r3, [r7, #10]
 800317a:	460b      	mov	r3, r1
 800317c:	813b      	strh	r3, [r7, #8]
 800317e:	4613      	mov	r3, r2
 8003180:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003190:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	2200      	movs	r2, #0
 800319a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f960 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00d      	beq.n	80031c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031b8:	d103      	bne.n	80031c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e05f      	b.n	8003286 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031c6:	897b      	ldrh	r3, [r7, #10]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80031d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	6a3a      	ldr	r2, [r7, #32]
 80031da:	492d      	ldr	r1, [pc, #180]	@ (8003290 <I2C_RequestMemoryWrite+0x128>)
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 f9bb 	bl	8003558 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e04c      	b.n	8003286 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003204:	6a39      	ldr	r1, [r7, #32]
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 fa46 	bl	8003698 <I2C_WaitOnTXEFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00d      	beq.n	800322e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	2b04      	cmp	r3, #4
 8003218:	d107      	bne.n	800322a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003228:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e02b      	b.n	8003286 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d105      	bne.n	8003240 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003234:	893b      	ldrh	r3, [r7, #8]
 8003236:	b2da      	uxtb	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	611a      	str	r2, [r3, #16]
 800323e:	e021      	b.n	8003284 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003240:	893b      	ldrh	r3, [r7, #8]
 8003242:	0a1b      	lsrs	r3, r3, #8
 8003244:	b29b      	uxth	r3, r3
 8003246:	b2da      	uxtb	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800324e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003250:	6a39      	ldr	r1, [r7, #32]
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 fa20 	bl	8003698 <I2C_WaitOnTXEFlagUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00d      	beq.n	800327a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003262:	2b04      	cmp	r3, #4
 8003264:	d107      	bne.n	8003276 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003274:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e005      	b.n	8003286 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800327a:	893b      	ldrh	r3, [r7, #8]
 800327c:	b2da      	uxtb	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	00010002 	.word	0x00010002

08003294 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af02      	add	r7, sp, #8
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	4608      	mov	r0, r1
 800329e:	4611      	mov	r1, r2
 80032a0:	461a      	mov	r2, r3
 80032a2:	4603      	mov	r3, r0
 80032a4:	817b      	strh	r3, [r7, #10]
 80032a6:	460b      	mov	r3, r1
 80032a8:	813b      	strh	r3, [r7, #8]
 80032aa:	4613      	mov	r3, r2
 80032ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 f8c2 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00d      	beq.n	8003302 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032f4:	d103      	bne.n	80032fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e0aa      	b.n	8003458 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003302:	897b      	ldrh	r3, [r7, #10]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	461a      	mov	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003310:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003314:	6a3a      	ldr	r2, [r7, #32]
 8003316:	4952      	ldr	r1, [pc, #328]	@ (8003460 <I2C_RequestMemoryRead+0x1cc>)
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f91d 	bl	8003558 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e097      	b.n	8003458 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800333e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003340:	6a39      	ldr	r1, [r7, #32]
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f9a8 	bl	8003698 <I2C_WaitOnTXEFlagUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00d      	beq.n	800336a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003352:	2b04      	cmp	r3, #4
 8003354:	d107      	bne.n	8003366 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003364:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e076      	b.n	8003458 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800336a:	88fb      	ldrh	r3, [r7, #6]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d105      	bne.n	800337c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003370:	893b      	ldrh	r3, [r7, #8]
 8003372:	b2da      	uxtb	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	611a      	str	r2, [r3, #16]
 800337a:	e021      	b.n	80033c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800337c:	893b      	ldrh	r3, [r7, #8]
 800337e:	0a1b      	lsrs	r3, r3, #8
 8003380:	b29b      	uxth	r3, r3
 8003382:	b2da      	uxtb	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800338a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800338c:	6a39      	ldr	r1, [r7, #32]
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f982 	bl	8003698 <I2C_WaitOnTXEFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00d      	beq.n	80033b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d107      	bne.n	80033b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e050      	b.n	8003458 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033b6:	893b      	ldrh	r3, [r7, #8]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033c2:	6a39      	ldr	r1, [r7, #32]
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 f967 	bl	8003698 <I2C_WaitOnTXEFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00d      	beq.n	80033ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d107      	bne.n	80033e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e035      	b.n	8003458 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	2200      	movs	r2, #0
 8003404:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f82b 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00d      	beq.n	8003430 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800341e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003422:	d103      	bne.n	800342c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800342a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e013      	b.n	8003458 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003430:	897b      	ldrh	r3, [r7, #10]
 8003432:	b2db      	uxtb	r3, r3
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	b2da      	uxtb	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003442:	6a3a      	ldr	r2, [r7, #32]
 8003444:	4906      	ldr	r1, [pc, #24]	@ (8003460 <I2C_RequestMemoryRead+0x1cc>)
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f886 	bl	8003558 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e000      	b.n	8003458 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	00010002 	.word	0x00010002

08003464 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	4613      	mov	r3, r2
 8003472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003474:	e048      	b.n	8003508 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347c:	d044      	beq.n	8003508 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347e:	f7fe fdc3 	bl	8002008 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d302      	bcc.n	8003494 <I2C_WaitOnFlagUntilTimeout+0x30>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d139      	bne.n	8003508 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	0c1b      	lsrs	r3, r3, #16
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	d10d      	bne.n	80034ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	43da      	mvns	r2, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4013      	ands	r3, r2
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	bf0c      	ite	eq
 80034b0:	2301      	moveq	r3, #1
 80034b2:	2300      	movne	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	e00c      	b.n	80034d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	43da      	mvns	r2, r3
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	4013      	ands	r3, r2
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	bf0c      	ite	eq
 80034cc:	2301      	moveq	r3, #1
 80034ce:	2300      	movne	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	461a      	mov	r2, r3
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d116      	bne.n	8003508 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f4:	f043 0220 	orr.w	r2, r3, #32
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e023      	b.n	8003550 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	0c1b      	lsrs	r3, r3, #16
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b01      	cmp	r3, #1
 8003510:	d10d      	bne.n	800352e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	43da      	mvns	r2, r3
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	4013      	ands	r3, r2
 800351e:	b29b      	uxth	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	bf0c      	ite	eq
 8003524:	2301      	moveq	r3, #1
 8003526:	2300      	movne	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	461a      	mov	r2, r3
 800352c:	e00c      	b.n	8003548 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	43da      	mvns	r2, r3
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	4013      	ands	r3, r2
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	bf0c      	ite	eq
 8003540:	2301      	moveq	r3, #1
 8003542:	2300      	movne	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	461a      	mov	r2, r3
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	429a      	cmp	r2, r3
 800354c:	d093      	beq.n	8003476 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003566:	e071      	b.n	800364c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003576:	d123      	bne.n	80035c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003586:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003590:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ac:	f043 0204 	orr.w	r2, r3, #4
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e067      	b.n	8003690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c6:	d041      	beq.n	800364c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c8:	f7fe fd1e 	bl	8002008 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d302      	bcc.n	80035de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d136      	bne.n	800364c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	0c1b      	lsrs	r3, r3, #16
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d10c      	bne.n	8003602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	43da      	mvns	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	4013      	ands	r3, r2
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	bf14      	ite	ne
 80035fa:	2301      	movne	r3, #1
 80035fc:	2300      	moveq	r3, #0
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	e00b      	b.n	800361a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	43da      	mvns	r2, r3
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	4013      	ands	r3, r2
 800360e:	b29b      	uxth	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	bf14      	ite	ne
 8003614:	2301      	movne	r3, #1
 8003616:	2300      	moveq	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d016      	beq.n	800364c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003638:	f043 0220 	orr.w	r2, r3, #32
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e021      	b.n	8003690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	0c1b      	lsrs	r3, r3, #16
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b01      	cmp	r3, #1
 8003654:	d10c      	bne.n	8003670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	43da      	mvns	r2, r3
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	4013      	ands	r3, r2
 8003662:	b29b      	uxth	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	bf14      	ite	ne
 8003668:	2301      	movne	r3, #1
 800366a:	2300      	moveq	r3, #0
 800366c:	b2db      	uxtb	r3, r3
 800366e:	e00b      	b.n	8003688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	43da      	mvns	r2, r3
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	4013      	ands	r3, r2
 800367c:	b29b      	uxth	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	bf14      	ite	ne
 8003682:	2301      	movne	r3, #1
 8003684:	2300      	moveq	r3, #0
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	f47f af6d 	bne.w	8003568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036a4:	e034      	b.n	8003710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 f8e3 	bl	8003872 <I2C_IsAcknowledgeFailed>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e034      	b.n	8003720 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036bc:	d028      	beq.n	8003710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036be:	f7fe fca3 	bl	8002008 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d302      	bcc.n	80036d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d11d      	bne.n	8003710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036de:	2b80      	cmp	r3, #128	@ 0x80
 80036e0:	d016      	beq.n	8003710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fc:	f043 0220 	orr.w	r2, r3, #32
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e007      	b.n	8003720 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800371a:	2b80      	cmp	r3, #128	@ 0x80
 800371c:	d1c3      	bne.n	80036a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003734:	e034      	b.n	80037a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f89b 	bl	8003872 <I2C_IsAcknowledgeFailed>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e034      	b.n	80037b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374c:	d028      	beq.n	80037a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800374e:	f7fe fc5b 	bl	8002008 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	429a      	cmp	r2, r3
 800375c:	d302      	bcc.n	8003764 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d11d      	bne.n	80037a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	2b04      	cmp	r3, #4
 8003770:	d016      	beq.n	80037a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378c:	f043 0220 	orr.w	r2, r3, #32
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e007      	b.n	80037b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d1c3      	bne.n	8003736 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037c4:	e049      	b.n	800385a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b10      	cmp	r3, #16
 80037d2:	d119      	bne.n	8003808 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0210 	mvn.w	r2, #16
 80037dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e030      	b.n	800386a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003808:	f7fe fbfe 	bl	8002008 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	429a      	cmp	r2, r3
 8003816:	d302      	bcc.n	800381e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d11d      	bne.n	800385a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003828:	2b40      	cmp	r3, #64	@ 0x40
 800382a:	d016      	beq.n	800385a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003846:	f043 0220 	orr.w	r2, r3, #32
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e007      	b.n	800386a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003864:	2b40      	cmp	r3, #64	@ 0x40
 8003866:	d1ae      	bne.n	80037c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003888:	d11b      	bne.n	80038c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003892:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ae:	f043 0204 	orr.w	r2, r3, #4
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af02      	add	r7, sp, #8
 80038d6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e101      	b.n	8003ae6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d106      	bne.n	8003902 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f005 fca1 	bl	8009244 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2203      	movs	r2, #3
 8003906:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003910:	d102      	bne.n	8003918 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f002 fbcc 	bl	80060ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6818      	ldr	r0, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	7c1a      	ldrb	r2, [r3, #16]
 800392a:	f88d 2000 	strb.w	r2, [sp]
 800392e:	3304      	adds	r3, #4
 8003930:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003932:	f002 faab 	bl	8005e8c <USB_CoreInit>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0ce      	b.n	8003ae6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2100      	movs	r1, #0
 800394e:	4618      	mov	r0, r3
 8003950:	f002 fbc4 	bl	80060dc <USB_SetCurrentMode>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d005      	beq.n	8003966 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2202      	movs	r2, #2
 800395e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e0bf      	b.n	8003ae6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003966:	2300      	movs	r3, #0
 8003968:	73fb      	strb	r3, [r7, #15]
 800396a:	e04a      	b.n	8003a02 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800396c:	7bfa      	ldrb	r2, [r7, #15]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4413      	add	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	3315      	adds	r3, #21
 800397c:	2201      	movs	r2, #1
 800397e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003980:	7bfa      	ldrb	r2, [r7, #15]
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	3314      	adds	r3, #20
 8003990:	7bfa      	ldrb	r2, [r7, #15]
 8003992:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003994:	7bfa      	ldrb	r2, [r7, #15]
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	b298      	uxth	r0, r3
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4413      	add	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	332e      	adds	r3, #46	@ 0x2e
 80039a8:	4602      	mov	r2, r0
 80039aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039ac:	7bfa      	ldrb	r2, [r7, #15]
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	4613      	mov	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	4413      	add	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	3318      	adds	r3, #24
 80039bc:	2200      	movs	r2, #0
 80039be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039c0:	7bfa      	ldrb	r2, [r7, #15]
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	4613      	mov	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4413      	add	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	331c      	adds	r3, #28
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039d4:	7bfa      	ldrb	r2, [r7, #15]
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	3320      	adds	r3, #32
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039e8:	7bfa      	ldrb	r2, [r7, #15]
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	4613      	mov	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	4413      	add	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	3324      	adds	r3, #36	@ 0x24
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
 80039fe:	3301      	adds	r3, #1
 8003a00:	73fb      	strb	r3, [r7, #15]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	791b      	ldrb	r3, [r3, #4]
 8003a06:	7bfa      	ldrb	r2, [r7, #15]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d3af      	bcc.n	800396c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	73fb      	strb	r3, [r7, #15]
 8003a10:	e044      	b.n	8003a9c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a12:	7bfa      	ldrb	r2, [r7, #15]
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	4613      	mov	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	440b      	add	r3, r1
 8003a20:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003a24:	2200      	movs	r2, #0
 8003a26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a28:	7bfa      	ldrb	r2, [r7, #15]
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	4413      	add	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003a3a:	7bfa      	ldrb	r2, [r7, #15]
 8003a3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a3e:	7bfa      	ldrb	r2, [r7, #15]
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	4613      	mov	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	4413      	add	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003a50:	2200      	movs	r2, #0
 8003a52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a54:	7bfa      	ldrb	r2, [r7, #15]
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a6a:	7bfa      	ldrb	r2, [r7, #15]
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	4413      	add	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a80:	7bfa      	ldrb	r2, [r7, #15]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	791b      	ldrb	r3, [r3, #4]
 8003aa0:	7bfa      	ldrb	r2, [r7, #15]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d3b5      	bcc.n	8003a12 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	7c1a      	ldrb	r2, [r3, #16]
 8003aae:	f88d 2000 	strb.w	r2, [sp]
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ab6:	f002 fb5d 	bl	8006174 <USB_DevInit>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e00c      	b.n	8003ae6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f003 fba7 	bl	8007232 <USB_DevDisconnect>

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d101      	bne.n	8003b0a <HAL_PCD_Start+0x1c>
 8003b06:	2302      	movs	r3, #2
 8003b08:	e022      	b.n	8003b50 <HAL_PCD_Start+0x62>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d009      	beq.n	8003b32 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d105      	bne.n	8003b32 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b2a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f002 faae 	bl	8006098 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f003 fb55 	bl	80071f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b58:	b590      	push	{r4, r7, lr}
 8003b5a:	b08d      	sub	sp, #52	@ 0x34
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f003 fc13 	bl	800739a <USB_GetMode>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f040 848c 	bne.w	8004494 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f003 fb77 	bl	8007274 <USB_ReadInterrupts>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 8482 	beq.w	8004492 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	0a1b      	lsrs	r3, r3, #8
 8003b98:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f003 fb64 	bl	8007274 <USB_ReadInterrupts>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d107      	bne.n	8003bc6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695a      	ldr	r2, [r3, #20]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f002 0202 	and.w	r2, r2, #2
 8003bc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f003 fb52 	bl	8007274 <USB_ReadInterrupts>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f003 0310 	and.w	r3, r3, #16
 8003bd6:	2b10      	cmp	r3, #16
 8003bd8:	d161      	bne.n	8003c9e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	699a      	ldr	r2, [r3, #24]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0210 	bic.w	r2, r2, #16
 8003be8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	f003 020f 	and.w	r2, r3, #15
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	4413      	add	r3, r2
 8003c06:	3304      	adds	r3, #4
 8003c08:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003c10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c14:	d124      	bne.n	8003c60 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d035      	beq.n	8003c8e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	091b      	lsrs	r3, r3, #4
 8003c2a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	461a      	mov	r2, r3
 8003c34:	6a38      	ldr	r0, [r7, #32]
 8003c36:	f003 f989 	bl	8006f4c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	091b      	lsrs	r3, r3, #4
 8003c42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c46:	441a      	add	r2, r3
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	695a      	ldr	r2, [r3, #20]
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	091b      	lsrs	r3, r3, #4
 8003c54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c58:	441a      	add	r2, r3
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	615a      	str	r2, [r3, #20]
 8003c5e:	e016      	b.n	8003c8e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003c66:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003c6a:	d110      	bne.n	8003c8e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c72:	2208      	movs	r2, #8
 8003c74:	4619      	mov	r1, r3
 8003c76:	6a38      	ldr	r0, [r7, #32]
 8003c78:	f003 f968 	bl	8006f4c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	695a      	ldr	r2, [r3, #20]
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	091b      	lsrs	r3, r3, #4
 8003c84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c88:	441a      	add	r2, r3
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699a      	ldr	r2, [r3, #24]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0210 	orr.w	r2, r2, #16
 8003c9c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f003 fae6 	bl	8007274 <USB_ReadInterrupts>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cae:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003cb2:	f040 80a7 	bne.w	8003e04 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f003 faeb 	bl	800729a <USB_ReadDevAllOutEpInterrupt>
 8003cc4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003cc6:	e099      	b.n	8003dfc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 808e 	beq.w	8003df0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	4611      	mov	r1, r2
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f003 fb0f 	bl	8007302 <USB_ReadDevOutEPInterrupt>
 8003ce4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00c      	beq.n	8003d0a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	2301      	movs	r3, #1
 8003d00:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003d02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 fe8b 	bl	8004a20 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f003 0308 	and.w	r3, r3, #8
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00c      	beq.n	8003d2e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	015a      	lsls	r2, r3, #5
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d20:	461a      	mov	r2, r3
 8003d22:	2308      	movs	r3, #8
 8003d24:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003d26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 ff61 	bl	8004bf0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f003 0310 	and.w	r3, r3, #16
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d44:	461a      	mov	r2, r3
 8003d46:	2310      	movs	r3, #16
 8003d48:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d030      	beq.n	8003db6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d5c:	2b80      	cmp	r3, #128	@ 0x80
 8003d5e:	d109      	bne.n	8003d74 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	69fa      	ldr	r2, [r7, #28]
 8003d6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d72:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d76:	4613      	mov	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	4413      	add	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	4413      	add	r3, r2
 8003d86:	3304      	adds	r3, #4
 8003d88:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	78db      	ldrb	r3, [r3, #3]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d108      	bne.n	8003da4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2200      	movs	r2, #0
 8003d96:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f005 fb56 	bl	8009450 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003db0:	461a      	mov	r2, r3
 8003db2:	2302      	movs	r3, #2
 8003db4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f003 0320 	and.w	r3, r3, #32
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dcc:	461a      	mov	r2, r3
 8003dce:	2320      	movs	r3, #32
 8003dd0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d009      	beq.n	8003df0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003de8:	461a      	mov	r2, r3
 8003dea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003dee:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df2:	3301      	adds	r3, #1
 8003df4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df8:	085b      	lsrs	r3, r3, #1
 8003dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f47f af62 	bne.w	8003cc8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f003 fa33 	bl	8007274 <USB_ReadInterrupts>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e18:	f040 80db 	bne.w	8003fd2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f003 fa54 	bl	80072ce <USB_ReadDevAllInEpInterrupt>
 8003e26:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003e2c:	e0cd      	b.n	8003fca <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 80c2 	beq.w	8003fbe <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	4611      	mov	r1, r2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f003 fa7a 	bl	800733e <USB_ReadDevInEPInterrupt>
 8003e4a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d057      	beq.n	8003f06 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e58:	f003 030f 	and.w	r3, r3, #15
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	69f9      	ldr	r1, [r7, #28]
 8003e72:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e76:	4013      	ands	r3, r2
 8003e78:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7c:	015a      	lsls	r2, r3, #5
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	4413      	add	r3, r2
 8003e82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e86:	461a      	mov	r2, r3
 8003e88:	2301      	movs	r3, #1
 8003e8a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	799b      	ldrb	r3, [r3, #6]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d132      	bne.n	8003efa <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e98:	4613      	mov	r3, r2
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	3320      	adds	r3, #32
 8003ea4:	6819      	ldr	r1, [r3, #0]
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eaa:	4613      	mov	r3, r2
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	4413      	add	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4403      	add	r3, r0
 8003eb4:	331c      	adds	r3, #28
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4419      	add	r1, r3
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4403      	add	r3, r0
 8003ec8:	3320      	adds	r3, #32
 8003eca:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d113      	bne.n	8003efa <HAL_PCD_IRQHandler+0x3a2>
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	4413      	add	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	3324      	adds	r3, #36	@ 0x24
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d108      	bne.n	8003efa <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6818      	ldr	r0, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	f003 fa81 	bl	80073fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	4619      	mov	r1, r3
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f005 fa20 	bl	8009346 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	2308      	movs	r3, #8
 8003f20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f003 0310 	and.w	r3, r3, #16
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f38:	461a      	mov	r2, r3
 8003f3a:	2310      	movs	r3, #16
 8003f3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d008      	beq.n	8003f5a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f54:	461a      	mov	r2, r3
 8003f56:	2340      	movs	r3, #64	@ 0x40
 8003f58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d023      	beq.n	8003fac <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003f64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f66:	6a38      	ldr	r0, [r7, #32]
 8003f68:	f002 fa68 	bl	800643c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f6e:	4613      	mov	r3, r2
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	4413      	add	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	3310      	adds	r3, #16
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	78db      	ldrb	r3, [r3, #3]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d108      	bne.n	8003f9a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	4619      	mov	r1, r3
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f005 fa6d 	bl	8009474 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	2302      	movs	r3, #2
 8003faa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003fb6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fca5 	bl	8004908 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc6:	085b      	lsrs	r3, r3, #1
 8003fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f47f af2e 	bne.w	8003e2e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f003 f94c 	bl	8007274 <USB_ReadInterrupts>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fe6:	d122      	bne.n	800402e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	69fa      	ldr	r2, [r7, #28]
 8003ff2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ff6:	f023 0301 	bic.w	r3, r3, #1
 8003ffa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004002:	2b01      	cmp	r3, #1
 8004004:	d108      	bne.n	8004018 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800400e:	2100      	movs	r1, #0
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 fe8b 	bl	8004d2c <HAL_PCDEx_LPM_Callback>
 8004016:	e002      	b.n	800401e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f005 fa0b 	bl	8009434 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695a      	ldr	r2, [r3, #20]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800402c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f003 f91e 	bl	8007274 <USB_ReadInterrupts>
 8004038:	4603      	mov	r3, r0
 800403a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800403e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004042:	d112      	bne.n	800406a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b01      	cmp	r3, #1
 8004052:	d102      	bne.n	800405a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f005 f9c7 	bl	80093e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695a      	ldr	r2, [r3, #20]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004068:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f003 f900 	bl	8007274 <USB_ReadInterrupts>
 8004074:	4603      	mov	r3, r0
 8004076:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800407a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800407e:	f040 80b7 	bne.w	80041f0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	69fa      	ldr	r2, [r7, #28]
 800408c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004090:	f023 0301 	bic.w	r3, r3, #1
 8004094:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2110      	movs	r1, #16
 800409c:	4618      	mov	r0, r3
 800409e:	f002 f9cd 	bl	800643c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040a2:	2300      	movs	r3, #0
 80040a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040a6:	e046      	b.n	8004136 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80040a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040b4:	461a      	mov	r2, r3
 80040b6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80040ba:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80040bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040cc:	0151      	lsls	r1, r2, #5
 80040ce:	69fa      	ldr	r2, [r7, #28]
 80040d0:	440a      	add	r2, r1
 80040d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80040da:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80040dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040e8:	461a      	mov	r2, r3
 80040ea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80040ee:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80040f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004100:	0151      	lsls	r1, r2, #5
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	440a      	add	r2, r1
 8004106:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800410a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800410e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	4413      	add	r3, r2
 8004118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004120:	0151      	lsls	r1, r2, #5
 8004122:	69fa      	ldr	r2, [r7, #28]
 8004124:	440a      	add	r2, r1
 8004126:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800412a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800412e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004132:	3301      	adds	r3, #1
 8004134:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	791b      	ldrb	r3, [r3, #4]
 800413a:	461a      	mov	r2, r3
 800413c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800413e:	4293      	cmp	r3, r2
 8004140:	d3b2      	bcc.n	80040a8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	69fa      	ldr	r2, [r7, #28]
 800414c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004150:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004154:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	7bdb      	ldrb	r3, [r3, #15]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d016      	beq.n	800418c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004164:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004168:	69fa      	ldr	r2, [r7, #28]
 800416a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800416e:	f043 030b 	orr.w	r3, r3, #11
 8004172:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800417c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004184:	f043 030b 	orr.w	r3, r3, #11
 8004188:	6453      	str	r3, [r2, #68]	@ 0x44
 800418a:	e015      	b.n	80041b8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	69fa      	ldr	r2, [r7, #28]
 8004196:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800419a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800419e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80041a2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	69fa      	ldr	r2, [r7, #28]
 80041ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041b2:	f043 030b 	orr.w	r3, r3, #11
 80041b6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	69fa      	ldr	r2, [r7, #28]
 80041c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041c6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80041ca:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6818      	ldr	r0, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80041da:	461a      	mov	r2, r3
 80041dc:	f003 f90e 	bl	80073fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	695a      	ldr	r2, [r3, #20]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80041ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f003 f83d 	bl	8007274 <USB_ReadInterrupts>
 80041fa:	4603      	mov	r3, r0
 80041fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004200:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004204:	d123      	bne.n	800424e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f003 f8d3 	bl	80073b6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f002 f98a 	bl	800652e <USB_GetDevSpeed>
 800421a:	4603      	mov	r3, r0
 800421c:	461a      	mov	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681c      	ldr	r4, [r3, #0]
 8004226:	f001 f9f1 	bl	800560c <HAL_RCC_GetHCLKFreq>
 800422a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004230:	461a      	mov	r2, r3
 8004232:	4620      	mov	r0, r4
 8004234:	f001 fe8e 	bl	8005f54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f005 f8ac 	bl	8009396 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695a      	ldr	r2, [r3, #20]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800424c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f003 f80e 	bl	8007274 <USB_ReadInterrupts>
 8004258:	4603      	mov	r3, r0
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	2b08      	cmp	r3, #8
 8004260:	d10a      	bne.n	8004278 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f005 f889 	bl	800937a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	695a      	ldr	r2, [r3, #20]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f002 0208 	and.w	r2, r2, #8
 8004276:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4618      	mov	r0, r3
 800427e:	f002 fff9 	bl	8007274 <USB_ReadInterrupts>
 8004282:	4603      	mov	r3, r0
 8004284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004288:	2b80      	cmp	r3, #128	@ 0x80
 800428a:	d123      	bne.n	80042d4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004298:	2301      	movs	r3, #1
 800429a:	627b      	str	r3, [r7, #36]	@ 0x24
 800429c:	e014      	b.n	80042c8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042a2:	4613      	mov	r3, r2
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	4413      	add	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d105      	bne.n	80042c2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80042b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	4619      	mov	r1, r3
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 faf2 	bl	80048a6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c4:	3301      	adds	r3, #1
 80042c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	791b      	ldrb	r3, [r3, #4]
 80042cc:	461a      	mov	r2, r3
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d3e4      	bcc.n	800429e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4618      	mov	r0, r3
 80042da:	f002 ffcb 	bl	8007274 <USB_ReadInterrupts>
 80042de:	4603      	mov	r3, r0
 80042e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042e8:	d13c      	bne.n	8004364 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042ea:	2301      	movs	r3, #1
 80042ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ee:	e02b      	b.n	8004348 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80042f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004304:	4613      	mov	r3, r2
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	4413      	add	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	440b      	add	r3, r1
 800430e:	3318      	adds	r3, #24
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d115      	bne.n	8004342 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004316:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004318:	2b00      	cmp	r3, #0
 800431a:	da12      	bge.n	8004342 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800431c:	6879      	ldr	r1, [r7, #4]
 800431e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004320:	4613      	mov	r3, r2
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	4413      	add	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	440b      	add	r3, r1
 800432a:	3317      	adds	r3, #23
 800432c:	2201      	movs	r2, #1
 800432e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004332:	b2db      	uxtb	r3, r3
 8004334:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004338:	b2db      	uxtb	r3, r3
 800433a:	4619      	mov	r1, r3
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 fab2 	bl	80048a6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004344:	3301      	adds	r3, #1
 8004346:	627b      	str	r3, [r7, #36]	@ 0x24
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	791b      	ldrb	r3, [r3, #4]
 800434c:	461a      	mov	r2, r3
 800434e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004350:	4293      	cmp	r3, r2
 8004352:	d3cd      	bcc.n	80042f0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695a      	ldr	r2, [r3, #20]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004362:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4618      	mov	r0, r3
 800436a:	f002 ff83 	bl	8007274 <USB_ReadInterrupts>
 800436e:	4603      	mov	r3, r0
 8004370:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004374:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004378:	d156      	bne.n	8004428 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800437a:	2301      	movs	r3, #1
 800437c:	627b      	str	r3, [r7, #36]	@ 0x24
 800437e:	e045      	b.n	800440c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004394:	4613      	mov	r3, r2
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d12e      	bne.n	8004406 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80043a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	da2b      	bge.n	8004406 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	0c1a      	lsrs	r2, r3, #16
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80043b8:	4053      	eors	r3, r2
 80043ba:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d121      	bne.n	8004406 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80043c2:	6879      	ldr	r1, [r7, #4]
 80043c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043c6:	4613      	mov	r3, r2
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	440b      	add	r3, r1
 80043d0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80043d4:	2201      	movs	r2, #1
 80043d6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10a      	bne.n	8004406 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	69fa      	ldr	r2, [r7, #28]
 80043fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004402:	6053      	str	r3, [r2, #4]
            break;
 8004404:	e008      	b.n	8004418 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004408:	3301      	adds	r3, #1
 800440a:	627b      	str	r3, [r7, #36]	@ 0x24
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	791b      	ldrb	r3, [r3, #4]
 8004410:	461a      	mov	r2, r3
 8004412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004414:	4293      	cmp	r3, r2
 8004416:	d3b3      	bcc.n	8004380 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695a      	ldr	r2, [r3, #20]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004426:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4618      	mov	r0, r3
 800442e:	f002 ff21 	bl	8007274 <USB_ReadInterrupts>
 8004432:	4603      	mov	r3, r0
 8004434:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800443c:	d10a      	bne.n	8004454 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f005 f82a 	bl	8009498 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695a      	ldr	r2, [r3, #20]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004452:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	f002 ff0b 	bl	8007274 <USB_ReadInterrupts>
 800445e:	4603      	mov	r3, r0
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b04      	cmp	r3, #4
 8004466:	d115      	bne.n	8004494 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	f003 0304 	and.w	r3, r3, #4
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f005 f81a 	bl	80094b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6859      	ldr	r1, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	430a      	orrs	r2, r1
 800448e:	605a      	str	r2, [r3, #4]
 8004490:	e000      	b.n	8004494 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004492:	bf00      	nop
    }
  }
}
 8004494:	3734      	adds	r7, #52	@ 0x34
 8004496:	46bd      	mov	sp, r7
 8004498:	bd90      	pop	{r4, r7, pc}

0800449a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b082      	sub	sp, #8
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	460b      	mov	r3, r1
 80044a4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <HAL_PCD_SetAddress+0x1a>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e012      	b.n	80044da <HAL_PCD_SetAddress+0x40>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	78fa      	ldrb	r2, [r7, #3]
 80044c0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	78fa      	ldrb	r2, [r7, #3]
 80044c8:	4611      	mov	r1, r2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f002 fe6a 	bl	80071a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b084      	sub	sp, #16
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	4608      	mov	r0, r1
 80044ec:	4611      	mov	r1, r2
 80044ee:	461a      	mov	r2, r3
 80044f0:	4603      	mov	r3, r0
 80044f2:	70fb      	strb	r3, [r7, #3]
 80044f4:	460b      	mov	r3, r1
 80044f6:	803b      	strh	r3, [r7, #0]
 80044f8:	4613      	mov	r3, r2
 80044fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004500:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004504:	2b00      	cmp	r3, #0
 8004506:	da0f      	bge.n	8004528 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	f003 020f 	and.w	r2, r3, #15
 800450e:	4613      	mov	r3, r2
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	4413      	add	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	3310      	adds	r3, #16
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	4413      	add	r3, r2
 800451c:	3304      	adds	r3, #4
 800451e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2201      	movs	r2, #1
 8004524:	705a      	strb	r2, [r3, #1]
 8004526:	e00f      	b.n	8004548 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004528:	78fb      	ldrb	r3, [r7, #3]
 800452a:	f003 020f 	and.w	r2, r3, #15
 800452e:	4613      	mov	r3, r2
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	4413      	add	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	4413      	add	r3, r2
 800453e:	3304      	adds	r3, #4
 8004540:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004548:	78fb      	ldrb	r3, [r7, #3]
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	b2da      	uxtb	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004554:	883b      	ldrh	r3, [r7, #0]
 8004556:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	78ba      	ldrb	r2, [r7, #2]
 8004562:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	785b      	ldrb	r3, [r3, #1]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d004      	beq.n	8004576 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	461a      	mov	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004576:	78bb      	ldrb	r3, [r7, #2]
 8004578:	2b02      	cmp	r3, #2
 800457a:	d102      	bne.n	8004582 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_PCD_EP_Open+0xae>
 800458c:	2302      	movs	r3, #2
 800458e:	e00e      	b.n	80045ae <HAL_PCD_EP_Open+0xcc>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68f9      	ldr	r1, [r7, #12]
 800459e:	4618      	mov	r0, r3
 80045a0:	f001 ffea 	bl	8006578 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80045ac:	7afb      	ldrb	r3, [r7, #11]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	460b      	mov	r3, r1
 80045c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	da0f      	bge.n	80045ea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045ca:	78fb      	ldrb	r3, [r7, #3]
 80045cc:	f003 020f 	and.w	r2, r3, #15
 80045d0:	4613      	mov	r3, r2
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	4413      	add	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	3310      	adds	r3, #16
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	4413      	add	r3, r2
 80045de:	3304      	adds	r3, #4
 80045e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2201      	movs	r2, #1
 80045e6:	705a      	strb	r2, [r3, #1]
 80045e8:	e00f      	b.n	800460a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045ea:	78fb      	ldrb	r3, [r7, #3]
 80045ec:	f003 020f 	and.w	r2, r3, #15
 80045f0:	4613      	mov	r3, r2
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	4413      	add	r3, r2
 8004600:	3304      	adds	r3, #4
 8004602:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800460a:	78fb      	ldrb	r3, [r7, #3]
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	b2da      	uxtb	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <HAL_PCD_EP_Close+0x6e>
 8004620:	2302      	movs	r3, #2
 8004622:	e00e      	b.n	8004642 <HAL_PCD_EP_Close+0x8c>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68f9      	ldr	r1, [r7, #12]
 8004632:	4618      	mov	r0, r3
 8004634:	f002 f828 	bl	8006688 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b086      	sub	sp, #24
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
 8004656:	460b      	mov	r3, r1
 8004658:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800465a:	7afb      	ldrb	r3, [r7, #11]
 800465c:	f003 020f 	and.w	r2, r3, #15
 8004660:	4613      	mov	r3, r2
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	4413      	add	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	4413      	add	r3, r2
 8004670:	3304      	adds	r3, #4
 8004672:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2200      	movs	r2, #0
 8004684:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2200      	movs	r2, #0
 800468a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800468c:	7afb      	ldrb	r3, [r7, #11]
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	b2da      	uxtb	r2, r3
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	799b      	ldrb	r3, [r3, #6]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d102      	bne.n	80046a6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6818      	ldr	r0, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	799b      	ldrb	r3, [r3, #6]
 80046ae:	461a      	mov	r2, r3
 80046b0:	6979      	ldr	r1, [r7, #20]
 80046b2:	f002 f8c5 	bl	8006840 <USB_EPStartXfer>

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	607a      	str	r2, [r7, #4]
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	460b      	mov	r3, r1
 80046ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046d0:	7afb      	ldrb	r3, [r7, #11]
 80046d2:	f003 020f 	and.w	r2, r3, #15
 80046d6:	4613      	mov	r3, r2
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	4413      	add	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	3310      	adds	r3, #16
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	4413      	add	r3, r2
 80046e4:	3304      	adds	r3, #4
 80046e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2200      	movs	r2, #0
 80046f8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2201      	movs	r2, #1
 80046fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004700:	7afb      	ldrb	r3, [r7, #11]
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	b2da      	uxtb	r2, r3
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	799b      	ldrb	r3, [r3, #6]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d102      	bne.n	800471a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6818      	ldr	r0, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	799b      	ldrb	r3, [r3, #6]
 8004722:	461a      	mov	r2, r3
 8004724:	6979      	ldr	r1, [r7, #20]
 8004726:	f002 f88b 	bl	8006840 <USB_EPStartXfer>

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004740:	78fb      	ldrb	r3, [r7, #3]
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	7912      	ldrb	r2, [r2, #4]
 800474a:	4293      	cmp	r3, r2
 800474c:	d901      	bls.n	8004752 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e04f      	b.n	80047f2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004752:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004756:	2b00      	cmp	r3, #0
 8004758:	da0f      	bge.n	800477a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800475a:	78fb      	ldrb	r3, [r7, #3]
 800475c:	f003 020f 	and.w	r2, r3, #15
 8004760:	4613      	mov	r3, r2
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	4413      	add	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	3310      	adds	r3, #16
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	4413      	add	r3, r2
 800476e:	3304      	adds	r3, #4
 8004770:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2201      	movs	r2, #1
 8004776:	705a      	strb	r2, [r3, #1]
 8004778:	e00d      	b.n	8004796 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800477a:	78fa      	ldrb	r2, [r7, #3]
 800477c:	4613      	mov	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	4413      	add	r3, r2
 800478c:	3304      	adds	r3, #4
 800478e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800479c:	78fb      	ldrb	r3, [r7, #3]
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d101      	bne.n	80047b6 <HAL_PCD_EP_SetStall+0x82>
 80047b2:	2302      	movs	r3, #2
 80047b4:	e01d      	b.n	80047f2 <HAL_PCD_EP_SetStall+0xbe>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68f9      	ldr	r1, [r7, #12]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f002 fc19 	bl	8006ffc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047ca:	78fb      	ldrb	r3, [r7, #3]
 80047cc:	f003 030f 	and.w	r3, r3, #15
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d109      	bne.n	80047e8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	7999      	ldrb	r1, [r3, #6]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80047e2:	461a      	mov	r2, r3
 80047e4:	f002 fe0a 	bl	80073fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b084      	sub	sp, #16
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
 8004802:	460b      	mov	r3, r1
 8004804:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004806:	78fb      	ldrb	r3, [r7, #3]
 8004808:	f003 030f 	and.w	r3, r3, #15
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	7912      	ldrb	r2, [r2, #4]
 8004810:	4293      	cmp	r3, r2
 8004812:	d901      	bls.n	8004818 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e042      	b.n	800489e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004818:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800481c:	2b00      	cmp	r3, #0
 800481e:	da0f      	bge.n	8004840 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004820:	78fb      	ldrb	r3, [r7, #3]
 8004822:	f003 020f 	and.w	r2, r3, #15
 8004826:	4613      	mov	r3, r2
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	4413      	add	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	3310      	adds	r3, #16
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	4413      	add	r3, r2
 8004834:	3304      	adds	r3, #4
 8004836:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2201      	movs	r2, #1
 800483c:	705a      	strb	r2, [r3, #1]
 800483e:	e00f      	b.n	8004860 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004840:	78fb      	ldrb	r3, [r7, #3]
 8004842:	f003 020f 	and.w	r2, r3, #15
 8004846:	4613      	mov	r3, r2
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	4413      	add	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	4413      	add	r3, r2
 8004856:	3304      	adds	r3, #4
 8004858:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	b2da      	uxtb	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_PCD_EP_ClrStall+0x86>
 800487c:	2302      	movs	r3, #2
 800487e:	e00e      	b.n	800489e <HAL_PCD_EP_ClrStall+0xa4>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68f9      	ldr	r1, [r7, #12]
 800488e:	4618      	mov	r0, r3
 8004890:	f002 fc22 	bl	80070d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b084      	sub	sp, #16
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	460b      	mov	r3, r1
 80048b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80048b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	da0c      	bge.n	80048d4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048ba:	78fb      	ldrb	r3, [r7, #3]
 80048bc:	f003 020f 	and.w	r2, r3, #15
 80048c0:	4613      	mov	r3, r2
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	4413      	add	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	3310      	adds	r3, #16
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	4413      	add	r3, r2
 80048ce:	3304      	adds	r3, #4
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	e00c      	b.n	80048ee <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048d4:	78fb      	ldrb	r3, [r7, #3]
 80048d6:	f003 020f 	and.w	r2, r3, #15
 80048da:	4613      	mov	r3, r2
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	4413      	add	r3, r2
 80048ea:	3304      	adds	r3, #4
 80048ec:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68f9      	ldr	r1, [r7, #12]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f002 fa41 	bl	8006d7c <USB_EPStopXfer>
 80048fa:	4603      	mov	r3, r0
 80048fc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80048fe:	7afb      	ldrb	r3, [r7, #11]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08a      	sub	sp, #40	@ 0x28
 800490c:	af02      	add	r7, sp, #8
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	4613      	mov	r3, r2
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	4413      	add	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	3310      	adds	r3, #16
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	4413      	add	r3, r2
 800492c:	3304      	adds	r3, #4
 800492e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	695a      	ldr	r2, [r3, #20]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	429a      	cmp	r2, r3
 800493a:	d901      	bls.n	8004940 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e06b      	b.n	8004a18 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	69fa      	ldr	r2, [r7, #28]
 8004952:	429a      	cmp	r2, r3
 8004954:	d902      	bls.n	800495c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	3303      	adds	r3, #3
 8004960:	089b      	lsrs	r3, r3, #2
 8004962:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004964:	e02a      	b.n	80049bc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	691a      	ldr	r2, [r3, #16]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	429a      	cmp	r2, r3
 800497a:	d902      	bls.n	8004982 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	3303      	adds	r3, #3
 8004986:	089b      	lsrs	r3, r3, #2
 8004988:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	68d9      	ldr	r1, [r3, #12]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	b2da      	uxtb	r2, r3
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	4603      	mov	r3, r0
 800499e:	6978      	ldr	r0, [r7, #20]
 80049a0:	f002 fa96 	bl	8006ed0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	441a      	add	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	695a      	ldr	r2, [r3, #20]
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	441a      	add	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d809      	bhi.n	80049e6 <PCD_WriteEmptyTxFifo+0xde>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	695a      	ldr	r2, [r3, #20]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049da:	429a      	cmp	r2, r3
 80049dc:	d203      	bcs.n	80049e6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1bf      	bne.n	8004966 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	691a      	ldr	r2, [r3, #16]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d811      	bhi.n	8004a16 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	f003 030f 	and.w	r3, r3, #15
 80049f8:	2201      	movs	r2, #1
 80049fa:	fa02 f303 	lsl.w	r3, r2, r3
 80049fe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	6939      	ldr	r1, [r7, #16]
 8004a0e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a12:	4013      	ands	r3, r2
 8004a14:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3720      	adds	r7, #32
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b088      	sub	sp, #32
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	333c      	adds	r3, #60	@ 0x3c
 8004a38:	3304      	adds	r3, #4
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	799b      	ldrb	r3, [r3, #6]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d17b      	bne.n	8004b4e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d015      	beq.n	8004a8c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	4a61      	ldr	r2, [pc, #388]	@ (8004be8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	f240 80b9 	bls.w	8004bdc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 80b3 	beq.w	8004bdc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	015a      	lsls	r2, r3, #5
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a82:	461a      	mov	r2, r3
 8004a84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a88:	6093      	str	r3, [r2, #8]
 8004a8a:	e0a7      	b.n	8004bdc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d009      	beq.n	8004aaa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	2320      	movs	r3, #32
 8004aa6:	6093      	str	r3, [r2, #8]
 8004aa8:	e098      	b.n	8004bdc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f040 8093 	bne.w	8004bdc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	4a4b      	ldr	r2, [pc, #300]	@ (8004be8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d90f      	bls.n	8004ade <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00a      	beq.n	8004ade <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ada:	6093      	str	r3, [r2, #8]
 8004adc:	e07e      	b.n	8004bdc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	4413      	add	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	4413      	add	r3, r2
 8004af0:	3304      	adds	r3, #4
 8004af2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6a1a      	ldr	r2, [r3, #32]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	0159      	lsls	r1, r3, #5
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	440b      	add	r3, r1
 8004b00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b0a:	1ad2      	subs	r2, r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d114      	bne.n	8004b40 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d109      	bne.n	8004b32 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b28:	461a      	mov	r2, r3
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	f002 fc66 	bl	80073fc <USB_EP0_OutStart>
 8004b30:	e006      	b.n	8004b40 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	441a      	add	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	4619      	mov	r1, r3
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f004 fbe2 	bl	8009310 <HAL_PCD_DataOutStageCallback>
 8004b4c:	e046      	b.n	8004bdc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	4a26      	ldr	r2, [pc, #152]	@ (8004bec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d124      	bne.n	8004ba0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00a      	beq.n	8004b76 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b72:	6093      	str	r3, [r2, #8]
 8004b74:	e032      	b.n	8004bdc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d008      	beq.n	8004b92 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	2320      	movs	r3, #32
 8004b90:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	4619      	mov	r1, r3
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f004 fbb9 	bl	8009310 <HAL_PCD_DataOutStageCallback>
 8004b9e:	e01d      	b.n	8004bdc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d114      	bne.n	8004bd0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	4613      	mov	r3, r2
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	4413      	add	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	440b      	add	r3, r1
 8004bb4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d108      	bne.n	8004bd0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6818      	ldr	r0, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004bc8:	461a      	mov	r2, r3
 8004bca:	2100      	movs	r1, #0
 8004bcc:	f002 fc16 	bl	80073fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f004 fb9a 	bl	8009310 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3720      	adds	r7, #32
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	4f54300a 	.word	0x4f54300a
 8004bec:	4f54310a 	.word	0x4f54310a

08004bf0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	333c      	adds	r3, #60	@ 0x3c
 8004c08:	3304      	adds	r3, #4
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	015a      	lsls	r2, r3, #5
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	4a15      	ldr	r2, [pc, #84]	@ (8004c78 <PCD_EP_OutSetupPacket_int+0x88>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d90e      	bls.n	8004c44 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d009      	beq.n	8004c44 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c42:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f004 fb51 	bl	80092ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8004c78 <PCD_EP_OutSetupPacket_int+0x88>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d90c      	bls.n	8004c6c <PCD_EP_OutSetupPacket_int+0x7c>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	799b      	ldrb	r3, [r3, #6]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d108      	bne.n	8004c6c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6818      	ldr	r0, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c64:	461a      	mov	r2, r3
 8004c66:	2101      	movs	r1, #1
 8004c68:	f002 fbc8 	bl	80073fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	4f54300a 	.word	0x4f54300a

08004c7c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	460b      	mov	r3, r1
 8004c86:	70fb      	strb	r3, [r7, #3]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c92:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004c94:	78fb      	ldrb	r3, [r7, #3]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d107      	bne.n	8004caa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004c9a:	883b      	ldrh	r3, [r7, #0]
 8004c9c:	0419      	lsls	r1, r3, #16
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ca8:	e028      	b.n	8004cfc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb0:	0c1b      	lsrs	r3, r3, #16
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cb8:	2300      	movs	r3, #0
 8004cba:	73fb      	strb	r3, [r7, #15]
 8004cbc:	e00d      	b.n	8004cda <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
 8004cc4:	3340      	adds	r3, #64	@ 0x40
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	0c1b      	lsrs	r3, r3, #16
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	73fb      	strb	r3, [r7, #15]
 8004cda:	7bfa      	ldrb	r2, [r7, #15]
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d3ec      	bcc.n	8004cbe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004ce4:	883b      	ldrh	r3, [r7, #0]
 8004ce6:	0418      	lsls	r0, r3, #16
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6819      	ldr	r1, [r3, #0]
 8004cec:	78fb      	ldrb	r3, [r7, #3]
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	4302      	orrs	r2, r0
 8004cf4:	3340      	adds	r3, #64	@ 0x40
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	460b      	mov	r3, r1
 8004d14:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	887a      	ldrh	r2, [r7, #2]
 8004d1c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e267      	b.n	8005226 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d075      	beq.n	8004e4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d62:	4b88      	ldr	r3, [pc, #544]	@ (8004f84 <HAL_RCC_OscConfig+0x240>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 030c 	and.w	r3, r3, #12
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	d00c      	beq.n	8004d88 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d6e:	4b85      	ldr	r3, [pc, #532]	@ (8004f84 <HAL_RCC_OscConfig+0x240>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d76:	2b08      	cmp	r3, #8
 8004d78:	d112      	bne.n	8004da0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d7a:	4b82      	ldr	r3, [pc, #520]	@ (8004f84 <HAL_RCC_OscConfig+0x240>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d86:	d10b      	bne.n	8004da0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d88:	4b7e      	ldr	r3, [pc, #504]	@ (8004f84 <HAL_RCC_OscConfig+0x240>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d05b      	beq.n	8004e4c <HAL_RCC_OscConfig+0x108>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d157      	bne.n	8004e4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e242      	b.n	8005226 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004da8:	d106      	bne.n	8004db8 <HAL_RCC_OscConfig+0x74>
 8004daa:	4b76      	ldr	r3, [pc, #472]	@ (8004f84 <HAL_RCC_OscConfig+0x240>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a75      	ldr	r2, [pc, #468]	@ (8004f84 <HAL_RCC_OscConfig+0x240>)
 8004db0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004db4:	6013      	str	r3, [r2, #0]
 8004db6:	e01d      	b.n	8004df4 <HAL_RCC_OscConfig+0xb0>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004dc0:	d10c      	bne.n	8004ddc <HAL_RCC_OscConfig+0x98>
 8004dc2:	4b70      	ldr	r3, [pc, #448]	@ (8004f84 <HAL_RCC_OscConfig+0x240>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a6f      	ldr	r2, [pc, #444]	@ (8004f84 <HAL_RCC_OscConfig+0x240>)
 8004dc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	4b6d      	ldr	r3, [pc, #436]	@ (8004f84 <HAL_RCC_OscConfig+0x240>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a6c      	ldr	r2, [pc, #432]	@ (8004f84 <HAL_RCC_OscConfig+0x240>)
 8004dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dd8:	6013      	str	r3, [r2, #0]
 8004dda:	e00b      	b.n	8004df4 <HAL_RCC_OscConfig+0xb0>
 8004ddc:	4b69      	ldr	r3, [pc, #420]	@ (8004f84 <HAL_RCC_OscConfig+0x240>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a68      	ldr	r2, [pc, #416]	@ (8004f84 <HAL_RCC_OscConfig+0x240>)
 8004de2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004de6:	6013      	str	r3, [r2, #0]
 8004de8:	4b66      	ldr	r3, [pc, #408]	@ (8004f84 <HAL_RCC_OscConfig+0x240>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a65      	ldr	r2, [pc, #404]	@ (8004f84 <HAL_RCC_OscConfig+0x240>)
 8004dee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d013      	beq.n	8004e24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfc:	f7fd f904 	bl	8002008 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e04:	f7fd f900 	bl	8002008 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b64      	cmp	r3, #100	@ 0x64
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e207      	b.n	8005226 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e16:	4b5b      	ldr	r3, [pc, #364]	@ (8004f84 <HAL_RCC_OscConfig+0x240>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0f0      	beq.n	8004e04 <HAL_RCC_OscConfig+0xc0>
 8004e22:	e014      	b.n	8004e4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e24:	f7fd f8f0 	bl	8002008 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e2c:	f7fd f8ec 	bl	8002008 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b64      	cmp	r3, #100	@ 0x64
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e1f3      	b.n	8005226 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e3e:	4b51      	ldr	r3, [pc, #324]	@ (8004f84 <HAL_RCC_OscConfig+0x240>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1f0      	bne.n	8004e2c <HAL_RCC_OscConfig+0xe8>
 8004e4a:	e000      	b.n	8004e4e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d063      	beq.n	8004f22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8004f84 <HAL_RCC_OscConfig+0x240>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 030c 	and.w	r3, r3, #12
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00b      	beq.n	8004e7e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e66:	4b47      	ldr	r3, [pc, #284]	@ (8004f84 <HAL_RCC_OscConfig+0x240>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d11c      	bne.n	8004eac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e72:	4b44      	ldr	r3, [pc, #272]	@ (8004f84 <HAL_RCC_OscConfig+0x240>)
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d116      	bne.n	8004eac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e7e:	4b41      	ldr	r3, [pc, #260]	@ (8004f84 <HAL_RCC_OscConfig+0x240>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d005      	beq.n	8004e96 <HAL_RCC_OscConfig+0x152>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d001      	beq.n	8004e96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e1c7      	b.n	8005226 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e96:	4b3b      	ldr	r3, [pc, #236]	@ (8004f84 <HAL_RCC_OscConfig+0x240>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	4937      	ldr	r1, [pc, #220]	@ (8004f84 <HAL_RCC_OscConfig+0x240>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eaa:	e03a      	b.n	8004f22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d020      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eb4:	4b34      	ldr	r3, [pc, #208]	@ (8004f88 <HAL_RCC_OscConfig+0x244>)
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eba:	f7fd f8a5 	bl	8002008 <HAL_GetTick>
 8004ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ec2:	f7fd f8a1 	bl	8002008 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e1a8      	b.n	8005226 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8004f84 <HAL_RCC_OscConfig+0x240>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0f0      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee0:	4b28      	ldr	r3, [pc, #160]	@ (8004f84 <HAL_RCC_OscConfig+0x240>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	4925      	ldr	r1, [pc, #148]	@ (8004f84 <HAL_RCC_OscConfig+0x240>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	600b      	str	r3, [r1, #0]
 8004ef4:	e015      	b.n	8004f22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ef6:	4b24      	ldr	r3, [pc, #144]	@ (8004f88 <HAL_RCC_OscConfig+0x244>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efc:	f7fd f884 	bl	8002008 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f04:	f7fd f880 	bl	8002008 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e187      	b.n	8005226 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f16:	4b1b      	ldr	r3, [pc, #108]	@ (8004f84 <HAL_RCC_OscConfig+0x240>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1f0      	bne.n	8004f04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d036      	beq.n	8004f9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d016      	beq.n	8004f64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f36:	4b15      	ldr	r3, [pc, #84]	@ (8004f8c <HAL_RCC_OscConfig+0x248>)
 8004f38:	2201      	movs	r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f3c:	f7fd f864 	bl	8002008 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f44:	f7fd f860 	bl	8002008 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e167      	b.n	8005226 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f56:	4b0b      	ldr	r3, [pc, #44]	@ (8004f84 <HAL_RCC_OscConfig+0x240>)
 8004f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0f0      	beq.n	8004f44 <HAL_RCC_OscConfig+0x200>
 8004f62:	e01b      	b.n	8004f9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f64:	4b09      	ldr	r3, [pc, #36]	@ (8004f8c <HAL_RCC_OscConfig+0x248>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f6a:	f7fd f84d 	bl	8002008 <HAL_GetTick>
 8004f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f70:	e00e      	b.n	8004f90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f72:	f7fd f849 	bl	8002008 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d907      	bls.n	8004f90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e150      	b.n	8005226 <HAL_RCC_OscConfig+0x4e2>
 8004f84:	40023800 	.word	0x40023800
 8004f88:	42470000 	.word	0x42470000
 8004f8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f90:	4b88      	ldr	r3, [pc, #544]	@ (80051b4 <HAL_RCC_OscConfig+0x470>)
 8004f92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1ea      	bne.n	8004f72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 8097 	beq.w	80050d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004faa:	2300      	movs	r3, #0
 8004fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fae:	4b81      	ldr	r3, [pc, #516]	@ (80051b4 <HAL_RCC_OscConfig+0x470>)
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10f      	bne.n	8004fda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60bb      	str	r3, [r7, #8]
 8004fbe:	4b7d      	ldr	r3, [pc, #500]	@ (80051b4 <HAL_RCC_OscConfig+0x470>)
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc2:	4a7c      	ldr	r2, [pc, #496]	@ (80051b4 <HAL_RCC_OscConfig+0x470>)
 8004fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fca:	4b7a      	ldr	r3, [pc, #488]	@ (80051b4 <HAL_RCC_OscConfig+0x470>)
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fd2:	60bb      	str	r3, [r7, #8]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fda:	4b77      	ldr	r3, [pc, #476]	@ (80051b8 <HAL_RCC_OscConfig+0x474>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d118      	bne.n	8005018 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fe6:	4b74      	ldr	r3, [pc, #464]	@ (80051b8 <HAL_RCC_OscConfig+0x474>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a73      	ldr	r2, [pc, #460]	@ (80051b8 <HAL_RCC_OscConfig+0x474>)
 8004fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ff2:	f7fd f809 	bl	8002008 <HAL_GetTick>
 8004ff6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff8:	e008      	b.n	800500c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ffa:	f7fd f805 	bl	8002008 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d901      	bls.n	800500c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e10c      	b.n	8005226 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800500c:	4b6a      	ldr	r3, [pc, #424]	@ (80051b8 <HAL_RCC_OscConfig+0x474>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0f0      	beq.n	8004ffa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d106      	bne.n	800502e <HAL_RCC_OscConfig+0x2ea>
 8005020:	4b64      	ldr	r3, [pc, #400]	@ (80051b4 <HAL_RCC_OscConfig+0x470>)
 8005022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005024:	4a63      	ldr	r2, [pc, #396]	@ (80051b4 <HAL_RCC_OscConfig+0x470>)
 8005026:	f043 0301 	orr.w	r3, r3, #1
 800502a:	6713      	str	r3, [r2, #112]	@ 0x70
 800502c:	e01c      	b.n	8005068 <HAL_RCC_OscConfig+0x324>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	2b05      	cmp	r3, #5
 8005034:	d10c      	bne.n	8005050 <HAL_RCC_OscConfig+0x30c>
 8005036:	4b5f      	ldr	r3, [pc, #380]	@ (80051b4 <HAL_RCC_OscConfig+0x470>)
 8005038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800503a:	4a5e      	ldr	r2, [pc, #376]	@ (80051b4 <HAL_RCC_OscConfig+0x470>)
 800503c:	f043 0304 	orr.w	r3, r3, #4
 8005040:	6713      	str	r3, [r2, #112]	@ 0x70
 8005042:	4b5c      	ldr	r3, [pc, #368]	@ (80051b4 <HAL_RCC_OscConfig+0x470>)
 8005044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005046:	4a5b      	ldr	r2, [pc, #364]	@ (80051b4 <HAL_RCC_OscConfig+0x470>)
 8005048:	f043 0301 	orr.w	r3, r3, #1
 800504c:	6713      	str	r3, [r2, #112]	@ 0x70
 800504e:	e00b      	b.n	8005068 <HAL_RCC_OscConfig+0x324>
 8005050:	4b58      	ldr	r3, [pc, #352]	@ (80051b4 <HAL_RCC_OscConfig+0x470>)
 8005052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005054:	4a57      	ldr	r2, [pc, #348]	@ (80051b4 <HAL_RCC_OscConfig+0x470>)
 8005056:	f023 0301 	bic.w	r3, r3, #1
 800505a:	6713      	str	r3, [r2, #112]	@ 0x70
 800505c:	4b55      	ldr	r3, [pc, #340]	@ (80051b4 <HAL_RCC_OscConfig+0x470>)
 800505e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005060:	4a54      	ldr	r2, [pc, #336]	@ (80051b4 <HAL_RCC_OscConfig+0x470>)
 8005062:	f023 0304 	bic.w	r3, r3, #4
 8005066:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d015      	beq.n	800509c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005070:	f7fc ffca 	bl	8002008 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005076:	e00a      	b.n	800508e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005078:	f7fc ffc6 	bl	8002008 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005086:	4293      	cmp	r3, r2
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e0cb      	b.n	8005226 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800508e:	4b49      	ldr	r3, [pc, #292]	@ (80051b4 <HAL_RCC_OscConfig+0x470>)
 8005090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0ee      	beq.n	8005078 <HAL_RCC_OscConfig+0x334>
 800509a:	e014      	b.n	80050c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800509c:	f7fc ffb4 	bl	8002008 <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050a2:	e00a      	b.n	80050ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050a4:	f7fc ffb0 	bl	8002008 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e0b5      	b.n	8005226 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050ba:	4b3e      	ldr	r3, [pc, #248]	@ (80051b4 <HAL_RCC_OscConfig+0x470>)
 80050bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1ee      	bne.n	80050a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050c6:	7dfb      	ldrb	r3, [r7, #23]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d105      	bne.n	80050d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050cc:	4b39      	ldr	r3, [pc, #228]	@ (80051b4 <HAL_RCC_OscConfig+0x470>)
 80050ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d0:	4a38      	ldr	r2, [pc, #224]	@ (80051b4 <HAL_RCC_OscConfig+0x470>)
 80050d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 80a1 	beq.w	8005224 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050e2:	4b34      	ldr	r3, [pc, #208]	@ (80051b4 <HAL_RCC_OscConfig+0x470>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 030c 	and.w	r3, r3, #12
 80050ea:	2b08      	cmp	r3, #8
 80050ec:	d05c      	beq.n	80051a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d141      	bne.n	800517a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f6:	4b31      	ldr	r3, [pc, #196]	@ (80051bc <HAL_RCC_OscConfig+0x478>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050fc:	f7fc ff84 	bl	8002008 <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005104:	f7fc ff80 	bl	8002008 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e087      	b.n	8005226 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005116:	4b27      	ldr	r3, [pc, #156]	@ (80051b4 <HAL_RCC_OscConfig+0x470>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1f0      	bne.n	8005104 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	69da      	ldr	r2, [r3, #28]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005130:	019b      	lsls	r3, r3, #6
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005138:	085b      	lsrs	r3, r3, #1
 800513a:	3b01      	subs	r3, #1
 800513c:	041b      	lsls	r3, r3, #16
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005144:	061b      	lsls	r3, r3, #24
 8005146:	491b      	ldr	r1, [pc, #108]	@ (80051b4 <HAL_RCC_OscConfig+0x470>)
 8005148:	4313      	orrs	r3, r2
 800514a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800514c:	4b1b      	ldr	r3, [pc, #108]	@ (80051bc <HAL_RCC_OscConfig+0x478>)
 800514e:	2201      	movs	r2, #1
 8005150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005152:	f7fc ff59 	bl	8002008 <HAL_GetTick>
 8005156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800515a:	f7fc ff55 	bl	8002008 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e05c      	b.n	8005226 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800516c:	4b11      	ldr	r3, [pc, #68]	@ (80051b4 <HAL_RCC_OscConfig+0x470>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0f0      	beq.n	800515a <HAL_RCC_OscConfig+0x416>
 8005178:	e054      	b.n	8005224 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800517a:	4b10      	ldr	r3, [pc, #64]	@ (80051bc <HAL_RCC_OscConfig+0x478>)
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005180:	f7fc ff42 	bl	8002008 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005188:	f7fc ff3e 	bl	8002008 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e045      	b.n	8005226 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800519a:	4b06      	ldr	r3, [pc, #24]	@ (80051b4 <HAL_RCC_OscConfig+0x470>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f0      	bne.n	8005188 <HAL_RCC_OscConfig+0x444>
 80051a6:	e03d      	b.n	8005224 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d107      	bne.n	80051c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e038      	b.n	8005226 <HAL_RCC_OscConfig+0x4e2>
 80051b4:	40023800 	.word	0x40023800
 80051b8:	40007000 	.word	0x40007000
 80051bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051c0:	4b1b      	ldr	r3, [pc, #108]	@ (8005230 <HAL_RCC_OscConfig+0x4ec>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d028      	beq.n	8005220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051d8:	429a      	cmp	r2, r3
 80051da:	d121      	bne.n	8005220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d11a      	bne.n	8005220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80051f0:	4013      	ands	r3, r2
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80051f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d111      	bne.n	8005220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005206:	085b      	lsrs	r3, r3, #1
 8005208:	3b01      	subs	r3, #1
 800520a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800520c:	429a      	cmp	r2, r3
 800520e:	d107      	bne.n	8005220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800521c:	429a      	cmp	r2, r3
 800521e:	d001      	beq.n	8005224 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e000      	b.n	8005226 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40023800 	.word	0x40023800

08005234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e0cc      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005248:	4b68      	ldr	r3, [pc, #416]	@ (80053ec <HAL_RCC_ClockConfig+0x1b8>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	429a      	cmp	r2, r3
 8005254:	d90c      	bls.n	8005270 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005256:	4b65      	ldr	r3, [pc, #404]	@ (80053ec <HAL_RCC_ClockConfig+0x1b8>)
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800525e:	4b63      	ldr	r3, [pc, #396]	@ (80053ec <HAL_RCC_ClockConfig+0x1b8>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	429a      	cmp	r2, r3
 800526a:	d001      	beq.n	8005270 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e0b8      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d020      	beq.n	80052be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005288:	4b59      	ldr	r3, [pc, #356]	@ (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	4a58      	ldr	r2, [pc, #352]	@ (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 800528e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005292:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b00      	cmp	r3, #0
 800529e:	d005      	beq.n	80052ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052a0:	4b53      	ldr	r3, [pc, #332]	@ (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	4a52      	ldr	r2, [pc, #328]	@ (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 80052a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80052aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052ac:	4b50      	ldr	r3, [pc, #320]	@ (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	494d      	ldr	r1, [pc, #308]	@ (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d044      	beq.n	8005354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d107      	bne.n	80052e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052d2:	4b47      	ldr	r3, [pc, #284]	@ (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d119      	bne.n	8005312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e07f      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d003      	beq.n	80052f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	d107      	bne.n	8005302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052f2:	4b3f      	ldr	r3, [pc, #252]	@ (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d109      	bne.n	8005312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e06f      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005302:	4b3b      	ldr	r3, [pc, #236]	@ (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e067      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005312:	4b37      	ldr	r3, [pc, #220]	@ (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f023 0203 	bic.w	r2, r3, #3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	4934      	ldr	r1, [pc, #208]	@ (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005320:	4313      	orrs	r3, r2
 8005322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005324:	f7fc fe70 	bl	8002008 <HAL_GetTick>
 8005328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800532a:	e00a      	b.n	8005342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800532c:	f7fc fe6c 	bl	8002008 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800533a:	4293      	cmp	r3, r2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e04f      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005342:	4b2b      	ldr	r3, [pc, #172]	@ (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f003 020c 	and.w	r2, r3, #12
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	429a      	cmp	r2, r3
 8005352:	d1eb      	bne.n	800532c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005354:	4b25      	ldr	r3, [pc, #148]	@ (80053ec <HAL_RCC_ClockConfig+0x1b8>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d20c      	bcs.n	800537c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005362:	4b22      	ldr	r3, [pc, #136]	@ (80053ec <HAL_RCC_ClockConfig+0x1b8>)
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800536a:	4b20      	ldr	r3, [pc, #128]	@ (80053ec <HAL_RCC_ClockConfig+0x1b8>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	429a      	cmp	r2, r3
 8005376:	d001      	beq.n	800537c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e032      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b00      	cmp	r3, #0
 8005386:	d008      	beq.n	800539a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005388:	4b19      	ldr	r3, [pc, #100]	@ (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	4916      	ldr	r1, [pc, #88]	@ (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005396:	4313      	orrs	r3, r2
 8005398:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d009      	beq.n	80053ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053a6:	4b12      	ldr	r3, [pc, #72]	@ (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	490e      	ldr	r1, [pc, #56]	@ (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053ba:	f000 f821 	bl	8005400 <HAL_RCC_GetSysClockFreq>
 80053be:	4602      	mov	r2, r0
 80053c0:	4b0b      	ldr	r3, [pc, #44]	@ (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	091b      	lsrs	r3, r3, #4
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	490a      	ldr	r1, [pc, #40]	@ (80053f4 <HAL_RCC_ClockConfig+0x1c0>)
 80053cc:	5ccb      	ldrb	r3, [r1, r3]
 80053ce:	fa22 f303 	lsr.w	r3, r2, r3
 80053d2:	4a09      	ldr	r2, [pc, #36]	@ (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 80053d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80053d6:	4b09      	ldr	r3, [pc, #36]	@ (80053fc <HAL_RCC_ClockConfig+0x1c8>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4618      	mov	r0, r3
 80053dc:	f7fc fdd0 	bl	8001f80 <HAL_InitTick>

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	40023c00 	.word	0x40023c00
 80053f0:	40023800 	.word	0x40023800
 80053f4:	0800a9c4 	.word	0x0800a9c4
 80053f8:	20000090 	.word	0x20000090
 80053fc:	20000094 	.word	0x20000094

08005400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005404:	b094      	sub	sp, #80	@ 0x50
 8005406:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800540c:	2300      	movs	r3, #0
 800540e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005418:	4b79      	ldr	r3, [pc, #484]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x200>)
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f003 030c 	and.w	r3, r3, #12
 8005420:	2b08      	cmp	r3, #8
 8005422:	d00d      	beq.n	8005440 <HAL_RCC_GetSysClockFreq+0x40>
 8005424:	2b08      	cmp	r3, #8
 8005426:	f200 80e1 	bhi.w	80055ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <HAL_RCC_GetSysClockFreq+0x34>
 800542e:	2b04      	cmp	r3, #4
 8005430:	d003      	beq.n	800543a <HAL_RCC_GetSysClockFreq+0x3a>
 8005432:	e0db      	b.n	80055ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005434:	4b73      	ldr	r3, [pc, #460]	@ (8005604 <HAL_RCC_GetSysClockFreq+0x204>)
 8005436:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005438:	e0db      	b.n	80055f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800543a:	4b73      	ldr	r3, [pc, #460]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x208>)
 800543c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800543e:	e0d8      	b.n	80055f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005440:	4b6f      	ldr	r3, [pc, #444]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x200>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005448:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800544a:	4b6d      	ldr	r3, [pc, #436]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x200>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d063      	beq.n	800551e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005456:	4b6a      	ldr	r3, [pc, #424]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x200>)
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	099b      	lsrs	r3, r3, #6
 800545c:	2200      	movs	r2, #0
 800545e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005460:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005468:	633b      	str	r3, [r7, #48]	@ 0x30
 800546a:	2300      	movs	r3, #0
 800546c:	637b      	str	r3, [r7, #52]	@ 0x34
 800546e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005472:	4622      	mov	r2, r4
 8005474:	462b      	mov	r3, r5
 8005476:	f04f 0000 	mov.w	r0, #0
 800547a:	f04f 0100 	mov.w	r1, #0
 800547e:	0159      	lsls	r1, r3, #5
 8005480:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005484:	0150      	lsls	r0, r2, #5
 8005486:	4602      	mov	r2, r0
 8005488:	460b      	mov	r3, r1
 800548a:	4621      	mov	r1, r4
 800548c:	1a51      	subs	r1, r2, r1
 800548e:	6139      	str	r1, [r7, #16]
 8005490:	4629      	mov	r1, r5
 8005492:	eb63 0301 	sbc.w	r3, r3, r1
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	f04f 0200 	mov.w	r2, #0
 800549c:	f04f 0300 	mov.w	r3, #0
 80054a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054a4:	4659      	mov	r1, fp
 80054a6:	018b      	lsls	r3, r1, #6
 80054a8:	4651      	mov	r1, sl
 80054aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054ae:	4651      	mov	r1, sl
 80054b0:	018a      	lsls	r2, r1, #6
 80054b2:	4651      	mov	r1, sl
 80054b4:	ebb2 0801 	subs.w	r8, r2, r1
 80054b8:	4659      	mov	r1, fp
 80054ba:	eb63 0901 	sbc.w	r9, r3, r1
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	f04f 0300 	mov.w	r3, #0
 80054c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054d2:	4690      	mov	r8, r2
 80054d4:	4699      	mov	r9, r3
 80054d6:	4623      	mov	r3, r4
 80054d8:	eb18 0303 	adds.w	r3, r8, r3
 80054dc:	60bb      	str	r3, [r7, #8]
 80054de:	462b      	mov	r3, r5
 80054e0:	eb49 0303 	adc.w	r3, r9, r3
 80054e4:	60fb      	str	r3, [r7, #12]
 80054e6:	f04f 0200 	mov.w	r2, #0
 80054ea:	f04f 0300 	mov.w	r3, #0
 80054ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054f2:	4629      	mov	r1, r5
 80054f4:	024b      	lsls	r3, r1, #9
 80054f6:	4621      	mov	r1, r4
 80054f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80054fc:	4621      	mov	r1, r4
 80054fe:	024a      	lsls	r2, r1, #9
 8005500:	4610      	mov	r0, r2
 8005502:	4619      	mov	r1, r3
 8005504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005506:	2200      	movs	r2, #0
 8005508:	62bb      	str	r3, [r7, #40]	@ 0x28
 800550a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800550c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005510:	f7fb fb4a 	bl	8000ba8 <__aeabi_uldivmod>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	4613      	mov	r3, r2
 800551a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800551c:	e058      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800551e:	4b38      	ldr	r3, [pc, #224]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x200>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	099b      	lsrs	r3, r3, #6
 8005524:	2200      	movs	r2, #0
 8005526:	4618      	mov	r0, r3
 8005528:	4611      	mov	r1, r2
 800552a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800552e:	623b      	str	r3, [r7, #32]
 8005530:	2300      	movs	r3, #0
 8005532:	627b      	str	r3, [r7, #36]	@ 0x24
 8005534:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005538:	4642      	mov	r2, r8
 800553a:	464b      	mov	r3, r9
 800553c:	f04f 0000 	mov.w	r0, #0
 8005540:	f04f 0100 	mov.w	r1, #0
 8005544:	0159      	lsls	r1, r3, #5
 8005546:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800554a:	0150      	lsls	r0, r2, #5
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	4641      	mov	r1, r8
 8005552:	ebb2 0a01 	subs.w	sl, r2, r1
 8005556:	4649      	mov	r1, r9
 8005558:	eb63 0b01 	sbc.w	fp, r3, r1
 800555c:	f04f 0200 	mov.w	r2, #0
 8005560:	f04f 0300 	mov.w	r3, #0
 8005564:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005568:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800556c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005570:	ebb2 040a 	subs.w	r4, r2, sl
 8005574:	eb63 050b 	sbc.w	r5, r3, fp
 8005578:	f04f 0200 	mov.w	r2, #0
 800557c:	f04f 0300 	mov.w	r3, #0
 8005580:	00eb      	lsls	r3, r5, #3
 8005582:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005586:	00e2      	lsls	r2, r4, #3
 8005588:	4614      	mov	r4, r2
 800558a:	461d      	mov	r5, r3
 800558c:	4643      	mov	r3, r8
 800558e:	18e3      	adds	r3, r4, r3
 8005590:	603b      	str	r3, [r7, #0]
 8005592:	464b      	mov	r3, r9
 8005594:	eb45 0303 	adc.w	r3, r5, r3
 8005598:	607b      	str	r3, [r7, #4]
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	f04f 0300 	mov.w	r3, #0
 80055a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055a6:	4629      	mov	r1, r5
 80055a8:	028b      	lsls	r3, r1, #10
 80055aa:	4621      	mov	r1, r4
 80055ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055b0:	4621      	mov	r1, r4
 80055b2:	028a      	lsls	r2, r1, #10
 80055b4:	4610      	mov	r0, r2
 80055b6:	4619      	mov	r1, r3
 80055b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055ba:	2200      	movs	r2, #0
 80055bc:	61bb      	str	r3, [r7, #24]
 80055be:	61fa      	str	r2, [r7, #28]
 80055c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055c4:	f7fb faf0 	bl	8000ba8 <__aeabi_uldivmod>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	4613      	mov	r3, r2
 80055ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80055d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x200>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	0c1b      	lsrs	r3, r3, #16
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	3301      	adds	r3, #1
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80055e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055ea:	e002      	b.n	80055f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055ec:	4b05      	ldr	r3, [pc, #20]	@ (8005604 <HAL_RCC_GetSysClockFreq+0x204>)
 80055ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3750      	adds	r7, #80	@ 0x50
 80055f8:	46bd      	mov	sp, r7
 80055fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055fe:	bf00      	nop
 8005600:	40023800 	.word	0x40023800
 8005604:	00f42400 	.word	0x00f42400
 8005608:	007a1200 	.word	0x007a1200

0800560c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005610:	4b03      	ldr	r3, [pc, #12]	@ (8005620 <HAL_RCC_GetHCLKFreq+0x14>)
 8005612:	681b      	ldr	r3, [r3, #0]
}
 8005614:	4618      	mov	r0, r3
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	20000090 	.word	0x20000090

08005624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005628:	f7ff fff0 	bl	800560c <HAL_RCC_GetHCLKFreq>
 800562c:	4602      	mov	r2, r0
 800562e:	4b05      	ldr	r3, [pc, #20]	@ (8005644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	0a9b      	lsrs	r3, r3, #10
 8005634:	f003 0307 	and.w	r3, r3, #7
 8005638:	4903      	ldr	r1, [pc, #12]	@ (8005648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800563a:	5ccb      	ldrb	r3, [r1, r3]
 800563c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005640:	4618      	mov	r0, r3
 8005642:	bd80      	pop	{r7, pc}
 8005644:	40023800 	.word	0x40023800
 8005648:	0800a9d4 	.word	0x0800a9d4

0800564c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005650:	f7ff ffdc 	bl	800560c <HAL_RCC_GetHCLKFreq>
 8005654:	4602      	mov	r2, r0
 8005656:	4b05      	ldr	r3, [pc, #20]	@ (800566c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	0b5b      	lsrs	r3, r3, #13
 800565c:	f003 0307 	and.w	r3, r3, #7
 8005660:	4903      	ldr	r1, [pc, #12]	@ (8005670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005662:	5ccb      	ldrb	r3, [r1, r3]
 8005664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005668:	4618      	mov	r0, r3
 800566a:	bd80      	pop	{r7, pc}
 800566c:	40023800 	.word	0x40023800
 8005670:	0800a9d4 	.word	0x0800a9d4

08005674 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e042      	b.n	800570c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d106      	bne.n	80056a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7fc fb5a 	bl	8001d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2224      	movs	r2, #36	@ 0x24
 80056a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68da      	ldr	r2, [r3, #12]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f973 	bl	80059a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	691a      	ldr	r2, [r3, #16]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695a      	ldr	r2, [r3, #20]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68da      	ldr	r2, [r3, #12]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2220      	movs	r2, #32
 8005700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b08a      	sub	sp, #40	@ 0x28
 8005718:	af02      	add	r7, sp, #8
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	603b      	str	r3, [r7, #0]
 8005720:	4613      	mov	r3, r2
 8005722:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005724:	2300      	movs	r3, #0
 8005726:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b20      	cmp	r3, #32
 8005732:	d175      	bne.n	8005820 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d002      	beq.n	8005740 <HAL_UART_Transmit+0x2c>
 800573a:	88fb      	ldrh	r3, [r7, #6]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e06e      	b.n	8005822 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2221      	movs	r2, #33	@ 0x21
 800574e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005752:	f7fc fc59 	bl	8002008 <HAL_GetTick>
 8005756:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	88fa      	ldrh	r2, [r7, #6]
 800575c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	88fa      	ldrh	r2, [r7, #6]
 8005762:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800576c:	d108      	bne.n	8005780 <HAL_UART_Transmit+0x6c>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d104      	bne.n	8005780 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005776:	2300      	movs	r3, #0
 8005778:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	61bb      	str	r3, [r7, #24]
 800577e:	e003      	b.n	8005788 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005784:	2300      	movs	r3, #0
 8005786:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005788:	e02e      	b.n	80057e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2200      	movs	r2, #0
 8005792:	2180      	movs	r1, #128	@ 0x80
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 f848 	bl	800582a <UART_WaitOnFlagUntilTimeout>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d005      	beq.n	80057ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e03a      	b.n	8005822 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10b      	bne.n	80057ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	3302      	adds	r3, #2
 80057c6:	61bb      	str	r3, [r7, #24]
 80057c8:	e007      	b.n	80057da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	781a      	ldrb	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	3301      	adds	r3, #1
 80057d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057de:	b29b      	uxth	r3, r3
 80057e0:	3b01      	subs	r3, #1
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1cb      	bne.n	800578a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2200      	movs	r2, #0
 80057fa:	2140      	movs	r1, #64	@ 0x40
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 f814 	bl	800582a <UART_WaitOnFlagUntilTimeout>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d005      	beq.n	8005814 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2220      	movs	r2, #32
 800580c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e006      	b.n	8005822 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2220      	movs	r2, #32
 8005818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800581c:	2300      	movs	r3, #0
 800581e:	e000      	b.n	8005822 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005820:	2302      	movs	r3, #2
  }
}
 8005822:	4618      	mov	r0, r3
 8005824:	3720      	adds	r7, #32
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b086      	sub	sp, #24
 800582e:	af00      	add	r7, sp, #0
 8005830:	60f8      	str	r0, [r7, #12]
 8005832:	60b9      	str	r1, [r7, #8]
 8005834:	603b      	str	r3, [r7, #0]
 8005836:	4613      	mov	r3, r2
 8005838:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800583a:	e03b      	b.n	80058b4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005842:	d037      	beq.n	80058b4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005844:	f7fc fbe0 	bl	8002008 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	6a3a      	ldr	r2, [r7, #32]
 8005850:	429a      	cmp	r2, r3
 8005852:	d302      	bcc.n	800585a <UART_WaitOnFlagUntilTimeout+0x30>
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e03a      	b.n	80058d4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f003 0304 	and.w	r3, r3, #4
 8005868:	2b00      	cmp	r3, #0
 800586a:	d023      	beq.n	80058b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2b80      	cmp	r3, #128	@ 0x80
 8005870:	d020      	beq.n	80058b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	2b40      	cmp	r3, #64	@ 0x40
 8005876:	d01d      	beq.n	80058b4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0308 	and.w	r3, r3, #8
 8005882:	2b08      	cmp	r3, #8
 8005884:	d116      	bne.n	80058b4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	617b      	str	r3, [r7, #20]
 800589a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 f81d 	bl	80058dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2208      	movs	r2, #8
 80058a6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e00f      	b.n	80058d4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	4013      	ands	r3, r2
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	bf0c      	ite	eq
 80058c4:	2301      	moveq	r3, #1
 80058c6:	2300      	movne	r3, #0
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	461a      	mov	r2, r3
 80058cc:	79fb      	ldrb	r3, [r7, #7]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d0b4      	beq.n	800583c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3718      	adds	r7, #24
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058dc:	b480      	push	{r7}
 80058de:	b095      	sub	sp, #84	@ 0x54
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	330c      	adds	r3, #12
 80058ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ee:	e853 3f00 	ldrex	r3, [r3]
 80058f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	330c      	adds	r3, #12
 8005902:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005904:	643a      	str	r2, [r7, #64]	@ 0x40
 8005906:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005908:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800590a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800590c:	e841 2300 	strex	r3, r2, [r1]
 8005910:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1e5      	bne.n	80058e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3314      	adds	r3, #20
 800591e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	e853 3f00 	ldrex	r3, [r3]
 8005926:	61fb      	str	r3, [r7, #28]
   return(result);
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	f023 0301 	bic.w	r3, r3, #1
 800592e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3314      	adds	r3, #20
 8005936:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005938:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800593a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800593e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005940:	e841 2300 	strex	r3, r2, [r1]
 8005944:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1e5      	bne.n	8005918 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005950:	2b01      	cmp	r3, #1
 8005952:	d119      	bne.n	8005988 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	330c      	adds	r3, #12
 800595a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	e853 3f00 	ldrex	r3, [r3]
 8005962:	60bb      	str	r3, [r7, #8]
   return(result);
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f023 0310 	bic.w	r3, r3, #16
 800596a:	647b      	str	r3, [r7, #68]	@ 0x44
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	330c      	adds	r3, #12
 8005972:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005974:	61ba      	str	r2, [r7, #24]
 8005976:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005978:	6979      	ldr	r1, [r7, #20]
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	e841 2300 	strex	r3, r2, [r1]
 8005980:	613b      	str	r3, [r7, #16]
   return(result);
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1e5      	bne.n	8005954 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2220      	movs	r2, #32
 800598c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005996:	bf00      	nop
 8005998:	3754      	adds	r7, #84	@ 0x54
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
	...

080059a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059a8:	b0c0      	sub	sp, #256	@ 0x100
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80059bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c0:	68d9      	ldr	r1, [r3, #12]
 80059c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	ea40 0301 	orr.w	r3, r0, r1
 80059cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	431a      	orrs	r2, r3
 80059dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	431a      	orrs	r2, r3
 80059e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80059fc:	f021 010c 	bic.w	r1, r1, #12
 8005a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a0a:	430b      	orrs	r3, r1
 8005a0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a1e:	6999      	ldr	r1, [r3, #24]
 8005a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	ea40 0301 	orr.w	r3, r0, r1
 8005a2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	4b8f      	ldr	r3, [pc, #572]	@ (8005c70 <UART_SetConfig+0x2cc>)
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d005      	beq.n	8005a44 <UART_SetConfig+0xa0>
 8005a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	4b8d      	ldr	r3, [pc, #564]	@ (8005c74 <UART_SetConfig+0x2d0>)
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d104      	bne.n	8005a4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a44:	f7ff fe02 	bl	800564c <HAL_RCC_GetPCLK2Freq>
 8005a48:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a4c:	e003      	b.n	8005a56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a4e:	f7ff fde9 	bl	8005624 <HAL_RCC_GetPCLK1Freq>
 8005a52:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a60:	f040 810c 	bne.w	8005c7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a6e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005a72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005a76:	4622      	mov	r2, r4
 8005a78:	462b      	mov	r3, r5
 8005a7a:	1891      	adds	r1, r2, r2
 8005a7c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005a7e:	415b      	adcs	r3, r3
 8005a80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a86:	4621      	mov	r1, r4
 8005a88:	eb12 0801 	adds.w	r8, r2, r1
 8005a8c:	4629      	mov	r1, r5
 8005a8e:	eb43 0901 	adc.w	r9, r3, r1
 8005a92:	f04f 0200 	mov.w	r2, #0
 8005a96:	f04f 0300 	mov.w	r3, #0
 8005a9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005aa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005aa6:	4690      	mov	r8, r2
 8005aa8:	4699      	mov	r9, r3
 8005aaa:	4623      	mov	r3, r4
 8005aac:	eb18 0303 	adds.w	r3, r8, r3
 8005ab0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ab4:	462b      	mov	r3, r5
 8005ab6:	eb49 0303 	adc.w	r3, r9, r3
 8005aba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005aca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005ace:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	18db      	adds	r3, r3, r3
 8005ad6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ad8:	4613      	mov	r3, r2
 8005ada:	eb42 0303 	adc.w	r3, r2, r3
 8005ade:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ae0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ae4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ae8:	f7fb f85e 	bl	8000ba8 <__aeabi_uldivmod>
 8005aec:	4602      	mov	r2, r0
 8005aee:	460b      	mov	r3, r1
 8005af0:	4b61      	ldr	r3, [pc, #388]	@ (8005c78 <UART_SetConfig+0x2d4>)
 8005af2:	fba3 2302 	umull	r2, r3, r3, r2
 8005af6:	095b      	lsrs	r3, r3, #5
 8005af8:	011c      	lsls	r4, r3, #4
 8005afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005afe:	2200      	movs	r2, #0
 8005b00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b04:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005b08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005b0c:	4642      	mov	r2, r8
 8005b0e:	464b      	mov	r3, r9
 8005b10:	1891      	adds	r1, r2, r2
 8005b12:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b14:	415b      	adcs	r3, r3
 8005b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b1c:	4641      	mov	r1, r8
 8005b1e:	eb12 0a01 	adds.w	sl, r2, r1
 8005b22:	4649      	mov	r1, r9
 8005b24:	eb43 0b01 	adc.w	fp, r3, r1
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	f04f 0300 	mov.w	r3, #0
 8005b30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b3c:	4692      	mov	sl, r2
 8005b3e:	469b      	mov	fp, r3
 8005b40:	4643      	mov	r3, r8
 8005b42:	eb1a 0303 	adds.w	r3, sl, r3
 8005b46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b4a:	464b      	mov	r3, r9
 8005b4c:	eb4b 0303 	adc.w	r3, fp, r3
 8005b50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b60:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005b64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	18db      	adds	r3, r3, r3
 8005b6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b6e:	4613      	mov	r3, r2
 8005b70:	eb42 0303 	adc.w	r3, r2, r3
 8005b74:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005b7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005b7e:	f7fb f813 	bl	8000ba8 <__aeabi_uldivmod>
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	4611      	mov	r1, r2
 8005b88:	4b3b      	ldr	r3, [pc, #236]	@ (8005c78 <UART_SetConfig+0x2d4>)
 8005b8a:	fba3 2301 	umull	r2, r3, r3, r1
 8005b8e:	095b      	lsrs	r3, r3, #5
 8005b90:	2264      	movs	r2, #100	@ 0x64
 8005b92:	fb02 f303 	mul.w	r3, r2, r3
 8005b96:	1acb      	subs	r3, r1, r3
 8005b98:	00db      	lsls	r3, r3, #3
 8005b9a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b9e:	4b36      	ldr	r3, [pc, #216]	@ (8005c78 <UART_SetConfig+0x2d4>)
 8005ba0:	fba3 2302 	umull	r2, r3, r3, r2
 8005ba4:	095b      	lsrs	r3, r3, #5
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005bac:	441c      	add	r4, r3
 8005bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005bb8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005bbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005bc0:	4642      	mov	r2, r8
 8005bc2:	464b      	mov	r3, r9
 8005bc4:	1891      	adds	r1, r2, r2
 8005bc6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005bc8:	415b      	adcs	r3, r3
 8005bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005bd0:	4641      	mov	r1, r8
 8005bd2:	1851      	adds	r1, r2, r1
 8005bd4:	6339      	str	r1, [r7, #48]	@ 0x30
 8005bd6:	4649      	mov	r1, r9
 8005bd8:	414b      	adcs	r3, r1
 8005bda:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bdc:	f04f 0200 	mov.w	r2, #0
 8005be0:	f04f 0300 	mov.w	r3, #0
 8005be4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005be8:	4659      	mov	r1, fp
 8005bea:	00cb      	lsls	r3, r1, #3
 8005bec:	4651      	mov	r1, sl
 8005bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bf2:	4651      	mov	r1, sl
 8005bf4:	00ca      	lsls	r2, r1, #3
 8005bf6:	4610      	mov	r0, r2
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	4642      	mov	r2, r8
 8005bfe:	189b      	adds	r3, r3, r2
 8005c00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c04:	464b      	mov	r3, r9
 8005c06:	460a      	mov	r2, r1
 8005c08:	eb42 0303 	adc.w	r3, r2, r3
 8005c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c1c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c24:	460b      	mov	r3, r1
 8005c26:	18db      	adds	r3, r3, r3
 8005c28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	eb42 0303 	adc.w	r3, r2, r3
 8005c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c3a:	f7fa ffb5 	bl	8000ba8 <__aeabi_uldivmod>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	460b      	mov	r3, r1
 8005c42:	4b0d      	ldr	r3, [pc, #52]	@ (8005c78 <UART_SetConfig+0x2d4>)
 8005c44:	fba3 1302 	umull	r1, r3, r3, r2
 8005c48:	095b      	lsrs	r3, r3, #5
 8005c4a:	2164      	movs	r1, #100	@ 0x64
 8005c4c:	fb01 f303 	mul.w	r3, r1, r3
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	3332      	adds	r3, #50	@ 0x32
 8005c56:	4a08      	ldr	r2, [pc, #32]	@ (8005c78 <UART_SetConfig+0x2d4>)
 8005c58:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5c:	095b      	lsrs	r3, r3, #5
 8005c5e:	f003 0207 	and.w	r2, r3, #7
 8005c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4422      	add	r2, r4
 8005c6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c6c:	e106      	b.n	8005e7c <UART_SetConfig+0x4d8>
 8005c6e:	bf00      	nop
 8005c70:	40011000 	.word	0x40011000
 8005c74:	40011400 	.word	0x40011400
 8005c78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c80:	2200      	movs	r2, #0
 8005c82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c86:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005c8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005c8e:	4642      	mov	r2, r8
 8005c90:	464b      	mov	r3, r9
 8005c92:	1891      	adds	r1, r2, r2
 8005c94:	6239      	str	r1, [r7, #32]
 8005c96:	415b      	adcs	r3, r3
 8005c98:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c9e:	4641      	mov	r1, r8
 8005ca0:	1854      	adds	r4, r2, r1
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	eb43 0501 	adc.w	r5, r3, r1
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	f04f 0300 	mov.w	r3, #0
 8005cb0:	00eb      	lsls	r3, r5, #3
 8005cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cb6:	00e2      	lsls	r2, r4, #3
 8005cb8:	4614      	mov	r4, r2
 8005cba:	461d      	mov	r5, r3
 8005cbc:	4643      	mov	r3, r8
 8005cbe:	18e3      	adds	r3, r4, r3
 8005cc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005cc4:	464b      	mov	r3, r9
 8005cc6:	eb45 0303 	adc.w	r3, r5, r3
 8005cca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005cda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005cde:	f04f 0200 	mov.w	r2, #0
 8005ce2:	f04f 0300 	mov.w	r3, #0
 8005ce6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005cea:	4629      	mov	r1, r5
 8005cec:	008b      	lsls	r3, r1, #2
 8005cee:	4621      	mov	r1, r4
 8005cf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	008a      	lsls	r2, r1, #2
 8005cf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005cfc:	f7fa ff54 	bl	8000ba8 <__aeabi_uldivmod>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	4b60      	ldr	r3, [pc, #384]	@ (8005e88 <UART_SetConfig+0x4e4>)
 8005d06:	fba3 2302 	umull	r2, r3, r3, r2
 8005d0a:	095b      	lsrs	r3, r3, #5
 8005d0c:	011c      	lsls	r4, r3, #4
 8005d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d12:	2200      	movs	r2, #0
 8005d14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005d20:	4642      	mov	r2, r8
 8005d22:	464b      	mov	r3, r9
 8005d24:	1891      	adds	r1, r2, r2
 8005d26:	61b9      	str	r1, [r7, #24]
 8005d28:	415b      	adcs	r3, r3
 8005d2a:	61fb      	str	r3, [r7, #28]
 8005d2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d30:	4641      	mov	r1, r8
 8005d32:	1851      	adds	r1, r2, r1
 8005d34:	6139      	str	r1, [r7, #16]
 8005d36:	4649      	mov	r1, r9
 8005d38:	414b      	adcs	r3, r1
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	f04f 0200 	mov.w	r2, #0
 8005d40:	f04f 0300 	mov.w	r3, #0
 8005d44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d48:	4659      	mov	r1, fp
 8005d4a:	00cb      	lsls	r3, r1, #3
 8005d4c:	4651      	mov	r1, sl
 8005d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d52:	4651      	mov	r1, sl
 8005d54:	00ca      	lsls	r2, r1, #3
 8005d56:	4610      	mov	r0, r2
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	4642      	mov	r2, r8
 8005d5e:	189b      	adds	r3, r3, r2
 8005d60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d64:	464b      	mov	r3, r9
 8005d66:	460a      	mov	r2, r1
 8005d68:	eb42 0303 	adc.w	r3, r2, r3
 8005d6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	f04f 0300 	mov.w	r3, #0
 8005d84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005d88:	4649      	mov	r1, r9
 8005d8a:	008b      	lsls	r3, r1, #2
 8005d8c:	4641      	mov	r1, r8
 8005d8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d92:	4641      	mov	r1, r8
 8005d94:	008a      	lsls	r2, r1, #2
 8005d96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d9a:	f7fa ff05 	bl	8000ba8 <__aeabi_uldivmod>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	460b      	mov	r3, r1
 8005da2:	4611      	mov	r1, r2
 8005da4:	4b38      	ldr	r3, [pc, #224]	@ (8005e88 <UART_SetConfig+0x4e4>)
 8005da6:	fba3 2301 	umull	r2, r3, r3, r1
 8005daa:	095b      	lsrs	r3, r3, #5
 8005dac:	2264      	movs	r2, #100	@ 0x64
 8005dae:	fb02 f303 	mul.w	r3, r2, r3
 8005db2:	1acb      	subs	r3, r1, r3
 8005db4:	011b      	lsls	r3, r3, #4
 8005db6:	3332      	adds	r3, #50	@ 0x32
 8005db8:	4a33      	ldr	r2, [pc, #204]	@ (8005e88 <UART_SetConfig+0x4e4>)
 8005dba:	fba2 2303 	umull	r2, r3, r2, r3
 8005dbe:	095b      	lsrs	r3, r3, #5
 8005dc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005dc4:	441c      	add	r4, r3
 8005dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dca:	2200      	movs	r2, #0
 8005dcc:	673b      	str	r3, [r7, #112]	@ 0x70
 8005dce:	677a      	str	r2, [r7, #116]	@ 0x74
 8005dd0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005dd4:	4642      	mov	r2, r8
 8005dd6:	464b      	mov	r3, r9
 8005dd8:	1891      	adds	r1, r2, r2
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	415b      	adcs	r3, r3
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005de4:	4641      	mov	r1, r8
 8005de6:	1851      	adds	r1, r2, r1
 8005de8:	6039      	str	r1, [r7, #0]
 8005dea:	4649      	mov	r1, r9
 8005dec:	414b      	adcs	r3, r1
 8005dee:	607b      	str	r3, [r7, #4]
 8005df0:	f04f 0200 	mov.w	r2, #0
 8005df4:	f04f 0300 	mov.w	r3, #0
 8005df8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005dfc:	4659      	mov	r1, fp
 8005dfe:	00cb      	lsls	r3, r1, #3
 8005e00:	4651      	mov	r1, sl
 8005e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e06:	4651      	mov	r1, sl
 8005e08:	00ca      	lsls	r2, r1, #3
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	4603      	mov	r3, r0
 8005e10:	4642      	mov	r2, r8
 8005e12:	189b      	adds	r3, r3, r2
 8005e14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e16:	464b      	mov	r3, r9
 8005e18:	460a      	mov	r2, r1
 8005e1a:	eb42 0303 	adc.w	r3, r2, r3
 8005e1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e2a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e2c:	f04f 0200 	mov.w	r2, #0
 8005e30:	f04f 0300 	mov.w	r3, #0
 8005e34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e38:	4649      	mov	r1, r9
 8005e3a:	008b      	lsls	r3, r1, #2
 8005e3c:	4641      	mov	r1, r8
 8005e3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e42:	4641      	mov	r1, r8
 8005e44:	008a      	lsls	r2, r1, #2
 8005e46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e4a:	f7fa fead 	bl	8000ba8 <__aeabi_uldivmod>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	460b      	mov	r3, r1
 8005e52:	4b0d      	ldr	r3, [pc, #52]	@ (8005e88 <UART_SetConfig+0x4e4>)
 8005e54:	fba3 1302 	umull	r1, r3, r3, r2
 8005e58:	095b      	lsrs	r3, r3, #5
 8005e5a:	2164      	movs	r1, #100	@ 0x64
 8005e5c:	fb01 f303 	mul.w	r3, r1, r3
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	011b      	lsls	r3, r3, #4
 8005e64:	3332      	adds	r3, #50	@ 0x32
 8005e66:	4a08      	ldr	r2, [pc, #32]	@ (8005e88 <UART_SetConfig+0x4e4>)
 8005e68:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6c:	095b      	lsrs	r3, r3, #5
 8005e6e:	f003 020f 	and.w	r2, r3, #15
 8005e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4422      	add	r2, r4
 8005e7a:	609a      	str	r2, [r3, #8]
}
 8005e7c:	bf00      	nop
 8005e7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005e82:	46bd      	mov	sp, r7
 8005e84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e88:	51eb851f 	.word	0x51eb851f

08005e8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e8c:	b084      	sub	sp, #16
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b084      	sub	sp, #16
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
 8005e96:	f107 001c 	add.w	r0, r7, #28
 8005e9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e9e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d123      	bne.n	8005eee <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eaa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005eba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ece:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d105      	bne.n	8005ee2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f001 fae8 	bl	80074b8 <USB_CoreReset>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	73fb      	strb	r3, [r7, #15]
 8005eec:	e01b      	b.n	8005f26 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f001 fadc 	bl	80074b8 <USB_CoreReset>
 8005f00:	4603      	mov	r3, r0
 8005f02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f04:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d106      	bne.n	8005f1a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f10:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f18:	e005      	b.n	8005f26 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f1e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f26:	7fbb      	ldrb	r3, [r7, #30]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d10b      	bne.n	8005f44 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f043 0206 	orr.w	r2, r3, #6
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f043 0220 	orr.w	r2, r3, #32
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f50:	b004      	add	sp, #16
 8005f52:	4770      	bx	lr

08005f54 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005f62:	79fb      	ldrb	r3, [r7, #7]
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d165      	bne.n	8006034 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	4a41      	ldr	r2, [pc, #260]	@ (8006070 <USB_SetTurnaroundTime+0x11c>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d906      	bls.n	8005f7e <USB_SetTurnaroundTime+0x2a>
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	4a40      	ldr	r2, [pc, #256]	@ (8006074 <USB_SetTurnaroundTime+0x120>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d202      	bcs.n	8005f7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005f78:	230f      	movs	r3, #15
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	e062      	b.n	8006044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	4a3c      	ldr	r2, [pc, #240]	@ (8006074 <USB_SetTurnaroundTime+0x120>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d306      	bcc.n	8005f94 <USB_SetTurnaroundTime+0x40>
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	4a3b      	ldr	r2, [pc, #236]	@ (8006078 <USB_SetTurnaroundTime+0x124>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d202      	bcs.n	8005f94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005f8e:	230e      	movs	r3, #14
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	e057      	b.n	8006044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	4a38      	ldr	r2, [pc, #224]	@ (8006078 <USB_SetTurnaroundTime+0x124>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d306      	bcc.n	8005faa <USB_SetTurnaroundTime+0x56>
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	4a37      	ldr	r2, [pc, #220]	@ (800607c <USB_SetTurnaroundTime+0x128>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d202      	bcs.n	8005faa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005fa4:	230d      	movs	r3, #13
 8005fa6:	617b      	str	r3, [r7, #20]
 8005fa8:	e04c      	b.n	8006044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	4a33      	ldr	r2, [pc, #204]	@ (800607c <USB_SetTurnaroundTime+0x128>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d306      	bcc.n	8005fc0 <USB_SetTurnaroundTime+0x6c>
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	4a32      	ldr	r2, [pc, #200]	@ (8006080 <USB_SetTurnaroundTime+0x12c>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d802      	bhi.n	8005fc0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005fba:	230c      	movs	r3, #12
 8005fbc:	617b      	str	r3, [r7, #20]
 8005fbe:	e041      	b.n	8006044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	4a2f      	ldr	r2, [pc, #188]	@ (8006080 <USB_SetTurnaroundTime+0x12c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d906      	bls.n	8005fd6 <USB_SetTurnaroundTime+0x82>
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	4a2e      	ldr	r2, [pc, #184]	@ (8006084 <USB_SetTurnaroundTime+0x130>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d802      	bhi.n	8005fd6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005fd0:	230b      	movs	r3, #11
 8005fd2:	617b      	str	r3, [r7, #20]
 8005fd4:	e036      	b.n	8006044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	4a2a      	ldr	r2, [pc, #168]	@ (8006084 <USB_SetTurnaroundTime+0x130>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d906      	bls.n	8005fec <USB_SetTurnaroundTime+0x98>
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	4a29      	ldr	r2, [pc, #164]	@ (8006088 <USB_SetTurnaroundTime+0x134>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d802      	bhi.n	8005fec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005fe6:	230a      	movs	r3, #10
 8005fe8:	617b      	str	r3, [r7, #20]
 8005fea:	e02b      	b.n	8006044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	4a26      	ldr	r2, [pc, #152]	@ (8006088 <USB_SetTurnaroundTime+0x134>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d906      	bls.n	8006002 <USB_SetTurnaroundTime+0xae>
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	4a25      	ldr	r2, [pc, #148]	@ (800608c <USB_SetTurnaroundTime+0x138>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d202      	bcs.n	8006002 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005ffc:	2309      	movs	r3, #9
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	e020      	b.n	8006044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	4a21      	ldr	r2, [pc, #132]	@ (800608c <USB_SetTurnaroundTime+0x138>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d306      	bcc.n	8006018 <USB_SetTurnaroundTime+0xc4>
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	4a20      	ldr	r2, [pc, #128]	@ (8006090 <USB_SetTurnaroundTime+0x13c>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d802      	bhi.n	8006018 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006012:	2308      	movs	r3, #8
 8006014:	617b      	str	r3, [r7, #20]
 8006016:	e015      	b.n	8006044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	4a1d      	ldr	r2, [pc, #116]	@ (8006090 <USB_SetTurnaroundTime+0x13c>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d906      	bls.n	800602e <USB_SetTurnaroundTime+0xda>
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	4a1c      	ldr	r2, [pc, #112]	@ (8006094 <USB_SetTurnaroundTime+0x140>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d202      	bcs.n	800602e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006028:	2307      	movs	r3, #7
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	e00a      	b.n	8006044 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800602e:	2306      	movs	r3, #6
 8006030:	617b      	str	r3, [r7, #20]
 8006032:	e007      	b.n	8006044 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006034:	79fb      	ldrb	r3, [r7, #7]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d102      	bne.n	8006040 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800603a:	2309      	movs	r3, #9
 800603c:	617b      	str	r3, [r7, #20]
 800603e:	e001      	b.n	8006044 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006040:	2309      	movs	r3, #9
 8006042:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	68da      	ldr	r2, [r3, #12]
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	029b      	lsls	r3, r3, #10
 8006058:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800605c:	431a      	orrs	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	371c      	adds	r7, #28
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	00d8acbf 	.word	0x00d8acbf
 8006074:	00e4e1c0 	.word	0x00e4e1c0
 8006078:	00f42400 	.word	0x00f42400
 800607c:	01067380 	.word	0x01067380
 8006080:	011a499f 	.word	0x011a499f
 8006084:	01312cff 	.word	0x01312cff
 8006088:	014ca43f 	.word	0x014ca43f
 800608c:	016e3600 	.word	0x016e3600
 8006090:	01a6ab1f 	.word	0x01a6ab1f
 8006094:	01e84800 	.word	0x01e84800

08006098 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f043 0201 	orr.w	r2, r3, #1
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f023 0201 	bic.w	r2, r3, #1
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	460b      	mov	r3, r1
 80060e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80060f8:	78fb      	ldrb	r3, [r7, #3]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d115      	bne.n	800612a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800610a:	200a      	movs	r0, #10
 800610c:	f7fb ff88 	bl	8002020 <HAL_Delay>
      ms += 10U;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	330a      	adds	r3, #10
 8006114:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f001 f93f 	bl	800739a <USB_GetMode>
 800611c:	4603      	mov	r3, r0
 800611e:	2b01      	cmp	r3, #1
 8006120:	d01e      	beq.n	8006160 <USB_SetCurrentMode+0x84>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2bc7      	cmp	r3, #199	@ 0xc7
 8006126:	d9f0      	bls.n	800610a <USB_SetCurrentMode+0x2e>
 8006128:	e01a      	b.n	8006160 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800612a:	78fb      	ldrb	r3, [r7, #3]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d115      	bne.n	800615c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800613c:	200a      	movs	r0, #10
 800613e:	f7fb ff6f 	bl	8002020 <HAL_Delay>
      ms += 10U;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	330a      	adds	r3, #10
 8006146:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f001 f926 	bl	800739a <USB_GetMode>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d005      	beq.n	8006160 <USB_SetCurrentMode+0x84>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2bc7      	cmp	r3, #199	@ 0xc7
 8006158:	d9f0      	bls.n	800613c <USB_SetCurrentMode+0x60>
 800615a:	e001      	b.n	8006160 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e005      	b.n	800616c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2bc8      	cmp	r3, #200	@ 0xc8
 8006164:	d101      	bne.n	800616a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e000      	b.n	800616c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006174:	b084      	sub	sp, #16
 8006176:	b580      	push	{r7, lr}
 8006178:	b086      	sub	sp, #24
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
 800617e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006182:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006186:	2300      	movs	r3, #0
 8006188:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800618e:	2300      	movs	r3, #0
 8006190:	613b      	str	r3, [r7, #16]
 8006192:	e009      	b.n	80061a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	3340      	adds	r3, #64	@ 0x40
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	2200      	movs	r2, #0
 80061a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	3301      	adds	r3, #1
 80061a6:	613b      	str	r3, [r7, #16]
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	2b0e      	cmp	r3, #14
 80061ac:	d9f2      	bls.n	8006194 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80061ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d11c      	bne.n	80061f0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061c4:	f043 0302 	orr.w	r3, r3, #2
 80061c8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061da:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	639a      	str	r2, [r3, #56]	@ 0x38
 80061ee:	e00b      	b.n	8006208 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006200:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800620e:	461a      	mov	r2, r3
 8006210:	2300      	movs	r3, #0
 8006212:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006214:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006218:	2b01      	cmp	r3, #1
 800621a:	d10d      	bne.n	8006238 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800621c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006220:	2b00      	cmp	r3, #0
 8006222:	d104      	bne.n	800622e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006224:	2100      	movs	r1, #0
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f968 	bl	80064fc <USB_SetDevSpeed>
 800622c:	e008      	b.n	8006240 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800622e:	2101      	movs	r1, #1
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f963 	bl	80064fc <USB_SetDevSpeed>
 8006236:	e003      	b.n	8006240 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006238:	2103      	movs	r1, #3
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f95e 	bl	80064fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006240:	2110      	movs	r1, #16
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f8fa 	bl	800643c <USB_FlushTxFifo>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f924 	bl	80064a0 <USB_FlushRxFifo>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006268:	461a      	mov	r2, r3
 800626a:	2300      	movs	r3, #0
 800626c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006274:	461a      	mov	r2, r3
 8006276:	2300      	movs	r3, #0
 8006278:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006280:	461a      	mov	r2, r3
 8006282:	2300      	movs	r3, #0
 8006284:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006286:	2300      	movs	r3, #0
 8006288:	613b      	str	r3, [r7, #16]
 800628a:	e043      	b.n	8006314 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4413      	add	r3, r2
 8006294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800629e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062a2:	d118      	bne.n	80062d6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10a      	bne.n	80062c0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062b6:	461a      	mov	r2, r3
 80062b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80062bc:	6013      	str	r3, [r2, #0]
 80062be:	e013      	b.n	80062e8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062cc:	461a      	mov	r2, r3
 80062ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80062d2:	6013      	str	r3, [r2, #0]
 80062d4:	e008      	b.n	80062e8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062e2:	461a      	mov	r2, r3
 80062e4:	2300      	movs	r3, #0
 80062e6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062f4:	461a      	mov	r2, r3
 80062f6:	2300      	movs	r3, #0
 80062f8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	4413      	add	r3, r2
 8006302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006306:	461a      	mov	r2, r3
 8006308:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800630c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	3301      	adds	r3, #1
 8006312:	613b      	str	r3, [r7, #16]
 8006314:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006318:	461a      	mov	r2, r3
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	4293      	cmp	r3, r2
 800631e:	d3b5      	bcc.n	800628c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006320:	2300      	movs	r3, #0
 8006322:	613b      	str	r3, [r7, #16]
 8006324:	e043      	b.n	80063ae <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4413      	add	r3, r2
 800632e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006338:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800633c:	d118      	bne.n	8006370 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10a      	bne.n	800635a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006350:	461a      	mov	r2, r3
 8006352:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006356:	6013      	str	r3, [r2, #0]
 8006358:	e013      	b.n	8006382 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4413      	add	r3, r2
 8006362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006366:	461a      	mov	r2, r3
 8006368:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800636c:	6013      	str	r3, [r2, #0]
 800636e:	e008      	b.n	8006382 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800637c:	461a      	mov	r2, r3
 800637e:	2300      	movs	r3, #0
 8006380:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4413      	add	r3, r2
 800638a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800638e:	461a      	mov	r2, r3
 8006390:	2300      	movs	r3, #0
 8006392:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063a0:	461a      	mov	r2, r3
 80063a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	3301      	adds	r3, #1
 80063ac:	613b      	str	r3, [r7, #16]
 80063ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063b2:	461a      	mov	r2, r3
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d3b5      	bcc.n	8006326 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063cc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80063da:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80063dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d105      	bne.n	80063f0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	f043 0210 	orr.w	r2, r3, #16
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	699a      	ldr	r2, [r3, #24]
 80063f4:	4b10      	ldr	r3, [pc, #64]	@ (8006438 <USB_DevInit+0x2c4>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80063fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006400:	2b00      	cmp	r3, #0
 8006402:	d005      	beq.n	8006410 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	f043 0208 	orr.w	r2, r3, #8
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006410:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006414:	2b01      	cmp	r3, #1
 8006416:	d107      	bne.n	8006428 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006420:	f043 0304 	orr.w	r3, r3, #4
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006428:	7dfb      	ldrb	r3, [r7, #23]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3718      	adds	r7, #24
 800642e:	46bd      	mov	sp, r7
 8006430:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006434:	b004      	add	sp, #16
 8006436:	4770      	bx	lr
 8006438:	803c3800 	.word	0x803c3800

0800643c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006446:	2300      	movs	r3, #0
 8006448:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	3301      	adds	r3, #1
 800644e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006456:	d901      	bls.n	800645c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e01b      	b.n	8006494 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	daf2      	bge.n	800644a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006464:	2300      	movs	r3, #0
 8006466:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	019b      	lsls	r3, r3, #6
 800646c:	f043 0220 	orr.w	r2, r3, #32
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	3301      	adds	r3, #1
 8006478:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006480:	d901      	bls.n	8006486 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e006      	b.n	8006494 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	f003 0320 	and.w	r3, r3, #32
 800648e:	2b20      	cmp	r3, #32
 8006490:	d0f0      	beq.n	8006474 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3714      	adds	r7, #20
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	3301      	adds	r3, #1
 80064b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064b8:	d901      	bls.n	80064be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e018      	b.n	80064f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	daf2      	bge.n	80064ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80064c6:	2300      	movs	r3, #0
 80064c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2210      	movs	r2, #16
 80064ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	3301      	adds	r3, #1
 80064d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064dc:	d901      	bls.n	80064e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e006      	b.n	80064f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f003 0310 	and.w	r3, r3, #16
 80064ea:	2b10      	cmp	r3, #16
 80064ec:	d0f0      	beq.n	80064d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3714      	adds	r7, #20
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	460b      	mov	r3, r1
 8006506:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	78fb      	ldrb	r3, [r7, #3]
 8006516:	68f9      	ldr	r1, [r7, #12]
 8006518:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800651c:	4313      	orrs	r3, r2
 800651e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800652e:	b480      	push	{r7}
 8006530:	b087      	sub	sp, #28
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f003 0306 	and.w	r3, r3, #6
 8006546:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d102      	bne.n	8006554 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800654e:	2300      	movs	r3, #0
 8006550:	75fb      	strb	r3, [r7, #23]
 8006552:	e00a      	b.n	800656a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2b02      	cmp	r3, #2
 8006558:	d002      	beq.n	8006560 <USB_GetDevSpeed+0x32>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2b06      	cmp	r3, #6
 800655e:	d102      	bne.n	8006566 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006560:	2302      	movs	r3, #2
 8006562:	75fb      	strb	r3, [r7, #23]
 8006564:	e001      	b.n	800656a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006566:	230f      	movs	r3, #15
 8006568:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800656a:	7dfb      	ldrb	r3, [r7, #23]
}
 800656c:	4618      	mov	r0, r3
 800656e:	371c      	adds	r7, #28
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	785b      	ldrb	r3, [r3, #1]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d13a      	bne.n	800660a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800659a:	69da      	ldr	r2, [r3, #28]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	f003 030f 	and.w	r3, r3, #15
 80065a4:	2101      	movs	r1, #1
 80065a6:	fa01 f303 	lsl.w	r3, r1, r3
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	68f9      	ldr	r1, [r7, #12]
 80065ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065b2:	4313      	orrs	r3, r2
 80065b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d155      	bne.n	8006678 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	791b      	ldrb	r3, [r3, #4]
 80065e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	059b      	lsls	r3, r3, #22
 80065ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065f0:	4313      	orrs	r3, r2
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	0151      	lsls	r1, r2, #5
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	440a      	add	r2, r1
 80065fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006602:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006606:	6013      	str	r3, [r2, #0]
 8006608:	e036      	b.n	8006678 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006610:	69da      	ldr	r2, [r3, #28]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	f003 030f 	and.w	r3, r3, #15
 800661a:	2101      	movs	r1, #1
 800661c:	fa01 f303 	lsl.w	r3, r1, r3
 8006620:	041b      	lsls	r3, r3, #16
 8006622:	68f9      	ldr	r1, [r7, #12]
 8006624:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006628:	4313      	orrs	r3, r2
 800662a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d11a      	bne.n	8006678 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	791b      	ldrb	r3, [r3, #4]
 800665c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800665e:	430b      	orrs	r3, r1
 8006660:	4313      	orrs	r3, r2
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	0151      	lsls	r1, r2, #5
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	440a      	add	r2, r1
 800666a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800666e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006676:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3714      	adds	r7, #20
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
	...

08006688 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	785b      	ldrb	r3, [r3, #1]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d161      	bne.n	8006768 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066ba:	d11f      	bne.n	80066fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	0151      	lsls	r1, r2, #5
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	440a      	add	r2, r1
 80066d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80066da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	0151      	lsls	r1, r2, #5
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	440a      	add	r2, r1
 80066f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006702:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	f003 030f 	and.w	r3, r3, #15
 800670c:	2101      	movs	r1, #1
 800670e:	fa01 f303 	lsl.w	r3, r1, r3
 8006712:	b29b      	uxth	r3, r3
 8006714:	43db      	mvns	r3, r3
 8006716:	68f9      	ldr	r1, [r7, #12]
 8006718:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800671c:	4013      	ands	r3, r2
 800671e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006726:	69da      	ldr	r2, [r3, #28]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	f003 030f 	and.w	r3, r3, #15
 8006730:	2101      	movs	r1, #1
 8006732:	fa01 f303 	lsl.w	r3, r1, r3
 8006736:	b29b      	uxth	r3, r3
 8006738:	43db      	mvns	r3, r3
 800673a:	68f9      	ldr	r1, [r7, #12]
 800673c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006740:	4013      	ands	r3, r2
 8006742:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4413      	add	r3, r2
 800674c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	0159      	lsls	r1, r3, #5
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	440b      	add	r3, r1
 800675a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800675e:	4619      	mov	r1, r3
 8006760:	4b35      	ldr	r3, [pc, #212]	@ (8006838 <USB_DeactivateEndpoint+0x1b0>)
 8006762:	4013      	ands	r3, r2
 8006764:	600b      	str	r3, [r1, #0]
 8006766:	e060      	b.n	800682a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800677a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800677e:	d11f      	bne.n	80067c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4413      	add	r3, r2
 8006788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	0151      	lsls	r1, r2, #5
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	440a      	add	r2, r1
 8006796:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800679a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800679e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	0151      	lsls	r1, r2, #5
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	440a      	add	r2, r1
 80067b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	f003 030f 	and.w	r3, r3, #15
 80067d0:	2101      	movs	r1, #1
 80067d2:	fa01 f303 	lsl.w	r3, r1, r3
 80067d6:	041b      	lsls	r3, r3, #16
 80067d8:	43db      	mvns	r3, r3
 80067da:	68f9      	ldr	r1, [r7, #12]
 80067dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067e0:	4013      	ands	r3, r2
 80067e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067ea:	69da      	ldr	r2, [r3, #28]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	f003 030f 	and.w	r3, r3, #15
 80067f4:	2101      	movs	r1, #1
 80067f6:	fa01 f303 	lsl.w	r3, r1, r3
 80067fa:	041b      	lsls	r3, r3, #16
 80067fc:	43db      	mvns	r3, r3
 80067fe:	68f9      	ldr	r1, [r7, #12]
 8006800:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006804:	4013      	ands	r3, r2
 8006806:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	0159      	lsls	r1, r3, #5
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	440b      	add	r3, r1
 800681e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006822:	4619      	mov	r1, r3
 8006824:	4b05      	ldr	r3, [pc, #20]	@ (800683c <USB_DeactivateEndpoint+0x1b4>)
 8006826:	4013      	ands	r3, r2
 8006828:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	ec337800 	.word	0xec337800
 800683c:	eff37800 	.word	0xeff37800

08006840 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b08a      	sub	sp, #40	@ 0x28
 8006844:	af02      	add	r7, sp, #8
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	4613      	mov	r3, r2
 800684c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	785b      	ldrb	r3, [r3, #1]
 800685c:	2b01      	cmp	r3, #1
 800685e:	f040 817f 	bne.w	8006b60 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d132      	bne.n	80068d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	4413      	add	r3, r2
 8006872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	69ba      	ldr	r2, [r7, #24]
 800687a:	0151      	lsls	r1, r2, #5
 800687c:	69fa      	ldr	r2, [r7, #28]
 800687e:	440a      	add	r2, r1
 8006880:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006884:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006888:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800688c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	4413      	add	r3, r2
 8006896:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	69ba      	ldr	r2, [r7, #24]
 800689e:	0151      	lsls	r1, r2, #5
 80068a0:	69fa      	ldr	r2, [r7, #28]
 80068a2:	440a      	add	r2, r1
 80068a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	69ba      	ldr	r2, [r7, #24]
 80068be:	0151      	lsls	r1, r2, #5
 80068c0:	69fa      	ldr	r2, [r7, #28]
 80068c2:	440a      	add	r2, r1
 80068c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068c8:	0cdb      	lsrs	r3, r3, #19
 80068ca:	04db      	lsls	r3, r3, #19
 80068cc:	6113      	str	r3, [r2, #16]
 80068ce:	e097      	b.n	8006a00 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	0151      	lsls	r1, r2, #5
 80068e2:	69fa      	ldr	r2, [r7, #28]
 80068e4:	440a      	add	r2, r1
 80068e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068ea:	0cdb      	lsrs	r3, r3, #19
 80068ec:	04db      	lsls	r3, r3, #19
 80068ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	69ba      	ldr	r2, [r7, #24]
 8006900:	0151      	lsls	r1, r2, #5
 8006902:	69fa      	ldr	r2, [r7, #28]
 8006904:	440a      	add	r2, r1
 8006906:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800690a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800690e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006912:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d11a      	bne.n	8006950 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	691a      	ldr	r2, [r3, #16]
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	429a      	cmp	r2, r3
 8006924:	d903      	bls.n	800692e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	689a      	ldr	r2, [r3, #8]
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	4413      	add	r3, r2
 8006936:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	0151      	lsls	r1, r2, #5
 8006940:	69fa      	ldr	r2, [r7, #28]
 8006942:	440a      	add	r2, r1
 8006944:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006948:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800694c:	6113      	str	r3, [r2, #16]
 800694e:	e044      	b.n	80069da <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	691a      	ldr	r2, [r3, #16]
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	4413      	add	r3, r2
 800695a:	1e5a      	subs	r2, r3, #1
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	fbb2 f3f3 	udiv	r3, r2, r3
 8006964:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	4413      	add	r3, r2
 800696e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006972:	691a      	ldr	r2, [r3, #16]
 8006974:	8afb      	ldrh	r3, [r7, #22]
 8006976:	04d9      	lsls	r1, r3, #19
 8006978:	4ba4      	ldr	r3, [pc, #656]	@ (8006c0c <USB_EPStartXfer+0x3cc>)
 800697a:	400b      	ands	r3, r1
 800697c:	69b9      	ldr	r1, [r7, #24]
 800697e:	0148      	lsls	r0, r1, #5
 8006980:	69f9      	ldr	r1, [r7, #28]
 8006982:	4401      	add	r1, r0
 8006984:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006988:	4313      	orrs	r3, r2
 800698a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	791b      	ldrb	r3, [r3, #4]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d122      	bne.n	80069da <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	4413      	add	r3, r2
 800699c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	0151      	lsls	r1, r2, #5
 80069a6:	69fa      	ldr	r2, [r7, #28]
 80069a8:	440a      	add	r2, r1
 80069aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069ae:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80069b2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069c0:	691a      	ldr	r2, [r3, #16]
 80069c2:	8afb      	ldrh	r3, [r7, #22]
 80069c4:	075b      	lsls	r3, r3, #29
 80069c6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80069ca:	69b9      	ldr	r1, [r7, #24]
 80069cc:	0148      	lsls	r0, r1, #5
 80069ce:	69f9      	ldr	r1, [r7, #28]
 80069d0:	4401      	add	r1, r0
 80069d2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80069d6:	4313      	orrs	r3, r2
 80069d8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069e6:	691a      	ldr	r2, [r3, #16]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069f0:	69b9      	ldr	r1, [r7, #24]
 80069f2:	0148      	lsls	r0, r1, #5
 80069f4:	69f9      	ldr	r1, [r7, #28]
 80069f6:	4401      	add	r1, r0
 80069f8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80069fc:	4313      	orrs	r3, r2
 80069fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a00:	79fb      	ldrb	r3, [r7, #7]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d14b      	bne.n	8006a9e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	69db      	ldr	r3, [r3, #28]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d009      	beq.n	8006a22 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	791b      	ldrb	r3, [r3, #4]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d128      	bne.n	8006a7c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d110      	bne.n	8006a5c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	69ba      	ldr	r2, [r7, #24]
 8006a4a:	0151      	lsls	r1, r2, #5
 8006a4c:	69fa      	ldr	r2, [r7, #28]
 8006a4e:	440a      	add	r2, r1
 8006a50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a54:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006a58:	6013      	str	r3, [r2, #0]
 8006a5a:	e00f      	b.n	8006a7c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	69ba      	ldr	r2, [r7, #24]
 8006a6c:	0151      	lsls	r1, r2, #5
 8006a6e:	69fa      	ldr	r2, [r7, #28]
 8006a70:	440a      	add	r2, r1
 8006a72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a7a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	69ba      	ldr	r2, [r7, #24]
 8006a8c:	0151      	lsls	r1, r2, #5
 8006a8e:	69fa      	ldr	r2, [r7, #28]
 8006a90:	440a      	add	r2, r1
 8006a92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a96:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006a9a:	6013      	str	r3, [r2, #0]
 8006a9c:	e166      	b.n	8006d6c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	015a      	lsls	r2, r3, #5
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	0151      	lsls	r1, r2, #5
 8006ab0:	69fa      	ldr	r2, [r7, #28]
 8006ab2:	440a      	add	r2, r1
 8006ab4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ab8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006abc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	791b      	ldrb	r3, [r3, #4]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d015      	beq.n	8006af2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 814e 	beq.w	8006d6c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ad6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	f003 030f 	and.w	r3, r3, #15
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae6:	69f9      	ldr	r1, [r7, #28]
 8006ae8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006aec:	4313      	orrs	r3, r2
 8006aee:	634b      	str	r3, [r1, #52]	@ 0x34
 8006af0:	e13c      	b.n	8006d6c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d110      	bne.n	8006b24 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	0151      	lsls	r1, r2, #5
 8006b14:	69fa      	ldr	r2, [r7, #28]
 8006b16:	440a      	add	r2, r1
 8006b18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b1c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b20:	6013      	str	r3, [r2, #0]
 8006b22:	e00f      	b.n	8006b44 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	69ba      	ldr	r2, [r7, #24]
 8006b34:	0151      	lsls	r1, r2, #5
 8006b36:	69fa      	ldr	r2, [r7, #28]
 8006b38:	440a      	add	r2, r1
 8006b3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b42:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	68d9      	ldr	r1, [r3, #12]
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	781a      	ldrb	r2, [r3, #0]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	b298      	uxth	r0, r3
 8006b52:	79fb      	ldrb	r3, [r7, #7]
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	4603      	mov	r3, r0
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 f9b9 	bl	8006ed0 <USB_WritePacket>
 8006b5e:	e105      	b.n	8006d6c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	0151      	lsls	r1, r2, #5
 8006b72:	69fa      	ldr	r2, [r7, #28]
 8006b74:	440a      	add	r2, r1
 8006b76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b7a:	0cdb      	lsrs	r3, r3, #19
 8006b7c:	04db      	lsls	r3, r3, #19
 8006b7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	015a      	lsls	r2, r3, #5
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	4413      	add	r3, r2
 8006b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	69ba      	ldr	r2, [r7, #24]
 8006b90:	0151      	lsls	r1, r2, #5
 8006b92:	69fa      	ldr	r2, [r7, #28]
 8006b94:	440a      	add	r2, r1
 8006b96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b9a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006b9e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006ba2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d132      	bne.n	8006c10 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	689a      	ldr	r2, [r3, #8]
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	689a      	ldr	r2, [r3, #8]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bce:	691a      	ldr	r2, [r3, #16]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	6a1b      	ldr	r3, [r3, #32]
 8006bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bd8:	69b9      	ldr	r1, [r7, #24]
 8006bda:	0148      	lsls	r0, r1, #5
 8006bdc:	69f9      	ldr	r1, [r7, #28]
 8006bde:	4401      	add	r1, r0
 8006be0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006be4:	4313      	orrs	r3, r2
 8006be6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	69ba      	ldr	r2, [r7, #24]
 8006bf8:	0151      	lsls	r1, r2, #5
 8006bfa:	69fa      	ldr	r2, [r7, #28]
 8006bfc:	440a      	add	r2, r1
 8006bfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c06:	6113      	str	r3, [r2, #16]
 8006c08:	e062      	b.n	8006cd0 <USB_EPStartXfer+0x490>
 8006c0a:	bf00      	nop
 8006c0c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d123      	bne.n	8006c60 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c24:	691a      	ldr	r2, [r3, #16]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c2e:	69b9      	ldr	r1, [r7, #24]
 8006c30:	0148      	lsls	r0, r1, #5
 8006c32:	69f9      	ldr	r1, [r7, #28]
 8006c34:	4401      	add	r1, r0
 8006c36:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	0151      	lsls	r1, r2, #5
 8006c50:	69fa      	ldr	r2, [r7, #28]
 8006c52:	440a      	add	r2, r1
 8006c54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c58:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c5c:	6113      	str	r3, [r2, #16]
 8006c5e:	e037      	b.n	8006cd0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	691a      	ldr	r2, [r3, #16]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	4413      	add	r3, r2
 8006c6a:	1e5a      	subs	r2, r3, #1
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c74:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	8afa      	ldrh	r2, [r7, #22]
 8006c7c:	fb03 f202 	mul.w	r2, r3, r2
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c90:	691a      	ldr	r2, [r3, #16]
 8006c92:	8afb      	ldrh	r3, [r7, #22]
 8006c94:	04d9      	lsls	r1, r3, #19
 8006c96:	4b38      	ldr	r3, [pc, #224]	@ (8006d78 <USB_EPStartXfer+0x538>)
 8006c98:	400b      	ands	r3, r1
 8006c9a:	69b9      	ldr	r1, [r7, #24]
 8006c9c:	0148      	lsls	r0, r1, #5
 8006c9e:	69f9      	ldr	r1, [r7, #28]
 8006ca0:	4401      	add	r1, r0
 8006ca2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cb6:	691a      	ldr	r2, [r3, #16]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cc0:	69b9      	ldr	r1, [r7, #24]
 8006cc2:	0148      	lsls	r0, r1, #5
 8006cc4:	69f9      	ldr	r1, [r7, #28]
 8006cc6:	4401      	add	r1, r0
 8006cc8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006cd0:	79fb      	ldrb	r3, [r7, #7]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d10d      	bne.n	8006cf2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d009      	beq.n	8006cf2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	68d9      	ldr	r1, [r3, #12]
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	015a      	lsls	r2, r3, #5
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cee:	460a      	mov	r2, r1
 8006cf0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	791b      	ldrb	r3, [r3, #4]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d128      	bne.n	8006d4c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d110      	bne.n	8006d2c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	69ba      	ldr	r2, [r7, #24]
 8006d1a:	0151      	lsls	r1, r2, #5
 8006d1c:	69fa      	ldr	r2, [r7, #28]
 8006d1e:	440a      	add	r2, r1
 8006d20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d24:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d28:	6013      	str	r3, [r2, #0]
 8006d2a:	e00f      	b.n	8006d4c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	69ba      	ldr	r2, [r7, #24]
 8006d3c:	0151      	lsls	r1, r2, #5
 8006d3e:	69fa      	ldr	r2, [r7, #28]
 8006d40:	440a      	add	r2, r1
 8006d42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d4a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	69ba      	ldr	r2, [r7, #24]
 8006d5c:	0151      	lsls	r1, r2, #5
 8006d5e:	69fa      	ldr	r2, [r7, #28]
 8006d60:	440a      	add	r2, r1
 8006d62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d66:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006d6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3720      	adds	r7, #32
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	1ff80000 	.word	0x1ff80000

08006d7c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	785b      	ldrb	r3, [r3, #1]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d14a      	bne.n	8006e30 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006dae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006db2:	f040 8086 	bne.w	8006ec2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	7812      	ldrb	r2, [r2, #0]
 8006dca:	0151      	lsls	r1, r2, #5
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	440a      	add	r2, r1
 8006dd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dd4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006dd8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	015a      	lsls	r2, r3, #5
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	4413      	add	r3, r2
 8006de4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	7812      	ldrb	r2, [r2, #0]
 8006dee:	0151      	lsls	r1, r2, #5
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	440a      	add	r2, r1
 8006df4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006df8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006dfc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	3301      	adds	r3, #1
 8006e02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d902      	bls.n	8006e14 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	75fb      	strb	r3, [r7, #23]
          break;
 8006e12:	e056      	b.n	8006ec2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e2c:	d0e7      	beq.n	8006dfe <USB_EPStopXfer+0x82>
 8006e2e:	e048      	b.n	8006ec2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e48:	d13b      	bne.n	8006ec2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	015a      	lsls	r2, r3, #5
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	7812      	ldrb	r2, [r2, #0]
 8006e5e:	0151      	lsls	r1, r2, #5
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	440a      	add	r2, r1
 8006e64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006e6c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	7812      	ldrb	r2, [r2, #0]
 8006e82:	0151      	lsls	r1, r2, #5
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	440a      	add	r2, r1
 8006e88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	3301      	adds	r3, #1
 8006e96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d902      	bls.n	8006ea8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ea6:	e00c      	b.n	8006ec2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	015a      	lsls	r2, r3, #5
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ec0:	d0e7      	beq.n	8006e92 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	371c      	adds	r7, #28
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b089      	sub	sp, #36	@ 0x24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	4611      	mov	r1, r2
 8006edc:	461a      	mov	r2, r3
 8006ede:	460b      	mov	r3, r1
 8006ee0:	71fb      	strb	r3, [r7, #7]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006eee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d123      	bne.n	8006f3e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006ef6:	88bb      	ldrh	r3, [r7, #4]
 8006ef8:	3303      	adds	r3, #3
 8006efa:	089b      	lsrs	r3, r3, #2
 8006efc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006efe:	2300      	movs	r3, #0
 8006f00:	61bb      	str	r3, [r7, #24]
 8006f02:	e018      	b.n	8006f36 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f04:	79fb      	ldrb	r3, [r7, #7]
 8006f06:	031a      	lsls	r2, r3, #12
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f10:	461a      	mov	r2, r3
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	3301      	adds	r3, #1
 8006f22:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	3301      	adds	r3, #1
 8006f28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	3301      	adds	r3, #1
 8006f34:	61bb      	str	r3, [r7, #24]
 8006f36:	69ba      	ldr	r2, [r7, #24]
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d3e2      	bcc.n	8006f04 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3724      	adds	r7, #36	@ 0x24
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b08b      	sub	sp, #44	@ 0x2c
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	4613      	mov	r3, r2
 8006f58:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006f62:	88fb      	ldrh	r3, [r7, #6]
 8006f64:	089b      	lsrs	r3, r3, #2
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006f6a:	88fb      	ldrh	r3, [r7, #6]
 8006f6c:	f003 0303 	and.w	r3, r3, #3
 8006f70:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006f72:	2300      	movs	r3, #0
 8006f74:	623b      	str	r3, [r7, #32]
 8006f76:	e014      	b.n	8006fa2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f82:	601a      	str	r2, [r3, #0]
    pDest++;
 8006f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f86:	3301      	adds	r3, #1
 8006f88:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f92:	3301      	adds	r3, #1
 8006f94:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f98:	3301      	adds	r3, #1
 8006f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	623b      	str	r3, [r7, #32]
 8006fa2:	6a3a      	ldr	r2, [r7, #32]
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d3e6      	bcc.n	8006f78 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006faa:	8bfb      	ldrh	r3, [r7, #30]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d01e      	beq.n	8006fee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fba:	461a      	mov	r2, r3
 8006fbc:	f107 0310 	add.w	r3, r7, #16
 8006fc0:	6812      	ldr	r2, [r2, #0]
 8006fc2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	00db      	lsls	r3, r3, #3
 8006fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd4:	701a      	strb	r2, [r3, #0]
      i++;
 8006fd6:	6a3b      	ldr	r3, [r7, #32]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	623b      	str	r3, [r7, #32]
      pDest++;
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fde:	3301      	adds	r3, #1
 8006fe0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006fe2:	8bfb      	ldrh	r3, [r7, #30]
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006fe8:	8bfb      	ldrh	r3, [r7, #30]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1ea      	bne.n	8006fc4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	372c      	adds	r7, #44	@ 0x2c
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	785b      	ldrb	r3, [r3, #1]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d12c      	bne.n	8007072 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	015a      	lsls	r2, r3, #5
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	4413      	add	r3, r2
 8007020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	db12      	blt.n	8007050 <USB_EPSetStall+0x54>
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00f      	beq.n	8007050 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	015a      	lsls	r2, r3, #5
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	4413      	add	r3, r2
 8007038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	0151      	lsls	r1, r2, #5
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	440a      	add	r2, r1
 8007046:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800704a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800704e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	0151      	lsls	r1, r2, #5
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	440a      	add	r2, r1
 8007066:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800706a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800706e:	6013      	str	r3, [r2, #0]
 8007070:	e02b      	b.n	80070ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	4413      	add	r3, r2
 800707a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	db12      	blt.n	80070aa <USB_EPSetStall+0xae>
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00f      	beq.n	80070aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	015a      	lsls	r2, r3, #5
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	4413      	add	r3, r2
 8007092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	0151      	lsls	r1, r2, #5
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	440a      	add	r2, r1
 80070a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80070a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	015a      	lsls	r2, r3, #5
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	0151      	lsls	r1, r2, #5
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	440a      	add	r2, r1
 80070c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80070c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	785b      	ldrb	r3, [r3, #1]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d128      	bne.n	8007146 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	015a      	lsls	r2, r3, #5
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	0151      	lsls	r1, r2, #5
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	440a      	add	r2, r1
 800710a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800710e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007112:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	791b      	ldrb	r3, [r3, #4]
 8007118:	2b03      	cmp	r3, #3
 800711a:	d003      	beq.n	8007124 <USB_EPClearStall+0x4c>
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	791b      	ldrb	r3, [r3, #4]
 8007120:	2b02      	cmp	r3, #2
 8007122:	d138      	bne.n	8007196 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	4413      	add	r3, r2
 800712c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	0151      	lsls	r1, r2, #5
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	440a      	add	r2, r1
 800713a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800713e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007142:	6013      	str	r3, [r2, #0]
 8007144:	e027      	b.n	8007196 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	015a      	lsls	r2, r3, #5
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	4413      	add	r3, r2
 800714e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	0151      	lsls	r1, r2, #5
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	440a      	add	r2, r1
 800715c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007160:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007164:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	791b      	ldrb	r3, [r3, #4]
 800716a:	2b03      	cmp	r3, #3
 800716c:	d003      	beq.n	8007176 <USB_EPClearStall+0x9e>
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	791b      	ldrb	r3, [r3, #4]
 8007172:	2b02      	cmp	r3, #2
 8007174:	d10f      	bne.n	8007196 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	015a      	lsls	r2, r3, #5
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	4413      	add	r3, r2
 800717e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	0151      	lsls	r1, r2, #5
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	440a      	add	r2, r1
 800718c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007190:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007194:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	460b      	mov	r3, r1
 80071ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071c2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80071c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	78fb      	ldrb	r3, [r7, #3]
 80071d2:	011b      	lsls	r3, r3, #4
 80071d4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80071d8:	68f9      	ldr	r1, [r7, #12]
 80071da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071de:	4313      	orrs	r3, r2
 80071e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800720a:	f023 0303 	bic.w	r3, r3, #3
 800720e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800721e:	f023 0302 	bic.w	r3, r3, #2
 8007222:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007232:	b480      	push	{r7}
 8007234:	b085      	sub	sp, #20
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800724c:	f023 0303 	bic.w	r3, r3, #3
 8007250:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007260:	f043 0302 	orr.w	r3, r3, #2
 8007264:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	695b      	ldr	r3, [r3, #20]
 8007280:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	4013      	ands	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800728c:	68fb      	ldr	r3, [r7, #12]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3714      	adds	r7, #20
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800729a:	b480      	push	{r7}
 800729c:	b085      	sub	sp, #20
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072b6:	69db      	ldr	r3, [r3, #28]
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	4013      	ands	r3, r2
 80072bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	0c1b      	lsrs	r3, r3, #16
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3714      	adds	r7, #20
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b085      	sub	sp, #20
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072ea:	69db      	ldr	r3, [r3, #28]
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	4013      	ands	r3, r2
 80072f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	b29b      	uxth	r3, r3
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007302:	b480      	push	{r7}
 8007304:	b085      	sub	sp, #20
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	460b      	mov	r3, r1
 800730c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007312:	78fb      	ldrb	r3, [r7, #3]
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4413      	add	r3, r2
 800731a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	4013      	ands	r3, r2
 800732e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007330:	68bb      	ldr	r3, [r7, #8]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3714      	adds	r7, #20
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800733e:	b480      	push	{r7}
 8007340:	b087      	sub	sp, #28
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	460b      	mov	r3, r1
 8007348:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800735e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007360:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007362:	78fb      	ldrb	r3, [r7, #3]
 8007364:	f003 030f 	and.w	r3, r3, #15
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	fa22 f303 	lsr.w	r3, r2, r3
 800736e:	01db      	lsls	r3, r3, #7
 8007370:	b2db      	uxtb	r3, r3
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	4313      	orrs	r3, r2
 8007376:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007378:	78fb      	ldrb	r3, [r7, #3]
 800737a:	015a      	lsls	r2, r3, #5
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	4413      	add	r3, r2
 8007380:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	4013      	ands	r3, r2
 800738a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800738c:	68bb      	ldr	r3, [r7, #8]
}
 800738e:	4618      	mov	r0, r3
 8007390:	371c      	adds	r7, #28
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800739a:	b480      	push	{r7}
 800739c:	b083      	sub	sp, #12
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	f003 0301 	and.w	r3, r3, #1
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80073b6:	b480      	push	{r7}
 80073b8:	b085      	sub	sp, #20
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073d0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80073d4:	f023 0307 	bic.w	r3, r3, #7
 80073d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b087      	sub	sp, #28
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	460b      	mov	r3, r1
 8007406:	607a      	str	r2, [r7, #4]
 8007408:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	333c      	adds	r3, #60	@ 0x3c
 8007412:	3304      	adds	r3, #4
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	4a26      	ldr	r2, [pc, #152]	@ (80074b4 <USB_EP0_OutStart+0xb8>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d90a      	bls.n	8007436 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800742c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007430:	d101      	bne.n	8007436 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007432:	2300      	movs	r3, #0
 8007434:	e037      	b.n	80074a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800743c:	461a      	mov	r2, r3
 800743e:	2300      	movs	r3, #0
 8007440:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007450:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007454:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007464:	f043 0318 	orr.w	r3, r3, #24
 8007468:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007478:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800747c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800747e:	7afb      	ldrb	r3, [r7, #11]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d10f      	bne.n	80074a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800748a:	461a      	mov	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800749e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80074a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	371c      	adds	r7, #28
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	4f54300a 	.word	0x4f54300a

080074b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074c0:	2300      	movs	r3, #0
 80074c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	3301      	adds	r3, #1
 80074c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074d0:	d901      	bls.n	80074d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e022      	b.n	800751c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	daf2      	bge.n	80074c4 <USB_CoreReset+0xc>

  count = 10U;
 80074de:	230a      	movs	r3, #10
 80074e0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80074e2:	e002      	b.n	80074ea <USB_CoreReset+0x32>
  {
    count--;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	3b01      	subs	r3, #1
 80074e8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1f9      	bne.n	80074e4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	f043 0201 	orr.w	r2, r3, #1
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	3301      	adds	r3, #1
 8007500:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007508:	d901      	bls.n	800750e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e006      	b.n	800751c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b01      	cmp	r3, #1
 8007518:	d0f0      	beq.n	80074fc <USB_CoreReset+0x44>

  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	460b      	mov	r3, r1
 8007532:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007534:	2010      	movs	r0, #16
 8007536:	f002 f943 	bl	80097c0 <USBD_static_malloc>
 800753a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d109      	bne.n	8007556 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	32b0      	adds	r2, #176	@ 0xb0
 800754c:	2100      	movs	r1, #0
 800754e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007552:	2302      	movs	r3, #2
 8007554:	e048      	b.n	80075e8 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	32b0      	adds	r2, #176	@ 0xb0
 8007560:	68f9      	ldr	r1, [r7, #12]
 8007562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	32b0      	adds	r2, #176	@ 0xb0
 8007570:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	7c1b      	ldrb	r3, [r3, #16]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10d      	bne.n	800759e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8007582:	4b1b      	ldr	r3, [pc, #108]	@ (80075f0 <USBD_HID_Init+0xc8>)
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	f003 020f 	and.w	r2, r3, #15
 800758a:	6879      	ldr	r1, [r7, #4]
 800758c:	4613      	mov	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	440b      	add	r3, r1
 8007596:	331c      	adds	r3, #28
 8007598:	2207      	movs	r2, #7
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	e00c      	b.n	80075b8 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800759e:	4b14      	ldr	r3, [pc, #80]	@ (80075f0 <USBD_HID_Init+0xc8>)
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	f003 020f 	and.w	r2, r3, #15
 80075a6:	6879      	ldr	r1, [r7, #4]
 80075a8:	4613      	mov	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	440b      	add	r3, r1
 80075b2:	331c      	adds	r3, #28
 80075b4:	220a      	movs	r2, #10
 80075b6:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80075b8:	4b0d      	ldr	r3, [pc, #52]	@ (80075f0 <USBD_HID_Init+0xc8>)
 80075ba:	7819      	ldrb	r1, [r3, #0]
 80075bc:	2304      	movs	r3, #4
 80075be:	2203      	movs	r2, #3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f001 ffec 	bl	800959e <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80075c6:	4b0a      	ldr	r3, [pc, #40]	@ (80075f0 <USBD_HID_Init+0xc8>)
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	f003 020f 	and.w	r2, r3, #15
 80075ce:	6879      	ldr	r1, [r7, #4]
 80075d0:	4613      	mov	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	440b      	add	r3, r1
 80075da:	3323      	adds	r3, #35	@ 0x23
 80075dc:	2201      	movs	r2, #1
 80075de:	701a      	strb	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	2000015a 	.word	0x2000015a

080075f4 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8007600:	4b1f      	ldr	r3, [pc, #124]	@ (8007680 <USBD_HID_DeInit+0x8c>)
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	4619      	mov	r1, r3
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f001 ffef 	bl	80095ea <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800760c:	4b1c      	ldr	r3, [pc, #112]	@ (8007680 <USBD_HID_DeInit+0x8c>)
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	f003 020f 	and.w	r2, r3, #15
 8007614:	6879      	ldr	r1, [r7, #4]
 8007616:	4613      	mov	r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4413      	add	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	440b      	add	r3, r1
 8007620:	3323      	adds	r3, #35	@ 0x23
 8007622:	2200      	movs	r2, #0
 8007624:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8007626:	4b16      	ldr	r3, [pc, #88]	@ (8007680 <USBD_HID_DeInit+0x8c>)
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	f003 020f 	and.w	r2, r3, #15
 800762e:	6879      	ldr	r1, [r7, #4]
 8007630:	4613      	mov	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	4413      	add	r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	440b      	add	r3, r1
 800763a:	331c      	adds	r3, #28
 800763c:	2200      	movs	r2, #0
 800763e:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	32b0      	adds	r2, #176	@ 0xb0
 800764a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d011      	beq.n	8007676 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	32b0      	adds	r2, #176	@ 0xb0
 800765c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007660:	4618      	mov	r0, r3
 8007662:	f002 f8bb 	bl	80097dc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	32b0      	adds	r2, #176	@ 0xb0
 8007670:	2100      	movs	r1, #0
 8007672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	2000015a 	.word	0x2000015a

08007684 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	32b0      	adds	r2, #176	@ 0xb0
 8007698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800769c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80076a2:	2300      	movs	r3, #0
 80076a4:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d101      	bne.n	80076b0 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e0e8      	b.n	8007882 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d046      	beq.n	800774a <USBD_HID_Setup+0xc6>
 80076bc:	2b20      	cmp	r3, #32
 80076be:	f040 80d8 	bne.w	8007872 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	785b      	ldrb	r3, [r3, #1]
 80076c6:	3b02      	subs	r3, #2
 80076c8:	2b09      	cmp	r3, #9
 80076ca:	d836      	bhi.n	800773a <USBD_HID_Setup+0xb6>
 80076cc:	a201      	add	r2, pc, #4	@ (adr r2, 80076d4 <USBD_HID_Setup+0x50>)
 80076ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d2:	bf00      	nop
 80076d4:	0800772b 	.word	0x0800772b
 80076d8:	0800770b 	.word	0x0800770b
 80076dc:	0800773b 	.word	0x0800773b
 80076e0:	0800773b 	.word	0x0800773b
 80076e4:	0800773b 	.word	0x0800773b
 80076e8:	0800773b 	.word	0x0800773b
 80076ec:	0800773b 	.word	0x0800773b
 80076f0:	0800773b 	.word	0x0800773b
 80076f4:	08007719 	.word	0x08007719
 80076f8:	080076fd 	.word	0x080076fd
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	885b      	ldrh	r3, [r3, #2]
 8007700:	b2db      	uxtb	r3, r3
 8007702:	461a      	mov	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	601a      	str	r2, [r3, #0]
          break;
 8007708:	e01e      	b.n	8007748 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2201      	movs	r2, #1
 800770e:	4619      	mov	r1, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f001 fbfb 	bl	8008f0c <USBD_CtlSendData>
          break;
 8007716:	e017      	b.n	8007748 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	885b      	ldrh	r3, [r3, #2]
 800771c:	0a1b      	lsrs	r3, r3, #8
 800771e:	b29b      	uxth	r3, r3
 8007720:	b2db      	uxtb	r3, r3
 8007722:	461a      	mov	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	605a      	str	r2, [r3, #4]
          break;
 8007728:	e00e      	b.n	8007748 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	3304      	adds	r3, #4
 800772e:	2201      	movs	r2, #1
 8007730:	4619      	mov	r1, r3
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f001 fbea 	bl	8008f0c <USBD_CtlSendData>
          break;
 8007738:	e006      	b.n	8007748 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800773a:	6839      	ldr	r1, [r7, #0]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f001 fb68 	bl	8008e12 <USBD_CtlError>
          ret = USBD_FAIL;
 8007742:	2303      	movs	r3, #3
 8007744:	75fb      	strb	r3, [r7, #23]
          break;
 8007746:	bf00      	nop
      }
      break;
 8007748:	e09a      	b.n	8007880 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	785b      	ldrb	r3, [r3, #1]
 800774e:	2b0b      	cmp	r3, #11
 8007750:	f200 8086 	bhi.w	8007860 <USBD_HID_Setup+0x1dc>
 8007754:	a201      	add	r2, pc, #4	@ (adr r2, 800775c <USBD_HID_Setup+0xd8>)
 8007756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775a:	bf00      	nop
 800775c:	0800778d 	.word	0x0800778d
 8007760:	0800786f 	.word	0x0800786f
 8007764:	08007861 	.word	0x08007861
 8007768:	08007861 	.word	0x08007861
 800776c:	08007861 	.word	0x08007861
 8007770:	08007861 	.word	0x08007861
 8007774:	080077b7 	.word	0x080077b7
 8007778:	08007861 	.word	0x08007861
 800777c:	08007861 	.word	0x08007861
 8007780:	08007861 	.word	0x08007861
 8007784:	0800780f 	.word	0x0800780f
 8007788:	08007839 	.word	0x08007839
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b03      	cmp	r3, #3
 8007796:	d107      	bne.n	80077a8 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007798:	f107 030a 	add.w	r3, r7, #10
 800779c:	2202      	movs	r2, #2
 800779e:	4619      	mov	r1, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f001 fbb3 	bl	8008f0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077a6:	e063      	b.n	8007870 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f001 fb31 	bl	8008e12 <USBD_CtlError>
            ret = USBD_FAIL;
 80077b0:	2303      	movs	r3, #3
 80077b2:	75fb      	strb	r3, [r7, #23]
          break;
 80077b4:	e05c      	b.n	8007870 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	885b      	ldrh	r3, [r3, #2]
 80077ba:	0a1b      	lsrs	r3, r3, #8
 80077bc:	b29b      	uxth	r3, r3
 80077be:	2b22      	cmp	r3, #34	@ 0x22
 80077c0:	d108      	bne.n	80077d4 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	88db      	ldrh	r3, [r3, #6]
 80077c6:	2b4a      	cmp	r3, #74	@ 0x4a
 80077c8:	bf28      	it	cs
 80077ca:	234a      	movcs	r3, #74	@ 0x4a
 80077cc:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80077ce:	4b2f      	ldr	r3, [pc, #188]	@ (800788c <USBD_HID_Setup+0x208>)
 80077d0:	613b      	str	r3, [r7, #16]
 80077d2:	e015      	b.n	8007800 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	885b      	ldrh	r3, [r3, #2]
 80077d8:	0a1b      	lsrs	r3, r3, #8
 80077da:	b29b      	uxth	r3, r3
 80077dc:	2b21      	cmp	r3, #33	@ 0x21
 80077de:	d108      	bne.n	80077f2 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80077e0:	4b2b      	ldr	r3, [pc, #172]	@ (8007890 <USBD_HID_Setup+0x20c>)
 80077e2:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	88db      	ldrh	r3, [r3, #6]
 80077e8:	2b09      	cmp	r3, #9
 80077ea:	bf28      	it	cs
 80077ec:	2309      	movcs	r3, #9
 80077ee:	82bb      	strh	r3, [r7, #20]
 80077f0:	e006      	b.n	8007800 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f001 fb0c 	bl	8008e12 <USBD_CtlError>
            ret = USBD_FAIL;
 80077fa:	2303      	movs	r3, #3
 80077fc:	75fb      	strb	r3, [r7, #23]
            break;
 80077fe:	e037      	b.n	8007870 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007800:	8abb      	ldrh	r3, [r7, #20]
 8007802:	461a      	mov	r2, r3
 8007804:	6939      	ldr	r1, [r7, #16]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f001 fb80 	bl	8008f0c <USBD_CtlSendData>
          break;
 800780c:	e030      	b.n	8007870 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b03      	cmp	r3, #3
 8007818:	d107      	bne.n	800782a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	3308      	adds	r3, #8
 800781e:	2201      	movs	r2, #1
 8007820:	4619      	mov	r1, r3
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f001 fb72 	bl	8008f0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007828:	e022      	b.n	8007870 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f001 faf0 	bl	8008e12 <USBD_CtlError>
            ret = USBD_FAIL;
 8007832:	2303      	movs	r3, #3
 8007834:	75fb      	strb	r3, [r7, #23]
          break;
 8007836:	e01b      	b.n	8007870 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800783e:	b2db      	uxtb	r3, r3
 8007840:	2b03      	cmp	r3, #3
 8007842:	d106      	bne.n	8007852 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	885b      	ldrh	r3, [r3, #2]
 8007848:	b2db      	uxtb	r3, r3
 800784a:	461a      	mov	r2, r3
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007850:	e00e      	b.n	8007870 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f001 fadc 	bl	8008e12 <USBD_CtlError>
            ret = USBD_FAIL;
 800785a:	2303      	movs	r3, #3
 800785c:	75fb      	strb	r3, [r7, #23]
          break;
 800785e:	e007      	b.n	8007870 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f001 fad5 	bl	8008e12 <USBD_CtlError>
          ret = USBD_FAIL;
 8007868:	2303      	movs	r3, #3
 800786a:	75fb      	strb	r3, [r7, #23]
          break;
 800786c:	e000      	b.n	8007870 <USBD_HID_Setup+0x1ec>
          break;
 800786e:	bf00      	nop
      }
      break;
 8007870:	e006      	b.n	8007880 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8007872:	6839      	ldr	r1, [r7, #0]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f001 facc 	bl	8008e12 <USBD_CtlError>
      ret = USBD_FAIL;
 800787a:	2303      	movs	r3, #3
 800787c:	75fb      	strb	r3, [r7, #23]
      break;
 800787e:	bf00      	nop
  }

  return (uint8_t)ret;
 8007880:	7dfb      	ldrb	r3, [r7, #23]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3718      	adds	r7, #24
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	20000110 	.word	0x20000110
 8007890:	200000f8 	.word	0x200000f8

08007894 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	4613      	mov	r3, r2
 80078a0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	32b0      	adds	r2, #176	@ 0xb0
 80078ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b0:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d101      	bne.n	80078bc <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80078b8:	2303      	movs	r3, #3
 80078ba:	e014      	b.n	80078e6 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b03      	cmp	r3, #3
 80078c6:	d10d      	bne.n	80078e4 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	7b1b      	ldrb	r3, [r3, #12]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d109      	bne.n	80078e4 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	2201      	movs	r2, #1
 80078d4:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 80078d6:	4b06      	ldr	r3, [pc, #24]	@ (80078f0 <USBD_HID_SendReport+0x5c>)
 80078d8:	7819      	ldrb	r1, [r3, #0]
 80078da:	88fb      	ldrh	r3, [r7, #6]
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f001 ff2b 	bl	800973a <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3718      	adds	r7, #24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	2000015a 	.word	0x2000015a

080078f4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80078fc:	2181      	movs	r1, #129	@ 0x81
 80078fe:	4809      	ldr	r0, [pc, #36]	@ (8007924 <USBD_HID_GetFSCfgDesc+0x30>)
 8007900:	f000 fc4e 	bl	80081a0 <USBD_GetEpDesc>
 8007904:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d002      	beq.n	8007912 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	220a      	movs	r2, #10
 8007910:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2222      	movs	r2, #34	@ 0x22
 8007916:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007918:	4b02      	ldr	r3, [pc, #8]	@ (8007924 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	200000d4 	.word	0x200000d4

08007928 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007930:	2181      	movs	r1, #129	@ 0x81
 8007932:	4809      	ldr	r0, [pc, #36]	@ (8007958 <USBD_HID_GetHSCfgDesc+0x30>)
 8007934:	f000 fc34 	bl	80081a0 <USBD_GetEpDesc>
 8007938:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d002      	beq.n	8007946 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2207      	movs	r2, #7
 8007944:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2222      	movs	r2, #34	@ 0x22
 800794a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800794c:	4b02      	ldr	r3, [pc, #8]	@ (8007958 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	200000d4 	.word	0x200000d4

0800795c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007964:	2181      	movs	r1, #129	@ 0x81
 8007966:	4809      	ldr	r0, [pc, #36]	@ (800798c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8007968:	f000 fc1a 	bl	80081a0 <USBD_GetEpDesc>
 800796c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d002      	beq.n	800797a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	220a      	movs	r2, #10
 8007978:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2222      	movs	r2, #34	@ 0x22
 800797e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007980:	4b02      	ldr	r3, [pc, #8]	@ (800798c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	200000d4 	.word	0x200000d4

08007990 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	460b      	mov	r3, r1
 800799a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	32b0      	adds	r2, #176	@ 0xb0
 80079a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079aa:	2200      	movs	r2, #0
 80079ac:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	220a      	movs	r2, #10
 80079c8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80079ca:	4b03      	ldr	r3, [pc, #12]	@ (80079d8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	20000104 	.word	0x20000104

080079dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	4613      	mov	r3, r2
 80079e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e01f      	b.n	8007a34 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d003      	beq.n	8007a1a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	79fa      	ldrb	r2, [r7, #7]
 8007a26:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f001 fd51 	bl	80094d0 <USBD_LL_Init>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3718      	adds	r7, #24
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a46:	2300      	movs	r3, #0
 8007a48:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e025      	b.n	8007aa0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	32ae      	adds	r2, #174	@ 0xae
 8007a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00f      	beq.n	8007a90 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	32ae      	adds	r2, #174	@ 0xae
 8007a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a80:	f107 020e 	add.w	r2, r7, #14
 8007a84:	4610      	mov	r0, r2
 8007a86:	4798      	blx	r3
 8007a88:	4602      	mov	r2, r0
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f001 fd59 	bl	8009568 <USBD_LL_Start>
 8007ab6:	4603      	mov	r3, r0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ac8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	370c      	adds	r7, #12
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b084      	sub	sp, #16
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	460b      	mov	r3, r1
 8007ae0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d009      	beq.n	8007b04 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	78fa      	ldrb	r2, [r7, #3]
 8007afa:	4611      	mov	r1, r2
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	4798      	blx	r3
 8007b00:	4603      	mov	r3, r0
 8007b02:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b084      	sub	sp, #16
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	460b      	mov	r3, r1
 8007b18:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	78fa      	ldrb	r2, [r7, #3]
 8007b28:	4611      	mov	r1, r2
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	4798      	blx	r3
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d001      	beq.n	8007b38 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007b34:	2303      	movs	r3, #3
 8007b36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b084      	sub	sp, #16
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	4618      	mov	r0, r3
 8007b56:	f001 f922 	bl	8008d9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007b68:	461a      	mov	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007b76:	f003 031f 	and.w	r3, r3, #31
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d01a      	beq.n	8007bb4 <USBD_LL_SetupStage+0x72>
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d822      	bhi.n	8007bc8 <USBD_LL_SetupStage+0x86>
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d002      	beq.n	8007b8c <USBD_LL_SetupStage+0x4a>
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d00a      	beq.n	8007ba0 <USBD_LL_SetupStage+0x5e>
 8007b8a:	e01d      	b.n	8007bc8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007b92:	4619      	mov	r1, r3
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fb77 	bl	8008288 <USBD_StdDevReq>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b9e:	e020      	b.n	8007be2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 fbdf 	bl	800836c <USBD_StdItfReq>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	73fb      	strb	r3, [r7, #15]
      break;
 8007bb2:	e016      	b.n	8007be2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fc41 	bl	8008444 <USBD_StdEPReq>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	73fb      	strb	r3, [r7, #15]
      break;
 8007bc6:	e00c      	b.n	8007be2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007bce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f001 fd26 	bl	8009628 <USBD_LL_StallEP>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	73fb      	strb	r3, [r7, #15]
      break;
 8007be0:	bf00      	nop
  }

  return ret;
 8007be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3710      	adds	r7, #16
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b086      	sub	sp, #24
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	607a      	str	r2, [r7, #4]
 8007bf8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007bfe:	7afb      	ldrb	r3, [r7, #11]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d177      	bne.n	8007cf4 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007c0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007c12:	2b03      	cmp	r3, #3
 8007c14:	f040 80a1 	bne.w	8007d5a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	8992      	ldrh	r2, [r2, #12]
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d91c      	bls.n	8007c5e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	8992      	ldrh	r2, [r2, #12]
 8007c2c:	1a9a      	subs	r2, r3, r2
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	693a      	ldr	r2, [r7, #16]
 8007c38:	8992      	ldrh	r2, [r2, #12]
 8007c3a:	441a      	add	r2, r3
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	6919      	ldr	r1, [r3, #16]
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	899b      	ldrh	r3, [r3, #12]
 8007c48:	461a      	mov	r2, r3
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	bf38      	it	cc
 8007c52:	4613      	movcc	r3, r2
 8007c54:	461a      	mov	r2, r3
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f001 f987 	bl	8008f6a <USBD_CtlContinueRx>
 8007c5c:	e07d      	b.n	8007d5a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007c64:	f003 031f 	and.w	r3, r3, #31
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d014      	beq.n	8007c96 <USBD_LL_DataOutStage+0xaa>
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d81d      	bhi.n	8007cac <USBD_LL_DataOutStage+0xc0>
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <USBD_LL_DataOutStage+0x8e>
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d003      	beq.n	8007c80 <USBD_LL_DataOutStage+0x94>
 8007c78:	e018      	b.n	8007cac <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	75bb      	strb	r3, [r7, #22]
            break;
 8007c7e:	e018      	b.n	8007cb2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	4619      	mov	r1, r3
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f000 fa6e 	bl	800816c <USBD_CoreFindIF>
 8007c90:	4603      	mov	r3, r0
 8007c92:	75bb      	strb	r3, [r7, #22]
            break;
 8007c94:	e00d      	b.n	8007cb2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f000 fa70 	bl	8008186 <USBD_CoreFindEP>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	75bb      	strb	r3, [r7, #22]
            break;
 8007caa:	e002      	b.n	8007cb2 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007cac:	2300      	movs	r3, #0
 8007cae:	75bb      	strb	r3, [r7, #22]
            break;
 8007cb0:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007cb2:	7dbb      	ldrb	r3, [r7, #22]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d119      	bne.n	8007cec <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b03      	cmp	r3, #3
 8007cc2:	d113      	bne.n	8007cec <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007cc4:	7dba      	ldrb	r2, [r7, #22]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	32ae      	adds	r2, #174	@ 0xae
 8007cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00b      	beq.n	8007cec <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8007cd4:	7dba      	ldrb	r2, [r7, #22]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007cdc:	7dba      	ldrb	r2, [r7, #22]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	32ae      	adds	r2, #174	@ 0xae
 8007ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f001 f94d 	bl	8008f8c <USBD_CtlSendStatus>
 8007cf2:	e032      	b.n	8007d5a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007cf4:	7afb      	ldrb	r3, [r7, #11]
 8007cf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f000 fa41 	bl	8008186 <USBD_CoreFindEP>
 8007d04:	4603      	mov	r3, r0
 8007d06:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d08:	7dbb      	ldrb	r3, [r7, #22]
 8007d0a:	2bff      	cmp	r3, #255	@ 0xff
 8007d0c:	d025      	beq.n	8007d5a <USBD_LL_DataOutStage+0x16e>
 8007d0e:	7dbb      	ldrb	r3, [r7, #22]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d122      	bne.n	8007d5a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b03      	cmp	r3, #3
 8007d1e:	d117      	bne.n	8007d50 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007d20:	7dba      	ldrb	r2, [r7, #22]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	32ae      	adds	r2, #174	@ 0xae
 8007d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00f      	beq.n	8007d50 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007d30:	7dba      	ldrb	r2, [r7, #22]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007d38:	7dba      	ldrb	r2, [r7, #22]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	32ae      	adds	r2, #174	@ 0xae
 8007d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	7afa      	ldrb	r2, [r7, #11]
 8007d46:	4611      	mov	r1, r2
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	4798      	blx	r3
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007d50:	7dfb      	ldrb	r3, [r7, #23]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d001      	beq.n	8007d5a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8007d56:	7dfb      	ldrb	r3, [r7, #23]
 8007d58:	e000      	b.n	8007d5c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3718      	adds	r7, #24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007d72:	7afb      	ldrb	r3, [r7, #11]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d178      	bne.n	8007e6a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	3314      	adds	r3, #20
 8007d7c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d163      	bne.n	8007e50 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	8992      	ldrh	r2, [r2, #12]
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d91c      	bls.n	8007dce <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	8992      	ldrh	r2, [r2, #12]
 8007d9c:	1a9a      	subs	r2, r3, r2
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	8992      	ldrh	r2, [r2, #12]
 8007daa:	441a      	add	r2, r3
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	6919      	ldr	r1, [r3, #16]
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	461a      	mov	r2, r3
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f001 f8c4 	bl	8008f48 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f001 fcd8 	bl	800977c <USBD_LL_PrepareReceive>
 8007dcc:	e040      	b.n	8007e50 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	899b      	ldrh	r3, [r3, #12]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d11c      	bne.n	8007e16 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d316      	bcc.n	8007e16 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d20f      	bcs.n	8007e16 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007df6:	2200      	movs	r2, #0
 8007df8:	2100      	movs	r1, #0
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f001 f8a4 	bl	8008f48 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e08:	2300      	movs	r3, #0
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f001 fcb4 	bl	800977c <USBD_LL_PrepareReceive>
 8007e14:	e01c      	b.n	8007e50 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b03      	cmp	r3, #3
 8007e20:	d10f      	bne.n	8007e42 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d009      	beq.n	8007e42 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e42:	2180      	movs	r1, #128	@ 0x80
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f001 fbef 	bl	8009628 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f001 f8b1 	bl	8008fb2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d03a      	beq.n	8007ed0 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f7ff fe30 	bl	8007ac0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007e68:	e032      	b.n	8007ed0 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007e6a:	7afb      	ldrb	r3, [r7, #11]
 8007e6c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	4619      	mov	r1, r3
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f000 f986 	bl	8008186 <USBD_CoreFindEP>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e7e:	7dfb      	ldrb	r3, [r7, #23]
 8007e80:	2bff      	cmp	r3, #255	@ 0xff
 8007e82:	d025      	beq.n	8007ed0 <USBD_LL_DataInStage+0x16c>
 8007e84:	7dfb      	ldrb	r3, [r7, #23]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d122      	bne.n	8007ed0 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b03      	cmp	r3, #3
 8007e94:	d11c      	bne.n	8007ed0 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007e96:	7dfa      	ldrb	r2, [r7, #23]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	32ae      	adds	r2, #174	@ 0xae
 8007e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d014      	beq.n	8007ed0 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007ea6:	7dfa      	ldrb	r2, [r7, #23]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007eae:	7dfa      	ldrb	r2, [r7, #23]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	32ae      	adds	r2, #174	@ 0xae
 8007eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	7afa      	ldrb	r2, [r7, #11]
 8007ebc:	4611      	mov	r1, r2
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	4798      	blx	r3
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007ec6:	7dbb      	ldrb	r3, [r7, #22]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d001      	beq.n	8007ed0 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007ecc:	7dbb      	ldrb	r3, [r7, #22]
 8007ece:	e000      	b.n	8007ed2 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3718      	adds	r7, #24
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b084      	sub	sp, #16
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d014      	beq.n	8007f40 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00e      	beq.n	8007f40 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	6852      	ldr	r2, [r2, #4]
 8007f2e:	b2d2      	uxtb	r2, r2
 8007f30:	4611      	mov	r1, r2
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	4798      	blx	r3
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d001      	beq.n	8007f40 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f40:	2340      	movs	r3, #64	@ 0x40
 8007f42:	2200      	movs	r2, #0
 8007f44:	2100      	movs	r1, #0
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f001 fb29 	bl	800959e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2240      	movs	r2, #64	@ 0x40
 8007f58:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f5c:	2340      	movs	r3, #64	@ 0x40
 8007f5e:	2200      	movs	r2, #0
 8007f60:	2180      	movs	r1, #128	@ 0x80
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f001 fb1b 	bl	800959e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2240      	movs	r2, #64	@ 0x40
 8007f74:	841a      	strh	r2, [r3, #32]

  return ret;
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	78fa      	ldrb	r2, [r7, #3]
 8007f90:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b04      	cmp	r3, #4
 8007fb2:	d006      	beq.n	8007fc2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2204      	movs	r2, #4
 8007fc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	2b04      	cmp	r3, #4
 8007fea:	d106      	bne.n	8007ffa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007ff2:	b2da      	uxtb	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008016:	b2db      	uxtb	r3, r3
 8008018:	2b03      	cmp	r3, #3
 800801a:	d110      	bne.n	800803e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00b      	beq.n	800803e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d005      	beq.n	800803e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008038:	69db      	ldr	r3, [r3, #28]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	460b      	mov	r3, r1
 8008052:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	32ae      	adds	r2, #174	@ 0xae
 800805e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d101      	bne.n	800806a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008066:	2303      	movs	r3, #3
 8008068:	e01c      	b.n	80080a4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b03      	cmp	r3, #3
 8008074:	d115      	bne.n	80080a2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	32ae      	adds	r2, #174	@ 0xae
 8008080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00b      	beq.n	80080a2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	32ae      	adds	r2, #174	@ 0xae
 8008094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	78fa      	ldrb	r2, [r7, #3]
 800809c:	4611      	mov	r1, r2
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3708      	adds	r7, #8
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	460b      	mov	r3, r1
 80080b6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	32ae      	adds	r2, #174	@ 0xae
 80080c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d101      	bne.n	80080ce <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e01c      	b.n	8008108 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b03      	cmp	r3, #3
 80080d8:	d115      	bne.n	8008106 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	32ae      	adds	r2, #174	@ 0xae
 80080e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00b      	beq.n	8008106 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	32ae      	adds	r2, #174	@ 0xae
 80080f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080fe:	78fa      	ldrb	r2, [r7, #3]
 8008100:	4611      	mov	r1, r2
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	370c      	adds	r7, #12
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b084      	sub	sp, #16
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800812e:	2300      	movs	r3, #0
 8008130:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00e      	beq.n	8008162 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	6852      	ldr	r2, [r2, #4]
 8008150:	b2d2      	uxtb	r2, r2
 8008152:	4611      	mov	r1, r2
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	4798      	blx	r3
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d001      	beq.n	8008162 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800815e:	2303      	movs	r3, #3
 8008160:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008162:	7bfb      	ldrb	r3, [r7, #15]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	460b      	mov	r3, r1
 8008176:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008178:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800817a:	4618      	mov	r0, r3
 800817c:	370c      	adds	r7, #12
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008186:	b480      	push	{r7}
 8008188:	b083      	sub	sp, #12
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	460b      	mov	r3, r1
 8008190:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008192:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008194:	4618      	mov	r0, r3
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	460b      	mov	r3, r1
 80081aa:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80081b4:	2300      	movs	r3, #0
 80081b6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	885b      	ldrh	r3, [r3, #2]
 80081bc:	b29b      	uxth	r3, r3
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	7812      	ldrb	r2, [r2, #0]
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d91f      	bls.n	8008206 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80081cc:	e013      	b.n	80081f6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80081ce:	f107 030a 	add.w	r3, r7, #10
 80081d2:	4619      	mov	r1, r3
 80081d4:	6978      	ldr	r0, [r7, #20]
 80081d6:	f000 f81b 	bl	8008210 <USBD_GetNextDesc>
 80081da:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	785b      	ldrb	r3, [r3, #1]
 80081e0:	2b05      	cmp	r3, #5
 80081e2:	d108      	bne.n	80081f6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	789b      	ldrb	r3, [r3, #2]
 80081ec:	78fa      	ldrb	r2, [r7, #3]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d008      	beq.n	8008204 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80081f2:	2300      	movs	r3, #0
 80081f4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	885b      	ldrh	r3, [r3, #2]
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	897b      	ldrh	r3, [r7, #10]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d8e5      	bhi.n	80081ce <USBD_GetEpDesc+0x2e>
 8008202:	e000      	b.n	8008206 <USBD_GetEpDesc+0x66>
          break;
 8008204:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008206:	693b      	ldr	r3, [r7, #16]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3718      	adds	r7, #24
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	881b      	ldrh	r3, [r3, #0]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	7812      	ldrb	r2, [r2, #0]
 8008226:	4413      	add	r3, r2
 8008228:	b29a      	uxth	r2, r3
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	461a      	mov	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4413      	add	r3, r2
 8008238:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800823a:	68fb      	ldr	r3, [r7, #12]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3714      	adds	r7, #20
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008248:	b480      	push	{r7}
 800824a:	b087      	sub	sp, #28
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	3301      	adds	r3, #1
 800825e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008266:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800826a:	021b      	lsls	r3, r3, #8
 800826c:	b21a      	sxth	r2, r3
 800826e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008272:	4313      	orrs	r3, r2
 8008274:	b21b      	sxth	r3, r3
 8008276:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008278:	89fb      	ldrh	r3, [r7, #14]
}
 800827a:	4618      	mov	r0, r3
 800827c:	371c      	adds	r7, #28
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
	...

08008288 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008292:	2300      	movs	r3, #0
 8008294:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800829e:	2b40      	cmp	r3, #64	@ 0x40
 80082a0:	d005      	beq.n	80082ae <USBD_StdDevReq+0x26>
 80082a2:	2b40      	cmp	r3, #64	@ 0x40
 80082a4:	d857      	bhi.n	8008356 <USBD_StdDevReq+0xce>
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00f      	beq.n	80082ca <USBD_StdDevReq+0x42>
 80082aa:	2b20      	cmp	r3, #32
 80082ac:	d153      	bne.n	8008356 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	32ae      	adds	r2, #174	@ 0xae
 80082b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	4798      	blx	r3
 80082c4:	4603      	mov	r3, r0
 80082c6:	73fb      	strb	r3, [r7, #15]
      break;
 80082c8:	e04a      	b.n	8008360 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	785b      	ldrb	r3, [r3, #1]
 80082ce:	2b09      	cmp	r3, #9
 80082d0:	d83b      	bhi.n	800834a <USBD_StdDevReq+0xc2>
 80082d2:	a201      	add	r2, pc, #4	@ (adr r2, 80082d8 <USBD_StdDevReq+0x50>)
 80082d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d8:	0800832d 	.word	0x0800832d
 80082dc:	08008341 	.word	0x08008341
 80082e0:	0800834b 	.word	0x0800834b
 80082e4:	08008337 	.word	0x08008337
 80082e8:	0800834b 	.word	0x0800834b
 80082ec:	0800830b 	.word	0x0800830b
 80082f0:	08008301 	.word	0x08008301
 80082f4:	0800834b 	.word	0x0800834b
 80082f8:	08008323 	.word	0x08008323
 80082fc:	08008315 	.word	0x08008315
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008300:	6839      	ldr	r1, [r7, #0]
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fa3e 	bl	8008784 <USBD_GetDescriptor>
          break;
 8008308:	e024      	b.n	8008354 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fba3 	bl	8008a58 <USBD_SetAddress>
          break;
 8008312:	e01f      	b.n	8008354 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008314:	6839      	ldr	r1, [r7, #0]
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fbe2 	bl	8008ae0 <USBD_SetConfig>
 800831c:	4603      	mov	r3, r0
 800831e:	73fb      	strb	r3, [r7, #15]
          break;
 8008320:	e018      	b.n	8008354 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008322:	6839      	ldr	r1, [r7, #0]
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fc85 	bl	8008c34 <USBD_GetConfig>
          break;
 800832a:	e013      	b.n	8008354 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fcb6 	bl	8008ca0 <USBD_GetStatus>
          break;
 8008334:	e00e      	b.n	8008354 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008336:	6839      	ldr	r1, [r7, #0]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 fce5 	bl	8008d08 <USBD_SetFeature>
          break;
 800833e:	e009      	b.n	8008354 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008340:	6839      	ldr	r1, [r7, #0]
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fd09 	bl	8008d5a <USBD_ClrFeature>
          break;
 8008348:	e004      	b.n	8008354 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fd60 	bl	8008e12 <USBD_CtlError>
          break;
 8008352:	bf00      	nop
      }
      break;
 8008354:	e004      	b.n	8008360 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008356:	6839      	ldr	r1, [r7, #0]
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 fd5a 	bl	8008e12 <USBD_CtlError>
      break;
 800835e:	bf00      	nop
  }

  return ret;
 8008360:	7bfb      	ldrb	r3, [r7, #15]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop

0800836c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008382:	2b40      	cmp	r3, #64	@ 0x40
 8008384:	d005      	beq.n	8008392 <USBD_StdItfReq+0x26>
 8008386:	2b40      	cmp	r3, #64	@ 0x40
 8008388:	d852      	bhi.n	8008430 <USBD_StdItfReq+0xc4>
 800838a:	2b00      	cmp	r3, #0
 800838c:	d001      	beq.n	8008392 <USBD_StdItfReq+0x26>
 800838e:	2b20      	cmp	r3, #32
 8008390:	d14e      	bne.n	8008430 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008398:	b2db      	uxtb	r3, r3
 800839a:	3b01      	subs	r3, #1
 800839c:	2b02      	cmp	r3, #2
 800839e:	d840      	bhi.n	8008422 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	889b      	ldrh	r3, [r3, #4]
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d836      	bhi.n	8008418 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	889b      	ldrh	r3, [r3, #4]
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	4619      	mov	r1, r3
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f7ff feda 	bl	800816c <USBD_CoreFindIF>
 80083b8:	4603      	mov	r3, r0
 80083ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083bc:	7bbb      	ldrb	r3, [r7, #14]
 80083be:	2bff      	cmp	r3, #255	@ 0xff
 80083c0:	d01d      	beq.n	80083fe <USBD_StdItfReq+0x92>
 80083c2:	7bbb      	ldrb	r3, [r7, #14]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d11a      	bne.n	80083fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80083c8:	7bba      	ldrb	r2, [r7, #14]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	32ae      	adds	r2, #174	@ 0xae
 80083ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00f      	beq.n	80083f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80083d8:	7bba      	ldrb	r2, [r7, #14]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80083e0:	7bba      	ldrb	r2, [r7, #14]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	32ae      	adds	r2, #174	@ 0xae
 80083e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	6839      	ldr	r1, [r7, #0]
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	4798      	blx	r3
 80083f2:	4603      	mov	r3, r0
 80083f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80083f6:	e004      	b.n	8008402 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80083f8:	2303      	movs	r3, #3
 80083fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80083fc:	e001      	b.n	8008402 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80083fe:	2303      	movs	r3, #3
 8008400:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	88db      	ldrh	r3, [r3, #6]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d110      	bne.n	800842c <USBD_StdItfReq+0xc0>
 800840a:	7bfb      	ldrb	r3, [r7, #15]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10d      	bne.n	800842c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fdbb 	bl	8008f8c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008416:	e009      	b.n	800842c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008418:	6839      	ldr	r1, [r7, #0]
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fcf9 	bl	8008e12 <USBD_CtlError>
          break;
 8008420:	e004      	b.n	800842c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fcf4 	bl	8008e12 <USBD_CtlError>
          break;
 800842a:	e000      	b.n	800842e <USBD_StdItfReq+0xc2>
          break;
 800842c:	bf00      	nop
      }
      break;
 800842e:	e004      	b.n	800843a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fced 	bl	8008e12 <USBD_CtlError>
      break;
 8008438:	bf00      	nop
  }

  return ret;
 800843a:	7bfb      	ldrb	r3, [r7, #15]
}
 800843c:	4618      	mov	r0, r3
 800843e:	3710      	adds	r7, #16
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800844e:	2300      	movs	r3, #0
 8008450:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	889b      	ldrh	r3, [r3, #4]
 8008456:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008460:	2b40      	cmp	r3, #64	@ 0x40
 8008462:	d007      	beq.n	8008474 <USBD_StdEPReq+0x30>
 8008464:	2b40      	cmp	r3, #64	@ 0x40
 8008466:	f200 8181 	bhi.w	800876c <USBD_StdEPReq+0x328>
 800846a:	2b00      	cmp	r3, #0
 800846c:	d02a      	beq.n	80084c4 <USBD_StdEPReq+0x80>
 800846e:	2b20      	cmp	r3, #32
 8008470:	f040 817c 	bne.w	800876c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008474:	7bbb      	ldrb	r3, [r7, #14]
 8008476:	4619      	mov	r1, r3
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f7ff fe84 	bl	8008186 <USBD_CoreFindEP>
 800847e:	4603      	mov	r3, r0
 8008480:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008482:	7b7b      	ldrb	r3, [r7, #13]
 8008484:	2bff      	cmp	r3, #255	@ 0xff
 8008486:	f000 8176 	beq.w	8008776 <USBD_StdEPReq+0x332>
 800848a:	7b7b      	ldrb	r3, [r7, #13]
 800848c:	2b00      	cmp	r3, #0
 800848e:	f040 8172 	bne.w	8008776 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8008492:	7b7a      	ldrb	r2, [r7, #13]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800849a:	7b7a      	ldrb	r2, [r7, #13]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	32ae      	adds	r2, #174	@ 0xae
 80084a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f000 8165 	beq.w	8008776 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80084ac:	7b7a      	ldrb	r2, [r7, #13]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	32ae      	adds	r2, #174	@ 0xae
 80084b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	6839      	ldr	r1, [r7, #0]
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	4798      	blx	r3
 80084be:	4603      	mov	r3, r0
 80084c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80084c2:	e158      	b.n	8008776 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	785b      	ldrb	r3, [r3, #1]
 80084c8:	2b03      	cmp	r3, #3
 80084ca:	d008      	beq.n	80084de <USBD_StdEPReq+0x9a>
 80084cc:	2b03      	cmp	r3, #3
 80084ce:	f300 8147 	bgt.w	8008760 <USBD_StdEPReq+0x31c>
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f000 809b 	beq.w	800860e <USBD_StdEPReq+0x1ca>
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d03c      	beq.n	8008556 <USBD_StdEPReq+0x112>
 80084dc:	e140      	b.n	8008760 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	d002      	beq.n	80084f0 <USBD_StdEPReq+0xac>
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	d016      	beq.n	800851c <USBD_StdEPReq+0xd8>
 80084ee:	e02c      	b.n	800854a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084f0:	7bbb      	ldrb	r3, [r7, #14]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00d      	beq.n	8008512 <USBD_StdEPReq+0xce>
 80084f6:	7bbb      	ldrb	r3, [r7, #14]
 80084f8:	2b80      	cmp	r3, #128	@ 0x80
 80084fa:	d00a      	beq.n	8008512 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80084fc:	7bbb      	ldrb	r3, [r7, #14]
 80084fe:	4619      	mov	r1, r3
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f001 f891 	bl	8009628 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008506:	2180      	movs	r1, #128	@ 0x80
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f001 f88d 	bl	8009628 <USBD_LL_StallEP>
 800850e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008510:	e020      	b.n	8008554 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008512:	6839      	ldr	r1, [r7, #0]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 fc7c 	bl	8008e12 <USBD_CtlError>
              break;
 800851a:	e01b      	b.n	8008554 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	885b      	ldrh	r3, [r3, #2]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d10e      	bne.n	8008542 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008524:	7bbb      	ldrb	r3, [r7, #14]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00b      	beq.n	8008542 <USBD_StdEPReq+0xfe>
 800852a:	7bbb      	ldrb	r3, [r7, #14]
 800852c:	2b80      	cmp	r3, #128	@ 0x80
 800852e:	d008      	beq.n	8008542 <USBD_StdEPReq+0xfe>
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	88db      	ldrh	r3, [r3, #6]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d104      	bne.n	8008542 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008538:	7bbb      	ldrb	r3, [r7, #14]
 800853a:	4619      	mov	r1, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f001 f873 	bl	8009628 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fd22 	bl	8008f8c <USBD_CtlSendStatus>

              break;
 8008548:	e004      	b.n	8008554 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fc60 	bl	8008e12 <USBD_CtlError>
              break;
 8008552:	bf00      	nop
          }
          break;
 8008554:	e109      	b.n	800876a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b02      	cmp	r3, #2
 8008560:	d002      	beq.n	8008568 <USBD_StdEPReq+0x124>
 8008562:	2b03      	cmp	r3, #3
 8008564:	d016      	beq.n	8008594 <USBD_StdEPReq+0x150>
 8008566:	e04b      	b.n	8008600 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008568:	7bbb      	ldrb	r3, [r7, #14]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00d      	beq.n	800858a <USBD_StdEPReq+0x146>
 800856e:	7bbb      	ldrb	r3, [r7, #14]
 8008570:	2b80      	cmp	r3, #128	@ 0x80
 8008572:	d00a      	beq.n	800858a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008574:	7bbb      	ldrb	r3, [r7, #14]
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f001 f855 	bl	8009628 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800857e:	2180      	movs	r1, #128	@ 0x80
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f001 f851 	bl	8009628 <USBD_LL_StallEP>
 8008586:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008588:	e040      	b.n	800860c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800858a:	6839      	ldr	r1, [r7, #0]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fc40 	bl	8008e12 <USBD_CtlError>
              break;
 8008592:	e03b      	b.n	800860c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	885b      	ldrh	r3, [r3, #2]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d136      	bne.n	800860a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800859c:	7bbb      	ldrb	r3, [r7, #14]
 800859e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d004      	beq.n	80085b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80085a6:	7bbb      	ldrb	r3, [r7, #14]
 80085a8:	4619      	mov	r1, r3
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f001 f85b 	bl	8009666 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 fceb 	bl	8008f8c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80085b6:	7bbb      	ldrb	r3, [r7, #14]
 80085b8:	4619      	mov	r1, r3
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f7ff fde3 	bl	8008186 <USBD_CoreFindEP>
 80085c0:	4603      	mov	r3, r0
 80085c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085c4:	7b7b      	ldrb	r3, [r7, #13]
 80085c6:	2bff      	cmp	r3, #255	@ 0xff
 80085c8:	d01f      	beq.n	800860a <USBD_StdEPReq+0x1c6>
 80085ca:	7b7b      	ldrb	r3, [r7, #13]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d11c      	bne.n	800860a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80085d0:	7b7a      	ldrb	r2, [r7, #13]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80085d8:	7b7a      	ldrb	r2, [r7, #13]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	32ae      	adds	r2, #174	@ 0xae
 80085de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d010      	beq.n	800860a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80085e8:	7b7a      	ldrb	r2, [r7, #13]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	32ae      	adds	r2, #174	@ 0xae
 80085ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	6839      	ldr	r1, [r7, #0]
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	4798      	blx	r3
 80085fa:	4603      	mov	r3, r0
 80085fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80085fe:	e004      	b.n	800860a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fc05 	bl	8008e12 <USBD_CtlError>
              break;
 8008608:	e000      	b.n	800860c <USBD_StdEPReq+0x1c8>
              break;
 800860a:	bf00      	nop
          }
          break;
 800860c:	e0ad      	b.n	800876a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008614:	b2db      	uxtb	r3, r3
 8008616:	2b02      	cmp	r3, #2
 8008618:	d002      	beq.n	8008620 <USBD_StdEPReq+0x1dc>
 800861a:	2b03      	cmp	r3, #3
 800861c:	d033      	beq.n	8008686 <USBD_StdEPReq+0x242>
 800861e:	e099      	b.n	8008754 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008620:	7bbb      	ldrb	r3, [r7, #14]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d007      	beq.n	8008636 <USBD_StdEPReq+0x1f2>
 8008626:	7bbb      	ldrb	r3, [r7, #14]
 8008628:	2b80      	cmp	r3, #128	@ 0x80
 800862a:	d004      	beq.n	8008636 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800862c:	6839      	ldr	r1, [r7, #0]
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fbef 	bl	8008e12 <USBD_CtlError>
                break;
 8008634:	e093      	b.n	800875e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008636:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800863a:	2b00      	cmp	r3, #0
 800863c:	da0b      	bge.n	8008656 <USBD_StdEPReq+0x212>
 800863e:	7bbb      	ldrb	r3, [r7, #14]
 8008640:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008644:	4613      	mov	r3, r2
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	4413      	add	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	3310      	adds	r3, #16
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	4413      	add	r3, r2
 8008652:	3304      	adds	r3, #4
 8008654:	e00b      	b.n	800866e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008656:	7bbb      	ldrb	r3, [r7, #14]
 8008658:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800865c:	4613      	mov	r3, r2
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4413      	add	r3, r2
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	4413      	add	r3, r2
 800866c:	3304      	adds	r3, #4
 800866e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	2200      	movs	r2, #0
 8008674:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	330e      	adds	r3, #14
 800867a:	2202      	movs	r2, #2
 800867c:	4619      	mov	r1, r3
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fc44 	bl	8008f0c <USBD_CtlSendData>
              break;
 8008684:	e06b      	b.n	800875e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008686:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800868a:	2b00      	cmp	r3, #0
 800868c:	da11      	bge.n	80086b2 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800868e:	7bbb      	ldrb	r3, [r7, #14]
 8008690:	f003 020f 	and.w	r2, r3, #15
 8008694:	6879      	ldr	r1, [r7, #4]
 8008696:	4613      	mov	r3, r2
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	440b      	add	r3, r1
 80086a0:	3323      	adds	r3, #35	@ 0x23
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d117      	bne.n	80086d8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80086a8:	6839      	ldr	r1, [r7, #0]
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fbb1 	bl	8008e12 <USBD_CtlError>
                  break;
 80086b0:	e055      	b.n	800875e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80086b2:	7bbb      	ldrb	r3, [r7, #14]
 80086b4:	f003 020f 	and.w	r2, r3, #15
 80086b8:	6879      	ldr	r1, [r7, #4]
 80086ba:	4613      	mov	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	4413      	add	r3, r2
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	440b      	add	r3, r1
 80086c4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d104      	bne.n	80086d8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80086ce:	6839      	ldr	r1, [r7, #0]
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 fb9e 	bl	8008e12 <USBD_CtlError>
                  break;
 80086d6:	e042      	b.n	800875e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	da0b      	bge.n	80086f8 <USBD_StdEPReq+0x2b4>
 80086e0:	7bbb      	ldrb	r3, [r7, #14]
 80086e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086e6:	4613      	mov	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4413      	add	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	3310      	adds	r3, #16
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	4413      	add	r3, r2
 80086f4:	3304      	adds	r3, #4
 80086f6:	e00b      	b.n	8008710 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086f8:	7bbb      	ldrb	r3, [r7, #14]
 80086fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086fe:	4613      	mov	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4413      	add	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	4413      	add	r3, r2
 800870e:	3304      	adds	r3, #4
 8008710:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008712:	7bbb      	ldrb	r3, [r7, #14]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d002      	beq.n	800871e <USBD_StdEPReq+0x2da>
 8008718:	7bbb      	ldrb	r3, [r7, #14]
 800871a:	2b80      	cmp	r3, #128	@ 0x80
 800871c:	d103      	bne.n	8008726 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	2200      	movs	r2, #0
 8008722:	739a      	strb	r2, [r3, #14]
 8008724:	e00e      	b.n	8008744 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008726:	7bbb      	ldrb	r3, [r7, #14]
 8008728:	4619      	mov	r1, r3
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 ffba 	bl	80096a4 <USBD_LL_IsStallEP>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d003      	beq.n	800873e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	2201      	movs	r2, #1
 800873a:	739a      	strb	r2, [r3, #14]
 800873c:	e002      	b.n	8008744 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	2200      	movs	r2, #0
 8008742:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	330e      	adds	r3, #14
 8008748:	2202      	movs	r2, #2
 800874a:	4619      	mov	r1, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fbdd 	bl	8008f0c <USBD_CtlSendData>
              break;
 8008752:	e004      	b.n	800875e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8008754:	6839      	ldr	r1, [r7, #0]
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 fb5b 	bl	8008e12 <USBD_CtlError>
              break;
 800875c:	bf00      	nop
          }
          break;
 800875e:	e004      	b.n	800876a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fb55 	bl	8008e12 <USBD_CtlError>
          break;
 8008768:	bf00      	nop
      }
      break;
 800876a:	e005      	b.n	8008778 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800876c:	6839      	ldr	r1, [r7, #0]
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 fb4f 	bl	8008e12 <USBD_CtlError>
      break;
 8008774:	e000      	b.n	8008778 <USBD_StdEPReq+0x334>
      break;
 8008776:	bf00      	nop
  }

  return ret;
 8008778:	7bfb      	ldrb	r3, [r7, #15]
}
 800877a:	4618      	mov	r0, r3
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
	...

08008784 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800878e:	2300      	movs	r3, #0
 8008790:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008792:	2300      	movs	r3, #0
 8008794:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008796:	2300      	movs	r3, #0
 8008798:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	885b      	ldrh	r3, [r3, #2]
 800879e:	0a1b      	lsrs	r3, r3, #8
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	3b01      	subs	r3, #1
 80087a4:	2b06      	cmp	r3, #6
 80087a6:	f200 8128 	bhi.w	80089fa <USBD_GetDescriptor+0x276>
 80087aa:	a201      	add	r2, pc, #4	@ (adr r2, 80087b0 <USBD_GetDescriptor+0x2c>)
 80087ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b0:	080087cd 	.word	0x080087cd
 80087b4:	080087e5 	.word	0x080087e5
 80087b8:	08008825 	.word	0x08008825
 80087bc:	080089fb 	.word	0x080089fb
 80087c0:	080089fb 	.word	0x080089fb
 80087c4:	0800899b 	.word	0x0800899b
 80087c8:	080089c7 	.word	0x080089c7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	7c12      	ldrb	r2, [r2, #16]
 80087d8:	f107 0108 	add.w	r1, r7, #8
 80087dc:	4610      	mov	r0, r2
 80087de:	4798      	blx	r3
 80087e0:	60f8      	str	r0, [r7, #12]
      break;
 80087e2:	e112      	b.n	8008a0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	7c1b      	ldrb	r3, [r3, #16]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10d      	bne.n	8008808 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087f4:	f107 0208 	add.w	r2, r7, #8
 80087f8:	4610      	mov	r0, r2
 80087fa:	4798      	blx	r3
 80087fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	3301      	adds	r3, #1
 8008802:	2202      	movs	r2, #2
 8008804:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008806:	e100      	b.n	8008a0a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800880e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008810:	f107 0208 	add.w	r2, r7, #8
 8008814:	4610      	mov	r0, r2
 8008816:	4798      	blx	r3
 8008818:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	3301      	adds	r3, #1
 800881e:	2202      	movs	r2, #2
 8008820:	701a      	strb	r2, [r3, #0]
      break;
 8008822:	e0f2      	b.n	8008a0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	885b      	ldrh	r3, [r3, #2]
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b05      	cmp	r3, #5
 800882c:	f200 80ac 	bhi.w	8008988 <USBD_GetDescriptor+0x204>
 8008830:	a201      	add	r2, pc, #4	@ (adr r2, 8008838 <USBD_GetDescriptor+0xb4>)
 8008832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008836:	bf00      	nop
 8008838:	08008851 	.word	0x08008851
 800883c:	08008885 	.word	0x08008885
 8008840:	080088b9 	.word	0x080088b9
 8008844:	080088ed 	.word	0x080088ed
 8008848:	08008921 	.word	0x08008921
 800884c:	08008955 	.word	0x08008955
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00b      	beq.n	8008874 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	7c12      	ldrb	r2, [r2, #16]
 8008868:	f107 0108 	add.w	r1, r7, #8
 800886c:	4610      	mov	r0, r2
 800886e:	4798      	blx	r3
 8008870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008872:	e091      	b.n	8008998 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008874:	6839      	ldr	r1, [r7, #0]
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 facb 	bl	8008e12 <USBD_CtlError>
            err++;
 800887c:	7afb      	ldrb	r3, [r7, #11]
 800887e:	3301      	adds	r3, #1
 8008880:	72fb      	strb	r3, [r7, #11]
          break;
 8008882:	e089      	b.n	8008998 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00b      	beq.n	80088a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	7c12      	ldrb	r2, [r2, #16]
 800889c:	f107 0108 	add.w	r1, r7, #8
 80088a0:	4610      	mov	r0, r2
 80088a2:	4798      	blx	r3
 80088a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088a6:	e077      	b.n	8008998 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088a8:	6839      	ldr	r1, [r7, #0]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fab1 	bl	8008e12 <USBD_CtlError>
            err++;
 80088b0:	7afb      	ldrb	r3, [r7, #11]
 80088b2:	3301      	adds	r3, #1
 80088b4:	72fb      	strb	r3, [r7, #11]
          break;
 80088b6:	e06f      	b.n	8008998 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00b      	beq.n	80088dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	7c12      	ldrb	r2, [r2, #16]
 80088d0:	f107 0108 	add.w	r1, r7, #8
 80088d4:	4610      	mov	r0, r2
 80088d6:	4798      	blx	r3
 80088d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088da:	e05d      	b.n	8008998 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fa97 	bl	8008e12 <USBD_CtlError>
            err++;
 80088e4:	7afb      	ldrb	r3, [r7, #11]
 80088e6:	3301      	adds	r3, #1
 80088e8:	72fb      	strb	r3, [r7, #11]
          break;
 80088ea:	e055      	b.n	8008998 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088f2:	691b      	ldr	r3, [r3, #16]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00b      	beq.n	8008910 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	7c12      	ldrb	r2, [r2, #16]
 8008904:	f107 0108 	add.w	r1, r7, #8
 8008908:	4610      	mov	r0, r2
 800890a:	4798      	blx	r3
 800890c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800890e:	e043      	b.n	8008998 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008910:	6839      	ldr	r1, [r7, #0]
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fa7d 	bl	8008e12 <USBD_CtlError>
            err++;
 8008918:	7afb      	ldrb	r3, [r7, #11]
 800891a:	3301      	adds	r3, #1
 800891c:	72fb      	strb	r3, [r7, #11]
          break;
 800891e:	e03b      	b.n	8008998 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008926:	695b      	ldr	r3, [r3, #20]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00b      	beq.n	8008944 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008932:	695b      	ldr	r3, [r3, #20]
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	7c12      	ldrb	r2, [r2, #16]
 8008938:	f107 0108 	add.w	r1, r7, #8
 800893c:	4610      	mov	r0, r2
 800893e:	4798      	blx	r3
 8008940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008942:	e029      	b.n	8008998 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008944:	6839      	ldr	r1, [r7, #0]
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fa63 	bl	8008e12 <USBD_CtlError>
            err++;
 800894c:	7afb      	ldrb	r3, [r7, #11]
 800894e:	3301      	adds	r3, #1
 8008950:	72fb      	strb	r3, [r7, #11]
          break;
 8008952:	e021      	b.n	8008998 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800895a:	699b      	ldr	r3, [r3, #24]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00b      	beq.n	8008978 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	7c12      	ldrb	r2, [r2, #16]
 800896c:	f107 0108 	add.w	r1, r7, #8
 8008970:	4610      	mov	r0, r2
 8008972:	4798      	blx	r3
 8008974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008976:	e00f      	b.n	8008998 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fa49 	bl	8008e12 <USBD_CtlError>
            err++;
 8008980:	7afb      	ldrb	r3, [r7, #11]
 8008982:	3301      	adds	r3, #1
 8008984:	72fb      	strb	r3, [r7, #11]
          break;
 8008986:	e007      	b.n	8008998 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008988:	6839      	ldr	r1, [r7, #0]
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fa41 	bl	8008e12 <USBD_CtlError>
          err++;
 8008990:	7afb      	ldrb	r3, [r7, #11]
 8008992:	3301      	adds	r3, #1
 8008994:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008996:	bf00      	nop
      }
      break;
 8008998:	e037      	b.n	8008a0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	7c1b      	ldrb	r3, [r3, #16]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d109      	bne.n	80089b6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089aa:	f107 0208 	add.w	r2, r7, #8
 80089ae:	4610      	mov	r0, r2
 80089b0:	4798      	blx	r3
 80089b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089b4:	e029      	b.n	8008a0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80089b6:	6839      	ldr	r1, [r7, #0]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 fa2a 	bl	8008e12 <USBD_CtlError>
        err++;
 80089be:	7afb      	ldrb	r3, [r7, #11]
 80089c0:	3301      	adds	r3, #1
 80089c2:	72fb      	strb	r3, [r7, #11]
      break;
 80089c4:	e021      	b.n	8008a0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	7c1b      	ldrb	r3, [r3, #16]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d10d      	bne.n	80089ea <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089d6:	f107 0208 	add.w	r2, r7, #8
 80089da:	4610      	mov	r0, r2
 80089dc:	4798      	blx	r3
 80089de:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	3301      	adds	r3, #1
 80089e4:	2207      	movs	r2, #7
 80089e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089e8:	e00f      	b.n	8008a0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80089ea:	6839      	ldr	r1, [r7, #0]
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fa10 	bl	8008e12 <USBD_CtlError>
        err++;
 80089f2:	7afb      	ldrb	r3, [r7, #11]
 80089f4:	3301      	adds	r3, #1
 80089f6:	72fb      	strb	r3, [r7, #11]
      break;
 80089f8:	e007      	b.n	8008a0a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80089fa:	6839      	ldr	r1, [r7, #0]
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fa08 	bl	8008e12 <USBD_CtlError>
      err++;
 8008a02:	7afb      	ldrb	r3, [r7, #11]
 8008a04:	3301      	adds	r3, #1
 8008a06:	72fb      	strb	r3, [r7, #11]
      break;
 8008a08:	bf00      	nop
  }

  if (err != 0U)
 8008a0a:	7afb      	ldrb	r3, [r7, #11]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d11e      	bne.n	8008a4e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	88db      	ldrh	r3, [r3, #6]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d016      	beq.n	8008a46 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008a18:	893b      	ldrh	r3, [r7, #8]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00e      	beq.n	8008a3c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	88da      	ldrh	r2, [r3, #6]
 8008a22:	893b      	ldrh	r3, [r7, #8]
 8008a24:	4293      	cmp	r3, r2
 8008a26:	bf28      	it	cs
 8008a28:	4613      	movcs	r3, r2
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a2e:	893b      	ldrh	r3, [r7, #8]
 8008a30:	461a      	mov	r2, r3
 8008a32:	68f9      	ldr	r1, [r7, #12]
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fa69 	bl	8008f0c <USBD_CtlSendData>
 8008a3a:	e009      	b.n	8008a50 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008a3c:	6839      	ldr	r1, [r7, #0]
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 f9e7 	bl	8008e12 <USBD_CtlError>
 8008a44:	e004      	b.n	8008a50 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 faa0 	bl	8008f8c <USBD_CtlSendStatus>
 8008a4c:	e000      	b.n	8008a50 <USBD_GetDescriptor+0x2cc>
    return;
 8008a4e:	bf00      	nop
  }
}
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop

08008a58 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	889b      	ldrh	r3, [r3, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d131      	bne.n	8008ace <USBD_SetAddress+0x76>
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	88db      	ldrh	r3, [r3, #6]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d12d      	bne.n	8008ace <USBD_SetAddress+0x76>
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	885b      	ldrh	r3, [r3, #2]
 8008a76:	2b7f      	cmp	r3, #127	@ 0x7f
 8008a78:	d829      	bhi.n	8008ace <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	885b      	ldrh	r3, [r3, #2]
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b03      	cmp	r3, #3
 8008a90:	d104      	bne.n	8008a9c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 f9bc 	bl	8008e12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a9a:	e01d      	b.n	8008ad8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	7bfa      	ldrb	r2, [r7, #15]
 8008aa0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 fe27 	bl	80096fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fa6c 	bl	8008f8c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d004      	beq.n	8008ac4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2202      	movs	r2, #2
 8008abe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac2:	e009      	b.n	8008ad8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008acc:	e004      	b.n	8008ad8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ace:	6839      	ldr	r1, [r7, #0]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f99e 	bl	8008e12 <USBD_CtlError>
  }
}
 8008ad6:	bf00      	nop
 8008ad8:	bf00      	nop
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	885b      	ldrh	r3, [r3, #2]
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	4b4e      	ldr	r3, [pc, #312]	@ (8008c30 <USBD_SetConfig+0x150>)
 8008af6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008af8:	4b4d      	ldr	r3, [pc, #308]	@ (8008c30 <USBD_SetConfig+0x150>)
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d905      	bls.n	8008b0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008b00:	6839      	ldr	r1, [r7, #0]
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f985 	bl	8008e12 <USBD_CtlError>
    return USBD_FAIL;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e08c      	b.n	8008c26 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d002      	beq.n	8008b1e <USBD_SetConfig+0x3e>
 8008b18:	2b03      	cmp	r3, #3
 8008b1a:	d029      	beq.n	8008b70 <USBD_SetConfig+0x90>
 8008b1c:	e075      	b.n	8008c0a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008b1e:	4b44      	ldr	r3, [pc, #272]	@ (8008c30 <USBD_SetConfig+0x150>)
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d020      	beq.n	8008b68 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008b26:	4b42      	ldr	r3, [pc, #264]	@ (8008c30 <USBD_SetConfig+0x150>)
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b30:	4b3f      	ldr	r3, [pc, #252]	@ (8008c30 <USBD_SetConfig+0x150>)
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	4619      	mov	r1, r3
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f7fe ffcd 	bl	8007ad6 <USBD_SetClassConfig>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008b40:	7bfb      	ldrb	r3, [r7, #15]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d008      	beq.n	8008b58 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f962 	bl	8008e12 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2202      	movs	r2, #2
 8008b52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b56:	e065      	b.n	8008c24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fa17 	bl	8008f8c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2203      	movs	r2, #3
 8008b62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008b66:	e05d      	b.n	8008c24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fa0f 	bl	8008f8c <USBD_CtlSendStatus>
      break;
 8008b6e:	e059      	b.n	8008c24 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008b70:	4b2f      	ldr	r3, [pc, #188]	@ (8008c30 <USBD_SetConfig+0x150>)
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d112      	bne.n	8008b9e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2202      	movs	r2, #2
 8008b7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008b80:	4b2b      	ldr	r3, [pc, #172]	@ (8008c30 <USBD_SetConfig+0x150>)
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	461a      	mov	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b8a:	4b29      	ldr	r3, [pc, #164]	@ (8008c30 <USBD_SetConfig+0x150>)
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	4619      	mov	r1, r3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f7fe ffbc 	bl	8007b0e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f9f8 	bl	8008f8c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b9c:	e042      	b.n	8008c24 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008b9e:	4b24      	ldr	r3, [pc, #144]	@ (8008c30 <USBD_SetConfig+0x150>)
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d02a      	beq.n	8008c02 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f7fe ffaa 	bl	8007b0e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008bba:	4b1d      	ldr	r3, [pc, #116]	@ (8008c30 <USBD_SetConfig+0x150>)
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8008c30 <USBD_SetConfig+0x150>)
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	4619      	mov	r1, r3
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f7fe ff83 	bl	8007ad6 <USBD_SetClassConfig>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d00f      	beq.n	8008bfa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008bda:	6839      	ldr	r1, [r7, #0]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f918 	bl	8008e12 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	4619      	mov	r1, r3
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f7fe ff8f 	bl	8007b0e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2202      	movs	r2, #2
 8008bf4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008bf8:	e014      	b.n	8008c24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f9c6 	bl	8008f8c <USBD_CtlSendStatus>
      break;
 8008c00:	e010      	b.n	8008c24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f9c2 	bl	8008f8c <USBD_CtlSendStatus>
      break;
 8008c08:	e00c      	b.n	8008c24 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008c0a:	6839      	ldr	r1, [r7, #0]
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 f900 	bl	8008e12 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c12:	4b07      	ldr	r3, [pc, #28]	@ (8008c30 <USBD_SetConfig+0x150>)
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f7fe ff78 	bl	8007b0e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	73fb      	strb	r3, [r7, #15]
      break;
 8008c22:	bf00      	nop
  }

  return ret;
 8008c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	2000031c 	.word	0x2000031c

08008c34 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	88db      	ldrh	r3, [r3, #6]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d004      	beq.n	8008c50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c46:	6839      	ldr	r1, [r7, #0]
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 f8e2 	bl	8008e12 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c4e:	e023      	b.n	8008c98 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	dc02      	bgt.n	8008c62 <USBD_GetConfig+0x2e>
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	dc03      	bgt.n	8008c68 <USBD_GetConfig+0x34>
 8008c60:	e015      	b.n	8008c8e <USBD_GetConfig+0x5a>
 8008c62:	2b03      	cmp	r3, #3
 8008c64:	d00b      	beq.n	8008c7e <USBD_GetConfig+0x4a>
 8008c66:	e012      	b.n	8008c8e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	3308      	adds	r3, #8
 8008c72:	2201      	movs	r2, #1
 8008c74:	4619      	mov	r1, r3
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 f948 	bl	8008f0c <USBD_CtlSendData>
        break;
 8008c7c:	e00c      	b.n	8008c98 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	3304      	adds	r3, #4
 8008c82:	2201      	movs	r2, #1
 8008c84:	4619      	mov	r1, r3
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f940 	bl	8008f0c <USBD_CtlSendData>
        break;
 8008c8c:	e004      	b.n	8008c98 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008c8e:	6839      	ldr	r1, [r7, #0]
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 f8be 	bl	8008e12 <USBD_CtlError>
        break;
 8008c96:	bf00      	nop
}
 8008c98:	bf00      	nop
 8008c9a:	3708      	adds	r7, #8
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d81e      	bhi.n	8008cf6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	88db      	ldrh	r3, [r3, #6]
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	d004      	beq.n	8008cca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f8a5 	bl	8008e12 <USBD_CtlError>
        break;
 8008cc8:	e01a      	b.n	8008d00 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d005      	beq.n	8008ce6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	f043 0202 	orr.w	r2, r3, #2
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	330c      	adds	r3, #12
 8008cea:	2202      	movs	r2, #2
 8008cec:	4619      	mov	r1, r3
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f90c 	bl	8008f0c <USBD_CtlSendData>
      break;
 8008cf4:	e004      	b.n	8008d00 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008cf6:	6839      	ldr	r1, [r7, #0]
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 f88a 	bl	8008e12 <USBD_CtlError>
      break;
 8008cfe:	bf00      	nop
  }
}
 8008d00:	bf00      	nop
 8008d02:	3708      	adds	r7, #8
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	885b      	ldrh	r3, [r3, #2]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d107      	bne.n	8008d2a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f932 	bl	8008f8c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008d28:	e013      	b.n	8008d52 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	885b      	ldrh	r3, [r3, #2]
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d10b      	bne.n	8008d4a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	889b      	ldrh	r3, [r3, #4]
 8008d36:	0a1b      	lsrs	r3, r3, #8
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	b2da      	uxtb	r2, r3
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 f922 	bl	8008f8c <USBD_CtlSendStatus>
}
 8008d48:	e003      	b.n	8008d52 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008d4a:	6839      	ldr	r1, [r7, #0]
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 f860 	bl	8008e12 <USBD_CtlError>
}
 8008d52:	bf00      	nop
 8008d54:	3708      	adds	r7, #8
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b082      	sub	sp, #8
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	3b01      	subs	r3, #1
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d80b      	bhi.n	8008d8a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	885b      	ldrh	r3, [r3, #2]
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d10c      	bne.n	8008d94 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f902 	bl	8008f8c <USBD_CtlSendStatus>
      }
      break;
 8008d88:	e004      	b.n	8008d94 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 f840 	bl	8008e12 <USBD_CtlError>
      break;
 8008d92:	e000      	b.n	8008d96 <USBD_ClrFeature+0x3c>
      break;
 8008d94:	bf00      	nop
  }
}
 8008d96:	bf00      	nop
 8008d98:	3708      	adds	r7, #8
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b084      	sub	sp, #16
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	781a      	ldrb	r2, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	3301      	adds	r3, #1
 8008db8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	781a      	ldrb	r2, [r3, #0]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f7ff fa3d 	bl	8008248 <SWAPBYTE>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	3301      	adds	r3, #1
 8008de0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f7ff fa30 	bl	8008248 <SWAPBYTE>
 8008de8:	4603      	mov	r3, r0
 8008dea:	461a      	mov	r2, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	3301      	adds	r3, #1
 8008df4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f7ff fa23 	bl	8008248 <SWAPBYTE>
 8008e02:	4603      	mov	r3, r0
 8008e04:	461a      	mov	r2, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	80da      	strh	r2, [r3, #6]
}
 8008e0a:	bf00      	nop
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b082      	sub	sp, #8
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
 8008e1a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e1c:	2180      	movs	r1, #128	@ 0x80
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fc02 	bl	8009628 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e24:	2100      	movs	r1, #0
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 fbfe 	bl	8009628 <USBD_LL_StallEP>
}
 8008e2c:	bf00      	nop
 8008e2e:	3708      	adds	r7, #8
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b086      	sub	sp, #24
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e40:	2300      	movs	r3, #0
 8008e42:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d042      	beq.n	8008ed0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008e4e:	6938      	ldr	r0, [r7, #16]
 8008e50:	f000 f842 	bl	8008ed8 <USBD_GetLen>
 8008e54:	4603      	mov	r3, r0
 8008e56:	3301      	adds	r3, #1
 8008e58:	005b      	lsls	r3, r3, #1
 8008e5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e5e:	d808      	bhi.n	8008e72 <USBD_GetString+0x3e>
 8008e60:	6938      	ldr	r0, [r7, #16]
 8008e62:	f000 f839 	bl	8008ed8 <USBD_GetLen>
 8008e66:	4603      	mov	r3, r0
 8008e68:	3301      	adds	r3, #1
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	005b      	lsls	r3, r3, #1
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	e001      	b.n	8008e76 <USBD_GetString+0x42>
 8008e72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008e7a:	7dfb      	ldrb	r3, [r7, #23]
 8008e7c:	68ba      	ldr	r2, [r7, #8]
 8008e7e:	4413      	add	r3, r2
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	7812      	ldrb	r2, [r2, #0]
 8008e84:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e86:	7dfb      	ldrb	r3, [r7, #23]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008e8c:	7dfb      	ldrb	r3, [r7, #23]
 8008e8e:	68ba      	ldr	r2, [r7, #8]
 8008e90:	4413      	add	r3, r2
 8008e92:	2203      	movs	r2, #3
 8008e94:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e96:	7dfb      	ldrb	r3, [r7, #23]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008e9c:	e013      	b.n	8008ec6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008e9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ea0:	68ba      	ldr	r2, [r7, #8]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	693a      	ldr	r2, [r7, #16]
 8008ea6:	7812      	ldrb	r2, [r2, #0]
 8008ea8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	3301      	adds	r3, #1
 8008eae:	613b      	str	r3, [r7, #16]
    idx++;
 8008eb0:	7dfb      	ldrb	r3, [r7, #23]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008eb6:	7dfb      	ldrb	r3, [r7, #23]
 8008eb8:	68ba      	ldr	r2, [r7, #8]
 8008eba:	4413      	add	r3, r2
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	701a      	strb	r2, [r3, #0]
    idx++;
 8008ec0:	7dfb      	ldrb	r3, [r7, #23]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1e7      	bne.n	8008e9e <USBD_GetString+0x6a>
 8008ece:	e000      	b.n	8008ed2 <USBD_GetString+0x9e>
    return;
 8008ed0:	bf00      	nop
  }
}
 8008ed2:	3718      	adds	r7, #24
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b085      	sub	sp, #20
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008ee8:	e005      	b.n	8008ef6 <USBD_GetLen+0x1e>
  {
    len++;
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
 8008eec:	3301      	adds	r3, #1
 8008eee:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1f5      	bne.n	8008eea <USBD_GetLen+0x12>
  }

  return len;
 8008efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3714      	adds	r7, #20
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2202      	movs	r2, #2
 8008f1c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	68ba      	ldr	r2, [r7, #8]
 8008f2a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	68ba      	ldr	r2, [r7, #8]
 8008f36:	2100      	movs	r1, #0
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f000 fbfe 	bl	800973a <USBD_LL_Transmit>

  return USBD_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	2100      	movs	r1, #0
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f000 fbed 	bl	800973a <USBD_LL_Transmit>

  return USBD_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3710      	adds	r7, #16
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b084      	sub	sp, #16
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	60f8      	str	r0, [r7, #12]
 8008f72:	60b9      	str	r1, [r7, #8]
 8008f74:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f000 fbfd 	bl	800977c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2204      	movs	r2, #4
 8008f98:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 fbc9 	bl	800973a <USBD_LL_Transmit>

  return USBD_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b082      	sub	sp, #8
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2205      	movs	r2, #5
 8008fbe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fbd7 	bl	800977c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	490e      	ldr	r1, [pc, #56]	@ (8009018 <MX_USB_DEVICE_Init+0x40>)
 8008fe0:	480e      	ldr	r0, [pc, #56]	@ (800901c <MX_USB_DEVICE_Init+0x44>)
 8008fe2:	f7fe fcfb 	bl	80079dc <USBD_Init>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d001      	beq.n	8008ff0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008fec:	f7f8 fa86 	bl	80014fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008ff0:	490b      	ldr	r1, [pc, #44]	@ (8009020 <MX_USB_DEVICE_Init+0x48>)
 8008ff2:	480a      	ldr	r0, [pc, #40]	@ (800901c <MX_USB_DEVICE_Init+0x44>)
 8008ff4:	f7fe fd22 	bl	8007a3c <USBD_RegisterClass>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d001      	beq.n	8009002 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008ffe:	f7f8 fa7d 	bl	80014fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009002:	4806      	ldr	r0, [pc, #24]	@ (800901c <MX_USB_DEVICE_Init+0x44>)
 8009004:	f7fe fd50 	bl	8007aa8 <USBD_Start>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d001      	beq.n	8009012 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800900e:	f7f8 fa75 	bl	80014fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009012:	bf00      	nop
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	2000015c 	.word	0x2000015c
 800901c:	20000320 	.word	0x20000320
 8009020:	2000009c 	.word	0x2000009c

08009024 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	4603      	mov	r3, r0
 800902c:	6039      	str	r1, [r7, #0]
 800902e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	2212      	movs	r2, #18
 8009034:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009036:	4b03      	ldr	r3, [pc, #12]	@ (8009044 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009038:	4618      	mov	r0, r3
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr
 8009044:	20000178 	.word	0x20000178

08009048 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	4603      	mov	r3, r0
 8009050:	6039      	str	r1, [r7, #0]
 8009052:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	2204      	movs	r2, #4
 8009058:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800905a:	4b03      	ldr	r3, [pc, #12]	@ (8009068 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800905c:	4618      	mov	r0, r3
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr
 8009068:	2000018c 	.word	0x2000018c

0800906c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	4603      	mov	r3, r0
 8009074:	6039      	str	r1, [r7, #0]
 8009076:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009078:	79fb      	ldrb	r3, [r7, #7]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d105      	bne.n	800908a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800907e:	683a      	ldr	r2, [r7, #0]
 8009080:	4907      	ldr	r1, [pc, #28]	@ (80090a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009082:	4808      	ldr	r0, [pc, #32]	@ (80090a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009084:	f7ff fed6 	bl	8008e34 <USBD_GetString>
 8009088:	e004      	b.n	8009094 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800908a:	683a      	ldr	r2, [r7, #0]
 800908c:	4904      	ldr	r1, [pc, #16]	@ (80090a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800908e:	4805      	ldr	r0, [pc, #20]	@ (80090a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009090:	f7ff fed0 	bl	8008e34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009094:	4b02      	ldr	r3, [pc, #8]	@ (80090a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009096:	4618      	mov	r0, r3
 8009098:	3708      	adds	r7, #8
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	200005fc 	.word	0x200005fc
 80090a4:	0800a984 	.word	0x0800a984

080090a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	4603      	mov	r3, r0
 80090b0:	6039      	str	r1, [r7, #0]
 80090b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80090b4:	683a      	ldr	r2, [r7, #0]
 80090b6:	4904      	ldr	r1, [pc, #16]	@ (80090c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80090b8:	4804      	ldr	r0, [pc, #16]	@ (80090cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80090ba:	f7ff febb 	bl	8008e34 <USBD_GetString>
  return USBD_StrDesc;
 80090be:	4b02      	ldr	r3, [pc, #8]	@ (80090c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	200005fc 	.word	0x200005fc
 80090cc:	0800a994 	.word	0x0800a994

080090d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	4603      	mov	r3, r0
 80090d8:	6039      	str	r1, [r7, #0]
 80090da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	221a      	movs	r2, #26
 80090e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80090e2:	f000 f843 	bl	800916c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80090e6:	4b02      	ldr	r3, [pc, #8]	@ (80090f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3708      	adds	r7, #8
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	20000190 	.word	0x20000190

080090f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	4603      	mov	r3, r0
 80090fc:	6039      	str	r1, [r7, #0]
 80090fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009100:	79fb      	ldrb	r3, [r7, #7]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d105      	bne.n	8009112 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009106:	683a      	ldr	r2, [r7, #0]
 8009108:	4907      	ldr	r1, [pc, #28]	@ (8009128 <USBD_FS_ConfigStrDescriptor+0x34>)
 800910a:	4808      	ldr	r0, [pc, #32]	@ (800912c <USBD_FS_ConfigStrDescriptor+0x38>)
 800910c:	f7ff fe92 	bl	8008e34 <USBD_GetString>
 8009110:	e004      	b.n	800911c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009112:	683a      	ldr	r2, [r7, #0]
 8009114:	4904      	ldr	r1, [pc, #16]	@ (8009128 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009116:	4805      	ldr	r0, [pc, #20]	@ (800912c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009118:	f7ff fe8c 	bl	8008e34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800911c:	4b02      	ldr	r3, [pc, #8]	@ (8009128 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800911e:	4618      	mov	r0, r3
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	200005fc 	.word	0x200005fc
 800912c:	0800a9a8 	.word	0x0800a9a8

08009130 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	4603      	mov	r3, r0
 8009138:	6039      	str	r1, [r7, #0]
 800913a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800913c:	79fb      	ldrb	r3, [r7, #7]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d105      	bne.n	800914e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009142:	683a      	ldr	r2, [r7, #0]
 8009144:	4907      	ldr	r1, [pc, #28]	@ (8009164 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009146:	4808      	ldr	r0, [pc, #32]	@ (8009168 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009148:	f7ff fe74 	bl	8008e34 <USBD_GetString>
 800914c:	e004      	b.n	8009158 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800914e:	683a      	ldr	r2, [r7, #0]
 8009150:	4904      	ldr	r1, [pc, #16]	@ (8009164 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009152:	4805      	ldr	r0, [pc, #20]	@ (8009168 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009154:	f7ff fe6e 	bl	8008e34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009158:	4b02      	ldr	r3, [pc, #8]	@ (8009164 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800915a:	4618      	mov	r0, r3
 800915c:	3708      	adds	r7, #8
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	200005fc 	.word	0x200005fc
 8009168:	0800a9b4 	.word	0x0800a9b4

0800916c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009172:	4b0f      	ldr	r3, [pc, #60]	@ (80091b0 <Get_SerialNum+0x44>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009178:	4b0e      	ldr	r3, [pc, #56]	@ (80091b4 <Get_SerialNum+0x48>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800917e:	4b0e      	ldr	r3, [pc, #56]	@ (80091b8 <Get_SerialNum+0x4c>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4413      	add	r3, r2
 800918a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d009      	beq.n	80091a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009192:	2208      	movs	r2, #8
 8009194:	4909      	ldr	r1, [pc, #36]	@ (80091bc <Get_SerialNum+0x50>)
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f000 f814 	bl	80091c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800919c:	2204      	movs	r2, #4
 800919e:	4908      	ldr	r1, [pc, #32]	@ (80091c0 <Get_SerialNum+0x54>)
 80091a0:	68b8      	ldr	r0, [r7, #8]
 80091a2:	f000 f80f 	bl	80091c4 <IntToUnicode>
  }
}
 80091a6:	bf00      	nop
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	1fff7a10 	.word	0x1fff7a10
 80091b4:	1fff7a14 	.word	0x1fff7a14
 80091b8:	1fff7a18 	.word	0x1fff7a18
 80091bc:	20000192 	.word	0x20000192
 80091c0:	200001a2 	.word	0x200001a2

080091c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b087      	sub	sp, #28
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	4613      	mov	r3, r2
 80091d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80091d2:	2300      	movs	r3, #0
 80091d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80091d6:	2300      	movs	r3, #0
 80091d8:	75fb      	strb	r3, [r7, #23]
 80091da:	e027      	b.n	800922c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	0f1b      	lsrs	r3, r3, #28
 80091e0:	2b09      	cmp	r3, #9
 80091e2:	d80b      	bhi.n	80091fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	0f1b      	lsrs	r3, r3, #28
 80091e8:	b2da      	uxtb	r2, r3
 80091ea:	7dfb      	ldrb	r3, [r7, #23]
 80091ec:	005b      	lsls	r3, r3, #1
 80091ee:	4619      	mov	r1, r3
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	440b      	add	r3, r1
 80091f4:	3230      	adds	r2, #48	@ 0x30
 80091f6:	b2d2      	uxtb	r2, r2
 80091f8:	701a      	strb	r2, [r3, #0]
 80091fa:	e00a      	b.n	8009212 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	0f1b      	lsrs	r3, r3, #28
 8009200:	b2da      	uxtb	r2, r3
 8009202:	7dfb      	ldrb	r3, [r7, #23]
 8009204:	005b      	lsls	r3, r3, #1
 8009206:	4619      	mov	r1, r3
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	440b      	add	r3, r1
 800920c:	3237      	adds	r2, #55	@ 0x37
 800920e:	b2d2      	uxtb	r2, r2
 8009210:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	011b      	lsls	r3, r3, #4
 8009216:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009218:	7dfb      	ldrb	r3, [r7, #23]
 800921a:	005b      	lsls	r3, r3, #1
 800921c:	3301      	adds	r3, #1
 800921e:	68ba      	ldr	r2, [r7, #8]
 8009220:	4413      	add	r3, r2
 8009222:	2200      	movs	r2, #0
 8009224:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009226:	7dfb      	ldrb	r3, [r7, #23]
 8009228:	3301      	adds	r3, #1
 800922a:	75fb      	strb	r3, [r7, #23]
 800922c:	7dfa      	ldrb	r2, [r7, #23]
 800922e:	79fb      	ldrb	r3, [r7, #7]
 8009230:	429a      	cmp	r2, r3
 8009232:	d3d3      	bcc.n	80091dc <IntToUnicode+0x18>
  }
}
 8009234:	bf00      	nop
 8009236:	bf00      	nop
 8009238:	371c      	adds	r7, #28
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
	...

08009244 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b08a      	sub	sp, #40	@ 0x28
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800924c:	f107 0314 	add.w	r3, r7, #20
 8009250:	2200      	movs	r2, #0
 8009252:	601a      	str	r2, [r3, #0]
 8009254:	605a      	str	r2, [r3, #4]
 8009256:	609a      	str	r2, [r3, #8]
 8009258:	60da      	str	r2, [r3, #12]
 800925a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009264:	d13a      	bne.n	80092dc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009266:	2300      	movs	r3, #0
 8009268:	613b      	str	r3, [r7, #16]
 800926a:	4b1e      	ldr	r3, [pc, #120]	@ (80092e4 <HAL_PCD_MspInit+0xa0>)
 800926c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800926e:	4a1d      	ldr	r2, [pc, #116]	@ (80092e4 <HAL_PCD_MspInit+0xa0>)
 8009270:	f043 0301 	orr.w	r3, r3, #1
 8009274:	6313      	str	r3, [r2, #48]	@ 0x30
 8009276:	4b1b      	ldr	r3, [pc, #108]	@ (80092e4 <HAL_PCD_MspInit+0xa0>)
 8009278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800927a:	f003 0301 	and.w	r3, r3, #1
 800927e:	613b      	str	r3, [r7, #16]
 8009280:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009282:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009288:	2302      	movs	r3, #2
 800928a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800928c:	2300      	movs	r3, #0
 800928e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009290:	2303      	movs	r3, #3
 8009292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009294:	230a      	movs	r3, #10
 8009296:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009298:	f107 0314 	add.w	r3, r7, #20
 800929c:	4619      	mov	r1, r3
 800929e:	4812      	ldr	r0, [pc, #72]	@ (80092e8 <HAL_PCD_MspInit+0xa4>)
 80092a0:	f7f8 fff4 	bl	800228c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80092a4:	4b0f      	ldr	r3, [pc, #60]	@ (80092e4 <HAL_PCD_MspInit+0xa0>)
 80092a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092a8:	4a0e      	ldr	r2, [pc, #56]	@ (80092e4 <HAL_PCD_MspInit+0xa0>)
 80092aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092ae:	6353      	str	r3, [r2, #52]	@ 0x34
 80092b0:	2300      	movs	r3, #0
 80092b2:	60fb      	str	r3, [r7, #12]
 80092b4:	4b0b      	ldr	r3, [pc, #44]	@ (80092e4 <HAL_PCD_MspInit+0xa0>)
 80092b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092b8:	4a0a      	ldr	r2, [pc, #40]	@ (80092e4 <HAL_PCD_MspInit+0xa0>)
 80092ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80092be:	6453      	str	r3, [r2, #68]	@ 0x44
 80092c0:	4b08      	ldr	r3, [pc, #32]	@ (80092e4 <HAL_PCD_MspInit+0xa0>)
 80092c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092c8:	60fb      	str	r3, [r7, #12]
 80092ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80092cc:	2200      	movs	r2, #0
 80092ce:	2100      	movs	r1, #0
 80092d0:	2043      	movs	r0, #67	@ 0x43
 80092d2:	f7f8 ffa4 	bl	800221e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80092d6:	2043      	movs	r0, #67	@ 0x43
 80092d8:	f7f8 ffbd 	bl	8002256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80092dc:	bf00      	nop
 80092de:	3728      	adds	r7, #40	@ 0x28
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	40023800 	.word	0x40023800
 80092e8:	40020000 	.word	0x40020000

080092ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009300:	4619      	mov	r1, r3
 8009302:	4610      	mov	r0, r2
 8009304:	f7fe fc1d 	bl	8007b42 <USBD_LL_SetupStage>
}
 8009308:	bf00      	nop
 800930a:	3708      	adds	r7, #8
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	460b      	mov	r3, r1
 800931a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009322:	78fa      	ldrb	r2, [r7, #3]
 8009324:	6879      	ldr	r1, [r7, #4]
 8009326:	4613      	mov	r3, r2
 8009328:	00db      	lsls	r3, r3, #3
 800932a:	4413      	add	r3, r2
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	440b      	add	r3, r1
 8009330:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	78fb      	ldrb	r3, [r7, #3]
 8009338:	4619      	mov	r1, r3
 800933a:	f7fe fc57 	bl	8007bec <USBD_LL_DataOutStage>
}
 800933e:	bf00      	nop
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b082      	sub	sp, #8
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
 800934e:	460b      	mov	r3, r1
 8009350:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009358:	78fa      	ldrb	r2, [r7, #3]
 800935a:	6879      	ldr	r1, [r7, #4]
 800935c:	4613      	mov	r3, r2
 800935e:	00db      	lsls	r3, r3, #3
 8009360:	4413      	add	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	440b      	add	r3, r1
 8009366:	3320      	adds	r3, #32
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	78fb      	ldrb	r3, [r7, #3]
 800936c:	4619      	mov	r1, r3
 800936e:	f7fe fcf9 	bl	8007d64 <USBD_LL_DataInStage>
}
 8009372:	bf00      	nop
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b082      	sub	sp, #8
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009388:	4618      	mov	r0, r3
 800938a:	f7fe fe3d 	bl	8008008 <USBD_LL_SOF>
}
 800938e:	bf00      	nop
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b084      	sub	sp, #16
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800939e:	2301      	movs	r3, #1
 80093a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	79db      	ldrb	r3, [r3, #7]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d102      	bne.n	80093b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80093aa:	2300      	movs	r3, #0
 80093ac:	73fb      	strb	r3, [r7, #15]
 80093ae:	e008      	b.n	80093c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	79db      	ldrb	r3, [r3, #7]
 80093b4:	2b02      	cmp	r3, #2
 80093b6:	d102      	bne.n	80093be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80093b8:	2301      	movs	r3, #1
 80093ba:	73fb      	strb	r3, [r7, #15]
 80093bc:	e001      	b.n	80093c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80093be:	f7f8 f89d 	bl	80014fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093c8:	7bfa      	ldrb	r2, [r7, #15]
 80093ca:	4611      	mov	r1, r2
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7fe fdd7 	bl	8007f80 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093d8:	4618      	mov	r0, r3
 80093da:	f7fe fd7e 	bl	8007eda <USBD_LL_Reset>
}
 80093de:	bf00      	nop
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
	...

080093e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7fe fdd2 	bl	8007fa0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	6812      	ldr	r2, [r2, #0]
 800940a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800940e:	f043 0301 	orr.w	r3, r3, #1
 8009412:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	7adb      	ldrb	r3, [r3, #11]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d005      	beq.n	8009428 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800941c:	4b04      	ldr	r3, [pc, #16]	@ (8009430 <HAL_PCD_SuspendCallback+0x48>)
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	4a03      	ldr	r2, [pc, #12]	@ (8009430 <HAL_PCD_SuspendCallback+0x48>)
 8009422:	f043 0306 	orr.w	r3, r3, #6
 8009426:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009428:	bf00      	nop
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	e000ed00 	.word	0xe000ed00

08009434 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009442:	4618      	mov	r0, r3
 8009444:	f7fe fdc8 	bl	8007fd8 <USBD_LL_Resume>
}
 8009448:	bf00      	nop
 800944a:	3708      	adds	r7, #8
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	460b      	mov	r3, r1
 800945a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009462:	78fa      	ldrb	r2, [r7, #3]
 8009464:	4611      	mov	r1, r2
 8009466:	4618      	mov	r0, r3
 8009468:	f7fe fe20 	bl	80080ac <USBD_LL_IsoOUTIncomplete>
}
 800946c:	bf00      	nop
 800946e:	3708      	adds	r7, #8
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	460b      	mov	r3, r1
 800947e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009486:	78fa      	ldrb	r2, [r7, #3]
 8009488:	4611      	mov	r1, r2
 800948a:	4618      	mov	r0, r3
 800948c:	f7fe fddc 	bl	8008048 <USBD_LL_IsoINIncomplete>
}
 8009490:	bf00      	nop
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fe fe32 	bl	8008110 <USBD_LL_DevConnected>
}
 80094ac:	bf00      	nop
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7fe fe2f 	bl	8008126 <USBD_LL_DevDisconnected>
}
 80094c8:	bf00      	nop
 80094ca:	3708      	adds	r7, #8
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d13c      	bne.n	800955a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80094e0:	4a20      	ldr	r2, [pc, #128]	@ (8009564 <USBD_LL_Init+0x94>)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a1e      	ldr	r2, [pc, #120]	@ (8009564 <USBD_LL_Init+0x94>)
 80094ec:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80094f0:	4b1c      	ldr	r3, [pc, #112]	@ (8009564 <USBD_LL_Init+0x94>)
 80094f2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80094f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80094f8:	4b1a      	ldr	r3, [pc, #104]	@ (8009564 <USBD_LL_Init+0x94>)
 80094fa:	2204      	movs	r2, #4
 80094fc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80094fe:	4b19      	ldr	r3, [pc, #100]	@ (8009564 <USBD_LL_Init+0x94>)
 8009500:	2202      	movs	r2, #2
 8009502:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009504:	4b17      	ldr	r3, [pc, #92]	@ (8009564 <USBD_LL_Init+0x94>)
 8009506:	2200      	movs	r2, #0
 8009508:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800950a:	4b16      	ldr	r3, [pc, #88]	@ (8009564 <USBD_LL_Init+0x94>)
 800950c:	2202      	movs	r2, #2
 800950e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009510:	4b14      	ldr	r3, [pc, #80]	@ (8009564 <USBD_LL_Init+0x94>)
 8009512:	2200      	movs	r2, #0
 8009514:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009516:	4b13      	ldr	r3, [pc, #76]	@ (8009564 <USBD_LL_Init+0x94>)
 8009518:	2200      	movs	r2, #0
 800951a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800951c:	4b11      	ldr	r3, [pc, #68]	@ (8009564 <USBD_LL_Init+0x94>)
 800951e:	2200      	movs	r2, #0
 8009520:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009522:	4b10      	ldr	r3, [pc, #64]	@ (8009564 <USBD_LL_Init+0x94>)
 8009524:	2200      	movs	r2, #0
 8009526:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009528:	4b0e      	ldr	r3, [pc, #56]	@ (8009564 <USBD_LL_Init+0x94>)
 800952a:	2200      	movs	r2, #0
 800952c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800952e:	480d      	ldr	r0, [pc, #52]	@ (8009564 <USBD_LL_Init+0x94>)
 8009530:	f7fa f9ce 	bl	80038d0 <HAL_PCD_Init>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d001      	beq.n	800953e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800953a:	f7f7 ffdf 	bl	80014fc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800953e:	2180      	movs	r1, #128	@ 0x80
 8009540:	4808      	ldr	r0, [pc, #32]	@ (8009564 <USBD_LL_Init+0x94>)
 8009542:	f7fb fbe2 	bl	8004d0a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009546:	2240      	movs	r2, #64	@ 0x40
 8009548:	2100      	movs	r1, #0
 800954a:	4806      	ldr	r0, [pc, #24]	@ (8009564 <USBD_LL_Init+0x94>)
 800954c:	f7fb fb96 	bl	8004c7c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009550:	2280      	movs	r2, #128	@ 0x80
 8009552:	2101      	movs	r1, #1
 8009554:	4803      	ldr	r0, [pc, #12]	@ (8009564 <USBD_LL_Init+0x94>)
 8009556:	f7fb fb91 	bl	8004c7c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800955a:	2300      	movs	r3, #0
}
 800955c:	4618      	mov	r0, r3
 800955e:	3708      	adds	r7, #8
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	200007fc 	.word	0x200007fc

08009568 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009570:	2300      	movs	r3, #0
 8009572:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009574:	2300      	movs	r3, #0
 8009576:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800957e:	4618      	mov	r0, r3
 8009580:	f7fa fab5 	bl	8003aee <HAL_PCD_Start>
 8009584:	4603      	mov	r3, r0
 8009586:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009588:	7bfb      	ldrb	r3, [r7, #15]
 800958a:	4618      	mov	r0, r3
 800958c:	f000 f930 	bl	80097f0 <USBD_Get_USB_Status>
 8009590:	4603      	mov	r3, r0
 8009592:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009594:	7bbb      	ldrb	r3, [r7, #14]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b084      	sub	sp, #16
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
 80095a6:	4608      	mov	r0, r1
 80095a8:	4611      	mov	r1, r2
 80095aa:	461a      	mov	r2, r3
 80095ac:	4603      	mov	r3, r0
 80095ae:	70fb      	strb	r3, [r7, #3]
 80095b0:	460b      	mov	r3, r1
 80095b2:	70bb      	strb	r3, [r7, #2]
 80095b4:	4613      	mov	r3, r2
 80095b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095b8:	2300      	movs	r3, #0
 80095ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095bc:	2300      	movs	r3, #0
 80095be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80095c6:	78bb      	ldrb	r3, [r7, #2]
 80095c8:	883a      	ldrh	r2, [r7, #0]
 80095ca:	78f9      	ldrb	r1, [r7, #3]
 80095cc:	f7fa ff89 	bl	80044e2 <HAL_PCD_EP_Open>
 80095d0:	4603      	mov	r3, r0
 80095d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095d4:	7bfb      	ldrb	r3, [r7, #15]
 80095d6:	4618      	mov	r0, r3
 80095d8:	f000 f90a 	bl	80097f0 <USBD_Get_USB_Status>
 80095dc:	4603      	mov	r3, r0
 80095de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b084      	sub	sp, #16
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	460b      	mov	r3, r1
 80095f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095f6:	2300      	movs	r3, #0
 80095f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095fa:	2300      	movs	r3, #0
 80095fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009604:	78fa      	ldrb	r2, [r7, #3]
 8009606:	4611      	mov	r1, r2
 8009608:	4618      	mov	r0, r3
 800960a:	f7fa ffd4 	bl	80045b6 <HAL_PCD_EP_Close>
 800960e:	4603      	mov	r3, r0
 8009610:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009612:	7bfb      	ldrb	r3, [r7, #15]
 8009614:	4618      	mov	r0, r3
 8009616:	f000 f8eb 	bl	80097f0 <USBD_Get_USB_Status>
 800961a:	4603      	mov	r3, r0
 800961c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800961e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009620:	4618      	mov	r0, r3
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	460b      	mov	r3, r1
 8009632:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009634:	2300      	movs	r3, #0
 8009636:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009638:	2300      	movs	r3, #0
 800963a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009642:	78fa      	ldrb	r2, [r7, #3]
 8009644:	4611      	mov	r1, r2
 8009646:	4618      	mov	r0, r3
 8009648:	f7fb f874 	bl	8004734 <HAL_PCD_EP_SetStall>
 800964c:	4603      	mov	r3, r0
 800964e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009650:	7bfb      	ldrb	r3, [r7, #15]
 8009652:	4618      	mov	r0, r3
 8009654:	f000 f8cc 	bl	80097f0 <USBD_Get_USB_Status>
 8009658:	4603      	mov	r3, r0
 800965a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800965c:	7bbb      	ldrb	r3, [r7, #14]
}
 800965e:	4618      	mov	r0, r3
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b084      	sub	sp, #16
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	460b      	mov	r3, r1
 8009670:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009672:	2300      	movs	r3, #0
 8009674:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009676:	2300      	movs	r3, #0
 8009678:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009680:	78fa      	ldrb	r2, [r7, #3]
 8009682:	4611      	mov	r1, r2
 8009684:	4618      	mov	r0, r3
 8009686:	f7fb f8b8 	bl	80047fa <HAL_PCD_EP_ClrStall>
 800968a:	4603      	mov	r3, r0
 800968c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800968e:	7bfb      	ldrb	r3, [r7, #15]
 8009690:	4618      	mov	r0, r3
 8009692:	f000 f8ad 	bl	80097f0 <USBD_Get_USB_Status>
 8009696:	4603      	mov	r3, r0
 8009698:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800969a:	7bbb      	ldrb	r3, [r7, #14]
}
 800969c:	4618      	mov	r0, r3
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	460b      	mov	r3, r1
 80096ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80096b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	da0b      	bge.n	80096d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80096c0:	78fb      	ldrb	r3, [r7, #3]
 80096c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80096c6:	68f9      	ldr	r1, [r7, #12]
 80096c8:	4613      	mov	r3, r2
 80096ca:	00db      	lsls	r3, r3, #3
 80096cc:	4413      	add	r3, r2
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	440b      	add	r3, r1
 80096d2:	3316      	adds	r3, #22
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	e00b      	b.n	80096f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80096d8:	78fb      	ldrb	r3, [r7, #3]
 80096da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80096de:	68f9      	ldr	r1, [r7, #12]
 80096e0:	4613      	mov	r3, r2
 80096e2:	00db      	lsls	r3, r3, #3
 80096e4:	4413      	add	r3, r2
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	440b      	add	r3, r1
 80096ea:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80096ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3714      	adds	r7, #20
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	460b      	mov	r3, r1
 8009706:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009716:	78fa      	ldrb	r2, [r7, #3]
 8009718:	4611      	mov	r1, r2
 800971a:	4618      	mov	r0, r3
 800971c:	f7fa febd 	bl	800449a <HAL_PCD_SetAddress>
 8009720:	4603      	mov	r3, r0
 8009722:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009724:	7bfb      	ldrb	r3, [r7, #15]
 8009726:	4618      	mov	r0, r3
 8009728:	f000 f862 	bl	80097f0 <USBD_Get_USB_Status>
 800972c:	4603      	mov	r3, r0
 800972e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009730:	7bbb      	ldrb	r3, [r7, #14]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b086      	sub	sp, #24
 800973e:	af00      	add	r7, sp, #0
 8009740:	60f8      	str	r0, [r7, #12]
 8009742:	607a      	str	r2, [r7, #4]
 8009744:	603b      	str	r3, [r7, #0]
 8009746:	460b      	mov	r3, r1
 8009748:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800974e:	2300      	movs	r3, #0
 8009750:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009758:	7af9      	ldrb	r1, [r7, #11]
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	f7fa ffaf 	bl	80046c0 <HAL_PCD_EP_Transmit>
 8009762:	4603      	mov	r3, r0
 8009764:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009766:	7dfb      	ldrb	r3, [r7, #23]
 8009768:	4618      	mov	r0, r3
 800976a:	f000 f841 	bl	80097f0 <USBD_Get_USB_Status>
 800976e:	4603      	mov	r3, r0
 8009770:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009772:	7dbb      	ldrb	r3, [r7, #22]
}
 8009774:	4618      	mov	r0, r3
 8009776:	3718      	adds	r7, #24
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	607a      	str	r2, [r7, #4]
 8009786:	603b      	str	r3, [r7, #0]
 8009788:	460b      	mov	r3, r1
 800978a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800978c:	2300      	movs	r3, #0
 800978e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009790:	2300      	movs	r3, #0
 8009792:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800979a:	7af9      	ldrb	r1, [r7, #11]
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	f7fa ff53 	bl	800464a <HAL_PCD_EP_Receive>
 80097a4:	4603      	mov	r3, r0
 80097a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097a8:	7dfb      	ldrb	r3, [r7, #23]
 80097aa:	4618      	mov	r0, r3
 80097ac:	f000 f820 	bl	80097f0 <USBD_Get_USB_Status>
 80097b0:	4603      	mov	r3, r0
 80097b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80097b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3718      	adds	r7, #24
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
	...

080097c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80097c8:	4b03      	ldr	r3, [pc, #12]	@ (80097d8 <USBD_static_malloc+0x18>)
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	370c      	adds	r7, #12
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr
 80097d6:	bf00      	nop
 80097d8:	20000ce0 	.word	0x20000ce0

080097dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]

}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b085      	sub	sp, #20
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	4603      	mov	r3, r0
 80097f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097fa:	2300      	movs	r3, #0
 80097fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80097fe:	79fb      	ldrb	r3, [r7, #7]
 8009800:	2b03      	cmp	r3, #3
 8009802:	d817      	bhi.n	8009834 <USBD_Get_USB_Status+0x44>
 8009804:	a201      	add	r2, pc, #4	@ (adr r2, 800980c <USBD_Get_USB_Status+0x1c>)
 8009806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980a:	bf00      	nop
 800980c:	0800981d 	.word	0x0800981d
 8009810:	08009823 	.word	0x08009823
 8009814:	08009829 	.word	0x08009829
 8009818:	0800982f 	.word	0x0800982f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	73fb      	strb	r3, [r7, #15]
    break;
 8009820:	e00b      	b.n	800983a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009822:	2303      	movs	r3, #3
 8009824:	73fb      	strb	r3, [r7, #15]
    break;
 8009826:	e008      	b.n	800983a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009828:	2301      	movs	r3, #1
 800982a:	73fb      	strb	r3, [r7, #15]
    break;
 800982c:	e005      	b.n	800983a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800982e:	2303      	movs	r3, #3
 8009830:	73fb      	strb	r3, [r7, #15]
    break;
 8009832:	e002      	b.n	800983a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009834:	2303      	movs	r3, #3
 8009836:	73fb      	strb	r3, [r7, #15]
    break;
 8009838:	bf00      	nop
  }
  return usb_status;
 800983a:	7bfb      	ldrb	r3, [r7, #15]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3714      	adds	r7, #20
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <siprintf>:
 8009848:	b40e      	push	{r1, r2, r3}
 800984a:	b510      	push	{r4, lr}
 800984c:	b09d      	sub	sp, #116	@ 0x74
 800984e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009850:	9002      	str	r0, [sp, #8]
 8009852:	9006      	str	r0, [sp, #24]
 8009854:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009858:	480a      	ldr	r0, [pc, #40]	@ (8009884 <siprintf+0x3c>)
 800985a:	9107      	str	r1, [sp, #28]
 800985c:	9104      	str	r1, [sp, #16]
 800985e:	490a      	ldr	r1, [pc, #40]	@ (8009888 <siprintf+0x40>)
 8009860:	f853 2b04 	ldr.w	r2, [r3], #4
 8009864:	9105      	str	r1, [sp, #20]
 8009866:	2400      	movs	r4, #0
 8009868:	a902      	add	r1, sp, #8
 800986a:	6800      	ldr	r0, [r0, #0]
 800986c:	9301      	str	r3, [sp, #4]
 800986e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009870:	f000 f994 	bl	8009b9c <_svfiprintf_r>
 8009874:	9b02      	ldr	r3, [sp, #8]
 8009876:	701c      	strb	r4, [r3, #0]
 8009878:	b01d      	add	sp, #116	@ 0x74
 800987a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800987e:	b003      	add	sp, #12
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	200001ac 	.word	0x200001ac
 8009888:	ffff0208 	.word	0xffff0208

0800988c <memset>:
 800988c:	4402      	add	r2, r0
 800988e:	4603      	mov	r3, r0
 8009890:	4293      	cmp	r3, r2
 8009892:	d100      	bne.n	8009896 <memset+0xa>
 8009894:	4770      	bx	lr
 8009896:	f803 1b01 	strb.w	r1, [r3], #1
 800989a:	e7f9      	b.n	8009890 <memset+0x4>

0800989c <__errno>:
 800989c:	4b01      	ldr	r3, [pc, #4]	@ (80098a4 <__errno+0x8>)
 800989e:	6818      	ldr	r0, [r3, #0]
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	200001ac 	.word	0x200001ac

080098a8 <__libc_init_array>:
 80098a8:	b570      	push	{r4, r5, r6, lr}
 80098aa:	4d0d      	ldr	r5, [pc, #52]	@ (80098e0 <__libc_init_array+0x38>)
 80098ac:	4c0d      	ldr	r4, [pc, #52]	@ (80098e4 <__libc_init_array+0x3c>)
 80098ae:	1b64      	subs	r4, r4, r5
 80098b0:	10a4      	asrs	r4, r4, #2
 80098b2:	2600      	movs	r6, #0
 80098b4:	42a6      	cmp	r6, r4
 80098b6:	d109      	bne.n	80098cc <__libc_init_array+0x24>
 80098b8:	4d0b      	ldr	r5, [pc, #44]	@ (80098e8 <__libc_init_array+0x40>)
 80098ba:	4c0c      	ldr	r4, [pc, #48]	@ (80098ec <__libc_init_array+0x44>)
 80098bc:	f000 ffd2 	bl	800a864 <_init>
 80098c0:	1b64      	subs	r4, r4, r5
 80098c2:	10a4      	asrs	r4, r4, #2
 80098c4:	2600      	movs	r6, #0
 80098c6:	42a6      	cmp	r6, r4
 80098c8:	d105      	bne.n	80098d6 <__libc_init_array+0x2e>
 80098ca:	bd70      	pop	{r4, r5, r6, pc}
 80098cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80098d0:	4798      	blx	r3
 80098d2:	3601      	adds	r6, #1
 80098d4:	e7ee      	b.n	80098b4 <__libc_init_array+0xc>
 80098d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80098da:	4798      	blx	r3
 80098dc:	3601      	adds	r6, #1
 80098de:	e7f2      	b.n	80098c6 <__libc_init_array+0x1e>
 80098e0:	0800aa98 	.word	0x0800aa98
 80098e4:	0800aa98 	.word	0x0800aa98
 80098e8:	0800aa98 	.word	0x0800aa98
 80098ec:	0800aa9c 	.word	0x0800aa9c

080098f0 <__retarget_lock_acquire_recursive>:
 80098f0:	4770      	bx	lr

080098f2 <__retarget_lock_release_recursive>:
 80098f2:	4770      	bx	lr

080098f4 <_free_r>:
 80098f4:	b538      	push	{r3, r4, r5, lr}
 80098f6:	4605      	mov	r5, r0
 80098f8:	2900      	cmp	r1, #0
 80098fa:	d041      	beq.n	8009980 <_free_r+0x8c>
 80098fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009900:	1f0c      	subs	r4, r1, #4
 8009902:	2b00      	cmp	r3, #0
 8009904:	bfb8      	it	lt
 8009906:	18e4      	addlt	r4, r4, r3
 8009908:	f000 f8e0 	bl	8009acc <__malloc_lock>
 800990c:	4a1d      	ldr	r2, [pc, #116]	@ (8009984 <_free_r+0x90>)
 800990e:	6813      	ldr	r3, [r2, #0]
 8009910:	b933      	cbnz	r3, 8009920 <_free_r+0x2c>
 8009912:	6063      	str	r3, [r4, #4]
 8009914:	6014      	str	r4, [r2, #0]
 8009916:	4628      	mov	r0, r5
 8009918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800991c:	f000 b8dc 	b.w	8009ad8 <__malloc_unlock>
 8009920:	42a3      	cmp	r3, r4
 8009922:	d908      	bls.n	8009936 <_free_r+0x42>
 8009924:	6820      	ldr	r0, [r4, #0]
 8009926:	1821      	adds	r1, r4, r0
 8009928:	428b      	cmp	r3, r1
 800992a:	bf01      	itttt	eq
 800992c:	6819      	ldreq	r1, [r3, #0]
 800992e:	685b      	ldreq	r3, [r3, #4]
 8009930:	1809      	addeq	r1, r1, r0
 8009932:	6021      	streq	r1, [r4, #0]
 8009934:	e7ed      	b.n	8009912 <_free_r+0x1e>
 8009936:	461a      	mov	r2, r3
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	b10b      	cbz	r3, 8009940 <_free_r+0x4c>
 800993c:	42a3      	cmp	r3, r4
 800993e:	d9fa      	bls.n	8009936 <_free_r+0x42>
 8009940:	6811      	ldr	r1, [r2, #0]
 8009942:	1850      	adds	r0, r2, r1
 8009944:	42a0      	cmp	r0, r4
 8009946:	d10b      	bne.n	8009960 <_free_r+0x6c>
 8009948:	6820      	ldr	r0, [r4, #0]
 800994a:	4401      	add	r1, r0
 800994c:	1850      	adds	r0, r2, r1
 800994e:	4283      	cmp	r3, r0
 8009950:	6011      	str	r1, [r2, #0]
 8009952:	d1e0      	bne.n	8009916 <_free_r+0x22>
 8009954:	6818      	ldr	r0, [r3, #0]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	6053      	str	r3, [r2, #4]
 800995a:	4408      	add	r0, r1
 800995c:	6010      	str	r0, [r2, #0]
 800995e:	e7da      	b.n	8009916 <_free_r+0x22>
 8009960:	d902      	bls.n	8009968 <_free_r+0x74>
 8009962:	230c      	movs	r3, #12
 8009964:	602b      	str	r3, [r5, #0]
 8009966:	e7d6      	b.n	8009916 <_free_r+0x22>
 8009968:	6820      	ldr	r0, [r4, #0]
 800996a:	1821      	adds	r1, r4, r0
 800996c:	428b      	cmp	r3, r1
 800996e:	bf04      	itt	eq
 8009970:	6819      	ldreq	r1, [r3, #0]
 8009972:	685b      	ldreq	r3, [r3, #4]
 8009974:	6063      	str	r3, [r4, #4]
 8009976:	bf04      	itt	eq
 8009978:	1809      	addeq	r1, r1, r0
 800997a:	6021      	streq	r1, [r4, #0]
 800997c:	6054      	str	r4, [r2, #4]
 800997e:	e7ca      	b.n	8009916 <_free_r+0x22>
 8009980:	bd38      	pop	{r3, r4, r5, pc}
 8009982:	bf00      	nop
 8009984:	20000e38 	.word	0x20000e38

08009988 <sbrk_aligned>:
 8009988:	b570      	push	{r4, r5, r6, lr}
 800998a:	4e0f      	ldr	r6, [pc, #60]	@ (80099c8 <sbrk_aligned+0x40>)
 800998c:	460c      	mov	r4, r1
 800998e:	6831      	ldr	r1, [r6, #0]
 8009990:	4605      	mov	r5, r0
 8009992:	b911      	cbnz	r1, 800999a <sbrk_aligned+0x12>
 8009994:	f000 fba4 	bl	800a0e0 <_sbrk_r>
 8009998:	6030      	str	r0, [r6, #0]
 800999a:	4621      	mov	r1, r4
 800999c:	4628      	mov	r0, r5
 800999e:	f000 fb9f 	bl	800a0e0 <_sbrk_r>
 80099a2:	1c43      	adds	r3, r0, #1
 80099a4:	d103      	bne.n	80099ae <sbrk_aligned+0x26>
 80099a6:	f04f 34ff 	mov.w	r4, #4294967295
 80099aa:	4620      	mov	r0, r4
 80099ac:	bd70      	pop	{r4, r5, r6, pc}
 80099ae:	1cc4      	adds	r4, r0, #3
 80099b0:	f024 0403 	bic.w	r4, r4, #3
 80099b4:	42a0      	cmp	r0, r4
 80099b6:	d0f8      	beq.n	80099aa <sbrk_aligned+0x22>
 80099b8:	1a21      	subs	r1, r4, r0
 80099ba:	4628      	mov	r0, r5
 80099bc:	f000 fb90 	bl	800a0e0 <_sbrk_r>
 80099c0:	3001      	adds	r0, #1
 80099c2:	d1f2      	bne.n	80099aa <sbrk_aligned+0x22>
 80099c4:	e7ef      	b.n	80099a6 <sbrk_aligned+0x1e>
 80099c6:	bf00      	nop
 80099c8:	20000e34 	.word	0x20000e34

080099cc <_malloc_r>:
 80099cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099d0:	1ccd      	adds	r5, r1, #3
 80099d2:	f025 0503 	bic.w	r5, r5, #3
 80099d6:	3508      	adds	r5, #8
 80099d8:	2d0c      	cmp	r5, #12
 80099da:	bf38      	it	cc
 80099dc:	250c      	movcc	r5, #12
 80099de:	2d00      	cmp	r5, #0
 80099e0:	4606      	mov	r6, r0
 80099e2:	db01      	blt.n	80099e8 <_malloc_r+0x1c>
 80099e4:	42a9      	cmp	r1, r5
 80099e6:	d904      	bls.n	80099f2 <_malloc_r+0x26>
 80099e8:	230c      	movs	r3, #12
 80099ea:	6033      	str	r3, [r6, #0]
 80099ec:	2000      	movs	r0, #0
 80099ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ac8 <_malloc_r+0xfc>
 80099f6:	f000 f869 	bl	8009acc <__malloc_lock>
 80099fa:	f8d8 3000 	ldr.w	r3, [r8]
 80099fe:	461c      	mov	r4, r3
 8009a00:	bb44      	cbnz	r4, 8009a54 <_malloc_r+0x88>
 8009a02:	4629      	mov	r1, r5
 8009a04:	4630      	mov	r0, r6
 8009a06:	f7ff ffbf 	bl	8009988 <sbrk_aligned>
 8009a0a:	1c43      	adds	r3, r0, #1
 8009a0c:	4604      	mov	r4, r0
 8009a0e:	d158      	bne.n	8009ac2 <_malloc_r+0xf6>
 8009a10:	f8d8 4000 	ldr.w	r4, [r8]
 8009a14:	4627      	mov	r7, r4
 8009a16:	2f00      	cmp	r7, #0
 8009a18:	d143      	bne.n	8009aa2 <_malloc_r+0xd6>
 8009a1a:	2c00      	cmp	r4, #0
 8009a1c:	d04b      	beq.n	8009ab6 <_malloc_r+0xea>
 8009a1e:	6823      	ldr	r3, [r4, #0]
 8009a20:	4639      	mov	r1, r7
 8009a22:	4630      	mov	r0, r6
 8009a24:	eb04 0903 	add.w	r9, r4, r3
 8009a28:	f000 fb5a 	bl	800a0e0 <_sbrk_r>
 8009a2c:	4581      	cmp	r9, r0
 8009a2e:	d142      	bne.n	8009ab6 <_malloc_r+0xea>
 8009a30:	6821      	ldr	r1, [r4, #0]
 8009a32:	1a6d      	subs	r5, r5, r1
 8009a34:	4629      	mov	r1, r5
 8009a36:	4630      	mov	r0, r6
 8009a38:	f7ff ffa6 	bl	8009988 <sbrk_aligned>
 8009a3c:	3001      	adds	r0, #1
 8009a3e:	d03a      	beq.n	8009ab6 <_malloc_r+0xea>
 8009a40:	6823      	ldr	r3, [r4, #0]
 8009a42:	442b      	add	r3, r5
 8009a44:	6023      	str	r3, [r4, #0]
 8009a46:	f8d8 3000 	ldr.w	r3, [r8]
 8009a4a:	685a      	ldr	r2, [r3, #4]
 8009a4c:	bb62      	cbnz	r2, 8009aa8 <_malloc_r+0xdc>
 8009a4e:	f8c8 7000 	str.w	r7, [r8]
 8009a52:	e00f      	b.n	8009a74 <_malloc_r+0xa8>
 8009a54:	6822      	ldr	r2, [r4, #0]
 8009a56:	1b52      	subs	r2, r2, r5
 8009a58:	d420      	bmi.n	8009a9c <_malloc_r+0xd0>
 8009a5a:	2a0b      	cmp	r2, #11
 8009a5c:	d917      	bls.n	8009a8e <_malloc_r+0xc2>
 8009a5e:	1961      	adds	r1, r4, r5
 8009a60:	42a3      	cmp	r3, r4
 8009a62:	6025      	str	r5, [r4, #0]
 8009a64:	bf18      	it	ne
 8009a66:	6059      	strne	r1, [r3, #4]
 8009a68:	6863      	ldr	r3, [r4, #4]
 8009a6a:	bf08      	it	eq
 8009a6c:	f8c8 1000 	streq.w	r1, [r8]
 8009a70:	5162      	str	r2, [r4, r5]
 8009a72:	604b      	str	r3, [r1, #4]
 8009a74:	4630      	mov	r0, r6
 8009a76:	f000 f82f 	bl	8009ad8 <__malloc_unlock>
 8009a7a:	f104 000b 	add.w	r0, r4, #11
 8009a7e:	1d23      	adds	r3, r4, #4
 8009a80:	f020 0007 	bic.w	r0, r0, #7
 8009a84:	1ac2      	subs	r2, r0, r3
 8009a86:	bf1c      	itt	ne
 8009a88:	1a1b      	subne	r3, r3, r0
 8009a8a:	50a3      	strne	r3, [r4, r2]
 8009a8c:	e7af      	b.n	80099ee <_malloc_r+0x22>
 8009a8e:	6862      	ldr	r2, [r4, #4]
 8009a90:	42a3      	cmp	r3, r4
 8009a92:	bf0c      	ite	eq
 8009a94:	f8c8 2000 	streq.w	r2, [r8]
 8009a98:	605a      	strne	r2, [r3, #4]
 8009a9a:	e7eb      	b.n	8009a74 <_malloc_r+0xa8>
 8009a9c:	4623      	mov	r3, r4
 8009a9e:	6864      	ldr	r4, [r4, #4]
 8009aa0:	e7ae      	b.n	8009a00 <_malloc_r+0x34>
 8009aa2:	463c      	mov	r4, r7
 8009aa4:	687f      	ldr	r7, [r7, #4]
 8009aa6:	e7b6      	b.n	8009a16 <_malloc_r+0x4a>
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	42a3      	cmp	r3, r4
 8009aae:	d1fb      	bne.n	8009aa8 <_malloc_r+0xdc>
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	6053      	str	r3, [r2, #4]
 8009ab4:	e7de      	b.n	8009a74 <_malloc_r+0xa8>
 8009ab6:	230c      	movs	r3, #12
 8009ab8:	6033      	str	r3, [r6, #0]
 8009aba:	4630      	mov	r0, r6
 8009abc:	f000 f80c 	bl	8009ad8 <__malloc_unlock>
 8009ac0:	e794      	b.n	80099ec <_malloc_r+0x20>
 8009ac2:	6005      	str	r5, [r0, #0]
 8009ac4:	e7d6      	b.n	8009a74 <_malloc_r+0xa8>
 8009ac6:	bf00      	nop
 8009ac8:	20000e38 	.word	0x20000e38

08009acc <__malloc_lock>:
 8009acc:	4801      	ldr	r0, [pc, #4]	@ (8009ad4 <__malloc_lock+0x8>)
 8009ace:	f7ff bf0f 	b.w	80098f0 <__retarget_lock_acquire_recursive>
 8009ad2:	bf00      	nop
 8009ad4:	20000e30 	.word	0x20000e30

08009ad8 <__malloc_unlock>:
 8009ad8:	4801      	ldr	r0, [pc, #4]	@ (8009ae0 <__malloc_unlock+0x8>)
 8009ada:	f7ff bf0a 	b.w	80098f2 <__retarget_lock_release_recursive>
 8009ade:	bf00      	nop
 8009ae0:	20000e30 	.word	0x20000e30

08009ae4 <__ssputs_r>:
 8009ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae8:	688e      	ldr	r6, [r1, #8]
 8009aea:	461f      	mov	r7, r3
 8009aec:	42be      	cmp	r6, r7
 8009aee:	680b      	ldr	r3, [r1, #0]
 8009af0:	4682      	mov	sl, r0
 8009af2:	460c      	mov	r4, r1
 8009af4:	4690      	mov	r8, r2
 8009af6:	d82d      	bhi.n	8009b54 <__ssputs_r+0x70>
 8009af8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009afc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009b00:	d026      	beq.n	8009b50 <__ssputs_r+0x6c>
 8009b02:	6965      	ldr	r5, [r4, #20]
 8009b04:	6909      	ldr	r1, [r1, #16]
 8009b06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b0a:	eba3 0901 	sub.w	r9, r3, r1
 8009b0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b12:	1c7b      	adds	r3, r7, #1
 8009b14:	444b      	add	r3, r9
 8009b16:	106d      	asrs	r5, r5, #1
 8009b18:	429d      	cmp	r5, r3
 8009b1a:	bf38      	it	cc
 8009b1c:	461d      	movcc	r5, r3
 8009b1e:	0553      	lsls	r3, r2, #21
 8009b20:	d527      	bpl.n	8009b72 <__ssputs_r+0x8e>
 8009b22:	4629      	mov	r1, r5
 8009b24:	f7ff ff52 	bl	80099cc <_malloc_r>
 8009b28:	4606      	mov	r6, r0
 8009b2a:	b360      	cbz	r0, 8009b86 <__ssputs_r+0xa2>
 8009b2c:	6921      	ldr	r1, [r4, #16]
 8009b2e:	464a      	mov	r2, r9
 8009b30:	f000 fae6 	bl	800a100 <memcpy>
 8009b34:	89a3      	ldrh	r3, [r4, #12]
 8009b36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009b3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b3e:	81a3      	strh	r3, [r4, #12]
 8009b40:	6126      	str	r6, [r4, #16]
 8009b42:	6165      	str	r5, [r4, #20]
 8009b44:	444e      	add	r6, r9
 8009b46:	eba5 0509 	sub.w	r5, r5, r9
 8009b4a:	6026      	str	r6, [r4, #0]
 8009b4c:	60a5      	str	r5, [r4, #8]
 8009b4e:	463e      	mov	r6, r7
 8009b50:	42be      	cmp	r6, r7
 8009b52:	d900      	bls.n	8009b56 <__ssputs_r+0x72>
 8009b54:	463e      	mov	r6, r7
 8009b56:	6820      	ldr	r0, [r4, #0]
 8009b58:	4632      	mov	r2, r6
 8009b5a:	4641      	mov	r1, r8
 8009b5c:	f000 faa6 	bl	800a0ac <memmove>
 8009b60:	68a3      	ldr	r3, [r4, #8]
 8009b62:	1b9b      	subs	r3, r3, r6
 8009b64:	60a3      	str	r3, [r4, #8]
 8009b66:	6823      	ldr	r3, [r4, #0]
 8009b68:	4433      	add	r3, r6
 8009b6a:	6023      	str	r3, [r4, #0]
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b72:	462a      	mov	r2, r5
 8009b74:	f000 fad2 	bl	800a11c <_realloc_r>
 8009b78:	4606      	mov	r6, r0
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	d1e0      	bne.n	8009b40 <__ssputs_r+0x5c>
 8009b7e:	6921      	ldr	r1, [r4, #16]
 8009b80:	4650      	mov	r0, sl
 8009b82:	f7ff feb7 	bl	80098f4 <_free_r>
 8009b86:	230c      	movs	r3, #12
 8009b88:	f8ca 3000 	str.w	r3, [sl]
 8009b8c:	89a3      	ldrh	r3, [r4, #12]
 8009b8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b92:	81a3      	strh	r3, [r4, #12]
 8009b94:	f04f 30ff 	mov.w	r0, #4294967295
 8009b98:	e7e9      	b.n	8009b6e <__ssputs_r+0x8a>
	...

08009b9c <_svfiprintf_r>:
 8009b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba0:	4698      	mov	r8, r3
 8009ba2:	898b      	ldrh	r3, [r1, #12]
 8009ba4:	061b      	lsls	r3, r3, #24
 8009ba6:	b09d      	sub	sp, #116	@ 0x74
 8009ba8:	4607      	mov	r7, r0
 8009baa:	460d      	mov	r5, r1
 8009bac:	4614      	mov	r4, r2
 8009bae:	d510      	bpl.n	8009bd2 <_svfiprintf_r+0x36>
 8009bb0:	690b      	ldr	r3, [r1, #16]
 8009bb2:	b973      	cbnz	r3, 8009bd2 <_svfiprintf_r+0x36>
 8009bb4:	2140      	movs	r1, #64	@ 0x40
 8009bb6:	f7ff ff09 	bl	80099cc <_malloc_r>
 8009bba:	6028      	str	r0, [r5, #0]
 8009bbc:	6128      	str	r0, [r5, #16]
 8009bbe:	b930      	cbnz	r0, 8009bce <_svfiprintf_r+0x32>
 8009bc0:	230c      	movs	r3, #12
 8009bc2:	603b      	str	r3, [r7, #0]
 8009bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc8:	b01d      	add	sp, #116	@ 0x74
 8009bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bce:	2340      	movs	r3, #64	@ 0x40
 8009bd0:	616b      	str	r3, [r5, #20]
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bd6:	2320      	movs	r3, #32
 8009bd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009bdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009be0:	2330      	movs	r3, #48	@ 0x30
 8009be2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009d80 <_svfiprintf_r+0x1e4>
 8009be6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009bea:	f04f 0901 	mov.w	r9, #1
 8009bee:	4623      	mov	r3, r4
 8009bf0:	469a      	mov	sl, r3
 8009bf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bf6:	b10a      	cbz	r2, 8009bfc <_svfiprintf_r+0x60>
 8009bf8:	2a25      	cmp	r2, #37	@ 0x25
 8009bfa:	d1f9      	bne.n	8009bf0 <_svfiprintf_r+0x54>
 8009bfc:	ebba 0b04 	subs.w	fp, sl, r4
 8009c00:	d00b      	beq.n	8009c1a <_svfiprintf_r+0x7e>
 8009c02:	465b      	mov	r3, fp
 8009c04:	4622      	mov	r2, r4
 8009c06:	4629      	mov	r1, r5
 8009c08:	4638      	mov	r0, r7
 8009c0a:	f7ff ff6b 	bl	8009ae4 <__ssputs_r>
 8009c0e:	3001      	adds	r0, #1
 8009c10:	f000 80a7 	beq.w	8009d62 <_svfiprintf_r+0x1c6>
 8009c14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c16:	445a      	add	r2, fp
 8009c18:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f000 809f 	beq.w	8009d62 <_svfiprintf_r+0x1c6>
 8009c24:	2300      	movs	r3, #0
 8009c26:	f04f 32ff 	mov.w	r2, #4294967295
 8009c2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c2e:	f10a 0a01 	add.w	sl, sl, #1
 8009c32:	9304      	str	r3, [sp, #16]
 8009c34:	9307      	str	r3, [sp, #28]
 8009c36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c3c:	4654      	mov	r4, sl
 8009c3e:	2205      	movs	r2, #5
 8009c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c44:	484e      	ldr	r0, [pc, #312]	@ (8009d80 <_svfiprintf_r+0x1e4>)
 8009c46:	f7f6 facb 	bl	80001e0 <memchr>
 8009c4a:	9a04      	ldr	r2, [sp, #16]
 8009c4c:	b9d8      	cbnz	r0, 8009c86 <_svfiprintf_r+0xea>
 8009c4e:	06d0      	lsls	r0, r2, #27
 8009c50:	bf44      	itt	mi
 8009c52:	2320      	movmi	r3, #32
 8009c54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c58:	0711      	lsls	r1, r2, #28
 8009c5a:	bf44      	itt	mi
 8009c5c:	232b      	movmi	r3, #43	@ 0x2b
 8009c5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c62:	f89a 3000 	ldrb.w	r3, [sl]
 8009c66:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c68:	d015      	beq.n	8009c96 <_svfiprintf_r+0xfa>
 8009c6a:	9a07      	ldr	r2, [sp, #28]
 8009c6c:	4654      	mov	r4, sl
 8009c6e:	2000      	movs	r0, #0
 8009c70:	f04f 0c0a 	mov.w	ip, #10
 8009c74:	4621      	mov	r1, r4
 8009c76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c7a:	3b30      	subs	r3, #48	@ 0x30
 8009c7c:	2b09      	cmp	r3, #9
 8009c7e:	d94b      	bls.n	8009d18 <_svfiprintf_r+0x17c>
 8009c80:	b1b0      	cbz	r0, 8009cb0 <_svfiprintf_r+0x114>
 8009c82:	9207      	str	r2, [sp, #28]
 8009c84:	e014      	b.n	8009cb0 <_svfiprintf_r+0x114>
 8009c86:	eba0 0308 	sub.w	r3, r0, r8
 8009c8a:	fa09 f303 	lsl.w	r3, r9, r3
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	9304      	str	r3, [sp, #16]
 8009c92:	46a2      	mov	sl, r4
 8009c94:	e7d2      	b.n	8009c3c <_svfiprintf_r+0xa0>
 8009c96:	9b03      	ldr	r3, [sp, #12]
 8009c98:	1d19      	adds	r1, r3, #4
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	9103      	str	r1, [sp, #12]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	bfbb      	ittet	lt
 8009ca2:	425b      	neglt	r3, r3
 8009ca4:	f042 0202 	orrlt.w	r2, r2, #2
 8009ca8:	9307      	strge	r3, [sp, #28]
 8009caa:	9307      	strlt	r3, [sp, #28]
 8009cac:	bfb8      	it	lt
 8009cae:	9204      	strlt	r2, [sp, #16]
 8009cb0:	7823      	ldrb	r3, [r4, #0]
 8009cb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cb4:	d10a      	bne.n	8009ccc <_svfiprintf_r+0x130>
 8009cb6:	7863      	ldrb	r3, [r4, #1]
 8009cb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cba:	d132      	bne.n	8009d22 <_svfiprintf_r+0x186>
 8009cbc:	9b03      	ldr	r3, [sp, #12]
 8009cbe:	1d1a      	adds	r2, r3, #4
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	9203      	str	r2, [sp, #12]
 8009cc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009cc8:	3402      	adds	r4, #2
 8009cca:	9305      	str	r3, [sp, #20]
 8009ccc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009d90 <_svfiprintf_r+0x1f4>
 8009cd0:	7821      	ldrb	r1, [r4, #0]
 8009cd2:	2203      	movs	r2, #3
 8009cd4:	4650      	mov	r0, sl
 8009cd6:	f7f6 fa83 	bl	80001e0 <memchr>
 8009cda:	b138      	cbz	r0, 8009cec <_svfiprintf_r+0x150>
 8009cdc:	9b04      	ldr	r3, [sp, #16]
 8009cde:	eba0 000a 	sub.w	r0, r0, sl
 8009ce2:	2240      	movs	r2, #64	@ 0x40
 8009ce4:	4082      	lsls	r2, r0
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	3401      	adds	r4, #1
 8009cea:	9304      	str	r3, [sp, #16]
 8009cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cf0:	4824      	ldr	r0, [pc, #144]	@ (8009d84 <_svfiprintf_r+0x1e8>)
 8009cf2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009cf6:	2206      	movs	r2, #6
 8009cf8:	f7f6 fa72 	bl	80001e0 <memchr>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	d036      	beq.n	8009d6e <_svfiprintf_r+0x1d2>
 8009d00:	4b21      	ldr	r3, [pc, #132]	@ (8009d88 <_svfiprintf_r+0x1ec>)
 8009d02:	bb1b      	cbnz	r3, 8009d4c <_svfiprintf_r+0x1b0>
 8009d04:	9b03      	ldr	r3, [sp, #12]
 8009d06:	3307      	adds	r3, #7
 8009d08:	f023 0307 	bic.w	r3, r3, #7
 8009d0c:	3308      	adds	r3, #8
 8009d0e:	9303      	str	r3, [sp, #12]
 8009d10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d12:	4433      	add	r3, r6
 8009d14:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d16:	e76a      	b.n	8009bee <_svfiprintf_r+0x52>
 8009d18:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d1c:	460c      	mov	r4, r1
 8009d1e:	2001      	movs	r0, #1
 8009d20:	e7a8      	b.n	8009c74 <_svfiprintf_r+0xd8>
 8009d22:	2300      	movs	r3, #0
 8009d24:	3401      	adds	r4, #1
 8009d26:	9305      	str	r3, [sp, #20]
 8009d28:	4619      	mov	r1, r3
 8009d2a:	f04f 0c0a 	mov.w	ip, #10
 8009d2e:	4620      	mov	r0, r4
 8009d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d34:	3a30      	subs	r2, #48	@ 0x30
 8009d36:	2a09      	cmp	r2, #9
 8009d38:	d903      	bls.n	8009d42 <_svfiprintf_r+0x1a6>
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d0c6      	beq.n	8009ccc <_svfiprintf_r+0x130>
 8009d3e:	9105      	str	r1, [sp, #20]
 8009d40:	e7c4      	b.n	8009ccc <_svfiprintf_r+0x130>
 8009d42:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d46:	4604      	mov	r4, r0
 8009d48:	2301      	movs	r3, #1
 8009d4a:	e7f0      	b.n	8009d2e <_svfiprintf_r+0x192>
 8009d4c:	ab03      	add	r3, sp, #12
 8009d4e:	9300      	str	r3, [sp, #0]
 8009d50:	462a      	mov	r2, r5
 8009d52:	4b0e      	ldr	r3, [pc, #56]	@ (8009d8c <_svfiprintf_r+0x1f0>)
 8009d54:	a904      	add	r1, sp, #16
 8009d56:	4638      	mov	r0, r7
 8009d58:	f3af 8000 	nop.w
 8009d5c:	1c42      	adds	r2, r0, #1
 8009d5e:	4606      	mov	r6, r0
 8009d60:	d1d6      	bne.n	8009d10 <_svfiprintf_r+0x174>
 8009d62:	89ab      	ldrh	r3, [r5, #12]
 8009d64:	065b      	lsls	r3, r3, #25
 8009d66:	f53f af2d 	bmi.w	8009bc4 <_svfiprintf_r+0x28>
 8009d6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d6c:	e72c      	b.n	8009bc8 <_svfiprintf_r+0x2c>
 8009d6e:	ab03      	add	r3, sp, #12
 8009d70:	9300      	str	r3, [sp, #0]
 8009d72:	462a      	mov	r2, r5
 8009d74:	4b05      	ldr	r3, [pc, #20]	@ (8009d8c <_svfiprintf_r+0x1f0>)
 8009d76:	a904      	add	r1, sp, #16
 8009d78:	4638      	mov	r0, r7
 8009d7a:	f000 f879 	bl	8009e70 <_printf_i>
 8009d7e:	e7ed      	b.n	8009d5c <_svfiprintf_r+0x1c0>
 8009d80:	0800a9dc 	.word	0x0800a9dc
 8009d84:	0800a9e6 	.word	0x0800a9e6
 8009d88:	00000000 	.word	0x00000000
 8009d8c:	08009ae5 	.word	0x08009ae5
 8009d90:	0800a9e2 	.word	0x0800a9e2

08009d94 <_printf_common>:
 8009d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d98:	4616      	mov	r6, r2
 8009d9a:	4698      	mov	r8, r3
 8009d9c:	688a      	ldr	r2, [r1, #8]
 8009d9e:	690b      	ldr	r3, [r1, #16]
 8009da0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009da4:	4293      	cmp	r3, r2
 8009da6:	bfb8      	it	lt
 8009da8:	4613      	movlt	r3, r2
 8009daa:	6033      	str	r3, [r6, #0]
 8009dac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009db0:	4607      	mov	r7, r0
 8009db2:	460c      	mov	r4, r1
 8009db4:	b10a      	cbz	r2, 8009dba <_printf_common+0x26>
 8009db6:	3301      	adds	r3, #1
 8009db8:	6033      	str	r3, [r6, #0]
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	0699      	lsls	r1, r3, #26
 8009dbe:	bf42      	ittt	mi
 8009dc0:	6833      	ldrmi	r3, [r6, #0]
 8009dc2:	3302      	addmi	r3, #2
 8009dc4:	6033      	strmi	r3, [r6, #0]
 8009dc6:	6825      	ldr	r5, [r4, #0]
 8009dc8:	f015 0506 	ands.w	r5, r5, #6
 8009dcc:	d106      	bne.n	8009ddc <_printf_common+0x48>
 8009dce:	f104 0a19 	add.w	sl, r4, #25
 8009dd2:	68e3      	ldr	r3, [r4, #12]
 8009dd4:	6832      	ldr	r2, [r6, #0]
 8009dd6:	1a9b      	subs	r3, r3, r2
 8009dd8:	42ab      	cmp	r3, r5
 8009dda:	dc26      	bgt.n	8009e2a <_printf_common+0x96>
 8009ddc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009de0:	6822      	ldr	r2, [r4, #0]
 8009de2:	3b00      	subs	r3, #0
 8009de4:	bf18      	it	ne
 8009de6:	2301      	movne	r3, #1
 8009de8:	0692      	lsls	r2, r2, #26
 8009dea:	d42b      	bmi.n	8009e44 <_printf_common+0xb0>
 8009dec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009df0:	4641      	mov	r1, r8
 8009df2:	4638      	mov	r0, r7
 8009df4:	47c8      	blx	r9
 8009df6:	3001      	adds	r0, #1
 8009df8:	d01e      	beq.n	8009e38 <_printf_common+0xa4>
 8009dfa:	6823      	ldr	r3, [r4, #0]
 8009dfc:	6922      	ldr	r2, [r4, #16]
 8009dfe:	f003 0306 	and.w	r3, r3, #6
 8009e02:	2b04      	cmp	r3, #4
 8009e04:	bf02      	ittt	eq
 8009e06:	68e5      	ldreq	r5, [r4, #12]
 8009e08:	6833      	ldreq	r3, [r6, #0]
 8009e0a:	1aed      	subeq	r5, r5, r3
 8009e0c:	68a3      	ldr	r3, [r4, #8]
 8009e0e:	bf0c      	ite	eq
 8009e10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e14:	2500      	movne	r5, #0
 8009e16:	4293      	cmp	r3, r2
 8009e18:	bfc4      	itt	gt
 8009e1a:	1a9b      	subgt	r3, r3, r2
 8009e1c:	18ed      	addgt	r5, r5, r3
 8009e1e:	2600      	movs	r6, #0
 8009e20:	341a      	adds	r4, #26
 8009e22:	42b5      	cmp	r5, r6
 8009e24:	d11a      	bne.n	8009e5c <_printf_common+0xc8>
 8009e26:	2000      	movs	r0, #0
 8009e28:	e008      	b.n	8009e3c <_printf_common+0xa8>
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	4652      	mov	r2, sl
 8009e2e:	4641      	mov	r1, r8
 8009e30:	4638      	mov	r0, r7
 8009e32:	47c8      	blx	r9
 8009e34:	3001      	adds	r0, #1
 8009e36:	d103      	bne.n	8009e40 <_printf_common+0xac>
 8009e38:	f04f 30ff 	mov.w	r0, #4294967295
 8009e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e40:	3501      	adds	r5, #1
 8009e42:	e7c6      	b.n	8009dd2 <_printf_common+0x3e>
 8009e44:	18e1      	adds	r1, r4, r3
 8009e46:	1c5a      	adds	r2, r3, #1
 8009e48:	2030      	movs	r0, #48	@ 0x30
 8009e4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009e4e:	4422      	add	r2, r4
 8009e50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009e54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009e58:	3302      	adds	r3, #2
 8009e5a:	e7c7      	b.n	8009dec <_printf_common+0x58>
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	4622      	mov	r2, r4
 8009e60:	4641      	mov	r1, r8
 8009e62:	4638      	mov	r0, r7
 8009e64:	47c8      	blx	r9
 8009e66:	3001      	adds	r0, #1
 8009e68:	d0e6      	beq.n	8009e38 <_printf_common+0xa4>
 8009e6a:	3601      	adds	r6, #1
 8009e6c:	e7d9      	b.n	8009e22 <_printf_common+0x8e>
	...

08009e70 <_printf_i>:
 8009e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e74:	7e0f      	ldrb	r7, [r1, #24]
 8009e76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e78:	2f78      	cmp	r7, #120	@ 0x78
 8009e7a:	4691      	mov	r9, r2
 8009e7c:	4680      	mov	r8, r0
 8009e7e:	460c      	mov	r4, r1
 8009e80:	469a      	mov	sl, r3
 8009e82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e86:	d807      	bhi.n	8009e98 <_printf_i+0x28>
 8009e88:	2f62      	cmp	r7, #98	@ 0x62
 8009e8a:	d80a      	bhi.n	8009ea2 <_printf_i+0x32>
 8009e8c:	2f00      	cmp	r7, #0
 8009e8e:	f000 80d1 	beq.w	800a034 <_printf_i+0x1c4>
 8009e92:	2f58      	cmp	r7, #88	@ 0x58
 8009e94:	f000 80b8 	beq.w	800a008 <_printf_i+0x198>
 8009e98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009ea0:	e03a      	b.n	8009f18 <_printf_i+0xa8>
 8009ea2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009ea6:	2b15      	cmp	r3, #21
 8009ea8:	d8f6      	bhi.n	8009e98 <_printf_i+0x28>
 8009eaa:	a101      	add	r1, pc, #4	@ (adr r1, 8009eb0 <_printf_i+0x40>)
 8009eac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009eb0:	08009f09 	.word	0x08009f09
 8009eb4:	08009f1d 	.word	0x08009f1d
 8009eb8:	08009e99 	.word	0x08009e99
 8009ebc:	08009e99 	.word	0x08009e99
 8009ec0:	08009e99 	.word	0x08009e99
 8009ec4:	08009e99 	.word	0x08009e99
 8009ec8:	08009f1d 	.word	0x08009f1d
 8009ecc:	08009e99 	.word	0x08009e99
 8009ed0:	08009e99 	.word	0x08009e99
 8009ed4:	08009e99 	.word	0x08009e99
 8009ed8:	08009e99 	.word	0x08009e99
 8009edc:	0800a01b 	.word	0x0800a01b
 8009ee0:	08009f47 	.word	0x08009f47
 8009ee4:	08009fd5 	.word	0x08009fd5
 8009ee8:	08009e99 	.word	0x08009e99
 8009eec:	08009e99 	.word	0x08009e99
 8009ef0:	0800a03d 	.word	0x0800a03d
 8009ef4:	08009e99 	.word	0x08009e99
 8009ef8:	08009f47 	.word	0x08009f47
 8009efc:	08009e99 	.word	0x08009e99
 8009f00:	08009e99 	.word	0x08009e99
 8009f04:	08009fdd 	.word	0x08009fdd
 8009f08:	6833      	ldr	r3, [r6, #0]
 8009f0a:	1d1a      	adds	r2, r3, #4
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	6032      	str	r2, [r6, #0]
 8009f10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e09c      	b.n	800a056 <_printf_i+0x1e6>
 8009f1c:	6833      	ldr	r3, [r6, #0]
 8009f1e:	6820      	ldr	r0, [r4, #0]
 8009f20:	1d19      	adds	r1, r3, #4
 8009f22:	6031      	str	r1, [r6, #0]
 8009f24:	0606      	lsls	r6, r0, #24
 8009f26:	d501      	bpl.n	8009f2c <_printf_i+0xbc>
 8009f28:	681d      	ldr	r5, [r3, #0]
 8009f2a:	e003      	b.n	8009f34 <_printf_i+0xc4>
 8009f2c:	0645      	lsls	r5, r0, #25
 8009f2e:	d5fb      	bpl.n	8009f28 <_printf_i+0xb8>
 8009f30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009f34:	2d00      	cmp	r5, #0
 8009f36:	da03      	bge.n	8009f40 <_printf_i+0xd0>
 8009f38:	232d      	movs	r3, #45	@ 0x2d
 8009f3a:	426d      	negs	r5, r5
 8009f3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f40:	4858      	ldr	r0, [pc, #352]	@ (800a0a4 <_printf_i+0x234>)
 8009f42:	230a      	movs	r3, #10
 8009f44:	e011      	b.n	8009f6a <_printf_i+0xfa>
 8009f46:	6821      	ldr	r1, [r4, #0]
 8009f48:	6833      	ldr	r3, [r6, #0]
 8009f4a:	0608      	lsls	r0, r1, #24
 8009f4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009f50:	d402      	bmi.n	8009f58 <_printf_i+0xe8>
 8009f52:	0649      	lsls	r1, r1, #25
 8009f54:	bf48      	it	mi
 8009f56:	b2ad      	uxthmi	r5, r5
 8009f58:	2f6f      	cmp	r7, #111	@ 0x6f
 8009f5a:	4852      	ldr	r0, [pc, #328]	@ (800a0a4 <_printf_i+0x234>)
 8009f5c:	6033      	str	r3, [r6, #0]
 8009f5e:	bf14      	ite	ne
 8009f60:	230a      	movne	r3, #10
 8009f62:	2308      	moveq	r3, #8
 8009f64:	2100      	movs	r1, #0
 8009f66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009f6a:	6866      	ldr	r6, [r4, #4]
 8009f6c:	60a6      	str	r6, [r4, #8]
 8009f6e:	2e00      	cmp	r6, #0
 8009f70:	db05      	blt.n	8009f7e <_printf_i+0x10e>
 8009f72:	6821      	ldr	r1, [r4, #0]
 8009f74:	432e      	orrs	r6, r5
 8009f76:	f021 0104 	bic.w	r1, r1, #4
 8009f7a:	6021      	str	r1, [r4, #0]
 8009f7c:	d04b      	beq.n	800a016 <_printf_i+0x1a6>
 8009f7e:	4616      	mov	r6, r2
 8009f80:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f84:	fb03 5711 	mls	r7, r3, r1, r5
 8009f88:	5dc7      	ldrb	r7, [r0, r7]
 8009f8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f8e:	462f      	mov	r7, r5
 8009f90:	42bb      	cmp	r3, r7
 8009f92:	460d      	mov	r5, r1
 8009f94:	d9f4      	bls.n	8009f80 <_printf_i+0x110>
 8009f96:	2b08      	cmp	r3, #8
 8009f98:	d10b      	bne.n	8009fb2 <_printf_i+0x142>
 8009f9a:	6823      	ldr	r3, [r4, #0]
 8009f9c:	07df      	lsls	r7, r3, #31
 8009f9e:	d508      	bpl.n	8009fb2 <_printf_i+0x142>
 8009fa0:	6923      	ldr	r3, [r4, #16]
 8009fa2:	6861      	ldr	r1, [r4, #4]
 8009fa4:	4299      	cmp	r1, r3
 8009fa6:	bfde      	ittt	le
 8009fa8:	2330      	movle	r3, #48	@ 0x30
 8009faa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009fae:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009fb2:	1b92      	subs	r2, r2, r6
 8009fb4:	6122      	str	r2, [r4, #16]
 8009fb6:	f8cd a000 	str.w	sl, [sp]
 8009fba:	464b      	mov	r3, r9
 8009fbc:	aa03      	add	r2, sp, #12
 8009fbe:	4621      	mov	r1, r4
 8009fc0:	4640      	mov	r0, r8
 8009fc2:	f7ff fee7 	bl	8009d94 <_printf_common>
 8009fc6:	3001      	adds	r0, #1
 8009fc8:	d14a      	bne.n	800a060 <_printf_i+0x1f0>
 8009fca:	f04f 30ff 	mov.w	r0, #4294967295
 8009fce:	b004      	add	sp, #16
 8009fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fd4:	6823      	ldr	r3, [r4, #0]
 8009fd6:	f043 0320 	orr.w	r3, r3, #32
 8009fda:	6023      	str	r3, [r4, #0]
 8009fdc:	4832      	ldr	r0, [pc, #200]	@ (800a0a8 <_printf_i+0x238>)
 8009fde:	2778      	movs	r7, #120	@ 0x78
 8009fe0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009fe4:	6823      	ldr	r3, [r4, #0]
 8009fe6:	6831      	ldr	r1, [r6, #0]
 8009fe8:	061f      	lsls	r7, r3, #24
 8009fea:	f851 5b04 	ldr.w	r5, [r1], #4
 8009fee:	d402      	bmi.n	8009ff6 <_printf_i+0x186>
 8009ff0:	065f      	lsls	r7, r3, #25
 8009ff2:	bf48      	it	mi
 8009ff4:	b2ad      	uxthmi	r5, r5
 8009ff6:	6031      	str	r1, [r6, #0]
 8009ff8:	07d9      	lsls	r1, r3, #31
 8009ffa:	bf44      	itt	mi
 8009ffc:	f043 0320 	orrmi.w	r3, r3, #32
 800a000:	6023      	strmi	r3, [r4, #0]
 800a002:	b11d      	cbz	r5, 800a00c <_printf_i+0x19c>
 800a004:	2310      	movs	r3, #16
 800a006:	e7ad      	b.n	8009f64 <_printf_i+0xf4>
 800a008:	4826      	ldr	r0, [pc, #152]	@ (800a0a4 <_printf_i+0x234>)
 800a00a:	e7e9      	b.n	8009fe0 <_printf_i+0x170>
 800a00c:	6823      	ldr	r3, [r4, #0]
 800a00e:	f023 0320 	bic.w	r3, r3, #32
 800a012:	6023      	str	r3, [r4, #0]
 800a014:	e7f6      	b.n	800a004 <_printf_i+0x194>
 800a016:	4616      	mov	r6, r2
 800a018:	e7bd      	b.n	8009f96 <_printf_i+0x126>
 800a01a:	6833      	ldr	r3, [r6, #0]
 800a01c:	6825      	ldr	r5, [r4, #0]
 800a01e:	6961      	ldr	r1, [r4, #20]
 800a020:	1d18      	adds	r0, r3, #4
 800a022:	6030      	str	r0, [r6, #0]
 800a024:	062e      	lsls	r6, r5, #24
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	d501      	bpl.n	800a02e <_printf_i+0x1be>
 800a02a:	6019      	str	r1, [r3, #0]
 800a02c:	e002      	b.n	800a034 <_printf_i+0x1c4>
 800a02e:	0668      	lsls	r0, r5, #25
 800a030:	d5fb      	bpl.n	800a02a <_printf_i+0x1ba>
 800a032:	8019      	strh	r1, [r3, #0]
 800a034:	2300      	movs	r3, #0
 800a036:	6123      	str	r3, [r4, #16]
 800a038:	4616      	mov	r6, r2
 800a03a:	e7bc      	b.n	8009fb6 <_printf_i+0x146>
 800a03c:	6833      	ldr	r3, [r6, #0]
 800a03e:	1d1a      	adds	r2, r3, #4
 800a040:	6032      	str	r2, [r6, #0]
 800a042:	681e      	ldr	r6, [r3, #0]
 800a044:	6862      	ldr	r2, [r4, #4]
 800a046:	2100      	movs	r1, #0
 800a048:	4630      	mov	r0, r6
 800a04a:	f7f6 f8c9 	bl	80001e0 <memchr>
 800a04e:	b108      	cbz	r0, 800a054 <_printf_i+0x1e4>
 800a050:	1b80      	subs	r0, r0, r6
 800a052:	6060      	str	r0, [r4, #4]
 800a054:	6863      	ldr	r3, [r4, #4]
 800a056:	6123      	str	r3, [r4, #16]
 800a058:	2300      	movs	r3, #0
 800a05a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a05e:	e7aa      	b.n	8009fb6 <_printf_i+0x146>
 800a060:	6923      	ldr	r3, [r4, #16]
 800a062:	4632      	mov	r2, r6
 800a064:	4649      	mov	r1, r9
 800a066:	4640      	mov	r0, r8
 800a068:	47d0      	blx	sl
 800a06a:	3001      	adds	r0, #1
 800a06c:	d0ad      	beq.n	8009fca <_printf_i+0x15a>
 800a06e:	6823      	ldr	r3, [r4, #0]
 800a070:	079b      	lsls	r3, r3, #30
 800a072:	d413      	bmi.n	800a09c <_printf_i+0x22c>
 800a074:	68e0      	ldr	r0, [r4, #12]
 800a076:	9b03      	ldr	r3, [sp, #12]
 800a078:	4298      	cmp	r0, r3
 800a07a:	bfb8      	it	lt
 800a07c:	4618      	movlt	r0, r3
 800a07e:	e7a6      	b.n	8009fce <_printf_i+0x15e>
 800a080:	2301      	movs	r3, #1
 800a082:	4632      	mov	r2, r6
 800a084:	4649      	mov	r1, r9
 800a086:	4640      	mov	r0, r8
 800a088:	47d0      	blx	sl
 800a08a:	3001      	adds	r0, #1
 800a08c:	d09d      	beq.n	8009fca <_printf_i+0x15a>
 800a08e:	3501      	adds	r5, #1
 800a090:	68e3      	ldr	r3, [r4, #12]
 800a092:	9903      	ldr	r1, [sp, #12]
 800a094:	1a5b      	subs	r3, r3, r1
 800a096:	42ab      	cmp	r3, r5
 800a098:	dcf2      	bgt.n	800a080 <_printf_i+0x210>
 800a09a:	e7eb      	b.n	800a074 <_printf_i+0x204>
 800a09c:	2500      	movs	r5, #0
 800a09e:	f104 0619 	add.w	r6, r4, #25
 800a0a2:	e7f5      	b.n	800a090 <_printf_i+0x220>
 800a0a4:	0800a9ed 	.word	0x0800a9ed
 800a0a8:	0800a9fe 	.word	0x0800a9fe

0800a0ac <memmove>:
 800a0ac:	4288      	cmp	r0, r1
 800a0ae:	b510      	push	{r4, lr}
 800a0b0:	eb01 0402 	add.w	r4, r1, r2
 800a0b4:	d902      	bls.n	800a0bc <memmove+0x10>
 800a0b6:	4284      	cmp	r4, r0
 800a0b8:	4623      	mov	r3, r4
 800a0ba:	d807      	bhi.n	800a0cc <memmove+0x20>
 800a0bc:	1e43      	subs	r3, r0, #1
 800a0be:	42a1      	cmp	r1, r4
 800a0c0:	d008      	beq.n	800a0d4 <memmove+0x28>
 800a0c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0ca:	e7f8      	b.n	800a0be <memmove+0x12>
 800a0cc:	4402      	add	r2, r0
 800a0ce:	4601      	mov	r1, r0
 800a0d0:	428a      	cmp	r2, r1
 800a0d2:	d100      	bne.n	800a0d6 <memmove+0x2a>
 800a0d4:	bd10      	pop	{r4, pc}
 800a0d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0de:	e7f7      	b.n	800a0d0 <memmove+0x24>

0800a0e0 <_sbrk_r>:
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	4d06      	ldr	r5, [pc, #24]	@ (800a0fc <_sbrk_r+0x1c>)
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	4608      	mov	r0, r1
 800a0ea:	602b      	str	r3, [r5, #0]
 800a0ec:	f7f7 feb4 	bl	8001e58 <_sbrk>
 800a0f0:	1c43      	adds	r3, r0, #1
 800a0f2:	d102      	bne.n	800a0fa <_sbrk_r+0x1a>
 800a0f4:	682b      	ldr	r3, [r5, #0]
 800a0f6:	b103      	cbz	r3, 800a0fa <_sbrk_r+0x1a>
 800a0f8:	6023      	str	r3, [r4, #0]
 800a0fa:	bd38      	pop	{r3, r4, r5, pc}
 800a0fc:	20000e2c 	.word	0x20000e2c

0800a100 <memcpy>:
 800a100:	440a      	add	r2, r1
 800a102:	4291      	cmp	r1, r2
 800a104:	f100 33ff 	add.w	r3, r0, #4294967295
 800a108:	d100      	bne.n	800a10c <memcpy+0xc>
 800a10a:	4770      	bx	lr
 800a10c:	b510      	push	{r4, lr}
 800a10e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a112:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a116:	4291      	cmp	r1, r2
 800a118:	d1f9      	bne.n	800a10e <memcpy+0xe>
 800a11a:	bd10      	pop	{r4, pc}

0800a11c <_realloc_r>:
 800a11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a120:	4607      	mov	r7, r0
 800a122:	4614      	mov	r4, r2
 800a124:	460d      	mov	r5, r1
 800a126:	b921      	cbnz	r1, 800a132 <_realloc_r+0x16>
 800a128:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a12c:	4611      	mov	r1, r2
 800a12e:	f7ff bc4d 	b.w	80099cc <_malloc_r>
 800a132:	b92a      	cbnz	r2, 800a140 <_realloc_r+0x24>
 800a134:	f7ff fbde 	bl	80098f4 <_free_r>
 800a138:	4625      	mov	r5, r4
 800a13a:	4628      	mov	r0, r5
 800a13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a140:	f000 f81a 	bl	800a178 <_malloc_usable_size_r>
 800a144:	4284      	cmp	r4, r0
 800a146:	4606      	mov	r6, r0
 800a148:	d802      	bhi.n	800a150 <_realloc_r+0x34>
 800a14a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a14e:	d8f4      	bhi.n	800a13a <_realloc_r+0x1e>
 800a150:	4621      	mov	r1, r4
 800a152:	4638      	mov	r0, r7
 800a154:	f7ff fc3a 	bl	80099cc <_malloc_r>
 800a158:	4680      	mov	r8, r0
 800a15a:	b908      	cbnz	r0, 800a160 <_realloc_r+0x44>
 800a15c:	4645      	mov	r5, r8
 800a15e:	e7ec      	b.n	800a13a <_realloc_r+0x1e>
 800a160:	42b4      	cmp	r4, r6
 800a162:	4622      	mov	r2, r4
 800a164:	4629      	mov	r1, r5
 800a166:	bf28      	it	cs
 800a168:	4632      	movcs	r2, r6
 800a16a:	f7ff ffc9 	bl	800a100 <memcpy>
 800a16e:	4629      	mov	r1, r5
 800a170:	4638      	mov	r0, r7
 800a172:	f7ff fbbf 	bl	80098f4 <_free_r>
 800a176:	e7f1      	b.n	800a15c <_realloc_r+0x40>

0800a178 <_malloc_usable_size_r>:
 800a178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a17c:	1f18      	subs	r0, r3, #4
 800a17e:	2b00      	cmp	r3, #0
 800a180:	bfbc      	itt	lt
 800a182:	580b      	ldrlt	r3, [r1, r0]
 800a184:	18c0      	addlt	r0, r0, r3
 800a186:	4770      	bx	lr

0800a188 <atan2>:
 800a188:	f000 baa6 	b.w	800a6d8 <__ieee754_atan2>

0800a18c <sqrt>:
 800a18c:	b538      	push	{r3, r4, r5, lr}
 800a18e:	ed2d 8b02 	vpush	{d8}
 800a192:	ec55 4b10 	vmov	r4, r5, d0
 800a196:	f000 f9c7 	bl	800a528 <__ieee754_sqrt>
 800a19a:	4622      	mov	r2, r4
 800a19c:	462b      	mov	r3, r5
 800a19e:	4620      	mov	r0, r4
 800a1a0:	4629      	mov	r1, r5
 800a1a2:	eeb0 8a40 	vmov.f32	s16, s0
 800a1a6:	eef0 8a60 	vmov.f32	s17, s1
 800a1aa:	f7f6 fcbf 	bl	8000b2c <__aeabi_dcmpun>
 800a1ae:	b990      	cbnz	r0, 800a1d6 <sqrt+0x4a>
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	4629      	mov	r1, r5
 800a1b8:	f7f6 fc90 	bl	8000adc <__aeabi_dcmplt>
 800a1bc:	b158      	cbz	r0, 800a1d6 <sqrt+0x4a>
 800a1be:	f7ff fb6d 	bl	800989c <__errno>
 800a1c2:	2321      	movs	r3, #33	@ 0x21
 800a1c4:	6003      	str	r3, [r0, #0]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	4610      	mov	r0, r2
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	f7f6 fb3d 	bl	800084c <__aeabi_ddiv>
 800a1d2:	ec41 0b18 	vmov	d8, r0, r1
 800a1d6:	eeb0 0a48 	vmov.f32	s0, s16
 800a1da:	eef0 0a68 	vmov.f32	s1, s17
 800a1de:	ecbd 8b02 	vpop	{d8}
 800a1e2:	bd38      	pop	{r3, r4, r5, pc}
 800a1e4:	0000      	movs	r0, r0
	...

0800a1e8 <atan>:
 800a1e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ec:	ec55 4b10 	vmov	r4, r5, d0
 800a1f0:	4bbf      	ldr	r3, [pc, #764]	@ (800a4f0 <atan+0x308>)
 800a1f2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800a1f6:	429e      	cmp	r6, r3
 800a1f8:	46ab      	mov	fp, r5
 800a1fa:	d918      	bls.n	800a22e <atan+0x46>
 800a1fc:	4bbd      	ldr	r3, [pc, #756]	@ (800a4f4 <atan+0x30c>)
 800a1fe:	429e      	cmp	r6, r3
 800a200:	d801      	bhi.n	800a206 <atan+0x1e>
 800a202:	d109      	bne.n	800a218 <atan+0x30>
 800a204:	b144      	cbz	r4, 800a218 <atan+0x30>
 800a206:	4622      	mov	r2, r4
 800a208:	462b      	mov	r3, r5
 800a20a:	4620      	mov	r0, r4
 800a20c:	4629      	mov	r1, r5
 800a20e:	f7f6 f83d 	bl	800028c <__adddf3>
 800a212:	4604      	mov	r4, r0
 800a214:	460d      	mov	r5, r1
 800a216:	e006      	b.n	800a226 <atan+0x3e>
 800a218:	f1bb 0f00 	cmp.w	fp, #0
 800a21c:	f340 812b 	ble.w	800a476 <atan+0x28e>
 800a220:	a597      	add	r5, pc, #604	@ (adr r5, 800a480 <atan+0x298>)
 800a222:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a226:	ec45 4b10 	vmov	d0, r4, r5
 800a22a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a22e:	4bb2      	ldr	r3, [pc, #712]	@ (800a4f8 <atan+0x310>)
 800a230:	429e      	cmp	r6, r3
 800a232:	d813      	bhi.n	800a25c <atan+0x74>
 800a234:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a238:	429e      	cmp	r6, r3
 800a23a:	d80c      	bhi.n	800a256 <atan+0x6e>
 800a23c:	a392      	add	r3, pc, #584	@ (adr r3, 800a488 <atan+0x2a0>)
 800a23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a242:	4620      	mov	r0, r4
 800a244:	4629      	mov	r1, r5
 800a246:	f7f6 f821 	bl	800028c <__adddf3>
 800a24a:	4bac      	ldr	r3, [pc, #688]	@ (800a4fc <atan+0x314>)
 800a24c:	2200      	movs	r2, #0
 800a24e:	f7f6 fc63 	bl	8000b18 <__aeabi_dcmpgt>
 800a252:	2800      	cmp	r0, #0
 800a254:	d1e7      	bne.n	800a226 <atan+0x3e>
 800a256:	f04f 3aff 	mov.w	sl, #4294967295
 800a25a:	e029      	b.n	800a2b0 <atan+0xc8>
 800a25c:	f000 f95c 	bl	800a518 <fabs>
 800a260:	4ba7      	ldr	r3, [pc, #668]	@ (800a500 <atan+0x318>)
 800a262:	429e      	cmp	r6, r3
 800a264:	ec55 4b10 	vmov	r4, r5, d0
 800a268:	f200 80bc 	bhi.w	800a3e4 <atan+0x1fc>
 800a26c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a270:	429e      	cmp	r6, r3
 800a272:	f200 809e 	bhi.w	800a3b2 <atan+0x1ca>
 800a276:	4622      	mov	r2, r4
 800a278:	462b      	mov	r3, r5
 800a27a:	4620      	mov	r0, r4
 800a27c:	4629      	mov	r1, r5
 800a27e:	f7f6 f805 	bl	800028c <__adddf3>
 800a282:	4b9e      	ldr	r3, [pc, #632]	@ (800a4fc <atan+0x314>)
 800a284:	2200      	movs	r2, #0
 800a286:	f7f5 ffff 	bl	8000288 <__aeabi_dsub>
 800a28a:	2200      	movs	r2, #0
 800a28c:	4606      	mov	r6, r0
 800a28e:	460f      	mov	r7, r1
 800a290:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a294:	4620      	mov	r0, r4
 800a296:	4629      	mov	r1, r5
 800a298:	f7f5 fff8 	bl	800028c <__adddf3>
 800a29c:	4602      	mov	r2, r0
 800a29e:	460b      	mov	r3, r1
 800a2a0:	4630      	mov	r0, r6
 800a2a2:	4639      	mov	r1, r7
 800a2a4:	f7f6 fad2 	bl	800084c <__aeabi_ddiv>
 800a2a8:	f04f 0a00 	mov.w	sl, #0
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	460d      	mov	r5, r1
 800a2b0:	4622      	mov	r2, r4
 800a2b2:	462b      	mov	r3, r5
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	f7f6 f99e 	bl	80005f8 <__aeabi_dmul>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	460b      	mov	r3, r1
 800a2c0:	4680      	mov	r8, r0
 800a2c2:	4689      	mov	r9, r1
 800a2c4:	f7f6 f998 	bl	80005f8 <__aeabi_dmul>
 800a2c8:	a371      	add	r3, pc, #452	@ (adr r3, 800a490 <atan+0x2a8>)
 800a2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ce:	4606      	mov	r6, r0
 800a2d0:	460f      	mov	r7, r1
 800a2d2:	f7f6 f991 	bl	80005f8 <__aeabi_dmul>
 800a2d6:	a370      	add	r3, pc, #448	@ (adr r3, 800a498 <atan+0x2b0>)
 800a2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2dc:	f7f5 ffd6 	bl	800028c <__adddf3>
 800a2e0:	4632      	mov	r2, r6
 800a2e2:	463b      	mov	r3, r7
 800a2e4:	f7f6 f988 	bl	80005f8 <__aeabi_dmul>
 800a2e8:	a36d      	add	r3, pc, #436	@ (adr r3, 800a4a0 <atan+0x2b8>)
 800a2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ee:	f7f5 ffcd 	bl	800028c <__adddf3>
 800a2f2:	4632      	mov	r2, r6
 800a2f4:	463b      	mov	r3, r7
 800a2f6:	f7f6 f97f 	bl	80005f8 <__aeabi_dmul>
 800a2fa:	a36b      	add	r3, pc, #428	@ (adr r3, 800a4a8 <atan+0x2c0>)
 800a2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a300:	f7f5 ffc4 	bl	800028c <__adddf3>
 800a304:	4632      	mov	r2, r6
 800a306:	463b      	mov	r3, r7
 800a308:	f7f6 f976 	bl	80005f8 <__aeabi_dmul>
 800a30c:	a368      	add	r3, pc, #416	@ (adr r3, 800a4b0 <atan+0x2c8>)
 800a30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a312:	f7f5 ffbb 	bl	800028c <__adddf3>
 800a316:	4632      	mov	r2, r6
 800a318:	463b      	mov	r3, r7
 800a31a:	f7f6 f96d 	bl	80005f8 <__aeabi_dmul>
 800a31e:	a366      	add	r3, pc, #408	@ (adr r3, 800a4b8 <atan+0x2d0>)
 800a320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a324:	f7f5 ffb2 	bl	800028c <__adddf3>
 800a328:	4642      	mov	r2, r8
 800a32a:	464b      	mov	r3, r9
 800a32c:	f7f6 f964 	bl	80005f8 <__aeabi_dmul>
 800a330:	a363      	add	r3, pc, #396	@ (adr r3, 800a4c0 <atan+0x2d8>)
 800a332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a336:	4680      	mov	r8, r0
 800a338:	4689      	mov	r9, r1
 800a33a:	4630      	mov	r0, r6
 800a33c:	4639      	mov	r1, r7
 800a33e:	f7f6 f95b 	bl	80005f8 <__aeabi_dmul>
 800a342:	a361      	add	r3, pc, #388	@ (adr r3, 800a4c8 <atan+0x2e0>)
 800a344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a348:	f7f5 ff9e 	bl	8000288 <__aeabi_dsub>
 800a34c:	4632      	mov	r2, r6
 800a34e:	463b      	mov	r3, r7
 800a350:	f7f6 f952 	bl	80005f8 <__aeabi_dmul>
 800a354:	a35e      	add	r3, pc, #376	@ (adr r3, 800a4d0 <atan+0x2e8>)
 800a356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35a:	f7f5 ff95 	bl	8000288 <__aeabi_dsub>
 800a35e:	4632      	mov	r2, r6
 800a360:	463b      	mov	r3, r7
 800a362:	f7f6 f949 	bl	80005f8 <__aeabi_dmul>
 800a366:	a35c      	add	r3, pc, #368	@ (adr r3, 800a4d8 <atan+0x2f0>)
 800a368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36c:	f7f5 ff8c 	bl	8000288 <__aeabi_dsub>
 800a370:	4632      	mov	r2, r6
 800a372:	463b      	mov	r3, r7
 800a374:	f7f6 f940 	bl	80005f8 <__aeabi_dmul>
 800a378:	a359      	add	r3, pc, #356	@ (adr r3, 800a4e0 <atan+0x2f8>)
 800a37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37e:	f7f5 ff83 	bl	8000288 <__aeabi_dsub>
 800a382:	4632      	mov	r2, r6
 800a384:	463b      	mov	r3, r7
 800a386:	f7f6 f937 	bl	80005f8 <__aeabi_dmul>
 800a38a:	4602      	mov	r2, r0
 800a38c:	460b      	mov	r3, r1
 800a38e:	4640      	mov	r0, r8
 800a390:	4649      	mov	r1, r9
 800a392:	f7f5 ff7b 	bl	800028c <__adddf3>
 800a396:	4622      	mov	r2, r4
 800a398:	462b      	mov	r3, r5
 800a39a:	f7f6 f92d 	bl	80005f8 <__aeabi_dmul>
 800a39e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	d148      	bne.n	800a43a <atan+0x252>
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	4629      	mov	r1, r5
 800a3ac:	f7f5 ff6c 	bl	8000288 <__aeabi_dsub>
 800a3b0:	e72f      	b.n	800a212 <atan+0x2a>
 800a3b2:	4b52      	ldr	r3, [pc, #328]	@ (800a4fc <atan+0x314>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	4620      	mov	r0, r4
 800a3b8:	4629      	mov	r1, r5
 800a3ba:	f7f5 ff65 	bl	8000288 <__aeabi_dsub>
 800a3be:	4b4f      	ldr	r3, [pc, #316]	@ (800a4fc <atan+0x314>)
 800a3c0:	4606      	mov	r6, r0
 800a3c2:	460f      	mov	r7, r1
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	4629      	mov	r1, r5
 800a3ca:	f7f5 ff5f 	bl	800028c <__adddf3>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	4639      	mov	r1, r7
 800a3d6:	f7f6 fa39 	bl	800084c <__aeabi_ddiv>
 800a3da:	f04f 0a01 	mov.w	sl, #1
 800a3de:	4604      	mov	r4, r0
 800a3e0:	460d      	mov	r5, r1
 800a3e2:	e765      	b.n	800a2b0 <atan+0xc8>
 800a3e4:	4b47      	ldr	r3, [pc, #284]	@ (800a504 <atan+0x31c>)
 800a3e6:	429e      	cmp	r6, r3
 800a3e8:	d21c      	bcs.n	800a424 <atan+0x23c>
 800a3ea:	4b47      	ldr	r3, [pc, #284]	@ (800a508 <atan+0x320>)
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	f7f5 ff49 	bl	8000288 <__aeabi_dsub>
 800a3f6:	4b44      	ldr	r3, [pc, #272]	@ (800a508 <atan+0x320>)
 800a3f8:	4606      	mov	r6, r0
 800a3fa:	460f      	mov	r7, r1
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	4620      	mov	r0, r4
 800a400:	4629      	mov	r1, r5
 800a402:	f7f6 f8f9 	bl	80005f8 <__aeabi_dmul>
 800a406:	4b3d      	ldr	r3, [pc, #244]	@ (800a4fc <atan+0x314>)
 800a408:	2200      	movs	r2, #0
 800a40a:	f7f5 ff3f 	bl	800028c <__adddf3>
 800a40e:	4602      	mov	r2, r0
 800a410:	460b      	mov	r3, r1
 800a412:	4630      	mov	r0, r6
 800a414:	4639      	mov	r1, r7
 800a416:	f7f6 fa19 	bl	800084c <__aeabi_ddiv>
 800a41a:	f04f 0a02 	mov.w	sl, #2
 800a41e:	4604      	mov	r4, r0
 800a420:	460d      	mov	r5, r1
 800a422:	e745      	b.n	800a2b0 <atan+0xc8>
 800a424:	4622      	mov	r2, r4
 800a426:	462b      	mov	r3, r5
 800a428:	4938      	ldr	r1, [pc, #224]	@ (800a50c <atan+0x324>)
 800a42a:	2000      	movs	r0, #0
 800a42c:	f7f6 fa0e 	bl	800084c <__aeabi_ddiv>
 800a430:	f04f 0a03 	mov.w	sl, #3
 800a434:	4604      	mov	r4, r0
 800a436:	460d      	mov	r5, r1
 800a438:	e73a      	b.n	800a2b0 <atan+0xc8>
 800a43a:	4b35      	ldr	r3, [pc, #212]	@ (800a510 <atan+0x328>)
 800a43c:	4e35      	ldr	r6, [pc, #212]	@ (800a514 <atan+0x32c>)
 800a43e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a446:	f7f5 ff1f 	bl	8000288 <__aeabi_dsub>
 800a44a:	4622      	mov	r2, r4
 800a44c:	462b      	mov	r3, r5
 800a44e:	f7f5 ff1b 	bl	8000288 <__aeabi_dsub>
 800a452:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a456:	4602      	mov	r2, r0
 800a458:	460b      	mov	r3, r1
 800a45a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a45e:	f7f5 ff13 	bl	8000288 <__aeabi_dsub>
 800a462:	f1bb 0f00 	cmp.w	fp, #0
 800a466:	4604      	mov	r4, r0
 800a468:	460d      	mov	r5, r1
 800a46a:	f6bf aedc 	bge.w	800a226 <atan+0x3e>
 800a46e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a472:	461d      	mov	r5, r3
 800a474:	e6d7      	b.n	800a226 <atan+0x3e>
 800a476:	a51c      	add	r5, pc, #112	@ (adr r5, 800a4e8 <atan+0x300>)
 800a478:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a47c:	e6d3      	b.n	800a226 <atan+0x3e>
 800a47e:	bf00      	nop
 800a480:	54442d18 	.word	0x54442d18
 800a484:	3ff921fb 	.word	0x3ff921fb
 800a488:	8800759c 	.word	0x8800759c
 800a48c:	7e37e43c 	.word	0x7e37e43c
 800a490:	e322da11 	.word	0xe322da11
 800a494:	3f90ad3a 	.word	0x3f90ad3a
 800a498:	24760deb 	.word	0x24760deb
 800a49c:	3fa97b4b 	.word	0x3fa97b4b
 800a4a0:	a0d03d51 	.word	0xa0d03d51
 800a4a4:	3fb10d66 	.word	0x3fb10d66
 800a4a8:	c54c206e 	.word	0xc54c206e
 800a4ac:	3fb745cd 	.word	0x3fb745cd
 800a4b0:	920083ff 	.word	0x920083ff
 800a4b4:	3fc24924 	.word	0x3fc24924
 800a4b8:	5555550d 	.word	0x5555550d
 800a4bc:	3fd55555 	.word	0x3fd55555
 800a4c0:	2c6a6c2f 	.word	0x2c6a6c2f
 800a4c4:	bfa2b444 	.word	0xbfa2b444
 800a4c8:	52defd9a 	.word	0x52defd9a
 800a4cc:	3fadde2d 	.word	0x3fadde2d
 800a4d0:	af749a6d 	.word	0xaf749a6d
 800a4d4:	3fb3b0f2 	.word	0x3fb3b0f2
 800a4d8:	fe231671 	.word	0xfe231671
 800a4dc:	3fbc71c6 	.word	0x3fbc71c6
 800a4e0:	9998ebc4 	.word	0x9998ebc4
 800a4e4:	3fc99999 	.word	0x3fc99999
 800a4e8:	54442d18 	.word	0x54442d18
 800a4ec:	bff921fb 	.word	0xbff921fb
 800a4f0:	440fffff 	.word	0x440fffff
 800a4f4:	7ff00000 	.word	0x7ff00000
 800a4f8:	3fdbffff 	.word	0x3fdbffff
 800a4fc:	3ff00000 	.word	0x3ff00000
 800a500:	3ff2ffff 	.word	0x3ff2ffff
 800a504:	40038000 	.word	0x40038000
 800a508:	3ff80000 	.word	0x3ff80000
 800a50c:	bff00000 	.word	0xbff00000
 800a510:	0800aa10 	.word	0x0800aa10
 800a514:	0800aa30 	.word	0x0800aa30

0800a518 <fabs>:
 800a518:	ec51 0b10 	vmov	r0, r1, d0
 800a51c:	4602      	mov	r2, r0
 800a51e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a522:	ec43 2b10 	vmov	d0, r2, r3
 800a526:	4770      	bx	lr

0800a528 <__ieee754_sqrt>:
 800a528:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a52c:	4a66      	ldr	r2, [pc, #408]	@ (800a6c8 <__ieee754_sqrt+0x1a0>)
 800a52e:	ec55 4b10 	vmov	r4, r5, d0
 800a532:	43aa      	bics	r2, r5
 800a534:	462b      	mov	r3, r5
 800a536:	4621      	mov	r1, r4
 800a538:	d110      	bne.n	800a55c <__ieee754_sqrt+0x34>
 800a53a:	4622      	mov	r2, r4
 800a53c:	4620      	mov	r0, r4
 800a53e:	4629      	mov	r1, r5
 800a540:	f7f6 f85a 	bl	80005f8 <__aeabi_dmul>
 800a544:	4602      	mov	r2, r0
 800a546:	460b      	mov	r3, r1
 800a548:	4620      	mov	r0, r4
 800a54a:	4629      	mov	r1, r5
 800a54c:	f7f5 fe9e 	bl	800028c <__adddf3>
 800a550:	4604      	mov	r4, r0
 800a552:	460d      	mov	r5, r1
 800a554:	ec45 4b10 	vmov	d0, r4, r5
 800a558:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a55c:	2d00      	cmp	r5, #0
 800a55e:	dc0e      	bgt.n	800a57e <__ieee754_sqrt+0x56>
 800a560:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a564:	4322      	orrs	r2, r4
 800a566:	d0f5      	beq.n	800a554 <__ieee754_sqrt+0x2c>
 800a568:	b19d      	cbz	r5, 800a592 <__ieee754_sqrt+0x6a>
 800a56a:	4622      	mov	r2, r4
 800a56c:	4620      	mov	r0, r4
 800a56e:	4629      	mov	r1, r5
 800a570:	f7f5 fe8a 	bl	8000288 <__aeabi_dsub>
 800a574:	4602      	mov	r2, r0
 800a576:	460b      	mov	r3, r1
 800a578:	f7f6 f968 	bl	800084c <__aeabi_ddiv>
 800a57c:	e7e8      	b.n	800a550 <__ieee754_sqrt+0x28>
 800a57e:	152a      	asrs	r2, r5, #20
 800a580:	d115      	bne.n	800a5ae <__ieee754_sqrt+0x86>
 800a582:	2000      	movs	r0, #0
 800a584:	e009      	b.n	800a59a <__ieee754_sqrt+0x72>
 800a586:	0acb      	lsrs	r3, r1, #11
 800a588:	3a15      	subs	r2, #21
 800a58a:	0549      	lsls	r1, r1, #21
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d0fa      	beq.n	800a586 <__ieee754_sqrt+0x5e>
 800a590:	e7f7      	b.n	800a582 <__ieee754_sqrt+0x5a>
 800a592:	462a      	mov	r2, r5
 800a594:	e7fa      	b.n	800a58c <__ieee754_sqrt+0x64>
 800a596:	005b      	lsls	r3, r3, #1
 800a598:	3001      	adds	r0, #1
 800a59a:	02dc      	lsls	r4, r3, #11
 800a59c:	d5fb      	bpl.n	800a596 <__ieee754_sqrt+0x6e>
 800a59e:	1e44      	subs	r4, r0, #1
 800a5a0:	1b12      	subs	r2, r2, r4
 800a5a2:	f1c0 0420 	rsb	r4, r0, #32
 800a5a6:	fa21 f404 	lsr.w	r4, r1, r4
 800a5aa:	4323      	orrs	r3, r4
 800a5ac:	4081      	lsls	r1, r0
 800a5ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5b2:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800a5b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a5ba:	07d2      	lsls	r2, r2, #31
 800a5bc:	bf5c      	itt	pl
 800a5be:	005b      	lslpl	r3, r3, #1
 800a5c0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a5c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a5c8:	bf58      	it	pl
 800a5ca:	0049      	lslpl	r1, r1, #1
 800a5cc:	2600      	movs	r6, #0
 800a5ce:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a5d2:	107f      	asrs	r7, r7, #1
 800a5d4:	0049      	lsls	r1, r1, #1
 800a5d6:	2016      	movs	r0, #22
 800a5d8:	4632      	mov	r2, r6
 800a5da:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a5de:	1915      	adds	r5, r2, r4
 800a5e0:	429d      	cmp	r5, r3
 800a5e2:	bfde      	ittt	le
 800a5e4:	192a      	addle	r2, r5, r4
 800a5e6:	1b5b      	suble	r3, r3, r5
 800a5e8:	1936      	addle	r6, r6, r4
 800a5ea:	0fcd      	lsrs	r5, r1, #31
 800a5ec:	3801      	subs	r0, #1
 800a5ee:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800a5f2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a5f6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a5fa:	d1f0      	bne.n	800a5de <__ieee754_sqrt+0xb6>
 800a5fc:	4605      	mov	r5, r0
 800a5fe:	2420      	movs	r4, #32
 800a600:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a604:	4293      	cmp	r3, r2
 800a606:	eb0c 0e00 	add.w	lr, ip, r0
 800a60a:	dc02      	bgt.n	800a612 <__ieee754_sqrt+0xea>
 800a60c:	d113      	bne.n	800a636 <__ieee754_sqrt+0x10e>
 800a60e:	458e      	cmp	lr, r1
 800a610:	d811      	bhi.n	800a636 <__ieee754_sqrt+0x10e>
 800a612:	f1be 0f00 	cmp.w	lr, #0
 800a616:	eb0e 000c 	add.w	r0, lr, ip
 800a61a:	da3f      	bge.n	800a69c <__ieee754_sqrt+0x174>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	db3d      	blt.n	800a69c <__ieee754_sqrt+0x174>
 800a620:	f102 0801 	add.w	r8, r2, #1
 800a624:	1a9b      	subs	r3, r3, r2
 800a626:	458e      	cmp	lr, r1
 800a628:	bf88      	it	hi
 800a62a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a62e:	eba1 010e 	sub.w	r1, r1, lr
 800a632:	4465      	add	r5, ip
 800a634:	4642      	mov	r2, r8
 800a636:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a63a:	3c01      	subs	r4, #1
 800a63c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a640:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a644:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a648:	d1dc      	bne.n	800a604 <__ieee754_sqrt+0xdc>
 800a64a:	4319      	orrs	r1, r3
 800a64c:	d01b      	beq.n	800a686 <__ieee754_sqrt+0x15e>
 800a64e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800a6cc <__ieee754_sqrt+0x1a4>
 800a652:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800a6d0 <__ieee754_sqrt+0x1a8>
 800a656:	e9da 0100 	ldrd	r0, r1, [sl]
 800a65a:	e9db 2300 	ldrd	r2, r3, [fp]
 800a65e:	f7f5 fe13 	bl	8000288 <__aeabi_dsub>
 800a662:	e9da 8900 	ldrd	r8, r9, [sl]
 800a666:	4602      	mov	r2, r0
 800a668:	460b      	mov	r3, r1
 800a66a:	4640      	mov	r0, r8
 800a66c:	4649      	mov	r1, r9
 800a66e:	f7f6 fa3f 	bl	8000af0 <__aeabi_dcmple>
 800a672:	b140      	cbz	r0, 800a686 <__ieee754_sqrt+0x15e>
 800a674:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a678:	e9da 0100 	ldrd	r0, r1, [sl]
 800a67c:	e9db 2300 	ldrd	r2, r3, [fp]
 800a680:	d10e      	bne.n	800a6a0 <__ieee754_sqrt+0x178>
 800a682:	3601      	adds	r6, #1
 800a684:	4625      	mov	r5, r4
 800a686:	1073      	asrs	r3, r6, #1
 800a688:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800a68c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800a690:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800a694:	086b      	lsrs	r3, r5, #1
 800a696:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800a69a:	e759      	b.n	800a550 <__ieee754_sqrt+0x28>
 800a69c:	4690      	mov	r8, r2
 800a69e:	e7c1      	b.n	800a624 <__ieee754_sqrt+0xfc>
 800a6a0:	f7f5 fdf4 	bl	800028c <__adddf3>
 800a6a4:	e9da 8900 	ldrd	r8, r9, [sl]
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	4640      	mov	r0, r8
 800a6ae:	4649      	mov	r1, r9
 800a6b0:	f7f6 fa14 	bl	8000adc <__aeabi_dcmplt>
 800a6b4:	b120      	cbz	r0, 800a6c0 <__ieee754_sqrt+0x198>
 800a6b6:	1cab      	adds	r3, r5, #2
 800a6b8:	bf08      	it	eq
 800a6ba:	3601      	addeq	r6, #1
 800a6bc:	3502      	adds	r5, #2
 800a6be:	e7e2      	b.n	800a686 <__ieee754_sqrt+0x15e>
 800a6c0:	1c6b      	adds	r3, r5, #1
 800a6c2:	f023 0501 	bic.w	r5, r3, #1
 800a6c6:	e7de      	b.n	800a686 <__ieee754_sqrt+0x15e>
 800a6c8:	7ff00000 	.word	0x7ff00000
 800a6cc:	0800aa58 	.word	0x0800aa58
 800a6d0:	0800aa50 	.word	0x0800aa50
 800a6d4:	00000000 	.word	0x00000000

0800a6d8 <__ieee754_atan2>:
 800a6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6dc:	ec57 6b11 	vmov	r6, r7, d1
 800a6e0:	4273      	negs	r3, r6
 800a6e2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800a860 <__ieee754_atan2+0x188>
 800a6e6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800a6ea:	4333      	orrs	r3, r6
 800a6ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a6f0:	4543      	cmp	r3, r8
 800a6f2:	ec51 0b10 	vmov	r0, r1, d0
 800a6f6:	4635      	mov	r5, r6
 800a6f8:	d809      	bhi.n	800a70e <__ieee754_atan2+0x36>
 800a6fa:	4244      	negs	r4, r0
 800a6fc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a700:	4304      	orrs	r4, r0
 800a702:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a706:	4544      	cmp	r4, r8
 800a708:	468e      	mov	lr, r1
 800a70a:	4681      	mov	r9, r0
 800a70c:	d907      	bls.n	800a71e <__ieee754_atan2+0x46>
 800a70e:	4632      	mov	r2, r6
 800a710:	463b      	mov	r3, r7
 800a712:	f7f5 fdbb 	bl	800028c <__adddf3>
 800a716:	ec41 0b10 	vmov	d0, r0, r1
 800a71a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a71e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800a722:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800a726:	4334      	orrs	r4, r6
 800a728:	d103      	bne.n	800a732 <__ieee754_atan2+0x5a>
 800a72a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a72e:	f7ff bd5b 	b.w	800a1e8 <atan>
 800a732:	17bc      	asrs	r4, r7, #30
 800a734:	f004 0402 	and.w	r4, r4, #2
 800a738:	ea53 0909 	orrs.w	r9, r3, r9
 800a73c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a740:	d107      	bne.n	800a752 <__ieee754_atan2+0x7a>
 800a742:	2c02      	cmp	r4, #2
 800a744:	d05f      	beq.n	800a806 <__ieee754_atan2+0x12e>
 800a746:	2c03      	cmp	r4, #3
 800a748:	d1e5      	bne.n	800a716 <__ieee754_atan2+0x3e>
 800a74a:	a143      	add	r1, pc, #268	@ (adr r1, 800a858 <__ieee754_atan2+0x180>)
 800a74c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a750:	e7e1      	b.n	800a716 <__ieee754_atan2+0x3e>
 800a752:	4315      	orrs	r5, r2
 800a754:	d106      	bne.n	800a764 <__ieee754_atan2+0x8c>
 800a756:	f1be 0f00 	cmp.w	lr, #0
 800a75a:	db5f      	blt.n	800a81c <__ieee754_atan2+0x144>
 800a75c:	a136      	add	r1, pc, #216	@ (adr r1, 800a838 <__ieee754_atan2+0x160>)
 800a75e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a762:	e7d8      	b.n	800a716 <__ieee754_atan2+0x3e>
 800a764:	4542      	cmp	r2, r8
 800a766:	d10f      	bne.n	800a788 <__ieee754_atan2+0xb0>
 800a768:	4293      	cmp	r3, r2
 800a76a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a76e:	d107      	bne.n	800a780 <__ieee754_atan2+0xa8>
 800a770:	2c02      	cmp	r4, #2
 800a772:	d84c      	bhi.n	800a80e <__ieee754_atan2+0x136>
 800a774:	4b36      	ldr	r3, [pc, #216]	@ (800a850 <__ieee754_atan2+0x178>)
 800a776:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a77a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a77e:	e7ca      	b.n	800a716 <__ieee754_atan2+0x3e>
 800a780:	2c02      	cmp	r4, #2
 800a782:	d848      	bhi.n	800a816 <__ieee754_atan2+0x13e>
 800a784:	4b33      	ldr	r3, [pc, #204]	@ (800a854 <__ieee754_atan2+0x17c>)
 800a786:	e7f6      	b.n	800a776 <__ieee754_atan2+0x9e>
 800a788:	4543      	cmp	r3, r8
 800a78a:	d0e4      	beq.n	800a756 <__ieee754_atan2+0x7e>
 800a78c:	1a9b      	subs	r3, r3, r2
 800a78e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800a792:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a796:	da1e      	bge.n	800a7d6 <__ieee754_atan2+0xfe>
 800a798:	2f00      	cmp	r7, #0
 800a79a:	da01      	bge.n	800a7a0 <__ieee754_atan2+0xc8>
 800a79c:	323c      	adds	r2, #60	@ 0x3c
 800a79e:	db1e      	blt.n	800a7de <__ieee754_atan2+0x106>
 800a7a0:	4632      	mov	r2, r6
 800a7a2:	463b      	mov	r3, r7
 800a7a4:	f7f6 f852 	bl	800084c <__aeabi_ddiv>
 800a7a8:	ec41 0b10 	vmov	d0, r0, r1
 800a7ac:	f7ff feb4 	bl	800a518 <fabs>
 800a7b0:	f7ff fd1a 	bl	800a1e8 <atan>
 800a7b4:	ec51 0b10 	vmov	r0, r1, d0
 800a7b8:	2c01      	cmp	r4, #1
 800a7ba:	d013      	beq.n	800a7e4 <__ieee754_atan2+0x10c>
 800a7bc:	2c02      	cmp	r4, #2
 800a7be:	d015      	beq.n	800a7ec <__ieee754_atan2+0x114>
 800a7c0:	2c00      	cmp	r4, #0
 800a7c2:	d0a8      	beq.n	800a716 <__ieee754_atan2+0x3e>
 800a7c4:	a318      	add	r3, pc, #96	@ (adr r3, 800a828 <__ieee754_atan2+0x150>)
 800a7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ca:	f7f5 fd5d 	bl	8000288 <__aeabi_dsub>
 800a7ce:	a318      	add	r3, pc, #96	@ (adr r3, 800a830 <__ieee754_atan2+0x158>)
 800a7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d4:	e014      	b.n	800a800 <__ieee754_atan2+0x128>
 800a7d6:	a118      	add	r1, pc, #96	@ (adr r1, 800a838 <__ieee754_atan2+0x160>)
 800a7d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7dc:	e7ec      	b.n	800a7b8 <__ieee754_atan2+0xe0>
 800a7de:	2000      	movs	r0, #0
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	e7e9      	b.n	800a7b8 <__ieee754_atan2+0xe0>
 800a7e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	e794      	b.n	800a716 <__ieee754_atan2+0x3e>
 800a7ec:	a30e      	add	r3, pc, #56	@ (adr r3, 800a828 <__ieee754_atan2+0x150>)
 800a7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f2:	f7f5 fd49 	bl	8000288 <__aeabi_dsub>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	a10d      	add	r1, pc, #52	@ (adr r1, 800a830 <__ieee754_atan2+0x158>)
 800a7fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a800:	f7f5 fd42 	bl	8000288 <__aeabi_dsub>
 800a804:	e787      	b.n	800a716 <__ieee754_atan2+0x3e>
 800a806:	a10a      	add	r1, pc, #40	@ (adr r1, 800a830 <__ieee754_atan2+0x158>)
 800a808:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a80c:	e783      	b.n	800a716 <__ieee754_atan2+0x3e>
 800a80e:	a10c      	add	r1, pc, #48	@ (adr r1, 800a840 <__ieee754_atan2+0x168>)
 800a810:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a814:	e77f      	b.n	800a716 <__ieee754_atan2+0x3e>
 800a816:	2000      	movs	r0, #0
 800a818:	2100      	movs	r1, #0
 800a81a:	e77c      	b.n	800a716 <__ieee754_atan2+0x3e>
 800a81c:	a10a      	add	r1, pc, #40	@ (adr r1, 800a848 <__ieee754_atan2+0x170>)
 800a81e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a822:	e778      	b.n	800a716 <__ieee754_atan2+0x3e>
 800a824:	f3af 8000 	nop.w
 800a828:	33145c07 	.word	0x33145c07
 800a82c:	3ca1a626 	.word	0x3ca1a626
 800a830:	54442d18 	.word	0x54442d18
 800a834:	400921fb 	.word	0x400921fb
 800a838:	54442d18 	.word	0x54442d18
 800a83c:	3ff921fb 	.word	0x3ff921fb
 800a840:	54442d18 	.word	0x54442d18
 800a844:	3fe921fb 	.word	0x3fe921fb
 800a848:	54442d18 	.word	0x54442d18
 800a84c:	bff921fb 	.word	0xbff921fb
 800a850:	0800aa78 	.word	0x0800aa78
 800a854:	0800aa60 	.word	0x0800aa60
 800a858:	54442d18 	.word	0x54442d18
 800a85c:	c00921fb 	.word	0xc00921fb
 800a860:	7ff00000 	.word	0x7ff00000

0800a864 <_init>:
 800a864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a866:	bf00      	nop
 800a868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a86a:	bc08      	pop	{r3}
 800a86c:	469e      	mov	lr, r3
 800a86e:	4770      	bx	lr

0800a870 <_fini>:
 800a870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a872:	bf00      	nop
 800a874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a876:	bc08      	pop	{r3}
 800a878:	469e      	mov	lr, r3
 800a87a:	4770      	bx	lr
